<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\stb_image.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<enum>enum

<block>{

<decl><name>STBI_default</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>STBI_grey</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>STBI_grey_alpha</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>STBI_rgb</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>STBI_rgb_alpha</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>

}</block>;</enum>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>stbi_uc</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>stbi_us</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIDEF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_IMAGE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIDEF</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIDEF</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct

<block>{

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>,<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>skip</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>eof</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl> 

}</block></struct></type> <name>stbi_io_callbacks</name>;</typedef>

<function_decl><type><name>STBIDEF</name> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi_load_from_memory</name> <parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi_load_from_callbacks</name><parameter_list>(<parameter><decl><type><name>stbi_io_callbacks</name> <specifier>const</specifier> <modifier>*</modifier></type><name>clbk</name></decl></parameter> , <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBIDEF</name> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi_load</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi_load_from_file</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_GIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBIDEF</name> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi_load_gif_from_memory</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>delays</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_WINDOWS_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_convert_wchar_to_utf8</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufferlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>STBIDEF</name> <name>stbi_us</name> <modifier>*</modifier></type><name>stbi_load_16_from_memory</name> <parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>stbi_us</name> <modifier>*</modifier></type><name>stbi_load_16_from_callbacks</name><parameter_list>(<parameter><decl><type><name>stbi_io_callbacks</name> <specifier>const</specifier> <modifier>*</modifier></type><name>clbk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBIDEF</name> <name>stbi_us</name> <modifier>*</modifier></type><name>stbi_load_16</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>stbi_us</name> <modifier>*</modifier></type><name>stbi_load_from_file_16</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_LINEAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBIDEF</name> <name>float</name> <modifier>*</modifier></type><name>stbi_loadf_from_memory</name> <parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>float</name> <modifier>*</modifier></type><name>stbi_loadf_from_callbacks</name> <parameter_list>(<parameter><decl><type><name>stbi_io_callbacks</name> <specifier>const</specifier> <modifier>*</modifier></type><name>clbk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBIDEF</name> <name>float</name> <modifier>*</modifier></type><name>stbi_loadf</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>float</name> <modifier>*</modifier></type><name>stbi_loadf_from_file</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_hdr_to_ldr_gamma</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>gamma</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_hdr_to_ldr_scale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_LINEAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_ldr_to_hdr_gamma</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>gamma</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_ldr_to_hdr_scale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_hdr_from_callbacks</name><parameter_list>(<parameter><decl><type><name>stbi_io_callbacks</name> <specifier>const</specifier> <modifier>*</modifier></type><name>clbk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_hdr_from_memory</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_hdr</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_hdr_from_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><name>STBIDEF</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbi_failure_reason</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_image_free</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>retval_from_stbi_load</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_info_from_memory</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_info_from_callbacks</name><parameter_list>(<parameter><decl><type><name>stbi_io_callbacks</name> <specifier>const</specifier> <modifier>*</modifier></type><name>clbk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_16_bit_from_memory</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_16_bit_from_callbacks</name><parameter_list>(<parameter><decl><type><name>stbi_io_callbacks</name> <specifier>const</specifier> <modifier>*</modifier></type><name>clbk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_info</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_info_from_file</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_16_bit</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_16_bit_from_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_set_unpremultiply_on_load</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag_true_if_should_unpremultiply</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_convert_iphone_png_to_rgb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag_true_if_should_convert</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_set_flip_vertically_on_load</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag_true_if_should_flip</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_set_flip_vertically_on_load_thread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag_true_if_should_flip</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>char</name> <modifier>*</modifier></type><name>stbi_zlib_decode_malloc_guesssize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initial_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>char</name> <modifier>*</modifier></type><name>stbi_zlib_decode_malloc_guesssize_headerflag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initial_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parse_header</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>char</name> <modifier>*</modifier></type><name>stbi_zlib_decode_malloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_zlib_decode_buffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>obuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>olen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ibuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ilen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>char</name> <modifier>*</modifier></type><name>stbi_zlib_decode_noheader_malloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_zlib_decode_noheader_buffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>obuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>olen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ibuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ilen</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_IMAGE_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_JPEG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_PNG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_BMP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_TGA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_GIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_PSD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_HDR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_PIC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_PNM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_ZLIB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_JPEG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_JPEG</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_PNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_PNG</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_BMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_BMP</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_PSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_PSD</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_TGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_TGA</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_GIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_GIF</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_HDR</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_PIC</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_ONLY_PNM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_PNM</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_SUPPORT_ZLIB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_ZLIB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_ZLIB</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_LINEAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_ASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_ASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_EXTERN</name></cpp:macro> <cpp:value>extern "C"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_EXTERN</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi_inline</name></cpp:macro> <cpp:value>inline</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi_inline</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi_inline</name></cpp:macro> <cpp:value>__forceinline</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_THREAD_LOCALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_THREAD_LOCAL</name></cpp:macro> <cpp:value>thread_local</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_THREAD_LOCAL</name></cpp:macro> <cpp:value>_Thread_local</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_THREAD_LOCAL</name></cpp:macro> <cpp:value>__thread</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_THREAD_LOCAL</name></cpp:macro> <cpp:value>__declspec(thread)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>stbi__uint16</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>short</name></type> <name>stbi__int16</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>stbi__uint32</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>int</name></type> <name>stbi__int32</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>uint16_t</name></type> <name>stbi__uint16</name>;</typedef>

<typedef>typedef <type><name>int16_t</name></type> <name>stbi__int16</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>stbi__uint32</name>;</typedef>

<typedef>typedef <type><name>int32_t</name></type> <name>stbi__int32</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name><name>validate_uint32</name><index>[<expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stbi__uint32</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>]</index></name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NOTUSED</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(v)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NOTUSED</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)sizeof(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_HAS_LROTL</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_HAS_LROTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi_lrot</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_lrotl(x,y)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi_lrot</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt;&lt; (y)) | ((x) &gt;&gt; (32 - (y))))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_MALLOC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_FREE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_REALLOC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_REALLOC_SIZED</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_MALLOC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_FREE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_REALLOC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_REALLOC_SIZED</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Must define all or none of STBI_MALLOC, STBI_FREE, and STBI_REALLOC (or STBI_REALLOC_SIZED)."</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_MALLOC</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(sz)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_REALLOC</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>newsz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>realloc(p,newsz)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_FREE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(p)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_REALLOC_SIZED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_REALLOC_SIZED</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>oldsz</name></type></parameter>,<parameter><type><name>newsz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STBI_REALLOC(p,newsz)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__X64_TARGET</name></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__X86_TARGET</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI__X86_TARGET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SSE2__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_SIMD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_SIMD</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI__X86_TARGET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_MINGW_ENABLE_SSE2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_SIMD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_SIMD</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_SIMD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI__X86_TARGET</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI__X64_TARGET</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_SSE2</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emmintrin.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__cpuid3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>info</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__cpuid</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>info</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__cpuid3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<asm>__asm {

<asm>mov eax,1</asm>

<asm>cpuid</asm>

<asm>mov res,edx</asm>

}</asm>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_SIMD_ALIGN</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(align(16)) type name</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_JPEG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__sse2_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>info3</name> <init>= <expr><call><name>stbi__cpuid3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>info3</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_SIMD_ALIGN</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name __attribute__((aligned(16)))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_JPEG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__sse2_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_SIMD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STBI_NEON</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arm_neon.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_SIMD_ALIGN</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name __attribute__((aligned(16)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_SIMD_ALIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_SIMD_ALIGN</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>img_x</name></decl>, <name>img_y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>img_n</name></decl>, <name>img_out_n</name>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_io_callbacks</name></type> <name>io</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>io_user_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_from_callbacks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>buffer_start</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>img_buffer</name></decl>, <modifier>*</modifier><name>img_buffer_end</name>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>img_buffer_original</name></decl>, <modifier>*</modifier><name>img_buffer_original_end</name>;</decl_stmt>

}</block></struct></type> <name>stbi__context</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>stbi__refill_buffer</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__start_mem</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>read_from_callbacks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_buffer_original</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_buffer_original_end</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>buffer</name><operator>+</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__start_callbacks</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>stbi_io_callbacks</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>io</name></name> <operator>=</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>io_user_data</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>read_from_callbacks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer_original</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__refill_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer_original_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_buffer_end</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__stdio_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>fread</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator> <name>user</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__stdio_skip</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator> <name>user</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__stdio_eof</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>feof</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator> <name>user</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>stbi_io_callbacks</name></type> <name>stbi__stdio_callbacks</name> <init>=

<expr><block>{

<expr><name>stbi__stdio_read</name></expr>,

<expr><name>stbi__stdio_skip</name></expr>,

<expr><name>stbi__stdio_eof</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__start_file</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>stbi__start_callbacks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbi__stdio_callbacks</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__rewind</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_buffer_original</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_buffer_original_end</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<enum>enum

<block>{

<decl><name>STBI_ORDER_RGB</name></decl>,

<decl><name>STBI_ORDER_BGR</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>bits_per_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channel_order</name></decl>;</decl_stmt>

}</block></struct></type> <name>stbi__result_info</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_JPEG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__jpeg_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__jpeg_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__jpeg_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__png_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__png_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__png_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__png_is16</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_BMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__bmp_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__bmp_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__bmp_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_TGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__tga_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__tga_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__tga_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__psd_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__psd_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__psd_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__psd_is16</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__hdr_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>float</name> <modifier>*</modifier></type><name>stbi__hdr_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__hdr_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__pic_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__pic_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__pic_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_GIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__gif_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__gif_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__load_gif_main</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>delays</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__gif_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__pnm_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__pnm_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__pnm_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_THREAD_LOCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>STBI_THREAD_LOCAL</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbi__g_failure_reason</name></decl>;</decl_stmt>

<function><type><name>STBIDEF</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbi_failure_reason</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>stbi__g_failure_reason</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_FAILURE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__err</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>stbi__g_failure_reason</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>STBI_MALLOC</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__addsizes_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>a</name> <operator>&lt;=</operator> <name>INT_MAX</name> <operator>-</operator> <name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__mul2sizes_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><name>a</name> <operator>&lt;=</operator> <name>INT_MAX</name><operator>/</operator><name>b</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_JPEG</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_TGA</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__mad2sizes_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbi__mul2sizes_valid</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>stbi__addsizes_valid</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>b</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__mad3sizes_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbi__mul2sizes_valid</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>stbi__mul2sizes_valid</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>stbi__addsizes_valid</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>b</name><operator>*</operator><name>c</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_LINEAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__mad4sizes_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbi__mul2sizes_valid</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>stbi__mul2sizes_valid</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>stbi__mul2sizes_valid</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>b</name><operator>*</operator><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>stbi__addsizes_valid</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>b</name><operator>*</operator><name>c</name><operator>*</operator><name>d</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_JPEG</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_TGA</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__malloc_mad2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__mad2sizes_valid</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>stbi__malloc</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>b</name> <operator>+</operator> <name>add</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__malloc_mad3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__mad3sizes_valid</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>stbi__malloc</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>b</name><operator>*</operator><name>c</name> <operator>+</operator> <name>add</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_LINEAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__malloc_mad4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__mad4sizes_valid</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>stbi__malloc</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>b</name><operator>*</operator><name>c</name><operator>*</operator><name>d</name> <operator>+</operator> <name>add</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_FAILURE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__err</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_FAILURE_USERMSG</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__err</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbi__err(y)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__err</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbi__err(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__errpf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float *)(size_t) (stbi__err(x,y)?NULL:NULL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__errpuc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char *)(size_t) (stbi__err(x,y)?NULL:NULL))</cpp:value></cpp:define>

<function><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_image_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>retval_from_stbi_load</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>retval_from_stbi_load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_LINEAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>float</name> <modifier>*</modifier></type><name>stbi__ldr_to_hdr</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi__hdr_to_ldr</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__vertically_flip_on_load_global</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_set_flip_vertically_on_load</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag_true_if_should_flip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>stbi__vertically_flip_on_load_global</name> <operator>=</operator> <name>flag_true_if_should_flip</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_THREAD_LOCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__vertically_flip_on_load</name></cpp:macro> <cpp:value>stbi__vertically_flip_on_load_global</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>STBI_THREAD_LOCAL</name> <name>int</name></type> <name>stbi__vertically_flip_on_load_local</name></decl>, <decl><type ref="prev"/><name>stbi__vertically_flip_on_load_set</name></decl>;</decl_stmt>

<function><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_set_flip_vertically_on_load_thread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag_true_if_should_flip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>stbi__vertically_flip_on_load_local</name> <operator>=</operator> <name>flag_true_if_should_flip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stbi__vertically_flip_on_load_set</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__vertically_flip_on_load</name></cpp:macro> <cpp:value>(stbi__vertically_flip_on_load_set ? stbi__vertically_flip_on_load_local : stbi__vertically_flip_on_load_global)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__load_main</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>bits_per_channel</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>channel_order</name></name> <operator>=</operator> <name>STBI_ORDER_RGB</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_JPEG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__jpeg_test</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__jpeg_load</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__png_test</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__png_load</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_BMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__bmp_test</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__bmp_load</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_GIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__gif_test</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__gif_load</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__psd_test</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__psd_load</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><name>bpc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>bpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__pic_test</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__pic_load</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__pnm_test</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__pnm_load</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__hdr_test</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><call><name>stbi__hdr_load</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>stbi__hdr_to_ldr</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><name>req_comp</name></expr> ?</condition><then> <expr><name>req_comp</name></expr> </then><else>: <expr><operator>*</operator><name>comp</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_TGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__tga_test</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__tga_load</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"unknown image type"</literal></expr></argument>, <argument><expr><literal type="string">"Image not of any known type, or corrupt"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi__convert_16_to_8</name><parameter_list>(<parameter><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>img_len</name> <init>= <expr><name>w</name> <operator>*</operator> <name>h</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>reduced</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reduced</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>(<argument><expr><name>img_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reduced</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>img_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>reduced</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>orig</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>reduced</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbi__uint16</name> <modifier>*</modifier></type><name>stbi__convert_8_to_16</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>img_len</name> <init>= <expr><name>w</name> <operator>*</operator> <name>h</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>enlarged</name></decl>;</decl_stmt>

<expr_stmt><expr><name>enlarged</name> <operator>=</operator> <operator>(</operator><name>stbi__uint16</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>(<argument><expr><name>img_len</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enlarged</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>stbi__uint16</name> <operator>*</operator><operator>)</operator> <call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>img_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>enlarged</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi__uint16</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>orig</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>orig</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>enlarged</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__vertical_flip</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes_per_pixel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_per_row</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>w</name> <operator>*</operator> <name>bytes_per_pixel</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>temp</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator><name>image</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <operator>(</operator><name>h</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>row0</name> <init>= <expr><name>bytes</name> <operator>+</operator> <name>row</name><operator>*</operator><name>bytes_per_row</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>row1</name> <init>= <expr><name>bytes</name> <operator>+</operator> <operator>(</operator><name>h</name> <operator>-</operator> <name>row</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>bytes_per_row</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_left</name> <init>= <expr><name>bytes_per_row</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>bytes_left</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_copy</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>bytes_left</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ?</condition><then> <expr><name>bytes_left</name></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>row0</name></expr></argument>, <argument><expr><name>bytes_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>bytes_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>row1</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>bytes_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row0</name> <operator>+=</operator> <name>bytes_copy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>row1</name> <operator>+=</operator> <name>bytes_copy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_left</name> <operator>-=</operator> <name>bytes_copy</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_GIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__vertical_flip_slices</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes_per_pixel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_size</name> <init>= <expr><name>w</name> <operator>*</operator> <name>h</name> <operator>*</operator> <name>bytes_per_pixel</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator><name>image</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>slice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name>z</name></expr>;</condition> <incr><expr><operator>++</operator><name>slice</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__vertical_flip</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>bytes_per_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name>slice_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stbi__load_and_postprocess_8bit</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__result_info</name></type> <name>ri</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>stbi__load_main</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>.</operator><name>bits_per_channel</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name><name>ri</name><operator>.</operator><name>bits_per_channel</name></name> <operator>==</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbi__convert_16_to_8</name><argument_list>(<argument><expr><operator>(</operator><name>stbi__uint16</name> <operator>*</operator><operator>)</operator> <name>result</name></expr></argument>, <argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><name>req_comp</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>*</operator><name>comp</name></expr> </then><else>: <expr><name>req_comp</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ri</name><operator>.</operator><name>bits_per_channel</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stbi__vertically_flip_on_load</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><ternary><condition><expr><name>req_comp</name></expr> ?</condition><then> <expr><name>req_comp</name></expr> </then><else>: <expr><operator>*</operator><name>comp</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__vertical_flip</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>, <argument><expr><name>channels</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>stbi_uc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbi__uint16</name> <modifier>*</modifier></type><name>stbi__load_and_postprocess_16bit</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__result_info</name></type> <name>ri</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>stbi__load_main</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>.</operator><name>bits_per_channel</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name><name>ri</name><operator>.</operator><name>bits_per_channel</name></name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbi__convert_8_to_16</name><argument_list>(<argument><expr><operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>result</name></expr></argument>, <argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><name>req_comp</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>*</operator><name>comp</name></expr> </then><else>: <expr><name>req_comp</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ri</name><operator>.</operator><name>bits_per_channel</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stbi__vertically_flip_on_load</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><ternary><condition><expr><name>req_comp</name></expr> ?</condition><then> <expr><name>req_comp</name></expr> </then><else>: <expr><operator>*</operator><name>comp</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__vertical_flip</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>, <argument><expr><name>channels</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>stbi__uint16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>stbi__uint16</name> <operator>*</operator><operator>)</operator> <name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_LINEAR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__float_postprocess</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stbi__vertically_flip_on_load</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><ternary><condition><expr><name>req_comp</name></expr> ?</condition><then> <expr><name>req_comp</name></expr> </then><else>: <expr><operator>*</operator><name>comp</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__vertical_flip</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>, <argument><expr><name>channels</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_WINDOWS_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>STBI_EXTERN</name></type> <name>__declspec</name><argument_list>(<argument><expr><name>dllimport</name></expr></argument>)</argument_list> <name>int</name> <name>__stdcall</name> <name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>unsigned</name> <name>int</name> <name>cp</name></expr></argument>, <argument><expr><name>unsigned</name> <name>long</name> <name>flags</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>int</name> <name>cbmb</name></expr></argument>, <argument><expr><name>wchar_t</name> <operator>*</operator><name>widestr</name></expr></argument>, <argument><expr><name>int</name> <name>cchwide</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STBI_EXTERN</name></type> <name>__declspec</name><argument_list>(<argument><expr><name>dllimport</name></expr></argument>)</argument_list> <name>int</name> <name>__stdcall</name> <name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>unsigned</name> <name>int</name> <name>cp</name></expr></argument>, <argument><expr><name>unsigned</name> <name>long</name> <name>flags</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><name>widestr</name></expr></argument>, <argument><expr><name>int</name> <name>cchwide</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>int</name> <name>cbmb</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>defchar</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>used_default</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_WINDOWS_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_convert_wchar_to_utf8</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufferlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><literal type="number">65001</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>bufferlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>stbi__fopen</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_WINDOWS_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wMode</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wFilename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><literal type="number">65001</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wFilename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wFilename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><literal type="number">65001</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wMode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wMode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>_wfopen_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>wFilename</name></expr></argument>, <argument><expr><name>wMode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>_wfopen</name><argument_list>(<argument><expr><name>wFilename</name></expr></argument>, <argument><expr><name>wMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>fopen_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>f</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi_load</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>stbi__fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"can't fopen"</literal></expr></argument>, <argument><expr><literal type="string">"Unable to open file"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbi_load_from_file</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi_load_from_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbi__load_and_postprocess_8bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>s</name><operator>.</operator><name>img_buffer_end</name></name> <operator>-</operator> <name><name>s</name><operator>.</operator><name>img_buffer</name></name><operator>)</operator></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>stbi__uint16</name> <modifier>*</modifier></type><name>stbi_load_from_file_16</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbi__load_and_postprocess_16bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>s</name><operator>.</operator><name>img_buffer_end</name></name> <operator>-</operator> <name><name>s</name><operator>.</operator><name>img_buffer</name></name><operator>)</operator></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>stbi_us</name> <modifier>*</modifier></type><name>stbi_load_16</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>stbi__fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>stbi_us</name> <operator>*</operator><operator>)</operator> <call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"can't fopen"</literal></expr></argument>, <argument><expr><literal type="string">"Unable to open file"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbi_load_from_file_16</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>STBIDEF</name> <name>stbi_us</name> <modifier>*</modifier></type><name>stbi_load_16_from_memory</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_mem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>buffer</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__load_and_postprocess_16bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>channels_in_file</name></expr></argument>,<argument><expr><name>desired_channels</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>stbi_us</name> <modifier>*</modifier></type><name>stbi_load_16_from_callbacks</name><parameter_list>(<parameter><decl><type><name>stbi_io_callbacks</name> <specifier>const</specifier> <modifier>*</modifier></type><name>clbk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels_in_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desired_channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_callbacks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>stbi_io_callbacks</name> <operator>*</operator><operator>)</operator><name>clbk</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__load_and_postprocess_16bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>channels_in_file</name></expr></argument>,<argument><expr><name>desired_channels</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi_load_from_memory</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_mem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>buffer</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__load_and_postprocess_8bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi_load_from_callbacks</name><parameter_list>(<parameter><decl><type><name>stbi_io_callbacks</name> <specifier>const</specifier> <modifier>*</modifier></type><name>clbk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_callbacks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>stbi_io_callbacks</name> <operator>*</operator><operator>)</operator> <name>clbk</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__load_and_postprocess_8bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_GIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>STBIDEF</name> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi_load_gif_from_memory</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>delays</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_mem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>buffer</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <call><name>stbi__load_gif_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>delays</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stbi__vertically_flip_on_load</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__vertical_flip_slices</name><argument_list>( <argument><expr><name>result</name></expr></argument>, <argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>, <argument><expr><operator>*</operator><name>z</name></expr></argument>, <argument><expr><operator>*</operator><name>comp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_LINEAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>float</name> <modifier>*</modifier></type><name>stbi__loadf_main</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__hdr_test</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbi__result_info</name></type> <name>ri</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>hdr_data</name> <init>= <expr><call><name>stbi__hdr_load</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hdr_data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__float_postprocess</name><argument_list>(<argument><expr><name>hdr_data</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hdr_data</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>stbi__load_and_postprocess_8bit</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__ldr_to_hdr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><name>req_comp</name></expr> ?</condition><then> <expr><name>req_comp</name></expr> </then><else>: <expr><operator>*</operator><name>comp</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>stbi__errpf</name><argument_list>(<argument><expr><literal type="string">"unknown image type"</literal></expr></argument>, <argument><expr><literal type="string">"Image not of any known type, or corrupt"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>float</name> <modifier>*</modifier></type><name>stbi_loadf_from_memory</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_mem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>buffer</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__loadf_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>float</name> <modifier>*</modifier></type><name>stbi_loadf_from_callbacks</name><parameter_list>(<parameter><decl><type><name>stbi_io_callbacks</name> <specifier>const</specifier> <modifier>*</modifier></type><name>clbk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_callbacks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>stbi_io_callbacks</name> <operator>*</operator><operator>)</operator> <name>clbk</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__loadf_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>STBIDEF</name> <name>float</name> <modifier>*</modifier></type><name>stbi_loadf</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>stbi__fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpf</name><argument_list>(<argument><expr><literal type="string">"can't fopen"</literal></expr></argument>, <argument><expr><literal type="string">"Unable to open file"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbi_loadf_from_file</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>float</name> <modifier>*</modifier></type><name>stbi_loadf_from_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__loadf_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_hdr_from_memory</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_mem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>buffer</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__hdr_test</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_hdr</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>stbi__fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbi_is_hdr_from_file</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_hdr_from_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>long</name></type> <name>pos</name> <init>= <expr><call><name>ftell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>stbi__hdr_test</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_hdr_from_callbacks</name><parameter_list>(<parameter><decl><type><name>stbi_io_callbacks</name> <specifier>const</specifier> <modifier>*</modifier></type><name>clbk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_callbacks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>stbi_io_callbacks</name> <operator>*</operator><operator>)</operator> <name>clbk</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__hdr_test</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>clbk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_LINEAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>stbi__l2h_gamma</name><init>=<expr><literal type="number">2.2f</literal></expr></init></decl>, <decl><type ref="prev"/><name>stbi__l2h_scale</name><init>=<expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<function><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_ldr_to_hdr_gamma</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>gamma</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>stbi__l2h_gamma</name> <operator>=</operator> <name>gamma</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_ldr_to_hdr_scale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>stbi__l2h_scale</name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>stbi__h2l_gamma_i</name><init>=<expr><literal type="number">1.0f</literal><operator>/</operator><literal type="number">2.2f</literal></expr></init></decl>, <decl><type ref="prev"/><name>stbi__h2l_scale_i</name><init>=<expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<function><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_hdr_to_ldr_gamma</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>gamma</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>stbi__h2l_gamma_i</name> <operator>=</operator> <literal type="number">1</literal><operator>/</operator><name>gamma</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_hdr_to_ldr_scale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>stbi__h2l_scale_i</name> <operator>=</operator> <literal type="number">1</literal><operator>/</operator><name>scale</name></expr>;</expr_stmt> </block_content>}</block></function>

<enum>enum

<block>{

<decl><name>STBI__SCAN_load</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>STBI__SCAN_type</name></decl>,

<decl><name>STBI__SCAN_header</name></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__refill_buffer</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>read</name></name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>io_user_data</name></name>,<operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>buffer_start</name></name>,<name><name>s</name><operator>-&gt;</operator><name>buflen</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>read_from_callbacks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_start</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_start</name></name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>stbi_inline</name> <specifier>static</specifier> <name>stbi_uc</name></type> <name>stbi__get8</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>img_buffer_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name><operator>++</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>read_from_callbacks</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__refill_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name><operator>++</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_JPEG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PIC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>stbi_inline</name> <specifier>static</specifier> <name>int</name></type> <name>stbi__at_eof</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>read</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>eof</name></name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>io_user_data</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>read_from_callbacks</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_buffer_end</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_JPEG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_BMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PSD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_TGA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_GIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__skip</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_buffer_end</name></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>read</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>blen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>img_buffer_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blen</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_buffer_end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>skip</name></name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>io_user_data</name></name><operator>,</operator> <name>n</name> <operator>-</operator> <name>blen</name><operator>)</operator></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_TGA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__getn</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>read</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>blen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>img_buffer_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blen</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>read</name></name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>io_user_data</name></name><operator>,</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buffer</name> <operator>+</operator> <name>blen</name><operator>,</operator> <name>n</name> <operator>-</operator> <name>blen</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>count</name> <operator>==</operator> <operator>(</operator><name>n</name><operator>-</operator><name>blen</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_buffer_end</name></name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name><operator>+</operator><name>n</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_buffer_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_JPEG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PSD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__get16be</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>z</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PSD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>stbi__uint32</name></type> <name>stbi__get32be</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>z</name> <init>= <expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>z</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_BMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_TGA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_GIF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__get16le</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>z</name> <operator>+</operator> <operator>(</operator><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_BMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>stbi__uint32</name></type> <name>stbi__get32le</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>z</name> <init>= <expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>z</name> <operator>+</operator> <operator>(</operator><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__BYTECAST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((stbi_uc) ((x) &amp; 255))</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_JPEG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_BMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PSD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_TGA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_GIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PIC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>stbi_uc</name></type> <name>stbi__compute_y</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>stbi_uc</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>r</name><operator>*</operator><literal type="number">77</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name><operator>*</operator><literal type="number">150</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">29</literal><operator>*</operator><name>b</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_BMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PSD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_TGA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_GIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PIC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stbi__convert_format</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>img_n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>good</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>==</operator> <name>img_n</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>req_comp</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>req_comp</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>good</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc_mad3</name><argument_list>(<argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>good</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>y</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>data</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>img_n</name></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>good</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>req_comp</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__COMBO</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)*8+(b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__CASE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case STBI__COMBO(a,b): for(i=x-1; i &gt;= 0; --i, src += a, dest += b)</cpp:value></cpp:define>

<switch>switch <condition>(<expr><call><name>STBI__COMBO</name><argument_list>(<argument><expr><name>img_n</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">1</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">255</literal></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">1</literal></argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><literal type="number">255</literal></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">2</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">2</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">2</literal></argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">3</literal></argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><literal type="number">255</literal></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">3</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>stbi__compute_y</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">3</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>stbi__compute_y</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">4</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>stbi__compute_y</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">4</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>stbi__compute_y</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">4</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STBI__CASE</name></cpp:undef>

</block_content>}</block></for>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>good</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PSD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>stbi__uint16</name></type> <name>stbi__compute_y_16</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>stbi__uint16</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>r</name><operator>*</operator><literal type="number">77</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name><operator>*</operator><literal type="number">150</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">29</literal><operator>*</operator><name>b</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PSD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>stbi__uint16</name> <modifier>*</modifier></type><name>stbi__convert_format16</name><parameter_list>(<parameter><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>img_n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>good</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>==</operator> <name>img_n</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>req_comp</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>req_comp</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>good</name> <operator>=</operator> <operator>(</operator><name>stbi__uint16</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>(<argument><expr><name>req_comp</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>y</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>good</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>stbi__uint16</name> <operator>*</operator><operator>)</operator> <call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>y</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>data</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>img_n</name></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>good</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>req_comp</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__COMBO</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)*8+(b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__CASE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case STBI__COMBO(a,b): for(i=x-1; i &gt;= 0; --i, src += a, dest += b)</cpp:value></cpp:define>

<switch>switch <condition>(<expr><call><name>STBI__COMBO</name><argument_list>(<argument><expr><name>img_n</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">1</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0xffff</literal></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">1</literal></argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><literal type="number">0xffff</literal></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">2</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">2</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">2</literal></argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">3</literal></argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><literal type="number">0xffff</literal></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">3</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>stbi__compute_y_16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">3</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>stbi__compute_y_16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">4</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>stbi__compute_y_16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">4</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>stbi__compute_y_16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument><literal type="number">4</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STBI__CASE</name></cpp:undef>

</block_content>}</block></for>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>good</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_LINEAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>float</name> <modifier>*</modifier></type><name>stbi__ldr_to_hdr</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc_mad4</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>stbi__errpf</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>comp</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name><operator>*</operator><name>y</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name><operator>*</operator><name>comp</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><call><name>pow</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name><operator>*</operator><name>comp</name><operator>+</operator><name>k</name></expr>]</index></name><operator>/</operator><literal type="number">255.0f</literal></expr></argument>, <argument><expr><name>stbi__l2h_gamma</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>stbi__l2h_scale</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>comp</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name><operator>*</operator><name>y</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name><operator>*</operator><name>comp</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name><operator>*</operator><name>comp</name> <operator>+</operator> <name>n</name></expr>]</index></name><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__float2int</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) (x))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi__hdr_to_ldr</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc_mad3</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>comp</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name><operator>*</operator><name>y</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name><operator>*</operator><name>comp</name><operator>+</operator><name>k</name></expr>]</index></name><operator>*</operator><name>stbi__h2l_scale_i</name></expr></argument>, <argument><expr><name>stbi__h2l_gamma_i</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name><operator>*</operator><name>comp</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <call><name>stbi__float2int</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>comp</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><name><name>data</name><index>[<expr><name>i</name><operator>*</operator><name>comp</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name><operator>*</operator><name>comp</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <call><name>stbi__float2int</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_JPEG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>fast</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FAST_BITS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name></type> <name><name>code</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>values</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>size</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>maxcode</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>delta</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>stbi__huffman</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__huffman</name></type> <name><name>huff_dc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__huffman</name></type> <name><name>huff_ac</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name></type> <name><name>dequant</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__int16</name></type> <name><name>fast_ac</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FAST_BITS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>img_h_max</name></decl>, <name>img_v_max</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>img_mcu_x</name></decl>, <name>img_mcu_y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>img_mcu_w</name></decl>, <name>img_mcu_h</name>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<name>v</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hd</name></decl>,<name>ha</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc_pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<name>y</name>,<name>w2</name>,<name>h2</name>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>raw_data</name></decl>, <modifier>*</modifier><name>raw_coeff</name>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>linebuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>coeff</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>coeff_w</name></decl>, <name>coeff_h</name>;</decl_stmt> 

}</block> <decl><name><name>img_comp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>code_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>code_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>marker</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nomore</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>progressive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>spec_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>spec_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>succ_high</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>succ_low</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eob_run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>jfif</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>app14_color_transform</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>rgb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scan_n</name></decl>, <name><name>order</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>restart_interval</name></decl>, <name>todo</name>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>idct_block_kernel</name>)<parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>YCbCr_to_RGB_kernel</name>)<parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>pcb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>pcr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>stbi_uc</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>resample_row_hv_2_kernel</name>)<parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_near</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_far</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hs</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>stbi__jpeg</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__build_huffman</name><parameter_list>(<parameter><decl><type><name>stbi__huffman</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>code</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>delta</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>-</operator> <name>code</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>j</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi__uint16</name><operator>)</operator> <operator>(</operator><name>code</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>code</name><operator>-</operator><literal type="number">1</literal> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad code lengths"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>maxcode</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>code</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal><operator>-</operator><name>j</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>maxcode</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>fast</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FAST_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name>FAST_BITS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>FAST_BITS</name><operator>-</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>FAST_BITS</name><operator>-</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>fast</name><index>[<expr><name>c</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__build_fast_ac</name><parameter_list>(<parameter><decl><type><name>stbi__int16</name> <modifier>*</modifier></type><name>fast_ac</name></decl></parameter>, <parameter><decl><type><name>stbi__huffman</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FAST_BITS</name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>fast</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>fast</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fast_ac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fast</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rs</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>fast</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><operator>(</operator><name>rs</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>magbits</name> <init>= <expr><name>rs</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>fast</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>magbits</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>+</operator> <name>magbits</name> <operator>&lt;=</operator> <name>FAST_BITS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FAST_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>FAST_BITS</name> <operator>-</operator> <name>magbits</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>magbits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>+=</operator> <operator>(</operator><operator>~</operator><literal type="number">0U</literal> <operator>&lt;&lt;</operator> <name>magbits</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fast_ac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi__int16</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>k</name> <operator>*</operator> <literal type="number">256</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>run</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>len</name> <operator>+</operator> <name>magbits</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__grow_buffer_unsafe</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>b</name> <init>= <expr><ternary><condition><expr><name><name>j</name><operator>-&gt;</operator><name>nomore</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while> 

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>marker</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>nomore</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>|=</operator> <name>b</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>-</operator> <name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition>;</do>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>stbi__uint32</name></type> <name><name>stbi__bmask</name><index>[<expr><literal type="number">17</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">63</literal></expr>,<expr><literal type="number">127</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">511</literal></expr>,<expr><literal type="number">1023</literal></expr>,<expr><literal type="number">2047</literal></expr>,<expr><literal type="number">4095</literal></expr>,<expr><literal type="number">8191</literal></expr>,<expr><literal type="number">16383</literal></expr>,<expr><literal type="number">32767</literal></expr>,<expr><literal type="number">65535</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>stbi_inline</name> <specifier>static</specifier> <name>int</name></type> <name>stbi__jpeg_huff_decode</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>stbi__huffman</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__grow_buffer_unsafe</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>FAST_BITS</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FAST_BITS</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>fast</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&lt;&lt;=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>-=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name><name>h</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><name>FAST_BITS</name><operator>+</operator><literal type="number">1</literal></expr> ;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>maxcode</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>k</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>stbi__bmask</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>delta</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>c</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>stbi__bmask</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&lt;&lt;=</operator> <name>k</name></expr>;</expr_stmt>

<return>return <expr><name><name>h</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>stbi__jbias</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><operator>-</operator><literal type="number">7</literal></expr>,<expr><operator>-</operator><literal type="number">15</literal></expr>,<expr><operator>-</operator><literal type="number">31</literal></expr>,<expr><operator>-</operator><literal type="number">63</literal></expr>,<expr><operator>-</operator><literal type="number">127</literal></expr>,<expr><operator>-</operator><literal type="number">255</literal></expr>,<expr><operator>-</operator><literal type="number">511</literal></expr>,<expr><operator>-</operator><literal type="number">1023</literal></expr>,<expr><operator>-</operator><literal type="number">2047</literal></expr>,<expr><operator>-</operator><literal type="number">4095</literal></expr>,<expr><operator>-</operator><literal type="number">8191</literal></expr>,<expr><operator>-</operator><literal type="number">16383</literal></expr>,<expr><operator>-</operator><literal type="number">32767</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>stbi_inline</name> <specifier>static</specifier> <name>int</name></type> <name>stbi__extend_receive</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sgn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__grow_buffer_unsafe</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sgn</name> <operator>=</operator> <operator>(</operator><name>stbi__int32</name><operator>)</operator><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>stbi_lrot</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>stbi__bmask</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stbi__bmask</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>=</operator> <name>k</name> <operator>&amp;</operator> <operator>~</operator><name><name>stbi__bmask</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>&amp;=</operator> <name><name>stbi__bmask</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><name>k</name> <operator>+</operator> <operator>(</operator><name><name>stbi__jbias</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><name>sgn</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>stbi_inline</name> <specifier>static</specifier> <name>int</name></type> <name>stbi__jpeg_get_bits</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__grow_buffer_unsafe</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>stbi_lrot</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>=</operator> <name>k</name> <operator>&amp;</operator> <operator>~</operator><name><name>stbi__bmask</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>&amp;=</operator> <name><name>stbi__bmask</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><name>k</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>stbi_inline</name> <specifier>static</specifier> <name>int</name></type> <name>stbi__jpeg_get_bit</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__grow_buffer_unsafe</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name></expr>;</expr_stmt>

<return>return <expr><name>k</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>stbi_uc</name></type> <name><name>stbi__jpeg_dezigzag</name><index>[<expr><literal type="number">64</literal><operator>+</operator><literal type="number">15</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">17</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">34</literal></expr>,

<expr><literal type="number">27</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">28</literal></expr>,

<expr><literal type="number">35</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">36</literal></expr>,

<expr><literal type="number">29</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">51</literal></expr>,

<expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">46</literal></expr>,

<expr><literal type="number">53</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>,

<expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,

<expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__jpeg_decode_block</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>stbi__huffman</name> <modifier>*</modifier></type><name>hdc</name></decl></parameter>, <parameter><decl><type><name>stbi__huffman</name> <modifier>*</modifier></type><name>hac</name></decl></parameter>, <parameter><decl><type><name>stbi__int16</name> <modifier>*</modifier></type><name>fac</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>dequant</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>,<decl><type ref="prev"/><name>dc</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__grow_buffer_unsafe</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>stbi__jpeg_huff_decode</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad huffman code"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">64</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <ternary><condition><expr><name>t</name></expr> ?</condition><then> <expr><call><name>stbi__extend_receive</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>dc_pred</name> <operator>+</operator> <name>diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>dc_pred</name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><name>dc</name> <operator>*</operator> <name><name>dequant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>zig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__grow_buffer_unsafe</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>FAST_BITS</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FAST_BITS</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>fac</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>k</name> <operator>+=</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>r</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&lt;&lt;=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>-=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zig</name> <operator>=</operator> <name><name>stbi__jpeg_dezigzag</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>zig</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name><name>dequant</name><index>[<expr><name>zig</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rs</name> <init>= <expr><call><name>stbi__jpeg_huff_decode</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>hac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad huffman code"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>rs</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>rs</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>!=</operator> <literal type="number">0xf0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zig</name> <operator>=</operator> <name><name>stbi__jpeg_dezigzag</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>zig</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><call><name>stbi__extend_receive</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>dequant</name><index>[<expr><name>zig</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition>;</do>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__jpeg_decode_block_prog_dc</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>stbi__huffman</name> <modifier>*</modifier></type><name>hdc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>,<decl><type ref="prev"/><name>dc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>spec_end</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"can't merge dc and ac"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__grow_buffer_unsafe</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>succ_high</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">64</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>stbi__jpeg_huff_decode</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <ternary><condition><expr><name>t</name></expr> ?</condition><then> <expr><call><name>stbi__extend_receive</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>dc_pred</name> <operator>+</operator> <name>diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>dc_pred</name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><name>dc</name> <operator>&lt;&lt;</operator> <name><name>j</name><operator>-&gt;</operator><name>succ_low</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbi__jpeg_get_bit</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>j</name><operator>-&gt;</operator><name>succ_low</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__jpeg_decode_block_prog_ac</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>stbi__huffman</name> <modifier>*</modifier></type><name>hac</name></decl></parameter>, <parameter><decl><type><name>stbi__int16</name> <modifier>*</modifier></type><name>fac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>spec_start</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"can't merge dc and ac"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>succ_high</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name><name>j</name><operator>-&gt;</operator><name>succ_low</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>eob_run</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>j</name><operator>-&gt;</operator><name>eob_run</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>spec_start</name></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>zig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__grow_buffer_unsafe</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>FAST_BITS</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FAST_BITS</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>fac</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>k</name> <operator>+=</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>r</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&lt;&lt;=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>-=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zig</name> <operator>=</operator> <name><name>stbi__jpeg_dezigzag</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>zig</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rs</name> <init>= <expr><call><name>stbi__jpeg_huff_decode</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>hac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad huffman code"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>rs</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>rs</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>eob_run</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>r</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>eob_run</name></name> <operator>+=</operator> <call><name>stbi__jpeg_get_bits</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name><name>j</name><operator>-&gt;</operator><name>eob_run</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zig</name> <operator>=</operator> <name><name>stbi__jpeg_dezigzag</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>zig</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><call><name>stbi__extend_receive</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name><name>j</name><operator>-&gt;</operator><name>spec_end</name></name></expr>)</condition>;</do>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>bit</name> <init>= <expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>j</name><operator>-&gt;</operator><name>succ_low</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>eob_run</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>j</name><operator>-&gt;</operator><name>eob_run</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>spec_start</name></name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name><name>j</name><operator>-&gt;</operator><name>spec_end</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name><name>stbi__jpeg_dezigzag</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbi__jpeg_get_bit</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <name>bit</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>bit</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>-=</operator> <name>bit</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>spec_start</name></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rs</name> <init>= <expr><call><name>stbi__jpeg_huff_decode</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>hac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad huffman code"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>rs</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>rs</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>eob_run</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>r</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>eob_run</name></name> <operator>+=</operator> <call><name>stbi__jpeg_get_bits</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad huffman code"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__jpeg_get_bit</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>bit</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><name>bit</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name><name>j</name><operator>-&gt;</operator><name>spec_end</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name><name>stbi__jpeg_dezigzag</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbi__jpeg_get_bit</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <name>bit</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>bit</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>-=</operator> <name>bit</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block> while <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name><name>j</name><operator>-&gt;</operator><name>spec_end</name></name></expr>)</condition>;</do>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>stbi_inline</name> <specifier>static</specifier> <name>stbi_uc</name></type> <name>stbi__clamp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>x</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">255</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>stbi_uc</name><operator>)</operator> <name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__f2f</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) (((x) * 4096 + 0.5)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__fsh</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * 4096)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__IDCT_1D</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>s3</name></type></parameter>,<parameter><type><name>s4</name></type></parameter>,<parameter><type><name>s5</name></type></parameter>,<parameter><type><name>s6</name></type></parameter>,<parameter><type><name>s7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int t0,t1,t2,t3,p1,p2,p3,p4,p5,x0,x1,x2,x3; p2 = s2; p3 = s6; p1 = (p2+p3) * stbi__f2f(0.5411961f); t2 = p1 + p3*stbi__f2f(-1.847759065f); t3 = p1 + p2*stbi__f2f( 0.765366865f); p2 = s0; p3 = s4; t0 = stbi__fsh(p2+p3); t1 = stbi__fsh(p2-p3); x0 = t0+t3; x3 = t0-t3; x1 = t1+t2; x2 = t1-t2; t0 = s7; t1 = s5; t2 = s3; t3 = s1; p3 = t0+t2; p4 = t1+t3; p1 = t0+t3; p2 = t1+t2; p5 = (p3+p4)*stbi__f2f( 1.175875602f); t0 = t0*stbi__f2f( 0.298631336f); t1 = t1*stbi__f2f( 2.053119869f); t2 = t2*stbi__f2f( 3.072711026f); t3 = t3*stbi__f2f( 1.501321110f); p1 = p5 + p1*stbi__f2f(-0.899976223f); p2 = p5 + p2*stbi__f2f(-2.562915447f); p3 = p3*stbi__f2f(-1.961570560f); p4 = p4*stbi__f2f(-0.390180644f); t3 += p1+p4; t2 += p2+p3; t1 += p2+p4; t0 += p1+p3;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__idct_block</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name><name>val</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>v</name><init>=<expr><name>val</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator><expr><operator>++</operator><name>d</name></expr><operator>,</operator> <expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">24</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">32</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">40</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">48</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">56</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dcterm</name> <init>= <expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>=</operator> <name>dcterm</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<macro><name>STBI__IDCT_1D</name><argument_list>(<argument>d[ <literal type="number">0</literal>]</argument>,<argument>d[ <literal type="number">8</literal>]</argument>,<argument>d[<literal type="number">16</literal>]</argument>,<argument>d[<literal type="number">24</literal>]</argument>,<argument>d[<literal type="number">32</literal>]</argument>,<argument>d[<literal type="number">40</literal>]</argument>,<argument>d[<literal type="number">48</literal>]</argument>,<argument>d[<literal type="number">56</literal>]</argument>)</argument_list></macro>

<expr_stmt><expr><name>x0</name> <operator>+=</operator> <literal type="number">512</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x1</name> <operator>+=</operator> <literal type="number">512</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x2</name> <operator>+=</operator> <literal type="number">512</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x3</name> <operator>+=</operator> <literal type="number">512</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x0</name><operator>+</operator><name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x0</name><operator>-</operator><name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x1</name><operator>+</operator><name>t2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x1</name><operator>-</operator><name>t2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x2</name><operator>+</operator><name>t1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x2</name><operator>-</operator><name>t1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x3</name><operator>+</operator><name>t0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x3</name><operator>-</operator><name>t0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>v</name><operator>=</operator><name>val</name></expr><operator>,</operator> <expr><name>o</name><operator>=</operator><name>out</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator><expr><name>v</name><operator>+=</operator><literal type="number">8</literal></expr><operator>,</operator><expr><name>o</name><operator>+=</operator><name>out_stride</name></expr></incr>)</control> <block>{<block_content>

<macro><name>STBI__IDCT_1D</name><argument_list>(<argument>v[<literal type="number">0</literal>]</argument>,<argument>v[<literal type="number">1</literal>]</argument>,<argument>v[<literal type="number">2</literal>]</argument>,<argument>v[<literal type="number">3</literal>]</argument>,<argument>v[<literal type="number">4</literal>]</argument>,<argument>v[<literal type="number">5</literal>]</argument>,<argument>v[<literal type="number">6</literal>]</argument>,<argument>v[<literal type="number">7</literal>]</argument>)</argument_list></macro>

<expr_stmt><expr><name>x0</name> <operator>+=</operator> <literal type="number">65536</literal> <operator>+</operator> <operator>(</operator><literal type="number">128</literal><operator>&lt;&lt;</operator><literal type="number">17</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>+=</operator> <literal type="number">65536</literal> <operator>+</operator> <operator>(</operator><literal type="number">128</literal><operator>&lt;&lt;</operator><literal type="number">17</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>+=</operator> <literal type="number">65536</literal> <operator>+</operator> <operator>(</operator><literal type="number">128</literal><operator>&lt;&lt;</operator><literal type="number">17</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>+=</operator> <literal type="number">65536</literal> <operator>+</operator> <operator>(</operator><literal type="number">128</literal><operator>&lt;&lt;</operator><literal type="number">17</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__clamp</name><argument_list>(<argument><expr><operator>(</operator><name>x0</name><operator>+</operator><name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__clamp</name><argument_list>(<argument><expr><operator>(</operator><name>x0</name><operator>-</operator><name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__clamp</name><argument_list>(<argument><expr><operator>(</operator><name>x1</name><operator>+</operator><name>t2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__clamp</name><argument_list>(<argument><expr><operator>(</operator><name>x1</name><operator>-</operator><name>t2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__clamp</name><argument_list>(<argument><expr><operator>(</operator><name>x2</name><operator>+</operator><name>t1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__clamp</name><argument_list>(<argument><expr><operator>(</operator><name>x2</name><operator>-</operator><name>t1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__clamp</name><argument_list>(<argument><expr><operator>(</operator><name>x3</name><operator>+</operator><name>t0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__clamp</name><argument_list>(<argument><expr><operator>(</operator><name>x3</name><operator>-</operator><name>t0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__idct_simd</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>row0</name></decl>, <decl><type ref="prev"/><name>row1</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>, <decl><type ref="prev"/><name>row3</name></decl>, <decl><type ref="prev"/><name>row4</name></decl>, <decl><type ref="prev"/><name>row5</name></decl>, <decl><type ref="prev"/><name>row6</name></decl>, <decl><type ref="prev"/><name>row7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>tmp</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_const</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_setr_epi16((x),(y),(x),(y),(x),(y),(x),(y))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_rot</name><parameter_list>(<parameter><type><name>out0</name></type></parameter>,<parameter><type><name>out1</name></type></parameter>, <parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>c0</name></type></parameter>,<parameter><type><name>c1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__m128i c0##lo = _mm_unpacklo_epi16((x),(y)); __m128i c0##hi = _mm_unpackhi_epi16((x),(y)); __m128i out0##_l = _mm_madd_epi16(c0##lo, c0); __m128i out0##_h = _mm_madd_epi16(c0##hi, c0); __m128i out1##_l = _mm_madd_epi16(c0##lo, c1); __m128i out1##_h = _mm_madd_epi16(c0##hi, c1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_widen</name><parameter_list>(<parameter><type><name>out</name></type></parameter>, <parameter><type><name>in</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__m128i out##_l = _mm_srai_epi32(_mm_unpacklo_epi16(_mm_setzero_si128(), (in)), 4); __m128i out##_h = _mm_srai_epi32(_mm_unpackhi_epi16(_mm_setzero_si128(), (in)), 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_wadd</name><parameter_list>(<parameter><type><name>out</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__m128i out##_l = _mm_add_epi32(a##_l, b##_l); __m128i out##_h = _mm_add_epi32(a##_h, b##_h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_wsub</name><parameter_list>(<parameter><type><name>out</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__m128i out##_l = _mm_sub_epi32(a##_l, b##_l); __m128i out##_h = _mm_sub_epi32(a##_h, b##_h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_bfly32o</name><parameter_list>(<parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>bias</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ __m128i abiased_l = _mm_add_epi32(a##_l, bias); __m128i abiased_h = _mm_add_epi32(a##_h, bias); dct_wadd(sum, abiased, b); dct_wsub(dif, abiased, b); out0 = _mm_packs_epi32(_mm_srai_epi32(sum_l, s), _mm_srai_epi32(sum_h, s)); out1 = _mm_packs_epi32(_mm_srai_epi32(dif_l, s), _mm_srai_epi32(dif_h, s)); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_interleave8</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tmp = a; a = _mm_unpacklo_epi8(a, b); b = _mm_unpackhi_epi8(tmp, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_interleave16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tmp = a; a = _mm_unpacklo_epi16(a, b); b = _mm_unpackhi_epi16(tmp, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_pass</name><parameter_list>(<parameter><type><name>bias</name></type></parameter>,<parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ dct_rot(t2e,t3e, row2,row6, rot0_0,rot0_1); __m128i sum04 = _mm_add_epi16(row0, row4); __m128i dif04 = _mm_sub_epi16(row0, row4); dct_widen(t0e, sum04); dct_widen(t1e, dif04); dct_wadd(x0, t0e, t3e); dct_wsub(x3, t0e, t3e); dct_wadd(x1, t1e, t2e); dct_wsub(x2, t1e, t2e); dct_rot(y0o,y2o, row7,row3, rot2_0,rot2_1); dct_rot(y1o,y3o, row5,row1, rot3_0,rot3_1); __m128i sum17 = _mm_add_epi16(row1, row7); __m128i sum35 = _mm_add_epi16(row3, row5); dct_rot(y4o,y5o, sum17,sum35, rot1_0,rot1_1); dct_wadd(x4, y0o, y4o); dct_wadd(x5, y1o, y5o); dct_wadd(x6, y2o, y5o); dct_wadd(x7, y3o, y4o); dct_bfly32o(row0,row7, x0,x7,bias,shift); dct_bfly32o(row1,row6, x1,x6,bias,shift); dct_bfly32o(row2,row5, x2,x5,bias,shift); dct_bfly32o(row3,row4, x3,x4,bias,shift); }</cpp:value></cpp:define>

<decl_stmt><decl><type><name>__m128i</name></type> <name>rot0_0</name> <init>= <expr><call><name>dct_const</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><literal type="number">0.5411961f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><literal type="number">0.5411961f</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.847759065f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>rot0_1</name> <init>= <expr><call><name>dct_const</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><literal type="number">0.5411961f</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>stbi__f2f</name><argument_list>( <argument><expr><literal type="number">0.765366865f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><literal type="number">0.5411961f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>rot1_0</name> <init>= <expr><call><name>dct_const</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><literal type="number">1.175875602f</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.899976223f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><literal type="number">1.175875602f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>rot1_1</name> <init>= <expr><call><name>dct_const</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><literal type="number">1.175875602f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><literal type="number">1.175875602f</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.562915447f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>rot2_0</name> <init>= <expr><call><name>dct_const</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.961570560f</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>stbi__f2f</name><argument_list>( <argument><expr><literal type="number">0.298631336f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.961570560f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>rot2_1</name> <init>= <expr><call><name>dct_const</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.961570560f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.961570560f</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>stbi__f2f</name><argument_list>( <argument><expr><literal type="number">3.072711026f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>rot3_0</name> <init>= <expr><call><name>dct_const</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.390180644f</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>stbi__f2f</name><argument_list>( <argument><expr><literal type="number">2.053119869f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.390180644f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>rot3_1</name> <init>= <expr><call><name>dct_const</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.390180644f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.390180644f</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>stbi__f2f</name><argument_list>( <argument><expr><literal type="number">1.501321110f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>bias_0</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>bias_1</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">65536</literal> <operator>+</operator> <operator>(</operator><literal type="number">128</literal><operator>&lt;&lt;</operator><literal type="number">17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>row0</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row1</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row2</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row3</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row4</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row5</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row6</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row7</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_pass</name><argument_list>(<argument><expr><name>bias_0</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>dct_interleave16</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_interleave16</name><argument_list>(<argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_interleave16</name><argument_list>(<argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_interleave16</name><argument_list>(<argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_interleave16</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_interleave16</name><argument_list>(<argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_interleave16</name><argument_list>(<argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_interleave16</name><argument_list>(<argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_interleave16</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_interleave16</name><argument_list>(<argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_interleave16</name><argument_list>(<argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_interleave16</name><argument_list>(<argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>dct_pass</name><argument_list>(<argument><expr><name>bias_1</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>p0</name> <init>= <expr><call><name>_mm_packus_epi16</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>__m128i</name></type> <name>p1</name> <init>= <expr><call><name>_mm_packus_epi16</name><argument_list>(<argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>p2</name> <init>= <expr><call><name>_mm_packus_epi16</name><argument_list>(<argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>p3</name> <init>= <expr><call><name>_mm_packus_epi16</name><argument_list>(<argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dct_interleave8</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>dct_interleave8</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>dct_interleave8</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>dct_interleave8</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>dct_interleave8</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>dct_interleave8</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>_mm_storel_epi64</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_storel_epi64</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><literal type="number">0x4e</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_storel_epi64</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_storel_epi64</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="number">0x4e</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_storel_epi64</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_storel_epi64</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="number">0x4e</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_storel_epi64</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_storel_epi64</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><literal type="number">0x4e</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_const</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_rot</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_widen</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_wadd</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_wsub</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_bfly32o</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_interleave8</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_interleave16</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_pass</name></cpp:undef>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__idct_simd</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>row0</name></decl>, <decl><type ref="prev"/><name>row1</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>, <decl><type ref="prev"/><name>row3</name></decl>, <decl><type ref="prev"/><name>row4</name></decl>, <decl><type ref="prev"/><name>row5</name></decl>, <decl><type ref="prev"/><name>row6</name></decl>, <decl><type ref="prev"/><name>row7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>rot0_0</name> <init>= <expr><call><name>vdup_n_s16</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><literal type="number">0.5411961f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>rot0_1</name> <init>= <expr><call><name>vdup_n_s16</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.847759065f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>rot0_2</name> <init>= <expr><call><name>vdup_n_s16</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>( <argument><expr><literal type="number">0.765366865f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>rot1_0</name> <init>= <expr><call><name>vdup_n_s16</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>( <argument><expr><literal type="number">1.175875602f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>rot1_1</name> <init>= <expr><call><name>vdup_n_s16</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.899976223f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>rot1_2</name> <init>= <expr><call><name>vdup_n_s16</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.562915447f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>rot2_0</name> <init>= <expr><call><name>vdup_n_s16</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.961570560f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>rot2_1</name> <init>= <expr><call><name>vdup_n_s16</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.390180644f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>rot3_0</name> <init>= <expr><call><name>vdup_n_s16</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>( <argument><expr><literal type="number">0.298631336f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>rot3_1</name> <init>= <expr><call><name>vdup_n_s16</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>( <argument><expr><literal type="number">2.053119869f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>rot3_2</name> <init>= <expr><call><name>vdup_n_s16</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>( <argument><expr><literal type="number">3.072711026f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>rot3_3</name> <init>= <expr><call><name>vdup_n_s16</name><argument_list>(<argument><expr><call><name>stbi__f2f</name><argument_list>( <argument><expr><literal type="number">1.501321110f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_long_mul</name><parameter_list>(<parameter><type><name>out</name></type></parameter>, <parameter><type><name>inq</name></type></parameter>, <parameter><type><name>coeff</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int32x4_t out##_l = vmull_s16(vget_low_s16(inq), coeff); int32x4_t out##_h = vmull_s16(vget_high_s16(inq), coeff)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_long_mac</name><parameter_list>(<parameter><type><name>out</name></type></parameter>, <parameter><type><name>acc</name></type></parameter>, <parameter><type><name>inq</name></type></parameter>, <parameter><type><name>coeff</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int32x4_t out##_l = vmlal_s16(acc##_l, vget_low_s16(inq), coeff); int32x4_t out##_h = vmlal_s16(acc##_h, vget_high_s16(inq), coeff)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_widen</name><parameter_list>(<parameter><type><name>out</name></type></parameter>, <parameter><type><name>inq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int32x4_t out##_l = vshll_n_s16(vget_low_s16(inq), 12); int32x4_t out##_h = vshll_n_s16(vget_high_s16(inq), 12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_wadd</name><parameter_list>(<parameter><type><name>out</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int32x4_t out##_l = vaddq_s32(a##_l, b##_l); int32x4_t out##_h = vaddq_s32(a##_h, b##_h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_wsub</name><parameter_list>(<parameter><type><name>out</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int32x4_t out##_l = vsubq_s32(a##_l, b##_l); int32x4_t out##_h = vsubq_s32(a##_h, b##_h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_bfly32o</name><parameter_list>(<parameter><type><name>out0</name></type></parameter>,<parameter><type><name>out1</name></type></parameter>, <parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>shiftop</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ dct_wadd(sum, a, b); dct_wsub(dif, a, b); out0 = vcombine_s16(shiftop(sum_l, s), shiftop(sum_h, s)); out1 = vcombine_s16(shiftop(dif_l, s), shiftop(dif_h, s)); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_pass</name><parameter_list>(<parameter><type><name>shiftop</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int16x8_t sum26 = vaddq_s16(row2, row6); dct_long_mul(p1e, sum26, rot0_0); dct_long_mac(t2e, p1e, row6, rot0_1); dct_long_mac(t3e, p1e, row2, rot0_2); int16x8_t sum04 = vaddq_s16(row0, row4); int16x8_t dif04 = vsubq_s16(row0, row4); dct_widen(t0e, sum04); dct_widen(t1e, dif04); dct_wadd(x0, t0e, t3e); dct_wsub(x3, t0e, t3e); dct_wadd(x1, t1e, t2e); dct_wsub(x2, t1e, t2e); int16x8_t sum15 = vaddq_s16(row1, row5); int16x8_t sum17 = vaddq_s16(row1, row7); int16x8_t sum35 = vaddq_s16(row3, row5); int16x8_t sum37 = vaddq_s16(row3, row7); int16x8_t sumodd = vaddq_s16(sum17, sum35); dct_long_mul(p5o, sumodd, rot1_0); dct_long_mac(p1o, p5o, sum17, rot1_1); dct_long_mac(p2o, p5o, sum35, rot1_2); dct_long_mul(p3o, sum37, rot2_0); dct_long_mul(p4o, sum15, rot2_1); dct_wadd(sump13o, p1o, p3o); dct_wadd(sump24o, p2o, p4o); dct_wadd(sump23o, p2o, p3o); dct_wadd(sump14o, p1o, p4o); dct_long_mac(x4, sump13o, row7, rot3_0); dct_long_mac(x5, sump24o, row5, rot3_1); dct_long_mac(x6, sump23o, row3, rot3_2); dct_long_mac(x7, sump14o, row1, rot3_3); dct_bfly32o(row0,row7, x0,x7,shiftop,shift); dct_bfly32o(row1,row6, x1,x6,shiftop,shift); dct_bfly32o(row2,row5, x2,x5,shiftop,shift); dct_bfly32o(row3,row4, x3,x4,shiftop,shift); }</cpp:value></cpp:define>

<expr_stmt><expr><name>row0</name> <operator>=</operator> <call><name>vld1q_s16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row1</name> <operator>=</operator> <call><name>vld1q_s16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row2</name> <operator>=</operator> <call><name>vld1q_s16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row3</name> <operator>=</operator> <call><name>vld1q_s16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row4</name> <operator>=</operator> <call><name>vld1q_s16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row5</name> <operator>=</operator> <call><name>vld1q_s16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row6</name> <operator>=</operator> <call><name>vld1q_s16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row7</name> <operator>=</operator> <call><name>vld1q_s16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row0</name> <operator>=</operator> <call><name>vaddq_s16</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><call><name>vsetq_lane_s16</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><call><name>vdupq_n_s16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_pass</name><argument_list>(<argument><expr><name>vrshrn_n_s32</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_trn16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int16x8x2_t t = vtrnq_s16(x, y); x = t.val[0]; y = t.val[1]; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_trn32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int32x4x2_t t = vtrnq_s32(vreinterpretq_s32_s16(x), vreinterpretq_s32_s16(y)); x = vreinterpretq_s16_s32(t.val[0]); y = vreinterpretq_s16_s32(t.val[1]); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_trn64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int16x8_t x0 = x; int16x8_t y0 = y; x = vcombine_s16(vget_low_s16(x0), vget_low_s16(y0)); y = vcombine_s16(vget_high_s16(x0), vget_high_s16(y0)); }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>dct_trn16</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>dct_trn16</name><argument_list>(<argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn16</name><argument_list>(<argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn16</name><argument_list>(<argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn32</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>dct_trn32</name><argument_list>(<argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn32</name><argument_list>(<argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn32</name><argument_list>(<argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn64</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>dct_trn64</name><argument_list>(<argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn64</name><argument_list>(<argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn64</name><argument_list>(<argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_trn16</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_trn32</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_trn64</name></cpp:undef>

</block_content>}</block>

<expr_stmt><expr><call><name>dct_pass</name><argument_list>(<argument><expr><name>vshrn_n_s32</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>p0</name> <init>= <expr><call><name>vqrshrun_n_s16</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>p1</name> <init>= <expr><call><name>vqrshrun_n_s16</name><argument_list>(<argument><expr><name>row1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>p2</name> <init>= <expr><call><name>vqrshrun_n_s16</name><argument_list>(<argument><expr><name>row2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>p3</name> <init>= <expr><call><name>vqrshrun_n_s16</name><argument_list>(<argument><expr><name>row3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>p4</name> <init>= <expr><call><name>vqrshrun_n_s16</name><argument_list>(<argument><expr><name>row4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>p5</name> <init>= <expr><call><name>vqrshrun_n_s16</name><argument_list>(<argument><expr><name>row5</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>p6</name> <init>= <expr><call><name>vqrshrun_n_s16</name><argument_list>(<argument><expr><name>row6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>p7</name> <init>= <expr><call><name>vqrshrun_n_s16</name><argument_list>(<argument><expr><name>row7</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_trn8_8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ uint8x8x2_t t = vtrn_u8(x, y); x = t.val[0]; y = t.val[1]; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_trn8_16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ uint16x4x2_t t = vtrn_u16(vreinterpret_u16_u8(x), vreinterpret_u16_u8(y)); x = vreinterpret_u8_u16(t.val[0]); y = vreinterpret_u8_u16(t.val[1]); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dct_trn8_32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ uint32x2x2_t t = vtrn_u32(vreinterpret_u32_u8(x), vreinterpret_u32_u8(y)); x = vreinterpret_u8_u32(t.val[0]); y = vreinterpret_u8_u32(t.val[1]); }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>dct_trn8_8</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn8_8</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn8_8</name><argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn8_8</name><argument_list>(<argument><expr><name>p6</name></expr></argument>, <argument><expr><name>p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn8_16</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn8_16</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn8_16</name><argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn8_16</name><argument_list>(<argument><expr><name>p5</name></expr></argument>, <argument><expr><name>p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn8_32</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn8_32</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn8_32</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_trn8_32</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_u8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_u8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_u8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_u8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_u8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_u8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_u8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>p6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_u8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_trn8_8</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_trn8_16</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_trn8_32</name></cpp:undef>

</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_long_mul</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_long_mac</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_widen</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_wadd</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_wsub</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_bfly32o</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dct_pass</name></cpp:undef>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__MARKER_none</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>stbi_uc</name></type> <name>stbi__get_marker</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>marker</name></name> <operator>!=</operator> <name>STBI__MARKER_none</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>marker</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>marker</name></name> <operator>=</operator> <name>STBI__MARKER_none</name></expr>;</expr_stmt> <return>return <expr><name>x</name></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>STBI__MARKER_none</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while> 

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__RESTART</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;= 0xd0 &amp;&amp; (x) &lt;= 0xd7)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__jpeg_reset</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>nomore</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dc_pred</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dc_pred</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dc_pred</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>dc_pred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>marker</name></name> <operator>=</operator> <name>STBI__MARKER_none</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>todo</name></name> <operator>=</operator> <ternary><condition><expr><name><name>j</name><operator>-&gt;</operator><name>restart_interval</name></name></expr> ?</condition><then> <expr><name><name>j</name><operator>-&gt;</operator><name>restart_interval</name></name></expr> </then><else>: <expr><literal type="number">0x7fffffff</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>eob_run</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__parse_entropy_coded_data</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>stbi__jpeg_reset</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>z</name><operator>-&gt;</operator><name>progressive</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>scan_n</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_SIMD_ALIGN</name><argument_list>(<argument><expr><name>short</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>y</name><operator>+</operator><literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ha</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>ha</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__jpeg_decode_block</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>huff_dc</name></name><operator>+</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>hd</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>huff_ac</name></name><operator>+</operator><name>ha</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>fast_ac</name><index>[<expr><name>ha</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>dequant</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>tq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>z</name><operator>-&gt;</operator><name>idct_block_kernel</name></name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>data</name><operator>+</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>w2</name><operator>*</operator><name>j</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>w2</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>z</name><operator>-&gt;</operator><name>todo</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__grow_buffer_unsafe</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STBI__RESTART</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>marker</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__jpeg_reset</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_SIMD_ALIGN</name><argument_list>(<argument><expr><name>short</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>img_mcu_y</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>img_mcu_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>scan_n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>v</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x2</name> <init>= <expr><operator>(</operator><name>i</name><operator>*</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>+</operator> <name>x</name><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y2</name> <init>= <expr><operator>(</operator><name>j</name><operator>*</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>+</operator> <name>y</name><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ha</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>ha</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__jpeg_decode_block</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>huff_dc</name></name><operator>+</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>hd</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>huff_ac</name></name><operator>+</operator><name>ha</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>fast_ac</name><index>[<expr><name>ha</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>dequant</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>tq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>z</name><operator>-&gt;</operator><name>idct_block_kernel</name></name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>data</name><operator>+</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>w2</name><operator>*</operator><name>y2</name><operator>+</operator><name>x2</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>w2</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>z</name><operator>-&gt;</operator><name>todo</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__grow_buffer_unsafe</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STBI__RESTART</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>marker</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__jpeg_reset</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>scan_n</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>y</name><operator>+</operator><literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>coeff</name> <operator>+</operator> <literal type="number">64</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>coeff_w</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>spec_start</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__jpeg_decode_block_prog_dc</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>huff_dc</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>hd</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ha</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>ha</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__jpeg_decode_block_prog_ac</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>huff_ac</name><index>[<expr><name>ha</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>fast_ac</name><index>[<expr><name>ha</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>z</name><operator>-&gt;</operator><name>todo</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__grow_buffer_unsafe</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STBI__RESTART</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>marker</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__jpeg_reset</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>img_mcu_y</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>img_mcu_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>scan_n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>v</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x2</name> <init>= <expr><operator>(</operator><name>i</name><operator>*</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>+</operator> <name>x</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y2</name> <init>= <expr><operator>(</operator><name>j</name><operator>*</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>+</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>coeff</name> <operator>+</operator> <literal type="number">64</literal> <operator>*</operator> <operator>(</operator><name>x2</name> <operator>+</operator> <name>y2</name> <operator>*</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>coeff_w</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__jpeg_decode_block_prog_dc</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>huff_dc</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>hd</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>z</name><operator>-&gt;</operator><name>todo</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>code_bits</name></name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__grow_buffer_unsafe</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STBI__RESTART</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>marker</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__jpeg_reset</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__jpeg_dequantize</name><parameter_list>(<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>dequant</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name><name>dequant</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__jpeg_finish</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>progressive</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>y</name><operator>+</operator><literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>coeff</name> <operator>+</operator> <literal type="number">64</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>coeff_w</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__jpeg_dequantize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>dequant</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>tq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>z</name><operator>-&gt;</operator><name>idct_block_kernel</name></name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>data</name><operator>+</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>w2</name><operator>*</operator><name>j</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>w2</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__process_marker</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>L</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>STBI__MARKER_none</name></expr>:</case> 

<return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"expected marker"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">0xDD</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad DRI len"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>restart_interval</name></name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="number">0xDB</literal></expr>:</case> 

<expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>L</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>q</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>sixteen</name> <init>= <expr><operator>(</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>q</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></init></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad DQT type"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad DQT table"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>dequant</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>stbi__jpeg_dezigzag</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi__uint16</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>sixteen</name></expr> ?</condition><then> <expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>L</name> <operator>-=</operator> <operator>(</operator><ternary><condition><expr><name>sixteen</name></expr> ?</condition><then> <expr><literal type="number">129</literal></expr> </then><else>: <expr><literal type="number">65</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>L</name><operator>==</operator><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="number">0xC4</literal></expr>:</case> 

<expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>L</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sizes</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tc</name> <init>= <expr><name>q</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>th</name> <init>= <expr><name>q</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>th</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad DHT header"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>L</name> <operator>-=</operator> <literal type="number">17</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__build_huffman</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>huff_dc</name></name><operator>+</operator><name>th</name></expr></argument>, <argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>huff_dc</name><index>[<expr><name>th</name></expr>]</index></name><operator>.</operator><name>values</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__build_huffman</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>huff_ac</name></name><operator>+</operator><name>th</name></expr></argument>, <argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>huff_ac</name><index>[<expr><name>th</name></expr>]</index></name><operator>.</operator><name>values</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>tc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__build_fast_ac</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>fast_ac</name><index>[<expr><name>th</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>huff_ac</name></name> <operator>+</operator> <name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>L</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>L</name><operator>==</operator><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>&gt;=</operator> <literal type="number">0xE0</literal> <operator>&amp;&amp;</operator> <name>m</name> <operator>&lt;=</operator> <literal type="number">0xEF</literal><operator>)</operator> <operator>||</operator> <name>m</name> <operator>==</operator> <literal type="number">0xFE</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0xFE</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad COM len"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad APP len"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>L</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0xE0</literal> <operator>&amp;&amp;</operator> <name>L</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>tag</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'J'</literal></expr>,<expr><literal type="char">'F'</literal></expr>,<expr><literal type="char">'I'</literal></expr>,<expr><literal type="char">'F'</literal></expr>,<expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>tag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>L</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>jfif</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0xEE</literal> <operator>&amp;&amp;</operator> <name>L</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>tag</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'A'</literal></expr>,<expr><literal type="char">'d'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'b'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>tag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>L</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>app14_color_transform</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>L</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"unknown marker"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__process_scan_header</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Ls</name> <init>= <expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>scan_n</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>scan_n</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>scan_n</name></name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>scan_n</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad SOS component count"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Ls</name> <operator>!=</operator> <literal type="number">6</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name><name>z</name><operator>-&gt;</operator><name>scan_n</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad SOS len"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>scan_n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>which</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>which</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>which</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>which</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>which</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>which</name> <operator>==</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>which</name></expr>]</index></name><operator>.</operator><name>hd</name> <operator>=</operator> <name>q</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>which</name></expr>]</index></name><operator>.</operator><name>hd</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad DC huff"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>which</name></expr>]</index></name><operator>.</operator><name>ha</name> <operator>=</operator> <name>q</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>which</name></expr>]</index></name><operator>.</operator><name>ha</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad AC huff"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>which</name></expr>;</expr_stmt>

</block_content>}</block></for>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>aa</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>spec_start</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>spec_end</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>aa</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>succ_high</name></name> <operator>=</operator> <operator>(</operator><name>aa</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>succ_low</name></name> <operator>=</operator> <operator>(</operator><name>aa</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>progressive</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>spec_start</name></name> <operator>&gt;</operator> <literal type="number">63</literal> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>spec_end</name></name> <operator>&gt;</operator> <literal type="number">63</literal> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>spec_start</name></name> <operator>&gt;</operator> <name><name>z</name><operator>-&gt;</operator><name>spec_end</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>succ_high</name></name> <operator>&gt;</operator> <literal type="number">13</literal> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>succ_low</name></name> <operator>&gt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad SOS"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>spec_start</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad SOS"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>succ_high</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>succ_low</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad SOS"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>spec_end</name></name> <operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__free_jpeg_components</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ncomp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>why</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncomp</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_coeff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_coeff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coeff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>linebuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>linebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>linebuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>why</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__process_frame_header</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scan</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Lf</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>h_max</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>v_max</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Lf</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>Lf</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad SOF len"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"only 8-bit"</literal></expr></argument>,<argument><expr><literal type="string">"JPEG format not supported: 8-bit only"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"no header height"</literal></expr></argument>, <argument><expr><literal type="string">"JPEG format not supported: delayed height"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"0 width"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad component count"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>c</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>linebuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>Lf</name> <operator>!=</operator> <literal type="number">8</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad SOF len"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>rgb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'B'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name><name>rgb</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>z</name><operator>-&gt;</operator><name>rgb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>=</operator> <operator>(</operator><name>q</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad H"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name>q</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad V"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tq</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tq</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad TQ"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>!=</operator> <name>STBI__SCAN_load</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__mad3sizes_valid</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"too large"</literal></expr></argument>, <argument><expr><literal type="string">"Image too large to decode"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>&gt;</operator> <name>h_max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>h_max</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>&gt;</operator> <name>v_max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v_max</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_h_max</name></name> <operator>=</operator> <name>h_max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_v_max</name></name> <operator>=</operator> <name>v_max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_mcu_w</name></name> <operator>=</operator> <name>h_max</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_mcu_h</name></name> <operator>=</operator> <name>v_max</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_mcu_x</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>+</operator> <name><name>z</name><operator>-&gt;</operator><name>img_mcu_w</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>z</name><operator>-&gt;</operator><name>img_mcu_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_mcu_y</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name> <operator>+</operator> <name><name>z</name><operator>-&gt;</operator><name>img_mcu_h</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>z</name><operator>-&gt;</operator><name>img_mcu_h</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>*</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>+</operator> <name>h_max</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>h_max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name> <operator>*</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>+</operator> <name>v_max</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>v_max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w2</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>img_mcu_x</name></name> <operator>*</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h2</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>img_mcu_y</name></name> <operator>*</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coeff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_coeff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>linebuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_data</name> <operator>=</operator> <call><name>stbi__malloc_mad2</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w2</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h2</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__free_jpeg_components</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_data</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>progressive</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coeff_w</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w2</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coeff_h</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h2</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_coeff</name> <operator>=</operator> <call><name>stbi__malloc_mad3</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w2</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_coeff</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__free_jpeg_components</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coeff</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_coeff</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__DNL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == 0xdc)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__SOI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == 0xd8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__EOI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == 0xd9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__SOF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == 0xc0 || (x) == 0xc1 || (x) == 0xc2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__SOS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == 0xda)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__SOF_progressive</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == 0xc2)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__decode_jpeg_header</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scan</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>jfif</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>app14_color_transform</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>marker</name></name> <operator>=</operator> <name>STBI__MARKER_none</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>stbi__get_marker</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__SOI</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"no SOI"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>==</operator> <name>STBI__SCAN_type</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>stbi__get_marker</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>stbi__SOF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__process_marker</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>stbi__get_marker</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>m</name> <operator>==</operator> <name>STBI__MARKER_none</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"no SOF"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>stbi__get_marker</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>progressive</name></name> <operator>=</operator> <call><name>stbi__SOF_progressive</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__process_frame_header</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__decode_jpeg_image</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>raw_data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>raw_coeff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>restart_interval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__decode_jpeg_header</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>STBI__SCAN_load</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>stbi__get_marker</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>stbi__EOI</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbi__SOS</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__process_scan_header</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__parse_entropy_coded_data</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>marker</name></name> <operator>==</operator> <name>STBI__MARKER_none</name></expr> )</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>marker</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>stbi__DNL</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Ld</name> <init>= <expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>NL</name> <init>= <expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>Ld</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad DNL len"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NL</name> <operator>!=</operator> <name><name>j</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad DNL height"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt JPEG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__process_marker</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>stbi__get_marker</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>progressive</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__jpeg_finish</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>stbi_uc</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>resample_row_func</name>)<parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in0</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__div4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((stbi_uc) ((x) &gt;&gt; 2))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>resample_row_1</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_near</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_far</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>in_far</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>in_near</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbi_uc</name><modifier>*</modifier></type> <name>stbi__resample_row_v_2</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_near</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_far</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>stbi__div4</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name><name>in_near</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>in_far</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbi_uc</name><modifier>*</modifier></type> <name>stbi__resample_row_h_2</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_near</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_far</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name>in_near</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__div4</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">3</literal><operator>*</operator><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__div4</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><name><name>input</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__div4</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><name><name>input</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__div4</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name><name>input</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>in_far</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__div16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((stbi_uc) ((x) &gt;&gt; 4))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi__resample_row_hv_2</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_near</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_far</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>t0</name></decl>,<decl><type ref="prev"/><name>t1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__div4</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name><name>in_near</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in_far</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name><name>in_near</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in_far</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__div4</name><argument_list>(<argument><expr><name>t1</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name><name>in_near</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>in_far</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__div16</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr> ]</index></name> <operator>=</operator> <call><name>stbi__div16</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t0</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__div4</name><argument_list>(<argument><expr><name>t1</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_SSE2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi__resample_row_hv_2_simd</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_near</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_far</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>t0</name></decl>,<decl><type ref="prev"/><name>t1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__div4</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name><name>in_near</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in_far</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name><name>in_near</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in_far</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>w</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>__m128i</name></type> <name>zero</name> <init>= <expr><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>farb</name> <init>= <expr><call><name>_mm_loadl_epi64</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>in_far</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>nearb</name> <init>= <expr><call><name>_mm_loadl_epi64</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>in_near</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>farw</name> <init>= <expr><call><name>_mm_unpacklo_epi8</name><argument_list>(<argument><expr><name>farb</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>nearw</name> <init>= <expr><call><name>_mm_unpacklo_epi8</name><argument_list>(<argument><expr><name>nearb</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>diff</name> <init>= <expr><call><name>_mm_sub_epi16</name><argument_list>(<argument><expr><name>farw</name></expr></argument>, <argument><expr><name>nearw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>nears</name> <init>= <expr><call><name>_mm_slli_epi16</name><argument_list>(<argument><expr><name>nearw</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>curr</name> <init>= <expr><call><name>_mm_add_epi16</name><argument_list>(<argument><expr><name>nears</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>__m128i</name></type> <name>prv0</name> <init>= <expr><call><name>_mm_slli_si128</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>nxt0</name> <init>= <expr><call><name>_mm_srli_si128</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>prev</name> <init>= <expr><call><name>_mm_insert_epi16</name><argument_list>(<argument><expr><name>prv0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>next</name> <init>= <expr><call><name>_mm_insert_epi16</name><argument_list>(<argument><expr><name>nxt0</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name><name>in_near</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>in_far</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>bias</name> <init>= <expr><call><name>_mm_set1_epi16</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>curs</name> <init>= <expr><call><name>_mm_slli_epi16</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>prvd</name> <init>= <expr><call><name>_mm_sub_epi16</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>nxtd</name> <init>= <expr><call><name>_mm_sub_epi16</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>curb</name> <init>= <expr><call><name>_mm_add_epi16</name><argument_list>(<argument><expr><name>curs</name></expr></argument>, <argument><expr><name>bias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>even</name> <init>= <expr><call><name>_mm_add_epi16</name><argument_list>(<argument><expr><name>prvd</name></expr></argument>, <argument><expr><name>curb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>odd</name> <init>= <expr><call><name>_mm_add_epi16</name><argument_list>(<argument><expr><name>nxtd</name></expr></argument>, <argument><expr><name>curb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>int0</name> <init>= <expr><call><name>_mm_unpacklo_epi16</name><argument_list>(<argument><expr><name>even</name></expr></argument>, <argument><expr><name>odd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>int1</name> <init>= <expr><call><name>_mm_unpackhi_epi16</name><argument_list>(<argument><expr><name>even</name></expr></argument>, <argument><expr><name>odd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>de0</name> <init>= <expr><call><name>_mm_srli_epi16</name><argument_list>(<argument><expr><name>int0</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>de1</name> <init>= <expr><call><name>_mm_srli_epi16</name><argument_list>(<argument><expr><name>int1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>outv</name> <init>= <expr><call><name>_mm_packus_epi16</name><argument_list>(<argument><expr><name>de0</name></expr></argument>, <argument><expr><name>de1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>out</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>outv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>farb</name> <init>= <expr><call><name>vld1_u8</name><argument_list>(<argument><expr><name>in_far</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>nearb</name> <init>= <expr><call><name>vld1_u8</name><argument_list>(<argument><expr><name>in_near</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>diff</name> <init>= <expr><call><name>vreinterpretq_s16_u16</name><argument_list>(<argument><expr><call><name>vsubl_u8</name><argument_list>(<argument><expr><name>farb</name></expr></argument>, <argument><expr><name>nearb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>nears</name> <init>= <expr><call><name>vreinterpretq_s16_u16</name><argument_list>(<argument><expr><call><name>vshll_n_u8</name><argument_list>(<argument><expr><name>nearb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>curr</name> <init>= <expr><call><name>vaddq_s16</name><argument_list>(<argument><expr><name>nears</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>prv0</name> <init>= <expr><call><name>vextq_s16</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>nxt0</name> <init>= <expr><call><name>vextq_s16</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>prev</name> <init>= <expr><call><name>vsetq_lane_s16</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>prv0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>next</name> <init>= <expr><call><name>vsetq_lane_s16</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name><name>in_near</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>in_far</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nxt0</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>curs</name> <init>= <expr><call><name>vshlq_n_s16</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>prvd</name> <init>= <expr><call><name>vsubq_s16</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>nxtd</name> <init>= <expr><call><name>vsubq_s16</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>even</name> <init>= <expr><call><name>vaddq_s16</name><argument_list>(<argument><expr><name>curs</name></expr></argument>, <argument><expr><name>prvd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>odd</name> <init>= <expr><call><name>vaddq_s16</name><argument_list>(<argument><expr><name>curs</name></expr></argument>, <argument><expr><name>nxtd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8x2_t</name></type> <name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vqrshrun_n_s16</name><argument_list>(<argument><expr><name>even</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vqrshrun_n_s16</name><argument_list>(<argument><expr><name>odd</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst2_u8</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name><name>in_near</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>in_far</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name><name>in_near</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>in_far</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__div16</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t0</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>i</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name><name>in_near</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>in_far</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__div16</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr> ]</index></name> <operator>=</operator> <call><name>stbi__div16</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t0</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__div4</name><argument_list>(<argument><expr><name>t1</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi__resample_row_generic</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_near</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in_far</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>in_far</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>hs</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>*</operator><name>hs</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>in_near</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbi__float2fixed</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((int) ((x) * 4096.0f + 0.5f)) &lt;&lt; 8)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__YCbCr_to_RGB_row</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>pcb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>pcr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_fixed</name> <init>= <expr><operator>(</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">19</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>g</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cr</name> <init>= <expr><name><name>pcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cb</name> <init>= <expr><name><name>pcb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>y_fixed</name> <operator>+</operator> <name>cr</name><operator>*</operator> <call><name>stbi__float2fixed</name><argument_list>(<argument><expr><literal type="number">1.40200f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>y_fixed</name> <operator>+</operator> <operator>(</operator><name>cr</name><operator>*</operator><operator>-</operator><call><name>stbi__float2fixed</name><argument_list>(<argument><expr><literal type="number">0.71414f</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>cb</name><operator>*</operator><operator>-</operator><call><name>stbi__float2fixed</name><argument_list>(<argument><expr><literal type="number">0.34414f</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>y_fixed</name> <operator>+</operator> <name>cb</name><operator>*</operator> <call><name>stbi__float2fixed</name><argument_list>(<argument><expr><literal type="number">1.77200f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>&gt;&gt;=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>&gt;&gt;=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>r</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>g</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>g</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>b</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator><name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator><name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_SSE2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__YCbCr_to_RGB_simd</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pcb</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pcr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>signflip</name> <init>= <expr><call><name>_mm_set1_epi8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>cr_const0</name> <init>= <expr><call><name>_mm_set1_epi16</name><argument_list>( <argument><expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator> <literal type="number">1.40200f</literal><operator>*</operator><literal type="number">4096.0f</literal><operator>+</operator><literal type="number">0.5f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>cr_const1</name> <init>= <expr><call><name>_mm_set1_epi16</name><argument_list>( <argument><expr><operator>-</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator> <literal type="number">0.71414f</literal><operator>*</operator><literal type="number">4096.0f</literal><operator>+</operator><literal type="number">0.5f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>cb_const0</name> <init>= <expr><call><name>_mm_set1_epi16</name><argument_list>( <argument><expr><operator>-</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator> <literal type="number">0.34414f</literal><operator>*</operator><literal type="number">4096.0f</literal><operator>+</operator><literal type="number">0.5f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>cb_const1</name> <init>= <expr><call><name>_mm_set1_epi16</name><argument_list>( <argument><expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator> <literal type="number">1.77200f</literal><operator>*</operator><literal type="number">4096.0f</literal><operator>+</operator><literal type="number">0.5f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>y_bias</name> <init>= <expr><call><name>_mm_set1_epi8</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>xw</name> <init>= <expr><call><name>_mm_set1_epi16</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init>;</init> <condition><expr><name>i</name><operator>+</operator><literal type="number">7</literal> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>y_bytes</name> <init>= <expr><call><name>_mm_loadl_epi64</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>y</name><operator>+</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>cr_bytes</name> <init>= <expr><call><name>_mm_loadl_epi64</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>pcr</name><operator>+</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>cb_bytes</name> <init>= <expr><call><name>_mm_loadl_epi64</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>pcb</name><operator>+</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>cr_biased</name> <init>= <expr><call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>cr_bytes</name></expr></argument>, <argument><expr><name>signflip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>__m128i</name></type> <name>cb_biased</name> <init>= <expr><call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>cb_bytes</name></expr></argument>, <argument><expr><name>signflip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>__m128i</name></type> <name>yw</name> <init>= <expr><call><name>_mm_unpacklo_epi8</name><argument_list>(<argument><expr><name>y_bias</name></expr></argument>, <argument><expr><name>y_bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>crw</name> <init>= <expr><call><name>_mm_unpacklo_epi8</name><argument_list>(<argument><expr><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cr_biased</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>cbw</name> <init>= <expr><call><name>_mm_unpacklo_epi8</name><argument_list>(<argument><expr><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cb_biased</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>yws</name> <init>= <expr><call><name>_mm_srli_epi16</name><argument_list>(<argument><expr><name>yw</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>cr0</name> <init>= <expr><call><name>_mm_mulhi_epi16</name><argument_list>(<argument><expr><name>cr_const0</name></expr></argument>, <argument><expr><name>crw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>cb0</name> <init>= <expr><call><name>_mm_mulhi_epi16</name><argument_list>(<argument><expr><name>cb_const0</name></expr></argument>, <argument><expr><name>cbw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>cb1</name> <init>= <expr><call><name>_mm_mulhi_epi16</name><argument_list>(<argument><expr><name>cbw</name></expr></argument>, <argument><expr><name>cb_const1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>cr1</name> <init>= <expr><call><name>_mm_mulhi_epi16</name><argument_list>(<argument><expr><name>crw</name></expr></argument>, <argument><expr><name>cr_const1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>rws</name> <init>= <expr><call><name>_mm_add_epi16</name><argument_list>(<argument><expr><name>cr0</name></expr></argument>, <argument><expr><name>yws</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>gwt</name> <init>= <expr><call><name>_mm_add_epi16</name><argument_list>(<argument><expr><name>cb0</name></expr></argument>, <argument><expr><name>yws</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>bws</name> <init>= <expr><call><name>_mm_add_epi16</name><argument_list>(<argument><expr><name>yws</name></expr></argument>, <argument><expr><name>cb1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>gws</name> <init>= <expr><call><name>_mm_add_epi16</name><argument_list>(<argument><expr><name>gwt</name></expr></argument>, <argument><expr><name>cr1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>rw</name> <init>= <expr><call><name>_mm_srai_epi16</name><argument_list>(<argument><expr><name>rws</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>bw</name> <init>= <expr><call><name>_mm_srai_epi16</name><argument_list>(<argument><expr><name>bws</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>gw</name> <init>= <expr><call><name>_mm_srai_epi16</name><argument_list>(<argument><expr><name>gws</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>brb</name> <init>= <expr><call><name>_mm_packus_epi16</name><argument_list>(<argument><expr><name>rw</name></expr></argument>, <argument><expr><name>bw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>gxb</name> <init>= <expr><call><name>_mm_packus_epi16</name><argument_list>(<argument><expr><name>gw</name></expr></argument>, <argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>t0</name> <init>= <expr><call><name>_mm_unpacklo_epi8</name><argument_list>(<argument><expr><name>brb</name></expr></argument>, <argument><expr><name>gxb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>t1</name> <init>= <expr><call><name>_mm_unpackhi_epi8</name><argument_list>(<argument><expr><name>brb</name></expr></argument>, <argument><expr><name>gxb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>o0</name> <init>= <expr><call><name>_mm_unpacklo_epi16</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>o1</name> <init>= <expr><call><name>_mm_unpackhi_epi16</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>out</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name>o0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>out</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>signflip</name> <init>= <expr><call><name>vdup_n_u8</name><argument_list>(<argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>cr_const0</name> <init>= <expr><call><name>vdupq_n_s16</name><argument_list>( <argument><expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator> <literal type="number">1.40200f</literal><operator>*</operator><literal type="number">4096.0f</literal><operator>+</operator><literal type="number">0.5f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>cr_const1</name> <init>= <expr><call><name>vdupq_n_s16</name><argument_list>( <argument><expr><operator>-</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator> <literal type="number">0.71414f</literal><operator>*</operator><literal type="number">4096.0f</literal><operator>+</operator><literal type="number">0.5f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>cb_const0</name> <init>= <expr><call><name>vdupq_n_s16</name><argument_list>( <argument><expr><operator>-</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator> <literal type="number">0.34414f</literal><operator>*</operator><literal type="number">4096.0f</literal><operator>+</operator><literal type="number">0.5f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>cb_const1</name> <init>= <expr><call><name>vdupq_n_s16</name><argument_list>( <argument><expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator> <literal type="number">1.77200f</literal><operator>*</operator><literal type="number">4096.0f</literal><operator>+</operator><literal type="number">0.5f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name><operator>+</operator><literal type="number">7</literal> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>y_bytes</name> <init>= <expr><call><name>vld1_u8</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>cr_bytes</name> <init>= <expr><call><name>vld1_u8</name><argument_list>(<argument><expr><name>pcr</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>cb_bytes</name> <init>= <expr><call><name>vld1_u8</name><argument_list>(<argument><expr><name>pcb</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8x8_t</name></type> <name>cr_biased</name> <init>= <expr><call><name>vreinterpret_s8_u8</name><argument_list>(<argument><expr><call><name>vsub_u8</name><argument_list>(<argument><expr><name>cr_bytes</name></expr></argument>, <argument><expr><name>signflip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8x8_t</name></type> <name>cb_biased</name> <init>= <expr><call><name>vreinterpret_s8_u8</name><argument_list>(<argument><expr><call><name>vsub_u8</name><argument_list>(<argument><expr><name>cb_bytes</name></expr></argument>, <argument><expr><name>signflip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>yws</name> <init>= <expr><call><name>vreinterpretq_s16_u16</name><argument_list>(<argument><expr><call><name>vshll_n_u8</name><argument_list>(<argument><expr><name>y_bytes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>crw</name> <init>= <expr><call><name>vshll_n_s8</name><argument_list>(<argument><expr><name>cr_biased</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>cbw</name> <init>= <expr><call><name>vshll_n_s8</name><argument_list>(<argument><expr><name>cb_biased</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>cr0</name> <init>= <expr><call><name>vqdmulhq_s16</name><argument_list>(<argument><expr><name>crw</name></expr></argument>, <argument><expr><name>cr_const0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>cb0</name> <init>= <expr><call><name>vqdmulhq_s16</name><argument_list>(<argument><expr><name>cbw</name></expr></argument>, <argument><expr><name>cb_const0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>cr1</name> <init>= <expr><call><name>vqdmulhq_s16</name><argument_list>(<argument><expr><name>crw</name></expr></argument>, <argument><expr><name>cr_const1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>cb1</name> <init>= <expr><call><name>vqdmulhq_s16</name><argument_list>(<argument><expr><name>cbw</name></expr></argument>, <argument><expr><name>cb_const1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>rws</name> <init>= <expr><call><name>vaddq_s16</name><argument_list>(<argument><expr><name>yws</name></expr></argument>, <argument><expr><name>cr0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>gws</name> <init>= <expr><call><name>vaddq_s16</name><argument_list>(<argument><expr><call><name>vaddq_s16</name><argument_list>(<argument><expr><name>yws</name></expr></argument>, <argument><expr><name>cb0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cr1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x8_t</name></type> <name>bws</name> <init>= <expr><call><name>vaddq_s16</name><argument_list>(<argument><expr><name>yws</name></expr></argument>, <argument><expr><name>cb1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8x4_t</name></type> <name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vqrshrun_n_s16</name><argument_list>(<argument><expr><name>rws</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vqrshrun_n_s16</name><argument_list>(<argument><expr><name>gws</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>vqrshrun_n_s16</name><argument_list>(<argument><expr><name>bws</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>vdup_n_u8</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst4_u8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_fixed</name> <init>= <expr><operator>(</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">19</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>g</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cr</name> <init>= <expr><name><name>pcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cb</name> <init>= <expr><name><name>pcb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>y_fixed</name> <operator>+</operator> <name>cr</name><operator>*</operator> <call><name>stbi__float2fixed</name><argument_list>(<argument><expr><literal type="number">1.40200f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>y_fixed</name> <operator>+</operator> <name>cr</name><operator>*</operator><operator>-</operator><call><name>stbi__float2fixed</name><argument_list>(<argument><expr><literal type="number">0.71414f</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><operator>(</operator><name>cb</name><operator>*</operator><operator>-</operator><call><name>stbi__float2fixed</name><argument_list>(<argument><expr><literal type="number">0.34414f</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>y_fixed</name> <operator>+</operator> <name>cb</name><operator>*</operator> <call><name>stbi__float2fixed</name><argument_list>(<argument><expr><literal type="number">1.77200f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>&gt;&gt;=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>&gt;&gt;=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>r</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>g</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>g</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>b</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator><name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator><name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__setup_jpeg</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>idct_block_kernel</name></name> <operator>=</operator> <name>stbi__idct_block</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>YCbCr_to_RGB_kernel</name></name> <operator>=</operator> <name>stbi__YCbCr_to_RGB_row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>resample_row_hv_2_kernel</name></name> <operator>=</operator> <name>stbi__resample_row_hv_2</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__sse2_available</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>idct_block_kernel</name></name> <operator>=</operator> <name>stbi__idct_simd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>YCbCr_to_RGB_kernel</name></name> <operator>=</operator> <name>stbi__YCbCr_to_RGB_simd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>resample_row_hv_2_kernel</name></name> <operator>=</operator> <name>stbi__resample_row_hv_2_simd</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>idct_block_kernel</name></name> <operator>=</operator> <name>stbi__idct_simd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>YCbCr_to_RGB_kernel</name></name> <operator>=</operator> <name>stbi__YCbCr_to_RGB_simd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>resample_row_hv_2_kernel</name></name> <operator>=</operator> <name>stbi__resample_row_hv_2_simd</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__cleanup_jpeg</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>stbi__free_jpeg_components</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>j</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>resample_row_func</name></type> <name>resample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>line0</name></decl>,<modifier>*</modifier><name>line1</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hs</name></decl>,<name>vs</name>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_lores</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ystep</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ypos</name></decl>;</decl_stmt> 

}</block></struct></type> <name>stbi__resample</name>;</typedef>

<function><type><specifier>static</specifier> <name>stbi_uc</name></type> <name>stbi__blinn_8x8</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>t</name> <init>= <expr><name>x</name><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>stbi_uc</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>t</name> <operator>+</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>load_jpeg_image</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>decode_n</name></decl>, <decl><type ref="prev"/><name>is_rgb</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>req_comp</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>req_comp</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad req_comp"</literal></expr></argument>, <argument><expr><literal type="string">"Internal error"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__decode_jpeg_image</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>stbi__cleanup_jpeg</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>req_comp</name></expr> ?</condition><then> <expr><name>req_comp</name></expr> </then><else>: <expr><ternary><condition><expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>is_rgb</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>rgb</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>app14_color_transform</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>z</name><operator>-&gt;</operator><name>jfif</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_rgb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>decode_n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>decode_n</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name><name>coutput</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__resample</name></type> <name><name>res_comp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>decode_n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi__resample</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>res_comp</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>linebuf</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>linebuf</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>stbi__cleanup_jpeg</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>hs</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>img_h_max</name></name> <operator>/</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>vs</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>img_v_max</name></name> <operator>/</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ystep</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>vs</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>w_lores</name></name> <operator>=</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>hs</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>r</name><operator>-&gt;</operator><name>hs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ypos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>line0</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>line1</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>hs</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>vs</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>resample</name></name> <operator>=</operator> <name>resample_row_1</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>hs</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>vs</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>resample</name></name> <operator>=</operator> <name>stbi__resample_row_v_2</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>hs</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>vs</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>resample</name></name> <operator>=</operator> <name>stbi__resample_row_h_2</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>hs</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>vs</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>resample</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>resample_row_hv_2_kernel</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>resample</name></name> <operator>=</operator> <name>stbi__resample_row_generic</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc_mad3</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>stbi__cleanup_jpeg</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>output</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>*</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>decode_n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi__resample</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>res_comp</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_bot</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>ystep</name></name> <operator>&gt;=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>vs</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coutput</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name><name>r</name><operator>-&gt;</operator><name>resample</name></name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>linebuf</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>y_bot</name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>line1</name></name></expr> </then><else>: <expr><name><name>r</name><operator>-&gt;</operator><name>line0</name></name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>y_bot</name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>line0</name></name></expr> </then><else>: <expr><name><name>r</name><operator>-&gt;</operator><name>line1</name></name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>w_lores</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>hs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>ystep</name></name> <operator>&gt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>vs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ystep</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>line0</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>ypos</name></name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>line1</name></name> <operator>+=</operator> <name><name>z</name><operator>-&gt;</operator><name>img_comp</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>w2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>coutput</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_rgb</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>coutput</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>coutput</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>z</name><operator>-&gt;</operator><name>YCbCr_to_RGB_kernel</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>coutput</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>coutput</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>app14_color_transform</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>m</name> <init>= <expr><name><name>coutput</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__blinn_8x8</name><argument_list>(<argument><expr><name><name>coutput</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__blinn_8x8</name><argument_list>(<argument><expr><name><name>coutput</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__blinn_8x8</name><argument_list>(<argument><expr><name><name>coutput</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>app14_color_transform</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name><name>z</name><operator>-&gt;</operator><name>YCbCr_to_RGB_kernel</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>coutput</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>coutput</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>m</name> <init>= <expr><name><name>coutput</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__blinn_8x8</name><argument_list>(<argument><expr><literal type="number">255</literal> <operator>-</operator> <name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__blinn_8x8</name><argument_list>(<argument><expr><literal type="number">255</literal> <operator>-</operator> <name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__blinn_8x8</name><argument_list>(<argument><expr><literal type="number">255</literal> <operator>-</operator> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name><name>z</name><operator>-&gt;</operator><name>YCbCr_to_RGB_kernel</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>coutput</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>coutput</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_rgb</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <call><name>stbi__compute_y</name><argument_list>(<argument><expr><name><name>coutput</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>coutput</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>coutput</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>out</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__compute_y</name><argument_list>(<argument><expr><name><name>coutput</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>coutput</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>coutput</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>app14_color_transform</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>m</name> <init>= <expr><name><name>coutput</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>r</name> <init>= <expr><call><name>stbi__blinn_8x8</name><argument_list>(<argument><expr><name><name>coutput</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>g</name> <init>= <expr><call><name>stbi__blinn_8x8</name><argument_list>(<argument><expr><name><name>coutput</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>b</name> <init>= <expr><call><name>stbi__blinn_8x8</name><argument_list>(<argument><expr><name><name>coutput</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__compute_y</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>app14_color_transform</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__blinn_8x8</name><argument_list>(<argument><expr><literal type="number">255</literal> <operator>-</operator> <name><name>coutput</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>coutput</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>coutput</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt> </block_content>}</block></for></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stbi__cleanup_jpeg</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_x</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_y</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <ternary><condition><expr><name><name>z</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>output</name></expr>;</return>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__jpeg_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__jpeg</name><modifier>*</modifier></type> <name>j</name> <init>= <expr><operator>(</operator><name>stbi__jpeg</name><operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stbi__jpeg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__setup_jpeg</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>load_jpeg_image</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__jpeg_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__jpeg</name><modifier>*</modifier></type> <name>j</name> <init>= <expr><operator>(</operator><name>stbi__jpeg</name><operator>*</operator><operator>)</operator><call><name>stbi__malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stbi__jpeg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__setup_jpeg</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>stbi__decode_jpeg_header</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>STBI__SCAN_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__jpeg_info_raw</name><parameter_list>(<parameter><decl><type><name>stbi__jpeg</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__decode_jpeg_header</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>STBI__SCAN_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <ternary><condition><expr><name><name>j</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__jpeg_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__jpeg</name><modifier>*</modifier></type> <name>j</name> <init>= <expr><operator>(</operator><name>stbi__jpeg</name><operator>*</operator><operator>)</operator> <operator>(</operator><call><name>stbi__malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stbi__jpeg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbi__jpeg_info_raw</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_ZLIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__ZFAST_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__ZFAST_MASK</name></cpp:macro> <cpp:value>((1 &lt;&lt; STBI__ZFAST_BITS) - 1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>stbi__uint16</name></type> <name><name>fast</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>STBI__ZFAST_BITS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name></type> <name><name>firstcode</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>maxcode</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name></type> <name><name>firstsymbol</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>size</name><index>[<expr><literal type="number">288</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name></type> <name><name>value</name><index>[<expr><literal type="number">288</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>stbi__zhuffman</name>;</typedef>

<function><type><name>stbi_inline</name> <specifier>static</specifier> <name>int</name></type> <name>stbi__bitreverse16</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xAAAA</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x5555</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xCCCC</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x3333</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xF0F0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x0F0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>stbi_inline</name> <specifier>static</specifier> <name>int</name></type> <name>stbi__bit_reverse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>bits</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__bitreverse16</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal><operator>-</operator><name>bits</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__zbuild_huffman</name><parameter_list>(<parameter><decl><type><name>stbi__zhuffman</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>sizelist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name><name>next_code</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sizes</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>fast</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>fast</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>sizes</name><index>[<expr><name><name>sizelist</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad sizes"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>next_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>firstcode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi__uint16</name><operator>)</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>firstsymbol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi__uint16</name><operator>)</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>+</operator> <name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>code</name><operator>-</operator><literal type="number">1</literal> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad codelengths"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>maxcode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>code</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal><operator>-</operator><name>i</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>code</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>maxcode</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>sizelist</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>next_code</name><index>[<expr><name>s</name></expr>]</index></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>firstcode</name><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <name><name>z</name><operator>-&gt;</operator><name>firstsymbol</name><index>[<expr><name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name></type> <name>fastv</name> <init>= <expr><operator>(</operator><name>stbi__uint16</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>s</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>|</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>size</name> <index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>)</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi__uint16</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name>STBI__ZFAST_BITS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name>stbi__bit_reverse</name><argument_list>(<argument><expr><name><name>next_code</name><index>[<expr><name>s</name></expr>]</index></name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>STBI__ZFAST_BITS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>fast</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>fastv</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>next_code</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>zbuffer</name></decl>, <modifier>*</modifier><name>zbuffer_end</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>code_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zout_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zout_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>z_expandable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__zhuffman</name></type> <name>z_length</name></decl>, <name>z_distance</name>;</decl_stmt>

}</block></struct></type> <name>stbi__zbuf</name>;</typedef>

<function><type><name>stbi_inline</name> <specifier>static</specifier> <name>stbi_uc</name></type> <name>stbi__zget8</name><parameter_list>(<parameter><decl><type><name>stbi__zbuf</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>zbuffer</name></name> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>zbuffer_end</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>*</operator><name><name>z</name><operator>-&gt;</operator><name>zbuffer</name></name><operator>++</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__fill_bits</name><parameter_list>(<parameter><decl><type><name>stbi__zbuf</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>num_bits</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>stbi__zget8</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>num_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><name>stbi_inline</name> <specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>stbi__zreceive</name><parameter_list>(<parameter><decl><type><name>stbi__zbuf</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__fill_bits</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&gt;&gt;=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><name>k</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__zhuffman_decode_slowpath</name><parameter_list>(<parameter><decl><type><name>stbi__zbuf</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>stbi__zhuffman</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>stbi__bit_reverse</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>code_buffer</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name><operator>=</operator><name>STBI__ZFAST_BITS</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>maxcode</name><index>[<expr><name>s</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal><operator>-</operator><name>s</name><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>firstcode</name><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <name><name>z</name><operator>-&gt;</operator><name>firstsymbol</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>b</name></expr>]</index></name> <operator>==</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&gt;&gt;=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>-=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name><name>z</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>stbi_inline</name> <specifier>static</specifier> <name>int</name></type> <name>stbi__zhuffman_decode</name><parameter_list>(<parameter><decl><type><name>stbi__zbuf</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>stbi__zhuffman</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__fill_bits</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>fast</name><index>[<expr><name><name>a</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&amp;</operator> <name>STBI__ZFAST_MASK</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>b</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&gt;&gt;=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>-=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name>b</name> <operator>&amp;</operator> <literal type="number">511</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>stbi__zhuffman_decode_slowpath</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__zexpand</name><parameter_list>(<parameter><decl><type><name>stbi__zbuf</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>old_limit</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>zout</name></name> <operator>=</operator> <name>zout</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>z</name><operator>-&gt;</operator><name>z_expandable</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"output buffer limit"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>zout</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>zout_start</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>old_limit</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>zout_end</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>zout_start</name></name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cur</name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>limit</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>STBI_REALLOC_SIZED</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>zout_start</name></name></expr></argument>, <argument><expr><name>old_limit</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>old_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>zout_start</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>zout</name></name> <operator>=</operator> <name>q</name> <operator>+</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>zout_end</name></name> <operator>=</operator> <name>q</name> <operator>+</operator> <name>limit</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>stbi__zlength_base</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">13</literal></expr>,

<expr><literal type="number">15</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><literal type="number">43</literal></expr>,<expr><literal type="number">51</literal></expr>,<expr><literal type="number">59</literal></expr>,

<expr><literal type="number">67</literal></expr>,<expr><literal type="number">83</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">115</literal></expr>,<expr><literal type="number">131</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="number">195</literal></expr>,<expr><literal type="number">227</literal></expr>,<expr><literal type="number">258</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>stbi__zlength_extra</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><init>=

<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>stbi__zdist_base</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">65</literal></expr>,<expr><literal type="number">97</literal></expr>,<expr><literal type="number">129</literal></expr>,<expr><literal type="number">193</literal></expr>,

<expr><literal type="number">257</literal></expr>,<expr><literal type="number">385</literal></expr>,<expr><literal type="number">513</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">1025</literal></expr>,<expr><literal type="number">1537</literal></expr>,<expr><literal type="number">2049</literal></expr>,<expr><literal type="number">3073</literal></expr>,<expr><literal type="number">4097</literal></expr>,<expr><literal type="number">6145</literal></expr>,<expr><literal type="number">8193</literal></expr>,<expr><literal type="number">12289</literal></expr>,<expr><literal type="number">16385</literal></expr>,<expr><literal type="number">24577</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>stbi__zdist_extra</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=

<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__parse_huffman_block</name><parameter_list>(<parameter><decl><type><name>stbi__zbuf</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zout</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>zout</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><call><name>stbi__zhuffman_decode</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z_length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad huffman code"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>zout</name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>zout_end</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__zexpand</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>zout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>zout</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>zout</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>zout</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>z</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>,<decl><type ref="prev"/><name>dist</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>zout</name></name> <operator>=</operator> <name>zout</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>z</name> <operator>-=</operator> <literal type="number">257</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>stbi__zlength_base</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stbi__zlength_extra</name><index>[<expr><name>z</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>stbi__zreceive</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>stbi__zlength_extra</name><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>stbi__zhuffman_decode</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z_distance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad huffman code"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <name><name>stbi__zdist_base</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stbi__zdist_extra</name><index>[<expr><name>z</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dist</name> <operator>+=</operator> <call><name>stbi__zreceive</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>stbi__zdist_extra</name><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>zout</name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>zout_start</name></name> <operator>&lt;</operator> <name>dist</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad dist"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>zout</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>zout_end</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__zexpand</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>zout</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>zout</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>zout</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>zout</name> <operator>-</operator> <name>dist</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>v</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content> <do>do<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>zout</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block> while <condition>(<expr><operator>--</operator><name>len</name></expr>)</condition>;</do> </block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content> <do>do<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>zout</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block> while <condition>(<expr><operator>--</operator><name>len</name></expr>)</condition>;</do> </block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__compute_huffman_codes</name><parameter_list>(<parameter><decl><type><name>stbi__zbuf</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>stbi_uc</name></type> <name><name>length_dezigzag</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__zhuffman</name></type> <name>z_codelength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>lencodes</name><index>[<expr><literal type="number">286</literal><operator>+</operator><literal type="number">32</literal><operator>+</operator><literal type="number">137</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>codelength_sizes</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hlit</name> <init>= <expr><call><name>stbi__zreceive</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">257</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hdist</name> <init>= <expr><call><name>stbi__zreceive</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hclen</name> <init>= <expr><call><name>stbi__zreceive</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ntot</name> <init>= <expr><name>hlit</name> <operator>+</operator> <name>hdist</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>codelength_sizes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>codelength_sizes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hclen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>stbi__zreceive</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>codelength_sizes</name><index>[<expr><name><name>length_dezigzag</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__zbuild_huffman</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z_codelength</name></expr></argument>, <argument><expr><name>codelength_sizes</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>ntot</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>stbi__zhuffman_decode</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z_codelength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">19</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad codelengths"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lencodes</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>fill</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>stbi__zreceive</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad codelengths"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fill</name> <operator>=</operator> <name><name>lencodes</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>stbi__zreceive</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>stbi__zreceive</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">11</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ntot</name> <operator>-</operator> <name>n</name> <operator>&lt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad codelengths"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lencodes</name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>ntot</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad codelengths"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__zbuild_huffman</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z_length</name></name></expr></argument>, <argument><expr><name>lencodes</name></expr></argument>, <argument><expr><name>hlit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__zbuild_huffman</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z_distance</name></name></expr></argument>, <argument><expr><name>lencodes</name><operator>+</operator><name>hlit</name></expr></argument>, <argument><expr><name>hdist</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__parse_uncompressed_block</name><parameter_list>(<parameter><decl><type><name>stbi__zbuf</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>,<decl><type ref="prev"/><name>nlen</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__zreceive</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>header</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>header</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>stbi__zget8</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>!=</operator> <operator>(</operator><name>len</name> <operator>^</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"zlib corrupt"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>zbuffer</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>zbuffer_end</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"read past buffer"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>zout</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>zout_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__zexpand</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>zout</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>zout</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>zbuffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>zbuffer</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>zout</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__parse_zlib_header</name><parameter_list>(<parameter><decl><type><name>stbi__zbuf</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmf</name> <init>= <expr><call><name>stbi__zget8</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cm</name> <init>= <expr><name>cmf</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flg</name> <init>= <expr><call><name>stbi__zget8</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmf</name><operator>*</operator><literal type="number">256</literal><operator>+</operator><name>flg</name><operator>)</operator> <operator>%</operator> <literal type="number">31</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad zlib header"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>flg</name> <operator>&amp;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"no preset dict"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>cm</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad compression"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>stbi_uc</name></type> <name><name>stbi__zdefault_length</name><index>[<expr><literal type="number">288</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,

<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,

<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,

<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,

<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>stbi_uc</name></type> <name><name>stbi__zdefault_distance</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__parse_zlib</name><parameter_list>(<parameter><decl><type><name>stbi__zbuf</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parse_header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>final</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>parse_header</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__parse_zlib_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>code_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>final</name> <operator>=</operator> <call><name>stbi__zreceive</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>stbi__zreceive</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__parse_uncompressed_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__zbuild_huffman</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z_length</name></name></expr></argument> , <argument><expr><name>stbi__zdefault_length</name></expr></argument> , <argument><expr><literal type="number">288</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__zbuild_huffman</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z_distance</name></name></expr></argument>, <argument><expr><name>stbi__zdefault_distance</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__compute_huffman_codes</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__parse_huffman_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name>final</name></expr>)</condition>;</do>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__do_zlib</name><parameter_list>(<parameter><decl><type><name>stbi__zbuf</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>olen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parse_header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>zout_start</name></name> <operator>=</operator> <name>obuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>zout</name></name> <operator>=</operator> <name>obuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>zout_end</name></name> <operator>=</operator> <name>obuf</name> <operator>+</operator> <name>olen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>z_expandable</name></name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__parse_zlib</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>parse_header</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>char</name> <modifier>*</modifier></type><name>stbi_zlib_decode_malloc_guesssize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initial_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__zbuf</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>(<argument><expr><name>initial_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>zbuffer</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>zbuffer_end</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>buffer</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__do_zlib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>initial_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>outlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>zout</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>zout_start</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>a</name><operator>.</operator><name>zout_start</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>zout_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>char</name> <modifier>*</modifier></type><name>stbi_zlib_decode_malloc</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbi_zlib_decode_malloc_guesssize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>char</name> <modifier>*</modifier></type><name>stbi_zlib_decode_malloc_guesssize_headerflag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initial_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parse_header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__zbuf</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>(<argument><expr><name>initial_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>zbuffer</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>zbuffer_end</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>buffer</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__do_zlib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>initial_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>parse_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>outlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>zout</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>zout_start</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>a</name><operator>.</operator><name>zout_start</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>zout_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_zlib_decode_buffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>obuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>olen</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ibuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ilen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__zbuf</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>zbuffer</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>ibuffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>zbuffer_end</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>ibuffer</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__do_zlib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>obuffer</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>zout</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>zout_start</name></name><operator>)</operator></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>char</name> <modifier>*</modifier></type><name>stbi_zlib_decode_noheader_malloc</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__zbuf</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>(<argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>zbuffer</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>zbuffer_end</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>buffer</name><operator>+</operator><name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__do_zlib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>outlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>zout</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>zout_start</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>a</name><operator>.</operator><name>zout_start</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>zout_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_zlib_decode_noheader_buffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>obuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>olen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ibuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ilen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__zbuf</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>zbuffer</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>ibuffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>zbuffer_end</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>ibuffer</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__do_zlib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>obuffer</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>zout</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>zout_start</name></name><operator>)</operator></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>type</name></decl>;</decl_stmt>

}</block></struct></type> <name>stbi__pngchunk</name>;</typedef>

<function><type><specifier>static</specifier> <name>stbi__pngchunk</name></type> <name>stbi__get_chunk_header</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__pngchunk</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__check_png_header</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>stbi_uc</name></type> <name><name>png_sig</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">137</literal></expr>,<expr><literal type="number">80</literal></expr>,<expr><literal type="number">78</literal></expr>,<expr><literal type="number">71</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">10</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>png_sig</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad png sig"</literal></expr></argument>,<argument><expr><literal type="string">"Not a PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>idata</name></decl>, <modifier>*</modifier><name>expanded</name>, <modifier>*</modifier><name>out</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

}</block></struct></type> <name>stbi__png</name>;</typedef>

<enum>enum <block>{

<decl><name>STBI__F_none</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>STBI__F_sub</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>STBI__F_up</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>STBI__F_avg</name><init>=<expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>STBI__F_paeth</name><init>=<expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>STBI__F_avg_first</name></decl>,

<decl><name>STBI__F_paeth_first</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>stbi_uc</name></type> <name><name>first_row_filter</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><name>STBI__F_none</name></expr>,

<expr><name>STBI__F_sub</name></expr>,

<expr><name>STBI__F_none</name></expr>,

<expr><name>STBI__F_avg_first</name></expr>,

<expr><name>STBI__F_paeth_first</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__paeth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>a</name> <operator>+</operator> <name>b</name> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pa</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>p</name><operator>-</operator><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pb</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>p</name><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pc</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>p</name><operator>-</operator><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pa</name> <operator>&lt;=</operator> <name>pb</name> <operator>&amp;&amp;</operator> <name>pa</name> <operator>&lt;=</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pb</name> <operator>&lt;=</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>stbi_uc</name></type> <name><name>stbi__depth_scale_table</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__create_png_image_raw</name><parameter_list>(<parameter><decl><type><name>stbi__png</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>, <parameter><decl><type><name>stbi__uint32</name></type> <name>raw_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_n</name></decl></parameter>, <parameter><decl><type><name>stbi__uint32</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>stbi__uint32</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>depth</name> <operator>==</operator> <literal type="number">16</literal></expr>?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>stride</name> <init>= <expr><name>x</name><operator>*</operator><name>out_n</name><operator>*</operator><name>bytes</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>img_len</name></decl>, <decl><type ref="prev"/><name>img_width_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>img_n</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>output_bytes</name> <init>= <expr><name>out_n</name><operator>*</operator><name>bytes</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filter_bytes</name> <init>= <expr><name>img_n</name><operator>*</operator><name>bytes</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>out_n</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>||</operator> <name>out_n</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc_mad3</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>output_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__mad3sizes_valid</name><argument_list>(<argument><expr><name>img_n</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"too large"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>img_width_bytes</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>img_n</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>depth</name><operator>)</operator> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>img_len</name> <operator>=</operator> <operator>(</operator><name>img_width_bytes</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>raw_len</name> <operator>&lt;</operator> <name>img_len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"not enough pixels"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>y</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>stride</name><operator>*</operator><name>j</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>prior</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filter</name> <init>= <expr><operator>*</operator><name>raw</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"invalid filter"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>img_width_bytes</name> <operator>&lt;=</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>x</name><operator>*</operator><name>out_n</name> <operator>-</operator> <name>img_width_bytes</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>filter_bytes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>img_width_bytes</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prior</name> <operator>=</operator> <name>cur</name> <operator>-</operator> <name>stride</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>first_row_filter</name><index>[<expr><name>filter</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>filter_bytes</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name>filter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>STBI__F_none</name></expr> :</case> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>STBI__F_sub</name></expr> :</case> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>STBI__F_up</name></expr> :</case> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>prior</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>STBI__F_avg</name></expr> :</case> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>prior</name><index>[<expr><name>k</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>STBI__F_paeth</name></expr> :</case> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <call><name>stbi__paeth</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>prior</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>STBI__F_avg_first</name></expr> :</case> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>STBI__F_paeth_first</name></expr>:</case> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>img_n</name> <operator>!=</operator> <name>out_n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur</name><index>[<expr><name>img_n</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>raw</name> <operator>+=</operator> <name>img_n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>out_n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prior</name> <operator>+=</operator> <name>out_n</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>img_n</name> <operator>!=</operator> <name>out_n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><index>[<expr><name>filter_bytes</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>cur</name><index>[<expr><name>filter_bytes</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>raw</name> <operator>+=</operator> <name>filter_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>output_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prior</name> <operator>+=</operator> <name>output_bytes</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>raw</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prior</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name>img_n</name> <operator>==</operator> <name>out_n</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nk</name> <init>= <expr><operator>(</operator><name>width</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>filter_bytes</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__CASE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case f: for (k=0; k &lt; nk; ++k)</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>filter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>STBI__F_none</name></expr>:</case> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>raw</name></expr></argument>, <argument><expr><name>nk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument>STBI__F_sub</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>cur</name><index>[<expr><name>k</name><operator>-</operator><name>filter_bytes</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument>STBI__F_up</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>prior</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument>STBI__F_avg</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>prior</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>cur</name><index>[<expr><name>k</name><operator>-</operator><name>filter_bytes</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument>STBI__F_paeth</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <call><name>stbi__paeth</name><argument_list>(<argument><expr><name><name>cur</name><index>[<expr><name>k</name><operator>-</operator><name>filter_bytes</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>prior</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>prior</name><index>[<expr><name>k</name><operator>-</operator><name>filter_bytes</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument>STBI__F_avg_first</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>cur</name><index>[<expr><name>k</name><operator>-</operator><name>filter_bytes</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument>STBI__F_paeth_first</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <call><name>stbi__paeth</name><argument_list>(<argument><expr><name><name>cur</name><index>[<expr><name>k</name><operator>-</operator><name>filter_bytes</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STBI__CASE</name></cpp:undef>

<expr_stmt><expr><name>raw</name> <operator>+=</operator> <name>nk</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>img_n</name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <name>out_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__CASE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case f: for (i=x-1; i &gt;= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k &lt; filter_bytes; ++k)</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>filter</name></expr>)</condition> <block>{<block_content>

<macro><name>STBI__CASE</name><argument_list>(<argument>STBI__F_none</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument>STBI__F_sub</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>cur</name><index>[<expr><name>k</name><operator>-</operator> <name>output_bytes</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument>STBI__F_up</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>prior</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument>STBI__F_avg</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>prior</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>cur</name><index>[<expr><name>k</name><operator>-</operator> <name>output_bytes</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument>STBI__F_paeth</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <call><name>stbi__paeth</name><argument_list>(<argument><expr><name><name>cur</name><index>[<expr><name>k</name><operator>-</operator> <name>output_bytes</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>prior</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>prior</name><index>[<expr><name>k</name><operator>-</operator> <name>output_bytes</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument>STBI__F_avg_first</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>cur</name><index>[<expr><name>k</name><operator>-</operator> <name>output_bytes</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

<macro><name>STBI__CASE</name><argument_list>(<argument>STBI__F_paeth_first</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name><name>cur</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>raw</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <call><name>stbi__paeth</name><argument_list>(<argument><expr><name><name>cur</name><index>[<expr><name>k</name><operator>-</operator> <name>output_bytes</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> <break>break;</break>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STBI__CASE</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>stride</name><operator>*</operator><name>j</name></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator><expr><name>cur</name><operator>+=</operator><name>output_bytes</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><index>[<expr><name>filter_bytes</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>y</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>stride</name><operator>*</operator><name>j</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>stride</name><operator>*</operator><name>j</name> <operator>+</operator> <name>x</name><operator>*</operator><name>out_n</name> <operator>-</operator> <name>img_width_bytes</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>scale</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>color</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>stbi__depth_scale_table</name><index>[<expr><name>depth</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><name>x</name><operator>*</operator><name>img_n</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>-=</operator><literal type="number">2</literal></expr><operator>,</operator> <expr><operator>++</operator><name>in</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><name>x</name><operator>*</operator><name>img_n</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>-=</operator><literal type="number">4</literal></expr><operator>,</operator> <expr><operator>++</operator><name>in</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><name>x</name><operator>*</operator><name>img_n</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>-=</operator><literal type="number">8</literal></expr><operator>,</operator> <expr><operator>++</operator><name>in</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cur</name><operator>++</operator> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>img_n</name> <operator>!=</operator> <name>out_n</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>stride</name><operator>*</operator><name>j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>img_n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>q</name><operator>=</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>q</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>q</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><index>[<expr><name>q</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><index>[<expr><name>q</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cur</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>img_n</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>q</name><operator>=</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>q</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>q</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><index>[<expr><name>q</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><index>[<expr><name>q</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cur</name><index>[<expr><name>q</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><index>[<expr><name>q</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cur</name><index>[<expr><name>q</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><index>[<expr><name>q</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cur</name><index>[<expr><name>q</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>cur16</name> <init>= <expr><operator>(</operator><name>stbi__uint16</name><operator>*</operator><operator>)</operator><name>cur</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name><operator>*</operator><name>y</name><operator>*</operator><name>out_n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator><expr><name>cur16</name><operator>++</operator></expr><operator>,</operator><expr><name>cur</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cur16</name> <operator>=</operator> <operator>(</operator><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__create_png_image</name><parameter_list>(<parameter><decl><type><name>stbi__png</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>image_data</name></decl></parameter>, <parameter><decl><type><name>stbi__uint32</name></type> <name>image_data_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interlaced</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>depth</name> <operator>==</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_bytes</name> <init>= <expr><name>out_n</name> <operator>*</operator> <name>bytes</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>final</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interlaced</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__create_png_image_raw</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>image_data</name></expr></argument>, <argument><expr><name>image_data_len</name></expr></argument>, <argument><expr><name>out_n</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>final</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc_mad3</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>, <argument><expr><name>out_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>xorig</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>yorig</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>xspc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>yspc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>-</operator> <name><name>xorig</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name><name>xspc</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>xspc</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_y</name></name> <operator>-</operator> <name><name>yorig</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name><name>yspc</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>yspc</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name>y</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>img_len</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>depth</name><operator>)</operator> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__create_png_image_raw</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>image_data</name></expr></argument>, <argument><expr><name>image_data_len</name></expr></argument>, <argument><expr><name>out_n</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>final</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>y</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>out_y</name> <init>= <expr><name>j</name><operator>*</operator><name><name>yspc</name><index>[<expr><name>p</name></expr>]</index></name><operator>+</operator><name><name>yorig</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_x</name> <init>= <expr><name>i</name><operator>*</operator><name><name>xspc</name><index>[<expr><name>p</name></expr>]</index></name><operator>+</operator><name><name>xorig</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>final</name> <operator>+</operator> <name>out_y</name><operator>*</operator><name><name>a</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name><operator>*</operator><name>out_bytes</name> <operator>+</operator> <name>out_x</name><operator>*</operator><name>out_bytes</name></expr></argument>,

<argument><expr><name><name>a</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <operator>(</operator><name>j</name><operator>*</operator><name>x</name><operator>+</operator><name>i</name><operator>)</operator><operator>*</operator><name>out_bytes</name></expr></argument>, <argument><expr><name>out_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>image_data</name> <operator>+=</operator> <name>img_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>image_data_len</name> <operator>-=</operator> <name>img_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>final</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__compute_transparency</name><parameter_list>(<parameter><decl><type><name>stbi__png</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name></type> <name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pixel_count</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>out_n</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>out_n</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixel_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixel_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__compute_transparency16</name><parameter_list>(<parameter><decl><type><name>stbi__png</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>stbi__uint16</name></type> <name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pixel_count</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>stbi__uint16</name><operator>*</operator><operator>)</operator> <name><name>z</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>out_n</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>out_n</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixel_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">65535</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixel_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__expand_png_palette</name><parameter_list>(<parameter><decl><type><name>stbi__png</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>palette</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pal_img_n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pixel_count</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>*</operator> <name><name>a</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp_out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>orig</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc_mad2</name><argument_list>(<argument><expr><name>pixel_count</name></expr></argument>, <argument><expr><name>pal_img_n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>temp_out</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pal_img_n</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixel_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>orig</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>n</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixel_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>orig</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>n</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>temp_out</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__unpremultiply_on_load</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__de_iphone_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_set_unpremultiply_on_load</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag_true_if_should_unpremultiply</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>stbi__unpremultiply_on_load</name> <operator>=</operator> <name>flag_true_if_should_unpremultiply</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>void</name></type> <name>stbi_convert_iphone_png_to_rgb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag_true_if_should_convert</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>stbi__de_iphone_flag</name> <operator>=</operator> <name>flag_true_if_should_convert</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__de_iphone</name><parameter_list>(<parameter><decl><type><name>stbi__png</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pixel_count</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixel_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>t</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stbi__unpremultiply_on_load</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixel_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>a</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>t</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>half</name> <init>= <expr><name>a</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <name>half</name><operator>)</operator> <operator>/</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <name>half</name><operator>)</operator> <operator>/</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>t</name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <name>half</name><operator>)</operator> <operator>/</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixel_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>t</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__PNG_TYPE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned) (a) &lt;&lt; 24) + ((unsigned) (b) &lt;&lt; 16) + ((unsigned) (c) &lt;&lt; 8) + (unsigned) (d))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__parse_png_file</name><parameter_list>(<parameter><decl><type><name>stbi__png</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scan</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>palette</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>pal_img_n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>has_trans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name></type> <name><name>tc16</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>ioff</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idata_limit</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>pal_len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>interlace</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>color</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_iphone</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>expanded</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>idata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__check_png_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>==</operator> <name>STBI__SCAN_type</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi__pngchunk</name></type> <name>c</name> <init>= <expr><call><name>stbi__get_chunk_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><call><name>STBI__PNG_TYPE</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'g'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>is_iphone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>STBI__PNG_TYPE</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>comp</name></decl>,<decl><type ref="prev"/><name>filter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"multiple IHDR"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad IHDR len"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>=</operator> <call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"too large"</literal></expr></argument>,<argument><expr><literal type="string">"Very large image (corrupt?)"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name> <operator>=</operator> <call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"too large"</literal></expr></argument>,<argument><expr><literal type="string">"Very large image (corrupt?)"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"1/2/4/8/16-bit only"</literal></expr></argument>,<argument><expr><literal type="string">"PNG not supported: 1/2/4/8/16-bit only"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>color</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad ctype"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad ctype"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pal_img_n</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if> <if type="elseif">else if <condition>(<expr><name>color</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad ctype"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>comp</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad comp method"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>filter</name><operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>filter</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad filter method"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>interlace</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>interlace</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad interlace method"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"0-pixel image"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pal_img_n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>color</name> <operator>&amp;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>color</name> <operator>&amp;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"too large"</literal></expr></argument>, <argument><expr><literal type="string">"Image too large to decode"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>==</operator> <name>STBI__SCAN_header</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>/</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"too large"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><call><name>STBI__PNG_TYPE</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"first not IHDR"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">256</literal><operator>*</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"invalid PLTE"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pal_len</name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>length</name></name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pal_len</name> <operator>*</operator> <literal type="number">3</literal> <operator>!=</operator> <name><name>c</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"invalid PLTE"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pal_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>palette</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>palette</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>palette</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>palette</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block>

<case>case <expr><call><name>STBI__PNG_TYPE</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"first not IHDR"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>idata</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"tRNS after IDAT"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pal_img_n</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>==</operator> <name>STBI__SCAN_header</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pal_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"tRNS before PLTE"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>pal_len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad tRNS len"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pal_img_n</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>palette</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"tRNS with alpha"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <operator>(</operator><name>stbi__uint32</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name><operator>*</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"bad tRNS len"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>has_trans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tc16</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi__uint16</name><operator>)</operator><call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator><operator>(</operator><call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator> <operator>*</operator> <name><name>stbi__depth_scale_table</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>depth</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><call><name>STBI__PNG_TYPE</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"first not IHDR"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pal_img_n</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pal_len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"no PLTE"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>==</operator> <name>STBI__SCAN_header</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>=</operator> <name>pal_img_n</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ioff</name> <operator>+</operator> <name><name>c</name><operator>.</operator><name>length</name></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>ioff</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ioff</name> <operator>+</operator> <name><name>c</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>idata_limit</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>idata_limit_old</name> <init>= <expr><name>idata_limit</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idata_limit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>idata_limit</name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">4096</literal></expr> ?</condition><then> <expr><name><name>c</name><operator>.</operator><name>length</name></name></expr> </then><else>: <expr><literal type="number">4096</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>ioff</name> <operator>+</operator> <name><name>c</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>idata_limit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idata_limit</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>idata_limit_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>STBI_REALLOC_SIZED</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>idata</name></name></expr></argument>, <argument><expr><name>idata_limit_old</name></expr></argument>, <argument><expr><name>idata_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>idata</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__getn</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>idata</name></name><operator>+</operator><name>ioff</name></expr></argument>,<argument><expr><name><name>c</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"outofdata"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ioff</name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><call><name>STBI__PNG_TYPE</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>raw_len</name></decl>, <decl><type ref="prev"/><name>bpl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"first not IHDR"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>!=</operator> <name>STBI__SCAN_load</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>idata</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"no IDAT"</literal></expr></argument>,<argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bpl</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>*</operator> <name><name>z</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>raw_len</name> <operator>=</operator> <name>bpl</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>expanded</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi_zlib_decode_malloc_guesssize_headerflag</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>z</name><operator>-&gt;</operator><name>idata</name></name></expr></argument>, <argument><expr><name>ioff</name></expr></argument>, <argument><expr><name>raw_len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>raw_len</name></expr></argument>, <argument><expr><operator>!</operator><name>is_iphone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>expanded</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>idata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>idata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req_comp</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>req_comp</name> <operator>!=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>pal_img_n</name><operator>)</operator> <operator>||</operator> <name>has_trans</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__create_png_image</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>expanded</name></name></expr></argument>, <argument><expr><name>raw_len</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>interlace</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_trans</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__compute_transparency16</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>tc16</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__compute_transparency</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_iphone</name> <operator>&amp;&amp;</operator> <name>stbi__de_iphone_flag</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__de_iphone</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pal_img_n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>=</operator> <name>pal_img_n</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name> <operator>=</operator> <name>pal_img_n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name> <operator>=</operator> <name>req_comp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__expand_png_palette</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>palette</name></expr></argument>, <argument><expr><name>pal_len</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>has_trans</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>expanded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>expanded</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"first not IHDR"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt PNG"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_FAILURE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>invalid_chunk</name><index>[]</index></name> <init>= <expr><literal type="string">"XXXX PNG chunk not known"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>invalid_chunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>type</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>invalid_chunk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>type</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>invalid_chunk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>type</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>invalid_chunk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>type</name></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><name>invalid_chunk</name></expr></argument>, <argument><expr><literal type="string">"PNG not supported: unknown PNG chunk type"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__do_png</name><parameter_list>(<parameter><decl><type><name>stbi__png</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req_comp</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>req_comp</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad req_comp"</literal></expr></argument>, <argument><expr><literal type="string">"Internal error"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__parse_png_file</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>STBI__SCAN_load</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>bits_per_channel</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>bits_per_channel</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>&amp;&amp;</operator> <name>req_comp</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>bits_per_channel</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbi__convert_format</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>result</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbi__convert_format16</name><argument_list>(<argument><expr><operator>(</operator><name>stbi__uint16</name> <operator>*</operator><operator>)</operator> <name>result</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_out_n</name></name> <operator>=</operator> <name>req_comp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>expanded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>expanded</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>idata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>idata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__png_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__png</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__do_png</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__png_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>stbi__check_png_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__png_info_raw</name><parameter_list>(<parameter><decl><type><name>stbi__png</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__parse_png_file</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>STBI__SCAN_header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__png_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__png</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__png_info_raw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__png_is16</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__png</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__png_info_raw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>depth</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_BMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__bmp_test_raw</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'B'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'M'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>sz</name> <operator>==</operator> <literal type="number">12</literal> <operator>||</operator> <name>sz</name> <operator>==</operator> <literal type="number">40</literal> <operator>||</operator> <name>sz</name> <operator>==</operator> <literal type="number">56</literal> <operator>||</operator> <name>sz</name> <operator>==</operator> <literal type="number">108</literal> <operator>||</operator> <name>sz</name> <operator>==</operator> <literal type="number">124</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__bmp_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>stbi__bmp_test_raw</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__high_bit</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;=</operator> <literal type="number">0x00100</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;=</operator> <literal type="number">0x00010</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;=</operator> <literal type="number">0x00004</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;=</operator> <literal type="number">0x00002</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__bitcount</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>+</operator> <operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f0f0f0f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>+</operator> <operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>+</operator> <operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 

<return>return <expr><name>a</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__shiftsigned</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name><name>mul_table</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x11</literal></expr>,

<expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x01</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name><name>shift_table</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>&lt;&lt;=</operator> <operator>-</operator><name>shift</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>v</name> <operator>&lt;</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <operator>(</operator><literal type="number">8</literal><operator>-</operator><name>bits</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>bits</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bits</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator> <name>v</name> <operator>*</operator> <name><name>mul_table</name><index>[<expr><name>bits</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>shift_table</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>bpp</name></decl>, <name>offset</name>, <name>hsz</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mr</name></decl>,<name>mg</name>,<name>mb</name>,<name>ma</name>, <name>all_a</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_read</name></decl>;</decl_stmt>

}</block></struct></type> <name>stbi__bmp_data</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__bmp_parse_header</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>stbi__bmp_data</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hsz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'B'</literal> <operator>||</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'M'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"not BMP"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt BMP"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>hsz</name></name> <operator>=</operator> <name>hsz</name> <operator>=</operator> <call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mr</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>mg</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>mb</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>ma</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>extra_read</name></name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hsz</name> <operator>!=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>hsz</name> <operator>!=</operator> <literal type="number">40</literal> <operator>&amp;&amp;</operator> <name>hsz</name> <operator>!=</operator> <literal type="number">56</literal> <operator>&amp;&amp;</operator> <name>hsz</name> <operator>!=</operator> <literal type="number">108</literal> <operator>&amp;&amp;</operator> <name>hsz</name> <operator>!=</operator> <literal type="number">124</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"unknown BMP"</literal></expr></argument>, <argument><expr><literal type="string">"BMP type not supported: unknown"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hsz</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>=</operator> <call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name> <operator>=</operator> <call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>=</operator> <call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name> <operator>=</operator> <call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad BMP"</literal></expr></argument>, <argument><expr><literal type="string">"bad BMP"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hsz</name> <operator>!=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>compress</name> <init>= <expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>compress</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>compress</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"BMP RLE"</literal></expr></argument>, <argument><expr><literal type="string">"BMP type not supported: RLE"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>hsz</name> <operator>==</operator> <literal type="number">40</literal> <operator>||</operator> <name>hsz</name> <operator>==</operator> <literal type="number">56</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hsz</name> <operator>==</operator> <literal type="number">56</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compress</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mr</name></name> <operator>=</operator> <literal type="number">0xffu</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mg</name></name> <operator>=</operator> <literal type="number">0xffu</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mb</name></name> <operator>=</operator> <literal type="number">0xffu</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ma</name></name> <operator>=</operator> <literal type="number">0xffu</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>all_a</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mr</name></name> <operator>=</operator> <literal type="number">31u</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mg</name></name> <operator>=</operator> <literal type="number">31u</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mb</name></name> <operator>=</operator> <literal type="number">31u</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>compress</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mr</name></name> <operator>=</operator> <call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mg</name></name> <operator>=</operator> <call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mb</name></name> <operator>=</operator> <call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>extra_read</name></name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>mr</name></name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>mg</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>mg</name></name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>mb</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad BMP"</literal></expr></argument>, <argument><expr><literal type="string">"bad BMP"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad BMP"</literal></expr></argument>, <argument><expr><literal type="string">"bad BMP"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hsz</name> <operator>!=</operator> <literal type="number">108</literal> <operator>&amp;&amp;</operator> <name>hsz</name> <operator>!=</operator> <literal type="number">124</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad BMP"</literal></expr></argument>, <argument><expr><literal type="string">"bad BMP"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mr</name></name> <operator>=</operator> <call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mg</name></name> <operator>=</operator> <call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mb</name></name> <operator>=</operator> <call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ma</name></name> <operator>=</operator> <call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<if_stmt><if>if <condition>(<expr><name>hsz</name> <operator>==</operator> <literal type="number">124</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__bmp_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>mg</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>mb</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ma</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>all_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>psize</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flip_vertically</name></decl>, <decl><type ref="prev"/><name>pad</name></decl>, <decl><type ref="prev"/><name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__bmp_data</name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>all_a</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__bmp_parse_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>flip_vertically</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mr</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>mr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mg</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>mg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>mb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ma</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>ma</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>all_a</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>all_a</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>hsz</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psize</name> <operator>=</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>offset</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>extra_read</name></name> <operator>-</operator> <literal type="number">24</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psize</name> <operator>=</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>offset</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>extra_read</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>hsz</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>psize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>offset</name></name> <operator>==</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>img_buffer</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_start</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name>ma</name> <operator>==</operator> <literal type="number">0xff000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>=</operator> <ternary><condition><expr><name>ma</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>&amp;&amp;</operator> <name>req_comp</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>target</name> <operator>=</operator> <name>req_comp</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__mad3sizes_valid</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"too large"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt BMP"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc_mad3</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psize</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>psize</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt BMP"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>psize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>hsz</name></name> <operator>!=</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>offset</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>extra_read</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>hsz</name></name> <operator>-</operator> <name>psize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>info</name><operator>.</operator><name>hsz</name></name> <operator>==</operator> <literal type="number">12</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content> <expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad bpp"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt BMP"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>width</name><operator>)</operator><operator>&amp;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bit_offset</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><operator>(</operator><name>v</name><operator>&gt;&gt;</operator><name>bit_offset</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>color</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>color</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>color</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>--</operator><name>bit_offset</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit_offset</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>v2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v2</name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>v2</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rshift</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>gshift</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>bshift</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ashift</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>rcount</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>gcount</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>bcount</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>acount</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>easy</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>offset</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>extra_read</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>hsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>width</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>width</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>easy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mb</name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name>mg</name> <operator>==</operator> <literal type="number">0xff00</literal> <operator>&amp;&amp;</operator> <name>mr</name> <operator>==</operator> <literal type="number">0x00ff0000</literal> <operator>&amp;&amp;</operator> <name>ma</name> <operator>==</operator> <literal type="number">0xff000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>easy</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>easy</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mr</name> <operator>||</operator> <operator>!</operator><name>mg</name> <operator>||</operator> <operator>!</operator><name>mb</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad masks"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt BMP"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>stbi__high_bit</name><argument_list>(<argument><expr><name>mr</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">7</literal></expr>;</expr_stmt> <expr_stmt><expr><name>rcount</name> <operator>=</operator> <call><name>stbi__bitcount</name><argument_list>(<argument><expr><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gshift</name> <operator>=</operator> <call><name>stbi__high_bit</name><argument_list>(<argument><expr><name>mg</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">7</literal></expr>;</expr_stmt> <expr_stmt><expr><name>gcount</name> <operator>=</operator> <call><name>stbi__bitcount</name><argument_list>(<argument><expr><name>mg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bshift</name> <operator>=</operator> <call><name>stbi__high_bit</name><argument_list>(<argument><expr><name>mb</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">7</literal></expr>;</expr_stmt> <expr_stmt><expr><name>bcount</name> <operator>=</operator> <call><name>stbi__bitcount</name><argument_list>(<argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ashift</name> <operator>=</operator> <call><name>stbi__high_bit</name><argument_list>(<argument><expr><name>ma</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">7</literal></expr>;</expr_stmt> <expr_stmt><expr><name>acount</name> <operator>=</operator> <call><name>stbi__bitcount</name><argument_list>(<argument><expr><name>ma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>easy</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>easy</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>all_a</name> <operator>|=</operator> <name>a</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bpp</name> <init>= <expr><name><name>info</name><operator>.</operator><name>bpp</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>v</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>bpp</name> <operator>==</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><operator>(</operator><name>stbi__uint32</name><operator>)</operator> <call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>stbi__get32le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><call><name>stbi__shiftsigned</name><argument_list>(<argument><expr><name>v</name> <operator>&amp;</operator> <name>mr</name></expr></argument>, <argument><expr><name>rshift</name></expr></argument>, <argument><expr><name>rcount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><call><name>stbi__shiftsigned</name><argument_list>(<argument><expr><name>v</name> <operator>&amp;</operator> <name>mg</name></expr></argument>, <argument><expr><name>gshift</name></expr></argument>, <argument><expr><name>gcount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><call><name>stbi__shiftsigned</name><argument_list>(<argument><expr><name>v</name> <operator>&amp;</operator> <name>mb</name></expr></argument>, <argument><expr><name>bshift</name></expr></argument>, <argument><expr><name>bcount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>ma</name></expr> ?</condition><then> <expr><call><name>stbi__shiftsigned</name><argument_list>(<argument><expr><name>v</name> <operator>&amp;</operator> <name>ma</name></expr></argument>, <argument><expr><name>ashift</name></expr></argument>, <argument><expr><name>acount</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>all_a</name> <operator>|=</operator> <name>a</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>STBI__BYTECAST</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>all_a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flip_vertically</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>t</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>&gt;</argument_list></name><operator>&gt;</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name>out</name> <operator>+</operator> <name>j</name> <operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name><operator>*</operator><name>target</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><name>out</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>j</name><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name><operator>*</operator><name>target</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name><operator>*</operator><name>target</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>p1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>p2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>&amp;&amp;</operator> <name>req_comp</name> <operator>!=</operator> <name>target</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>stbi__convert_format</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>out</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_TGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__tga_get_comp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bits_per_pixel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_grey</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>is_rgb16</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_rgb16</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>is_rgb16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>bits_per_pixel</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case> <return>return <expr><name>STBI_grey</name></expr>;</return>

<case>case <expr><literal type="number">16</literal></expr>:</case> <if_stmt><if>if<condition>(<expr><name>is_grey</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>STBI_grey_alpha</name></expr>;</return></block_content></block></if></if_stmt>

<case>case <expr><literal type="number">15</literal></expr>:</case> <if_stmt><if>if<condition>(<expr><name>is_rgb16</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>is_rgb16</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>STBI_rgb</name></expr>;</return>

<case>case <expr><literal type="number">24</literal></expr>:</case> 

<case>case <expr><literal type="number">32</literal></expr>:</case> <return>return <expr><name>bits_per_pixel</name><operator>/</operator><literal type="number">8</literal></expr>;</return>

<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__tga_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tga_w</name></decl>, <decl><type ref="prev"/><name>tga_h</name></decl>, <decl><type ref="prev"/><name>tga_comp</name></decl>, <decl><type ref="prev"/><name>tga_image_type</name></decl>, <decl><type ref="prev"/><name>tga_bits_per_pixel</name></decl>, <decl><type ref="prev"/><name>tga_colormap_bpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>tga_colormap_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tga_colormap_type</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name>tga_colormap_type</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tga_image_type</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>( <expr><name>tga_colormap_type</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>tga_image_type</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tga_image_type</name> <operator>!=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">32</literal><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tga_colormap_bpp</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>tga_image_type</name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tga_image_type</name> <operator>!=</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tga_image_type</name> <operator>!=</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tga_image_type</name> <operator>!=</operator> <literal type="number">11</literal><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tga_colormap_bpp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tga_w</name> <operator>=</operator> <call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>tga_w</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tga_h</name> <operator>=</operator> <call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>tga_h</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tga_bits_per_pixel</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>tga_colormap_bpp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>tga_bits_per_pixel</name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tga_bits_per_pixel</name> <operator>!=</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tga_comp</name> <operator>=</operator> <call><name>stbi__tga_get_comp</name><argument_list>(<argument><expr><name>tga_colormap_bpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tga_comp</name> <operator>=</operator> <call><name>stbi__tga_get_comp</name><argument_list>(<argument><expr><name>tga_bits_per_pixel</name></expr></argument>, <argument><expr><operator>(</operator><name>tga_image_type</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tga_image_type</name> <operator>==</operator> <literal type="number">11</literal><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tga_comp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>tga_w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>tga_h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <name>tga_comp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__tga_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>tga_color_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tga_color_type</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>( <expr><name>tga_color_type</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>errorEnd</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>( <expr><name>tga_color_type</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>sz</name> <operator>!=</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>errorEnd</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">32</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>errorEnd</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">11</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>errorEnd</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>errorEnd</name>;</goto></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>( <expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>errorEnd</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>tga_color_type</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">16</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>errorEnd</name>;</goto></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>!=</operator> <literal type="number">32</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>errorEnd</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<label><name>errorEnd</name>:</label>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__tga_read_rgb16</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__uint16</name></type> <name>px</name> <init>= <expr><operator>(</operator><name>stbi__uint16</name><operator>)</operator><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name></type> <name>fiveBitMask</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>px</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <name>fiveBitMask</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>px</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <name>fiveBitMask</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name>px</name> <operator>&amp;</operator> <name>fiveBitMask</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator><operator>(</operator><operator>(</operator><name>r</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator><operator>/</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator><operator>(</operator><operator>(</operator><name>g</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator><operator>/</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator><operator>(</operator><operator>(</operator><name>b</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator><operator>/</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__tga_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tga_offset</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tga_indexed</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tga_image_type</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tga_is_RLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tga_palette_start</name> <init>= <expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tga_palette_len</name> <init>= <expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tga_palette_bits</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tga_x_origin</name> <init>= <expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tga_y_origin</name> <init>= <expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tga_width</name> <init>= <expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tga_height</name> <init>= <expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tga_bits_per_pixel</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tga_comp</name></decl>, <decl><type ref="prev"/><name>tga_rgb16</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tga_inverted</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tga_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tga_palette</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>raw_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>RLE_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>RLE_repeating</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_next_pixel</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>tga_x_origin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>tga_y_origin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>( <expr><name>tga_image_type</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>tga_image_type</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tga_is_RLE</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tga_inverted</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>tga_inverted</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>tga_indexed</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tga_comp</name> <operator>=</operator> <call><name>stbi__tga_get_comp</name><argument_list>(<argument><expr><name>tga_palette_bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tga_rgb16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>tga_comp</name> <operator>=</operator> <call><name>stbi__tga_get_comp</name><argument_list>(<argument><expr><name>tga_bits_per_pixel</name></expr></argument>, <argument><expr><operator>(</operator><name>tga_image_type</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>tga_rgb16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tga_comp</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad format"</literal></expr></argument>, <argument><expr><literal type="string">"Can't find out TGA pixelformat"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>tga_width</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>tga_height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <name>tga_comp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__mad3sizes_valid</name><argument_list>(<argument><expr><name>tga_width</name></expr></argument>, <argument><expr><name>tga_height</name></expr></argument>, <argument><expr><name>tga_comp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"too large"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt TGA"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tga_data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>stbi__malloc_mad3</name><argument_list>(<argument><expr><name>tga_width</name></expr></argument>, <argument><expr><name>tga_height</name></expr></argument>, <argument><expr><name>tga_comp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tga_data</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tga_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>tga_indexed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>tga_is_RLE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>tga_rgb16</name></expr> )</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tga_height</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><ternary><condition><expr><name>tga_inverted</name></expr> ?</condition><then> <expr><name>tga_height</name> <operator>-</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>tga_row</name> <init>= <expr><name>tga_data</name> <operator>+</operator> <name>row</name><operator>*</operator><name>tga_width</name><operator>*</operator><name>tga_comp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__getn</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tga_row</name></expr></argument>, <argument><expr><name>tga_width</name> <operator>*</operator> <name>tga_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>tga_indexed</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tga_palette_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tga_palette</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>stbi__malloc_mad2</name><argument_list>(<argument><expr><name>tga_palette_len</name></expr></argument>, <argument><expr><name>tga_comp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tga_palette</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>tga_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tga_rgb16</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>pal_entry</name> <init>= <expr><name>tga_palette</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>tga_comp</name> <operator>==</operator> <name>STBI_rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tga_palette_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__tga_read_rgb16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pal_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pal_entry</name> <operator>+=</operator> <name>tga_comp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>stbi__getn</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tga_palette</name></expr></argument>, <argument><expr><name>tga_palette_len</name> <operator>*</operator> <name>tga_comp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>tga_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>tga_palette</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad palette"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt TGA"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tga_width</name> <operator>*</operator> <name>tga_height</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>tga_is_RLE</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>RLE_count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>RLE_cmd</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>RLE_count</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>RLE_cmd</name> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>RLE_repeating</name> <operator>=</operator> <name>RLE_cmd</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>read_next_pixel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>!</operator><name>RLE_repeating</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>read_next_pixel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<expr_stmt><expr><name>read_next_pixel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>read_next_pixel</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>tga_indexed</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pal_idx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>tga_bits_per_pixel</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>pal_idx</name> <operator>&gt;=</operator> <name>tga_palette_len</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>pal_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pal_idx</name> <operator>*=</operator> <name>tga_comp</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>tga_comp</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>raw_data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>tga_palette</name><index>[<expr><name>pal_idx</name><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>tga_rgb16</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_ASSERT</name><argument_list>(<argument><expr><name>tga_comp</name> <operator>==</operator> <name>STBI_rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__tga_read_rgb16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>raw_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>tga_comp</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>raw_data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>read_next_pixel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>tga_comp</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tga_data</name><index>[<expr><name>i</name><operator>*</operator><name>tga_comp</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>raw_data</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>--</operator><name>RLE_count</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>tga_inverted</name></expr> )</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>*</operator><literal type="number">2</literal> <operator>&lt;</operator> <name>tga_height</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index1</name> <init>= <expr><name>j</name> <operator>*</operator> <name>tga_width</name> <operator>*</operator> <name>tga_comp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index2</name> <init>= <expr><operator>(</operator><name>tga_height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>tga_width</name> <operator>*</operator> <name>tga_comp</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>tga_width</name> <operator>*</operator> <name>tga_comp</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>temp</name> <init>= <expr><name><name>tga_data</name><index>[<expr><name>index1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tga_data</name><index>[<expr><name>index1</name></expr>]</index></name> <operator>=</operator> <name><name>tga_data</name><index>[<expr><name>index2</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tga_data</name><index>[<expr><name>index2</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>index1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>index2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>tga_palette</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>( <argument><expr><name>tga_palette</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tga_comp</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>tga_rgb16</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>tga_pixel</name> <init>= <expr><name>tga_data</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tga_width</name> <operator>*</operator> <name>tga_height</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>temp</name> <init>= <expr><name><name>tga_pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tga_pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tga_pixel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tga_pixel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tga_pixel</name> <operator>+=</operator> <name>tga_comp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>&amp;&amp;</operator> <name>req_comp</name> <operator>!=</operator> <name>tga_comp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tga_data</name> <operator>=</operator> <call><name>stbi__convert_format</name><argument_list>(<argument><expr><name>tga_data</name></expr></argument>, <argument><expr><name>tga_comp</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>tga_width</name></expr></argument>, <argument><expr><name>tga_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tga_palette_start</name> <operator>=</operator> <name>tga_palette_len</name> <operator>=</operator> <name>tga_palette_bits</name> <operator>=</operator>

<name>tga_x_origin</name> <operator>=</operator> <name>tga_y_origin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>tga_palette_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tga_data</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__psd_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x38425053</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__psd_decode_rle</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixelCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>nleft</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>nleft</name> <operator>=</operator> <name>pixelCount</name> <operator>-</operator> <name>count</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>nleft</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">257</literal> <operator>-</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>nleft</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__psd_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pixelCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channelCount</name></decl>, <decl><type ref="prev"/><name>compression</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channel</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitdepth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>,<decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x38425053</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"not PSD"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt PSD image"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"wrong version"</literal></expr></argument>, <argument><expr><literal type="string">"Unsupported version of PSD image"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channelCount</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channelCount</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>channelCount</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"wrong channel count"</literal></expr></argument>, <argument><expr><literal type="string">"Unsupported number of channels in PSD image"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitdepth</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitdepth</name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>bitdepth</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"unsupported bit depth"</literal></expr></argument>, <argument><expr><literal type="string">"PSD bit depth is not 8 or 16 bit"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"wrong color format"</literal></expr></argument>, <argument><expr><literal type="string">"PSD is not in RGB color format"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compression</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad compression"</literal></expr></argument>, <argument><expr><literal type="string">"PSD has an unknown compression format"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__mad3sizes_valid</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"too large"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt PSD"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compression</name> <operator>&amp;&amp;</operator> <name>bitdepth</name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>bpc</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc_mad3</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>bits_per_channel</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>w</name><operator>*</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pixelCount</name> <operator>=</operator> <name>w</name><operator>*</operator><name>h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compression</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name> <operator>*</operator> <name>channelCount</name> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>out</name><operator>+</operator><name>channel</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>&gt;=</operator> <name>channelCount</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixelCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>channel</name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__psd_decode_rle</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pixelCount</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"corrupt"</literal></expr></argument>, <argument><expr><literal type="string">"bad RLE data"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>&gt;=</operator> <name>channelCount</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bitdepth</name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>bpc</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>(</operator><operator>(</operator><name>stbi__uint16</name> <operator>*</operator><operator>)</operator> <name>out</name><operator>)</operator> <operator>+</operator> <name>channel</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint16</name></type> <name>val</name> <init>= <expr><ternary><condition><expr><name>channel</name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">65535</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixelCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>q</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>out</name><operator>+</operator><name>channel</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>val</name> <init>= <expr><ternary><condition><expr><name>channel</name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixelCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>bits_per_channel</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>(</operator><operator>(</operator><name>stbi__uint16</name> <operator>*</operator><operator>)</operator> <name>out</name><operator>)</operator> <operator>+</operator> <name>channel</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixelCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>q</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <operator>(</operator><name>stbi__uint16</name><operator>)</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>out</name><operator>+</operator><name>channel</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bitdepth</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixelCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <operator>(</operator><call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pixelCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelCount</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>bits_per_channel</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name><operator>*</operator><name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi__uint16</name> <modifier>*</modifier></type><name>pixel</name> <init>= <expr><operator>(</operator><name>stbi__uint16</name> <operator>*</operator><operator>)</operator> <name>out</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pixel</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pixel</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><name><name>pixel</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">65535.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ra</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>inv_a</name> <init>= <expr><literal type="number">65535.0f</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>ra</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi__uint16</name><operator>)</operator> <operator>(</operator><name><name>pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>ra</name> <operator>+</operator> <name>inv_a</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi__uint16</name><operator>)</operator> <operator>(</operator><name><name>pixel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>ra</name> <operator>+</operator> <name>inv_a</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi__uint16</name><operator>)</operator> <operator>(</operator><name><name>pixel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>ra</name> <operator>+</operator> <name>inv_a</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name><operator>*</operator><name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixel</name> <init>= <expr><name>out</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pixel</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pixel</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><name><name>pixel</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ra</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>inv_a</name> <init>= <expr><literal type="number">255.0f</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>ra</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name><name>pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>ra</name> <operator>+</operator> <name>inv_a</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name><name>pixel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>ra</name> <operator>+</operator> <name>inv_a</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name><name>pixel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>ra</name> <operator>+</operator> <name>inv_a</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>&amp;&amp;</operator> <name>req_comp</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>bits_per_channel</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__convert_format16</name><argument_list>(<argument><expr><operator>(</operator><name>stbi__uint16</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>stbi__convert_format</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>out</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__pic_is4</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__pic_test_core</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__pic_is4</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\x53\x80\xF6\x34"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">84</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__pic_is4</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"PICT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>size</name></decl>,<name>type</name>,<name>channel</name>;</decl_stmt>

}</block></struct></type> <name>stbi__pic_packet</name>;</typedef>

<function><type><specifier>static</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi__readval</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name><init>=<expr><literal type="number">0x80</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>mask</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad file"</literal></expr></argument>,<argument><expr><literal type="string">"PIC file too short"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>dest</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__copyval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>,<parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name><init>=<expr><literal type="number">0x80</literal></expr></init></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>mask</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>channel</name><operator>&amp;</operator><name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi__pic_load_core</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>act_comp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>num_packets</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>chained</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__pic_packet</name></type> <name><name>packets</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>stbi__pic_packet</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_packets</name><operator>==</operator><sizeof>sizeof<argument_list>(<argument><expr><name>packets</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>packets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad format"</literal></expr></argument>,<argument><expr><literal type="string">"too many packets"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>packet</name> <operator>=</operator> <operator>&amp;</operator><name><name>packets</name><index>[<expr><name>num_packets</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chained</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>act_comp</name> <operator>|=</operator> <name><name>packet</name><operator>-&gt;</operator><name>channel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad file"</literal></expr></argument>,<argument><expr><literal type="string">"file too short (reading packets)"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad format"</literal></expr></argument>,<argument><expr><literal type="string">"packet isn't 8bpp"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>chained</name></expr>)</condition>;</do>

<expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>act_comp</name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>packet_idx</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>packet_idx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>packet_idx</name> <operator>&lt;</operator> <name>num_packets</name></expr>;</condition> <incr><expr><operator>++</operator><name>packet_idx</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi__pic_packet</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><operator>&amp;</operator><name><name>packets</name><index>[<expr><name>packet_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>result</name><operator>+</operator><name>y</name><operator>*</operator><name>width</name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad format"</literal></expr></argument>,<argument><expr><literal type="string">"packet has bad compression type"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>width</name></expr>;</condition><incr><expr><operator>++</operator><name>x</name></expr><operator>,</operator> <expr><name>dest</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__readval</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>,<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name><init>=<expr><name>width</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>left</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>count</name></decl>,<decl><type ref="prev"/><name><name>value</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name><operator>=</operator><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad file"</literal></expr></argument>,<argument><expr><literal type="string">"file too short (pure read count)"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <name>left</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__readval</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator><expr><name>dest</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__copyval</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>,<argument><expr><name>dest</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>left</name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name><init>=<expr><name>width</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>left</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad file"</literal></expr></argument>,<argument><expr><literal type="string">"file too short (mixed read count)"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>value</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name><operator>==</operator><literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <literal type="number">127</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>left</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad file"</literal></expr></argument>,<argument><expr><literal type="string">"scanline overrun"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__readval</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>dest</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__copyval</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>,<argument><expr><name>dest</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name><operator>&gt;</operator><name>left</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad file"</literal></expr></argument>,<argument><expr><literal type="string">"scanline overrun"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>dest</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__readval</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>,<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>left</name><operator>-=</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__pic_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>px</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>py</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>internal_comp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>&amp;</operator><name>internal_comp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">92</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad file"</literal></expr></argument>,<argument><expr><literal type="string">"file too short (pic header)"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__mad3sizes_valid</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"too large"</literal></expr></argument>, <argument><expr><literal type="string">"PIC image too large to decode"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc_mad3</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>x</name><operator>*</operator><name>y</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__pic_load_core</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>px</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>py</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>req_comp</name> <operator>=</operator> <operator>*</operator><name>comp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name><operator>=</operator><call><name>stbi__convert_format</name><argument_list>(<argument><expr><name>result</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><name>req_comp</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__pic_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>stbi__pic_test_core</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_GIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>stbi__int16</name></type> <name>prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>suffix</name></decl>;</decl_stmt>

}</block></struct></type> <name>stbi__gif_lzw</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>,<name>h</name>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>background</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>history</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>, <name>bgindex</name>, <name>ratio</name>, <name>transparent</name>, <name>eflags</name>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>lpal</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__gif_lzw</name></type> <name><name>codes</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>color_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parse</name></decl>, <name>step</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_x</name></decl>, <name>start_y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_x</name></decl>, <name>max_y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_x</name></decl>, <name>cur_y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delay</name></decl>;</decl_stmt>

}</block></struct></type> <name>stbi__gif</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__gif_test_raw</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'G'</literal> <operator>||</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'I'</literal> <operator>||</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'F'</literal> <operator>||</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'8'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator> <name>sz</name> <operator>!=</operator> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'a'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__gif_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>stbi__gif_test_raw</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__gif_parse_colortable</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_entries</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>transp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_entries</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>transp</name> <operator>==</operator> <name>i</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__gif_header</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>stbi__gif</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>version</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'G'</literal> <operator>||</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'I'</literal> <operator>||</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'F'</literal> <operator>||</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'8'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"not GIF"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt GIF"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <literal type="char">'7'</literal> <operator>&amp;&amp;</operator> <name>version</name> <operator>!=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"not GIF"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt GIF"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'a'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"not GIF"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt GIF"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stbi__g_failure_reason</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>bgindex</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>ratio</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>transparent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>is_info</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__gif_parse_colortable</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>g</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__gif_info_raw</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__gif</name><modifier>*</modifier></type> <name>g</name> <init>= <expr><operator>(</operator><name>stbi__gif</name><operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stbi__gif</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__gif_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__out_gif_code</name><parameter_list>(<parameter><decl><type><name>stbi__gif</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>stbi__uint16</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>codes</name><index>[<expr><name>code</name></expr>]</index></name><operator>.</operator><name>prefix</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__out_gif_code</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>codes</name><index>[<expr><name>code</name></expr>]</index></name><operator>.</operator><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>cur_y</name></name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>max_y</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>cur_x</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>cur_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>out</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>idx</name> <operator>/</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>color_table</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>codes</name><index>[<expr><name>code</name></expr>]</index></name><operator>.</operator><name>suffix</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>cur_x</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>cur_x</name></name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>max_x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>cur_x</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>start_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>cur_y</name></name> <operator>+=</operator> <name><name>g</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>cur_y</name></name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>max_y</name></name> <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>parse</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>parse</name></name><operator>)</operator> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>cur_y</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>step</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>g</name><operator>-&gt;</operator><name>parse</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi__process_gif_raster</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>stbi__gif</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name>lzw_cs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__int32</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>init_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__uint32</name></type> <name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__int32</name></type> <name>codesize</name></decl>, <decl><type ref="prev"/><name>codemask</name></decl>, <decl><type ref="prev"/><name>avail</name></decl>, <decl><type ref="prev"/><name>oldcode</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>, <decl><type ref="prev"/><name>valid_bits</name></decl>, <decl><type ref="prev"/><name>clear</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__gif_lzw</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lzw_cs</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lzw_cs</name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>clear</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>lzw_cs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>codesize</name> <operator>=</operator> <name>lzw_cs</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>codemask</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>codesize</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>valid_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>init_code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>init_code</name> <operator>&lt;</operator> <name>clear</name></expr>;</condition> <incr><expr><name>init_code</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>codes</name><index>[<expr><name>init_code</name></expr>]</index></name><operator>.</operator><name>prefix</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>codes</name><index>[<expr><name>init_code</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <name>init_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>codes</name><index>[<expr><name>init_code</name></expr>]</index></name><operator>.</operator><name>suffix</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <name>init_code</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>avail</name> <operator>=</operator> <name>clear</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>oldcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>valid_bits</name> <operator>&lt;</operator> <name>codesize</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>g</name><operator>-&gt;</operator><name>out</name></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>|=</operator> <operator>(</operator><name>stbi__int32</name><operator>)</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>valid_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>valid_bits</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>stbi__int32</name></type> <name>code</name> <init>= <expr><name>bits</name> <operator>&amp;</operator> <name>codemask</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bits</name> <operator>&gt;&gt;=</operator> <name>codesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>valid_bits</name> <operator>-=</operator> <name>codesize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>clear</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>codesize</name> <operator>=</operator> <name>lzw_cs</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>codemask</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>codesize</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>avail</name> <operator>=</operator> <name>clear</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>oldcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>clear</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name><name>g</name><operator>-&gt;</operator><name>out</name></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>&lt;=</operator> <name>avail</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"no clear code"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt GIF"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>oldcode</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>codes</name><index>[<expr><name>avail</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&gt;</operator> <literal type="number">8192</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"too many codes"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt GIF"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <operator>(</operator><name>stbi__int16</name><operator>)</operator> <name>oldcode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>codes</name><index>[<expr><name>oldcode</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>suffix</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>code</name> <operator>==</operator> <name>avail</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>first</name></name></expr> </then><else>: <expr><name><name>g</name><operator>-&gt;</operator><name>codes</name><index>[<expr><name>code</name></expr>]</index></name><operator>.</operator><name>first</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>avail</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"illegal code in raster"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt GIF"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__out_gif_code</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>stbi__uint16</name><operator>)</operator> <name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>avail</name> <operator>&amp;</operator> <name>codemask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>avail</name> <operator>&lt;=</operator> <literal type="number">0x0FFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codesize</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>codemask</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>codesize</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oldcode</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"illegal code in raster"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt GIF"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbi_uc</name> <modifier>*</modifier></type><name>stbi__gif_load_next</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>stbi__gif</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>two_back</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dispose</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pcount</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__gif_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__mad3sizes_valid</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"too large"</literal></expr></argument>, <argument><expr><literal type="string">"GIF image is too large"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pcount</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>pcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>background</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>pcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>history</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>(<argument><expr><name>pcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>out</name></name> <operator>||</operator> <operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>background</name></name> <operator>||</operator> <operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>history</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>pcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>background</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>pcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>pcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>first_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dispose</name> <operator>=</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>eflags</name></name> <operator>&amp;</operator> <literal type="number">0x1C</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pcount</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dispose</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>two_back</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dispose</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dispose</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>pi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pi</name> <operator>&lt;</operator> <name>pcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>pi</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>pi</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>out</name><index>[<expr><name>pi</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>two_back</name><index>[<expr><name>pi</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dispose</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>pi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pi</name> <operator>&lt;</operator> <name>pcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>pi</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>pi</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>out</name><index>[<expr><name>pi</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>background</name><index>[<expr><name>pi</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>g</name><operator>-&gt;</operator><name>background</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>h</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>g</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>h</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x2C</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__int32</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <name>w</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <name>h</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"bad Image Descriptor"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt GIF"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>line_size</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>start_x</name></name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>start_y</name></name> <operator>=</operator> <name>y</name> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>max_x</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <name>w</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>max_y</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <name>h</name> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>cur_x</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>start_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>cur_y</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>start_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>cur_y</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>max_y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>lflags</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>lflags</name></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>parse</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>parse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>lflags</name></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__gif_parse_colortable</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>g</name><operator>-&gt;</operator><name>lpal</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>lflags</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>, <argument><expr><ternary><condition><expr><name><name>g</name><operator>-&gt;</operator><name>eflags</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> ?</condition><then> <expr><name><name>g</name><operator>-&gt;</operator><name>transparent</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>color_table</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name><name>g</name><operator>-&gt;</operator><name>lpal</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>color_table</name></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name><name>g</name><operator>-&gt;</operator><name>pal</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"missing color table"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt GIF"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>stbi__process_gif_raster</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pcount</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first_frame</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>bgindex</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>pi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pi</name> <operator>&lt;</operator> <name>pcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>pi</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>pi</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>bgindex</name></name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>out</name><index>[<expr><name>pi</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>bgindex</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>o</name></expr>;</return>

</block_content>}</block>

<case>case <expr><literal type="number">0x21</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ext</name> <init>= <expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>==</operator> <literal type="number">0xF9</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>eflags</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <call><name>stbi__get16le</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>transparent</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>transparent</name></name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>eflags</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>transparent</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>transparent</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>transparent</name></name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>transparent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="number">0x3B</literal></expr>:</case> 

<return>return <expr><operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>s</name></expr>;</return> 

<default>default:</default>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"unknown code"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt GIF"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__load_gif_main</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>delays</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbi__gif_test</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>layers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>two_back</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__gif</name></type> <name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delays</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>delays</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>stbi__gif_load_next</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>two_back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>u</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>layers</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stride</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name><name>g</name><operator>.</operator><name>h</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>stbi_uc</name><operator>*</operator><operator>)</operator> <call><name>STBI_REALLOC</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>layers</name> <operator>*</operator> <name>stride</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>history</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>background</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>*</operator><operator>)</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delays</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>delays</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <call><name>STBI_REALLOC</name><argument_list>( <argument><expr><operator>*</operator><name>delays</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>layers</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>*</operator><operator>)</operator><call><name>stbi__malloc</name><argument_list>( <argument><expr><name>layers</name> <operator>*</operator> <name>stride</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delays</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>delays</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <call><name>stbi__malloc</name><argument_list>( <argument><expr><name>layers</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>layers</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>stride</name><operator>)</operator></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>stride</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>layers</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>two_back</name> <operator>=</operator> <name>out</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delays</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>delays</name><operator>)</operator><index>[<expr><name>layers</name> <operator>-</operator> <literal type="number">1U</literal></expr>]</index> <operator>=</operator> <name><name>g</name><operator>.</operator><name>delay</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>u</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>history</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>background</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>&amp;&amp;</operator> <name>req_comp</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>stbi__convert_format</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name>layers</name> <operator>*</operator> <name><name>g</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <name>layers</name></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"not GIF"</literal></expr></argument>, <argument><expr><literal type="string">"Image was not as a gif type."</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__gif_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__gif</name></type> <name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>stbi__gif_load_next</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>u</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>&amp;&amp;</operator> <name>req_comp</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>stbi__convert_format</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>g</name><operator>.</operator><name>out</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>history</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>background</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>u</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__gif_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbi__gif_info_raw</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__hdr_test_core</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signature</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>signature</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>signature</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__hdr_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>stbi__hdr_test_core</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"#?RADIANCE\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>stbi__hdr_test_core</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"#?RGBE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI__HDR_BUFLEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>stbi__hdr_gettoken</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>STBI__HDR_BUFLEN</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__hdr_convert</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>input</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>ldexp</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>f1</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>f1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>f1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name>req_comp</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <modifier>*</modifier></type><name>stbi__hdr_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STBI__HDR_BUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>valid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>scanline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>hdr_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>,<decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>headerToken</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>headerToken</name> <operator>=</operator> <call><name>stbi__hdr_gettoken</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>headerToken</name></expr></argument>, <argument><expr><literal type="string">"#?RADIANCE"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>headerToken</name></expr></argument>, <argument><expr><literal type="string">"#?RGBE"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpf</name><argument_list>(<argument><expr><literal type="string">"not HDR"</literal></expr></argument>, <argument><expr><literal type="string">"Corrupt HDR image"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>stbi__hdr_gettoken</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"FORMAT=32-bit_rle_rgbe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpf</name><argument_list>(<argument><expr><literal type="string">"unsupported format"</literal></expr></argument>, <argument><expr><literal type="string">"Unsupported HDR format"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>stbi__hdr_gettoken</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"-Y "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpf</name><argument_list>(<argument><expr><literal type="string">"unsupported data layout"</literal></expr></argument>, <argument><expr><literal type="string">"Unsupported HDR format"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>token</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>token</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"+X "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpf</name><argument_list>(<argument><expr><literal type="string">"unsupported data layout"</literal></expr></argument>, <argument><expr><literal type="string">"Unsupported HDR format"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>req_comp</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__mad4sizes_valid</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpf</name><argument_list>(<argument><expr><literal type="string">"too large"</literal></expr></argument>, <argument><expr><literal type="string">"HDR image is too large"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hdr_data</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc_mad4</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdr_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpf</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>width</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name>width</name> <operator>&gt;=</operator> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>rgbe</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<label><name>main_decode_loop</name>:</label>

<expr_stmt><expr><call><name>stbi__getn</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rgbe</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__hdr_convert</name><argument_list>(<argument><expr><name>hdr_data</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>width</name> <operator>*</operator> <name>req_comp</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>req_comp</name></expr></argument>, <argument><expr><name>rgbe</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>scanline</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <name>c2</name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name></type> <name><name>rgbe</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rgbe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgbe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgbe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgbe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name><operator>)</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__hdr_convert</name><argument_list>(<argument><expr><name>hdr_data</name></expr></argument>, <argument><expr><name>rgbe</name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>main_decode_loop</name>;</goto> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>|=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>width</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>hdr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>stbi__errpf</name><argument_list>(<argument><expr><literal type="string">"invalid decoded scanline length"</literal></expr></argument>, <argument><expr><literal type="string">"corrupt HDR"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scanline</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>scanline</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc_mad2</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scanline</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>hdr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__errpf</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nleft</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>nleft</name> <operator>=</operator> <name>width</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>nleft</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>hdr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>stbi__errpf</name><argument_list>(<argument><expr><literal type="string">"corrupt"</literal></expr></argument>, <argument><expr><literal type="string">"bad RLE data in HDR"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>z</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>scanline</name><index>[<expr><name>i</name><operator>++</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>nleft</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>hdr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>stbi__errpf</name><argument_list>(<argument><expr><literal type="string">"corrupt"</literal></expr></argument>, <argument><expr><literal type="string">"bad RLE data in HDR"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>z</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>scanline</name><index>[<expr><name>i</name><operator>++</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbi__hdr_convert</name><argument_list>(<argument><expr><name>hdr_data</name><operator>+</operator><operator>(</operator><name>j</name><operator>*</operator><name>width</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>req_comp</name></expr></argument>, <argument><expr><name>scanline</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>scanline</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STBI_FREE</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>hdr_data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__hdr_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STBI__HDR_BUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>valid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__hdr_test</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>stbi__hdr_gettoken</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"FORMAT=32-bit_rle_rgbe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>stbi__hdr_gettoken</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"-Y "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>token</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>token</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"+X "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_BMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__bmp_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__bmp_data</name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>all_a</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>stbi__bmp_parse_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>ma</name></name> <operator>==</operator> <literal type="number">0xff000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <ternary><condition><expr><name><name>info</name><operator>.</operator><name>ma</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__psd_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>channelCount</name></decl>, <decl><type ref="prev"/><name>dummy</name></decl>, <decl><type ref="prev"/><name>depth</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x38425053</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channelCount</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channelCount</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>channelCount</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>depth</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__psd_is16</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>channelCount</name></decl>, <decl><type ref="prev"/><name>depth</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x38425053</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channelCount</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channelCount</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>channelCount</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>stbi__get32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__pic_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>act_comp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>num_packets</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>chained</name></decl>,<decl><type ref="prev"/><name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__pic_packet</name></type> <name><name>packets</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__pic_is4</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\x53\x80\xF6\x34"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <call><name>stbi__get16be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>*</operator><name>x</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><operator>*</operator><name>y</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>stbi__pic_packet</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_packets</name><operator>==</operator><sizeof>sizeof<argument_list>(<argument><expr><name>packets</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>packets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>packet</name> <operator>=</operator> <operator>&amp;</operator><name><name>packets</name><index>[<expr><name>num_packets</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chained</name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>act_comp</name> <operator>|=</operator> <name><name>packet</name><operator>-&gt;</operator><name>channel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>chained</name></expr>)</condition>;</do>

<expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>act_comp</name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__pnm_test</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="char">'P'</literal> <operator>||</operator> <operator>(</operator><name>t</name> <operator>!=</operator> <literal type="char">'5'</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <literal type="char">'6'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbi__pnm_load</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_comp</name></decl></parameter>, <parameter><decl><type><name>stbi__result_info</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi_uc</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBI_NOTUSED</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__pnm_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbi__mad3sizes_valid</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"too large"</literal></expr></argument>, <argument><expr><literal type="string">"PNM too large"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>stbi_uc</name> <operator>*</operator><operator>)</operator> <call><name>stbi__malloc_mad3</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__errpuc</name><argument_list>(<argument><expr><literal type="string">"outofmem"</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__getn</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>img_x</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>req_comp</name> <operator>&amp;&amp;</operator> <name>req_comp</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>stbi__convert_format</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_n</name></name></expr></argument>, <argument><expr><name>req_comp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>img_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>out</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__pnm_isspace</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\v'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\f'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__pnm_skip_whitespace</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>stbi__pnm_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__pnm_isdigit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__pnm_getinteger</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>stbi__at_eof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>stbi__pnm_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__pnm_info</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>maxv</name></decl>, <decl><type ref="prev"/><name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="char">'P'</literal> <operator>||</operator> <operator>(</operator><name>t</name> <operator>!=</operator> <literal type="char">'5'</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <literal type="char">'6'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbi__rewind</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>comp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>t</name> <operator>==</operator> <literal type="char">'6'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>stbi__get8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbi__pnm_skip_whitespace</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <call><name>stbi__pnm_getinteger</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__pnm_skip_whitespace</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <call><name>stbi__pnm_getinteger</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stbi__pnm_skip_whitespace</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxv</name> <operator>=</operator> <call><name>stbi__pnm_getinteger</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>maxv</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"max value &gt; 255"</literal></expr></argument>, <argument><expr><literal type="string">"PPM image not 8-bit"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__info_main</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_JPEG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__jpeg_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__png_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_GIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__gif_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_BMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__bmp_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__psd_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__pic_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__pnm_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__hdr_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_TGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__tga_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"unknown image type"</literal></expr></argument>, <argument><expr><literal type="string">"Image not of any known type, or corrupt"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__is_16_main</name><parameter_list>(<parameter><decl><type><name>stbi__context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__png_is16</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_PSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>stbi__psd_is16</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_info</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>stbi__fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"can't fopen"</literal></expr></argument>, <argument><expr><literal type="string">"Unable to open file"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbi_info_from_file</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_info_from_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>pos</name> <init>= <expr><call><name>ftell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>stbi__info_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>pos</name></expr></argument>,<argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_16_bit</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>stbi__fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbi__err</name><argument_list>(<argument><expr><literal type="string">"can't fopen"</literal></expr></argument>, <argument><expr><literal type="string">"Unable to open file"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbi_is_16_bit_from_file</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_16_bit_from_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>pos</name> <init>= <expr><call><name>ftell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>stbi__is_16_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>pos</name></expr></argument>,<argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_info_from_memory</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_mem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>buffer</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__info_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_info_from_callbacks</name><parameter_list>(<parameter><decl><type><name>stbi_io_callbacks</name> <specifier>const</specifier> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_callbacks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>stbi_io_callbacks</name> <operator>*</operator><operator>)</operator> <name>c</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__info_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_16_bit_from_memory</name><parameter_list>(<parameter><decl><type><name>stbi_uc</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_mem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>buffer</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__is_16_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIDEF</name> <name>int</name></type> <name>stbi_is_16_bit_from_callbacks</name><parameter_list>(<parameter><decl><type><name>stbi_io_callbacks</name> <specifier>const</specifier> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbi__context</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbi__start_callbacks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>stbi_io_callbacks</name> <operator>*</operator><operator>)</operator> <name>c</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>stbi__is_16_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
