<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\stb_image_resize.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>stbir_uint8</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>stbir_uint16</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>stbir_uint32</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>uint8_t</name></type> <name>stbir_uint8</name>;</typedef>

<typedef>typedef <type><name>uint16_t</name></type> <name>stbir_uint16</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>stbir_uint32</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIRDEF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_IMAGE_RESIZE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIRDEF</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIRDEF</name></cpp:macro> <cpp:value>extern "C"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIRDEF</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_uint8</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_float</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR_ALPHA_CHANNEL_NONE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR_FLAG_ALPHA_PREMULTIPLIED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR_FLAG_ALPHA_USES_COLORSPACE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<function_decl><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_uint8_srgb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>STBIR_EDGE_CLAMP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>STBIR_EDGE_REFLECT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>STBIR_EDGE_WRAP</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>STBIR_EDGE_ZERO</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

}</block></enum></type> <name>stbir_edge</name>;</typedef>

<function_decl><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_uint8_srgb_edgemode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_wrap_mode</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>STBIR_FILTER_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>STBIR_FILTER_BOX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>STBIR_FILTER_TRIANGLE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>STBIR_FILTER_CUBICBSPLINE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 

<decl><name>STBIR_FILTER_CATMULLROM</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 

<decl><name>STBIR_FILTER_MITCHELL</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 

}</block></enum></type> <name>stbir_filter</name>;</typedef>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>STBIR_COLORSPACE_LINEAR</name></decl>,

<decl><name>STBIR_COLORSPACE_SRGB</name></decl>,

<decl><name>STBIR_MAX_COLORSPACES</name></decl>,

}</block></enum></type> <name>stbir_colorspace</name>;</typedef>

<function_decl><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_uint8_generic</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_wrap_mode</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>stbir_colorspace</name></type> <name>space</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_uint16_generic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbir_uint16</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>stbir_uint16</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_wrap_mode</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>stbir_colorspace</name></type> <name>space</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_float_generic</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_wrap_mode</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>stbir_colorspace</name></type> <name>space</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>STBIR_TYPE_UINT8</name></decl> ,

<decl><name>STBIR_TYPE_UINT16</name></decl>,

<decl><name>STBIR_TYPE_UINT32</name></decl>,

<decl><name>STBIR_TYPE_FLOAT</name></decl> ,

<decl><name>STBIR_MAX_TYPES</name></decl>

}</block></enum></type> <name>stbir_datatype</name>;</typedef>

<function_decl><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>stbir_datatype</name></type> <name>datatype</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_mode_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_edge</name></type> <name>edge_mode_vertical</name></decl></parameter>,

<parameter><decl><type><name>stbir_filter</name></type> <name>filter_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter_vertical</name></decl></parameter>,

<parameter><decl><type><name>stbir_colorspace</name></type> <name>space</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_subpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>stbir_datatype</name></type> <name>datatype</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_mode_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_edge</name></type> <name>edge_mode_vertical</name></decl></parameter>,

<parameter><decl><type><name>stbir_filter</name></type> <name>filter_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter_vertical</name></decl></parameter>,

<parameter><decl><type><name>stbir_colorspace</name></type> <name>space</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x_scale</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y_scale</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x_offset</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y_offset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_region</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>stbir_datatype</name></type> <name>datatype</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_mode_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_edge</name></type> <name>edge_mode_vertical</name></decl></parameter>,

<parameter><decl><type><name>stbir_filter</name></type> <name>filter_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter_vertical</name></decl></parameter>,

<parameter><decl><type><name>stbir_colorspace</name></type> <name>space</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t1</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_IMAGE_RESIZE_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIR_ASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR_ASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIR_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR_MALLOC</name><parameter_list>(<parameter><type><name>size</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(c), malloc(size))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR_FREE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(c), free(ptr))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbir__inline</name></cpp:macro> <cpp:value>inline</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbir__inline</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbir__inline</name></cpp:macro> <cpp:value>__forceinline</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name><name>stbir__validate_uint32</name><index>[<expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stbir_uint32</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>]</index></name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR__NOTUSED</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(v)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR__NOTUSED</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)sizeof(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR__ARRAY_SIZE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof((a))/sizeof((a)[0]))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIR_DEFAULT_FILTER_UPSAMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR_DEFAULT_FILTER_UPSAMPLE</name></cpp:macro> <cpp:value>STBIR_FILTER_CATMULLROM</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIR_DEFAULT_FILTER_DOWNSAMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR_DEFAULT_FILTER_DOWNSAMPLE</name></cpp:macro> <cpp:value>STBIR_FILTER_MITCHELL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIR_PROGRESS_REPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR_PROGRESS_REPORT</name><parameter_list>(<parameter><type><name>float_0_to_1</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIR_MAX_CHANNELS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR_MAX_CHANNELS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STBIR_MAX_CHANNELS</name> <operator>&gt;</operator> <literal type="number">65536</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Too many channels; STBIR_MAX_CHANNELS must be no more than 65536."</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIR_ALPHA_EPSILON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR_ALPHA_EPSILON</name></cpp:macro> <cpp:value>((float)1 / (1 &lt;&lt; 20) / (1 &lt;&lt; 20) / (1 &lt;&lt; 20) / (1 &lt;&lt; 20))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR__UNUSED_PARAM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(v)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR__UNUSED_PARAM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)sizeof(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>stbir__type_size</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, 

<expr><literal type="number">2</literal></expr>, 

<expr><literal type="number">4</literal></expr>, 

<expr><literal type="number">4</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>float</name></type> (<name>stbir__kernel_fn</name>)<parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>float</name></type> (<name>stbir__support_fn</name>)<parameter_list>(<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>stbir__kernel_fn</name><modifier>*</modifier></type> <name>kernel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir__support_fn</name><modifier>*</modifier></type> <name>support</name></decl>;</decl_stmt>

}</block></struct></type> <name>stbir__filter_info</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>n0</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n1</name></decl>;</decl_stmt> 

}</block></struct></type> <name>stbir__contributors</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_stride_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>output_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_stride_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>s0</name></decl>, <name>t0</name>, <name>s1</name>, <name>t1</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>horizontal_shift</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>vertical_shift</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>horizontal_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>vertical_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alpha_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir_uint32</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir_datatype</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir_filter</name></type> <name>horizontal_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir_filter</name></type> <name>vertical_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir_edge</name></type> <name>edge_horizontal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir_edge</name></type> <name>edge_vertical</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir_colorspace</name></type> <name>colorspace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir__contributors</name><modifier>*</modifier></type> <name>horizontal_contributors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>horizontal_coefficients</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir__contributors</name><modifier>*</modifier></type> <name>vertical_contributors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>vertical_coefficients</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decode_buffer_pixels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>decode_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>horizontal_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>horizontal_coefficient_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vertical_coefficient_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>horizontal_filter_pixel_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vertical_filter_pixel_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>horizontal_filter_pixel_margin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vertical_filter_pixel_margin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>horizontal_num_contributors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vertical_num_contributors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_length_bytes</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_num_entries</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_first_scanline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_last_scanline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_begin_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>encode_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>horizontal_contributors_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>horizontal_coefficients_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vertical_contributors_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vertical_coefficients_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decode_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>horizontal_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>encode_buffer_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>stbir__info</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>stbir__max_uint8_as_float</name> <init>= <expr><literal type="number">255.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>stbir__max_uint16_as_float</name> <init>= <expr><literal type="number">65535.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>stbir__max_uint32_as_float</name> <init>= <expr><literal type="number">4294967295.0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>stbir__inline</name> <name>int</name></type> <name>stbir__min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbir__inline</name> <name>float</name></type> <name>stbir__saturate</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBIR_SATURATE_INT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>stbir__inline</name> <name>stbir_uint8</name></type> <name>stbir__saturate8</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>x</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">255</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbir__inline</name> <name>stbir_uint16</name></type> <name>stbir__saturate16</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>x</name> <operator>&lt;=</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">65535</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>stbir__srgb_uchar_to_linear_float</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">0.000304f</literal></expr>, <expr><literal type="number">0.000607f</literal></expr>, <expr><literal type="number">0.000911f</literal></expr>, <expr><literal type="number">0.001214f</literal></expr>, <expr><literal type="number">0.001518f</literal></expr>, <expr><literal type="number">0.001821f</literal></expr>, <expr><literal type="number">0.002125f</literal></expr>, <expr><literal type="number">0.002428f</literal></expr>, <expr><literal type="number">0.002732f</literal></expr>, <expr><literal type="number">0.003035f</literal></expr>,

<expr><literal type="number">0.003347f</literal></expr>, <expr><literal type="number">0.003677f</literal></expr>, <expr><literal type="number">0.004025f</literal></expr>, <expr><literal type="number">0.004391f</literal></expr>, <expr><literal type="number">0.004777f</literal></expr>, <expr><literal type="number">0.005182f</literal></expr>, <expr><literal type="number">0.005605f</literal></expr>, <expr><literal type="number">0.006049f</literal></expr>, <expr><literal type="number">0.006512f</literal></expr>, <expr><literal type="number">0.006995f</literal></expr>, <expr><literal type="number">0.007499f</literal></expr>,

<expr><literal type="number">0.008023f</literal></expr>, <expr><literal type="number">0.008568f</literal></expr>, <expr><literal type="number">0.009134f</literal></expr>, <expr><literal type="number">0.009721f</literal></expr>, <expr><literal type="number">0.010330f</literal></expr>, <expr><literal type="number">0.010960f</literal></expr>, <expr><literal type="number">0.011612f</literal></expr>, <expr><literal type="number">0.012286f</literal></expr>, <expr><literal type="number">0.012983f</literal></expr>, <expr><literal type="number">0.013702f</literal></expr>, <expr><literal type="number">0.014444f</literal></expr>,

<expr><literal type="number">0.015209f</literal></expr>, <expr><literal type="number">0.015996f</literal></expr>, <expr><literal type="number">0.016807f</literal></expr>, <expr><literal type="number">0.017642f</literal></expr>, <expr><literal type="number">0.018500f</literal></expr>, <expr><literal type="number">0.019382f</literal></expr>, <expr><literal type="number">0.020289f</literal></expr>, <expr><literal type="number">0.021219f</literal></expr>, <expr><literal type="number">0.022174f</literal></expr>, <expr><literal type="number">0.023153f</literal></expr>, <expr><literal type="number">0.024158f</literal></expr>,

<expr><literal type="number">0.025187f</literal></expr>, <expr><literal type="number">0.026241f</literal></expr>, <expr><literal type="number">0.027321f</literal></expr>, <expr><literal type="number">0.028426f</literal></expr>, <expr><literal type="number">0.029557f</literal></expr>, <expr><literal type="number">0.030713f</literal></expr>, <expr><literal type="number">0.031896f</literal></expr>, <expr><literal type="number">0.033105f</literal></expr>, <expr><literal type="number">0.034340f</literal></expr>, <expr><literal type="number">0.035601f</literal></expr>, <expr><literal type="number">0.036889f</literal></expr>,

<expr><literal type="number">0.038204f</literal></expr>, <expr><literal type="number">0.039546f</literal></expr>, <expr><literal type="number">0.040915f</literal></expr>, <expr><literal type="number">0.042311f</literal></expr>, <expr><literal type="number">0.043735f</literal></expr>, <expr><literal type="number">0.045186f</literal></expr>, <expr><literal type="number">0.046665f</literal></expr>, <expr><literal type="number">0.048172f</literal></expr>, <expr><literal type="number">0.049707f</literal></expr>, <expr><literal type="number">0.051269f</literal></expr>, <expr><literal type="number">0.052861f</literal></expr>,

<expr><literal type="number">0.054480f</literal></expr>, <expr><literal type="number">0.056128f</literal></expr>, <expr><literal type="number">0.057805f</literal></expr>, <expr><literal type="number">0.059511f</literal></expr>, <expr><literal type="number">0.061246f</literal></expr>, <expr><literal type="number">0.063010f</literal></expr>, <expr><literal type="number">0.064803f</literal></expr>, <expr><literal type="number">0.066626f</literal></expr>, <expr><literal type="number">0.068478f</literal></expr>, <expr><literal type="number">0.070360f</literal></expr>, <expr><literal type="number">0.072272f</literal></expr>,

<expr><literal type="number">0.074214f</literal></expr>, <expr><literal type="number">0.076185f</literal></expr>, <expr><literal type="number">0.078187f</literal></expr>, <expr><literal type="number">0.080220f</literal></expr>, <expr><literal type="number">0.082283f</literal></expr>, <expr><literal type="number">0.084376f</literal></expr>, <expr><literal type="number">0.086500f</literal></expr>, <expr><literal type="number">0.088656f</literal></expr>, <expr><literal type="number">0.090842f</literal></expr>, <expr><literal type="number">0.093059f</literal></expr>, <expr><literal type="number">0.095307f</literal></expr>,

<expr><literal type="number">0.097587f</literal></expr>, <expr><literal type="number">0.099899f</literal></expr>, <expr><literal type="number">0.102242f</literal></expr>, <expr><literal type="number">0.104616f</literal></expr>, <expr><literal type="number">0.107023f</literal></expr>, <expr><literal type="number">0.109462f</literal></expr>, <expr><literal type="number">0.111932f</literal></expr>, <expr><literal type="number">0.114435f</literal></expr>, <expr><literal type="number">0.116971f</literal></expr>, <expr><literal type="number">0.119538f</literal></expr>, <expr><literal type="number">0.122139f</literal></expr>,

<expr><literal type="number">0.124772f</literal></expr>, <expr><literal type="number">0.127438f</literal></expr>, <expr><literal type="number">0.130136f</literal></expr>, <expr><literal type="number">0.132868f</literal></expr>, <expr><literal type="number">0.135633f</literal></expr>, <expr><literal type="number">0.138432f</literal></expr>, <expr><literal type="number">0.141263f</literal></expr>, <expr><literal type="number">0.144128f</literal></expr>, <expr><literal type="number">0.147027f</literal></expr>, <expr><literal type="number">0.149960f</literal></expr>, <expr><literal type="number">0.152926f</literal></expr>,

<expr><literal type="number">0.155926f</literal></expr>, <expr><literal type="number">0.158961f</literal></expr>, <expr><literal type="number">0.162029f</literal></expr>, <expr><literal type="number">0.165132f</literal></expr>, <expr><literal type="number">0.168269f</literal></expr>, <expr><literal type="number">0.171441f</literal></expr>, <expr><literal type="number">0.174647f</literal></expr>, <expr><literal type="number">0.177888f</literal></expr>, <expr><literal type="number">0.181164f</literal></expr>, <expr><literal type="number">0.184475f</literal></expr>, <expr><literal type="number">0.187821f</literal></expr>,

<expr><literal type="number">0.191202f</literal></expr>, <expr><literal type="number">0.194618f</literal></expr>, <expr><literal type="number">0.198069f</literal></expr>, <expr><literal type="number">0.201556f</literal></expr>, <expr><literal type="number">0.205079f</literal></expr>, <expr><literal type="number">0.208637f</literal></expr>, <expr><literal type="number">0.212231f</literal></expr>, <expr><literal type="number">0.215861f</literal></expr>, <expr><literal type="number">0.219526f</literal></expr>, <expr><literal type="number">0.223228f</literal></expr>, <expr><literal type="number">0.226966f</literal></expr>,

<expr><literal type="number">0.230740f</literal></expr>, <expr><literal type="number">0.234551f</literal></expr>, <expr><literal type="number">0.238398f</literal></expr>, <expr><literal type="number">0.242281f</literal></expr>, <expr><literal type="number">0.246201f</literal></expr>, <expr><literal type="number">0.250158f</literal></expr>, <expr><literal type="number">0.254152f</literal></expr>, <expr><literal type="number">0.258183f</literal></expr>, <expr><literal type="number">0.262251f</literal></expr>, <expr><literal type="number">0.266356f</literal></expr>, <expr><literal type="number">0.270498f</literal></expr>,

<expr><literal type="number">0.274677f</literal></expr>, <expr><literal type="number">0.278894f</literal></expr>, <expr><literal type="number">0.283149f</literal></expr>, <expr><literal type="number">0.287441f</literal></expr>, <expr><literal type="number">0.291771f</literal></expr>, <expr><literal type="number">0.296138f</literal></expr>, <expr><literal type="number">0.300544f</literal></expr>, <expr><literal type="number">0.304987f</literal></expr>, <expr><literal type="number">0.309469f</literal></expr>, <expr><literal type="number">0.313989f</literal></expr>, <expr><literal type="number">0.318547f</literal></expr>,

<expr><literal type="number">0.323143f</literal></expr>, <expr><literal type="number">0.327778f</literal></expr>, <expr><literal type="number">0.332452f</literal></expr>, <expr><literal type="number">0.337164f</literal></expr>, <expr><literal type="number">0.341914f</literal></expr>, <expr><literal type="number">0.346704f</literal></expr>, <expr><literal type="number">0.351533f</literal></expr>, <expr><literal type="number">0.356400f</literal></expr>, <expr><literal type="number">0.361307f</literal></expr>, <expr><literal type="number">0.366253f</literal></expr>, <expr><literal type="number">0.371238f</literal></expr>,

<expr><literal type="number">0.376262f</literal></expr>, <expr><literal type="number">0.381326f</literal></expr>, <expr><literal type="number">0.386430f</literal></expr>, <expr><literal type="number">0.391573f</literal></expr>, <expr><literal type="number">0.396755f</literal></expr>, <expr><literal type="number">0.401978f</literal></expr>, <expr><literal type="number">0.407240f</literal></expr>, <expr><literal type="number">0.412543f</literal></expr>, <expr><literal type="number">0.417885f</literal></expr>, <expr><literal type="number">0.423268f</literal></expr>, <expr><literal type="number">0.428691f</literal></expr>,

<expr><literal type="number">0.434154f</literal></expr>, <expr><literal type="number">0.439657f</literal></expr>, <expr><literal type="number">0.445201f</literal></expr>, <expr><literal type="number">0.450786f</literal></expr>, <expr><literal type="number">0.456411f</literal></expr>, <expr><literal type="number">0.462077f</literal></expr>, <expr><literal type="number">0.467784f</literal></expr>, <expr><literal type="number">0.473532f</literal></expr>, <expr><literal type="number">0.479320f</literal></expr>, <expr><literal type="number">0.485150f</literal></expr>, <expr><literal type="number">0.491021f</literal></expr>,

<expr><literal type="number">0.496933f</literal></expr>, <expr><literal type="number">0.502887f</literal></expr>, <expr><literal type="number">0.508881f</literal></expr>, <expr><literal type="number">0.514918f</literal></expr>, <expr><literal type="number">0.520996f</literal></expr>, <expr><literal type="number">0.527115f</literal></expr>, <expr><literal type="number">0.533276f</literal></expr>, <expr><literal type="number">0.539480f</literal></expr>, <expr><literal type="number">0.545725f</literal></expr>, <expr><literal type="number">0.552011f</literal></expr>, <expr><literal type="number">0.558340f</literal></expr>,

<expr><literal type="number">0.564712f</literal></expr>, <expr><literal type="number">0.571125f</literal></expr>, <expr><literal type="number">0.577581f</literal></expr>, <expr><literal type="number">0.584078f</literal></expr>, <expr><literal type="number">0.590619f</literal></expr>, <expr><literal type="number">0.597202f</literal></expr>, <expr><literal type="number">0.603827f</literal></expr>, <expr><literal type="number">0.610496f</literal></expr>, <expr><literal type="number">0.617207f</literal></expr>, <expr><literal type="number">0.623960f</literal></expr>, <expr><literal type="number">0.630757f</literal></expr>,

<expr><literal type="number">0.637597f</literal></expr>, <expr><literal type="number">0.644480f</literal></expr>, <expr><literal type="number">0.651406f</literal></expr>, <expr><literal type="number">0.658375f</literal></expr>, <expr><literal type="number">0.665387f</literal></expr>, <expr><literal type="number">0.672443f</literal></expr>, <expr><literal type="number">0.679543f</literal></expr>, <expr><literal type="number">0.686685f</literal></expr>, <expr><literal type="number">0.693872f</literal></expr>, <expr><literal type="number">0.701102f</literal></expr>, <expr><literal type="number">0.708376f</literal></expr>,

<expr><literal type="number">0.715694f</literal></expr>, <expr><literal type="number">0.723055f</literal></expr>, <expr><literal type="number">0.730461f</literal></expr>, <expr><literal type="number">0.737911f</literal></expr>, <expr><literal type="number">0.745404f</literal></expr>, <expr><literal type="number">0.752942f</literal></expr>, <expr><literal type="number">0.760525f</literal></expr>, <expr><literal type="number">0.768151f</literal></expr>, <expr><literal type="number">0.775822f</literal></expr>, <expr><literal type="number">0.783538f</literal></expr>, <expr><literal type="number">0.791298f</literal></expr>,

<expr><literal type="number">0.799103f</literal></expr>, <expr><literal type="number">0.806952f</literal></expr>, <expr><literal type="number">0.814847f</literal></expr>, <expr><literal type="number">0.822786f</literal></expr>, <expr><literal type="number">0.830770f</literal></expr>, <expr><literal type="number">0.838799f</literal></expr>, <expr><literal type="number">0.846873f</literal></expr>, <expr><literal type="number">0.854993f</literal></expr>, <expr><literal type="number">0.863157f</literal></expr>, <expr><literal type="number">0.871367f</literal></expr>, <expr><literal type="number">0.879622f</literal></expr>,

<expr><literal type="number">0.887923f</literal></expr>, <expr><literal type="number">0.896269f</literal></expr>, <expr><literal type="number">0.904661f</literal></expr>, <expr><literal type="number">0.913099f</literal></expr>, <expr><literal type="number">0.921582f</literal></expr>, <expr><literal type="number">0.930111f</literal></expr>, <expr><literal type="number">0.938686f</literal></expr>, <expr><literal type="number">0.947307f</literal></expr>, <expr><literal type="number">0.955974f</literal></expr>, <expr><literal type="number">0.964686f</literal></expr>, <expr><literal type="number">0.973445f</literal></expr>,

<expr><literal type="number">0.982251f</literal></expr>, <expr><literal type="number">0.991102f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbir__srgb_to_linear</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&lt;=</operator> <literal type="number">0.04045f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>f</name> <operator>/</operator> <literal type="number">12.92f</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>f</name> <operator>+</operator> <literal type="number">0.055f</literal><operator>)</operator> <operator>/</operator> <literal type="number">1.055f</literal></expr></argument>, <argument><expr><literal type="number">2.4f</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbir__linear_to_srgb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&lt;=</operator> <literal type="number">0.0031308f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>f</name> <operator>*</operator> <literal type="number">12.92f</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">1.055f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>pow</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>/</operator> <literal type="number">2.4f</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.055f</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIR_NON_IEEE_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><union>union

<block>{

<decl_stmt><decl><type><name>stbir_uint32</name></type> <name>u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>

}</block></union></type> <name>stbir__FP32</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>stbir_uint32</name></type> <name><name>fp32_to_srgb8_tab4</name><index>[<expr><literal type="number">104</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x0073000d</literal></expr>, <expr><literal type="number">0x007a000d</literal></expr>, <expr><literal type="number">0x0080000d</literal></expr>, <expr><literal type="number">0x0087000d</literal></expr>, <expr><literal type="number">0x008d000d</literal></expr>, <expr><literal type="number">0x0094000d</literal></expr>, <expr><literal type="number">0x009a000d</literal></expr>, <expr><literal type="number">0x00a1000d</literal></expr>,

<expr><literal type="number">0x00a7001a</literal></expr>, <expr><literal type="number">0x00b4001a</literal></expr>, <expr><literal type="number">0x00c1001a</literal></expr>, <expr><literal type="number">0x00ce001a</literal></expr>, <expr><literal type="number">0x00da001a</literal></expr>, <expr><literal type="number">0x00e7001a</literal></expr>, <expr><literal type="number">0x00f4001a</literal></expr>, <expr><literal type="number">0x0101001a</literal></expr>,

<expr><literal type="number">0x010e0033</literal></expr>, <expr><literal type="number">0x01280033</literal></expr>, <expr><literal type="number">0x01410033</literal></expr>, <expr><literal type="number">0x015b0033</literal></expr>, <expr><literal type="number">0x01750033</literal></expr>, <expr><literal type="number">0x018f0033</literal></expr>, <expr><literal type="number">0x01a80033</literal></expr>, <expr><literal type="number">0x01c20033</literal></expr>,

<expr><literal type="number">0x01dc0067</literal></expr>, <expr><literal type="number">0x020f0067</literal></expr>, <expr><literal type="number">0x02430067</literal></expr>, <expr><literal type="number">0x02760067</literal></expr>, <expr><literal type="number">0x02aa0067</literal></expr>, <expr><literal type="number">0x02dd0067</literal></expr>, <expr><literal type="number">0x03110067</literal></expr>, <expr><literal type="number">0x03440067</literal></expr>,

<expr><literal type="number">0x037800ce</literal></expr>, <expr><literal type="number">0x03df00ce</literal></expr>, <expr><literal type="number">0x044600ce</literal></expr>, <expr><literal type="number">0x04ad00ce</literal></expr>, <expr><literal type="number">0x051400ce</literal></expr>, <expr><literal type="number">0x057b00c5</literal></expr>, <expr><literal type="number">0x05dd00bc</literal></expr>, <expr><literal type="number">0x063b00b5</literal></expr>,

<expr><literal type="number">0x06970158</literal></expr>, <expr><literal type="number">0x07420142</literal></expr>, <expr><literal type="number">0x07e30130</literal></expr>, <expr><literal type="number">0x087b0120</literal></expr>, <expr><literal type="number">0x090b0112</literal></expr>, <expr><literal type="number">0x09940106</literal></expr>, <expr><literal type="number">0x0a1700fc</literal></expr>, <expr><literal type="number">0x0a9500f2</literal></expr>,

<expr><literal type="number">0x0b0f01cb</literal></expr>, <expr><literal type="number">0x0bf401ae</literal></expr>, <expr><literal type="number">0x0ccb0195</literal></expr>, <expr><literal type="number">0x0d950180</literal></expr>, <expr><literal type="number">0x0e56016e</literal></expr>, <expr><literal type="number">0x0f0d015e</literal></expr>, <expr><literal type="number">0x0fbc0150</literal></expr>, <expr><literal type="number">0x10630143</literal></expr>,

<expr><literal type="number">0x11070264</literal></expr>, <expr><literal type="number">0x1238023e</literal></expr>, <expr><literal type="number">0x1357021d</literal></expr>, <expr><literal type="number">0x14660201</literal></expr>, <expr><literal type="number">0x156601e9</literal></expr>, <expr><literal type="number">0x165a01d3</literal></expr>, <expr><literal type="number">0x174401c0</literal></expr>, <expr><literal type="number">0x182401af</literal></expr>,

<expr><literal type="number">0x18fe0331</literal></expr>, <expr><literal type="number">0x1a9602fe</literal></expr>, <expr><literal type="number">0x1c1502d2</literal></expr>, <expr><literal type="number">0x1d7e02ad</literal></expr>, <expr><literal type="number">0x1ed4028d</literal></expr>, <expr><literal type="number">0x201a0270</literal></expr>, <expr><literal type="number">0x21520256</literal></expr>, <expr><literal type="number">0x227d0240</literal></expr>,

<expr><literal type="number">0x239f0443</literal></expr>, <expr><literal type="number">0x25c003fe</literal></expr>, <expr><literal type="number">0x27bf03c4</literal></expr>, <expr><literal type="number">0x29a10392</literal></expr>, <expr><literal type="number">0x2b6a0367</literal></expr>, <expr><literal type="number">0x2d1d0341</literal></expr>, <expr><literal type="number">0x2ebe031f</literal></expr>, <expr><literal type="number">0x304d0300</literal></expr>,

<expr><literal type="number">0x31d105b0</literal></expr>, <expr><literal type="number">0x34a80555</literal></expr>, <expr><literal type="number">0x37520507</literal></expr>, <expr><literal type="number">0x39d504c5</literal></expr>, <expr><literal type="number">0x3c37048b</literal></expr>, <expr><literal type="number">0x3e7c0458</literal></expr>, <expr><literal type="number">0x40a8042a</literal></expr>, <expr><literal type="number">0x42bd0401</literal></expr>,

<expr><literal type="number">0x44c20798</literal></expr>, <expr><literal type="number">0x488e071e</literal></expr>, <expr><literal type="number">0x4c1c06b6</literal></expr>, <expr><literal type="number">0x4f76065d</literal></expr>, <expr><literal type="number">0x52a50610</literal></expr>, <expr><literal type="number">0x55ac05cc</literal></expr>, <expr><literal type="number">0x5892058f</literal></expr>, <expr><literal type="number">0x5b590559</literal></expr>,

<expr><literal type="number">0x5e0c0a23</literal></expr>, <expr><literal type="number">0x631c0980</literal></expr>, <expr><literal type="number">0x67db08f6</literal></expr>, <expr><literal type="number">0x6c55087f</literal></expr>, <expr><literal type="number">0x70940818</literal></expr>, <expr><literal type="number">0x74a007bd</literal></expr>, <expr><literal type="number">0x787d076c</literal></expr>, <expr><literal type="number">0x7c330723</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>stbir_uint8</name></type> <name>stbir__linear_to_srgb_uchar</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>stbir__FP32</name></type> <name>almostone</name> <init>= <expr><block>{ <expr><literal type="number">0x3f7fffff</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>stbir__FP32</name></type> <name>minval</name> <init>= <expr><block>{ <expr><operator>(</operator><literal type="number">127</literal><operator>-</operator><literal type="number">13</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">23</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir_uint32</name></type> <name>tab</name></decl>,<decl><type ref="prev"/><name>bias</name></decl>,<decl><type ref="prev"/><name>scale</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir__FP32</name></type> <name>f</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>in</name> <operator>&gt;</operator> <name><name>minval</name><operator>.</operator><name>f</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>minval</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>&gt;</operator> <name><name>almostone</name><operator>.</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>almostone</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <name><name>fp32_to_srgb8_tab4</name><index>[<expr><operator>(</operator><name><name>f</name><operator>.</operator><name>u</name></name> <operator>-</operator> <name><name>minval</name><operator>.</operator><name>u</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bias</name> <operator>=</operator> <operator>(</operator><name>tab</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <name>tab</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name><name>f</name><operator>.</operator><name>u</name></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>bias</name> <operator>+</operator> <name>scale</name><operator>*</operator><name>t</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>stbir__srgb_offset_to_linear_scaled</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">40738</literal></expr>, <expr><literal type="number">122216</literal></expr>, <expr><literal type="number">203693</literal></expr>, <expr><literal type="number">285170</literal></expr>, <expr><literal type="number">366648</literal></expr>, <expr><literal type="number">448125</literal></expr>, <expr><literal type="number">529603</literal></expr>,

<expr><literal type="number">611080</literal></expr>, <expr><literal type="number">692557</literal></expr>, <expr><literal type="number">774035</literal></expr>, <expr><literal type="number">855852</literal></expr>, <expr><literal type="number">942009</literal></expr>, <expr><literal type="number">1033024</literal></expr>, <expr><literal type="number">1128971</literal></expr>, <expr><literal type="number">1229926</literal></expr>,

<expr><literal type="number">1335959</literal></expr>, <expr><literal type="number">1447142</literal></expr>, <expr><literal type="number">1563542</literal></expr>, <expr><literal type="number">1685229</literal></expr>, <expr><literal type="number">1812268</literal></expr>, <expr><literal type="number">1944725</literal></expr>, <expr><literal type="number">2082664</literal></expr>, <expr><literal type="number">2226148</literal></expr>,

<expr><literal type="number">2375238</literal></expr>, <expr><literal type="number">2529996</literal></expr>, <expr><literal type="number">2690481</literal></expr>, <expr><literal type="number">2856753</literal></expr>, <expr><literal type="number">3028870</literal></expr>, <expr><literal type="number">3206888</literal></expr>, <expr><literal type="number">3390865</literal></expr>, <expr><literal type="number">3580856</literal></expr>,

<expr><literal type="number">3776916</literal></expr>, <expr><literal type="number">3979100</literal></expr>, <expr><literal type="number">4187460</literal></expr>, <expr><literal type="number">4402049</literal></expr>, <expr><literal type="number">4622919</literal></expr>, <expr><literal type="number">4850123</literal></expr>, <expr><literal type="number">5083710</literal></expr>, <expr><literal type="number">5323731</literal></expr>,

<expr><literal type="number">5570236</literal></expr>, <expr><literal type="number">5823273</literal></expr>, <expr><literal type="number">6082892</literal></expr>, <expr><literal type="number">6349140</literal></expr>, <expr><literal type="number">6622065</literal></expr>, <expr><literal type="number">6901714</literal></expr>, <expr><literal type="number">7188133</literal></expr>, <expr><literal type="number">7481369</literal></expr>,

<expr><literal type="number">7781466</literal></expr>, <expr><literal type="number">8088471</literal></expr>, <expr><literal type="number">8402427</literal></expr>, <expr><literal type="number">8723380</literal></expr>, <expr><literal type="number">9051372</literal></expr>, <expr><literal type="number">9386448</literal></expr>, <expr><literal type="number">9728650</literal></expr>, <expr><literal type="number">10078021</literal></expr>,

<expr><literal type="number">10434603</literal></expr>, <expr><literal type="number">10798439</literal></expr>, <expr><literal type="number">11169569</literal></expr>, <expr><literal type="number">11548036</literal></expr>, <expr><literal type="number">11933879</literal></expr>, <expr><literal type="number">12327139</literal></expr>, <expr><literal type="number">12727857</literal></expr>, <expr><literal type="number">13136073</literal></expr>,

<expr><literal type="number">13551826</literal></expr>, <expr><literal type="number">13975156</literal></expr>, <expr><literal type="number">14406100</literal></expr>, <expr><literal type="number">14844697</literal></expr>, <expr><literal type="number">15290987</literal></expr>, <expr><literal type="number">15745007</literal></expr>, <expr><literal type="number">16206795</literal></expr>, <expr><literal type="number">16676389</literal></expr>,

<expr><literal type="number">17153826</literal></expr>, <expr><literal type="number">17639142</literal></expr>, <expr><literal type="number">18132374</literal></expr>, <expr><literal type="number">18633560</literal></expr>, <expr><literal type="number">19142734</literal></expr>, <expr><literal type="number">19659934</literal></expr>, <expr><literal type="number">20185196</literal></expr>, <expr><literal type="number">20718552</literal></expr>,

<expr><literal type="number">21260042</literal></expr>, <expr><literal type="number">21809696</literal></expr>, <expr><literal type="number">22367554</literal></expr>, <expr><literal type="number">22933648</literal></expr>, <expr><literal type="number">23508010</literal></expr>, <expr><literal type="number">24090680</literal></expr>, <expr><literal type="number">24681686</literal></expr>, <expr><literal type="number">25281066</literal></expr>,

<expr><literal type="number">25888850</literal></expr>, <expr><literal type="number">26505076</literal></expr>, <expr><literal type="number">27129772</literal></expr>, <expr><literal type="number">27762974</literal></expr>, <expr><literal type="number">28404716</literal></expr>, <expr><literal type="number">29055026</literal></expr>, <expr><literal type="number">29713942</literal></expr>, <expr><literal type="number">30381490</literal></expr>,

<expr><literal type="number">31057708</literal></expr>, <expr><literal type="number">31742624</literal></expr>, <expr><literal type="number">32436272</literal></expr>, <expr><literal type="number">33138682</literal></expr>, <expr><literal type="number">33849884</literal></expr>, <expr><literal type="number">34569912</literal></expr>, <expr><literal type="number">35298800</literal></expr>, <expr><literal type="number">36036568</literal></expr>,

<expr><literal type="number">36783260</literal></expr>, <expr><literal type="number">37538896</literal></expr>, <expr><literal type="number">38303512</literal></expr>, <expr><literal type="number">39077136</literal></expr>, <expr><literal type="number">39859796</literal></expr>, <expr><literal type="number">40651528</literal></expr>, <expr><literal type="number">41452360</literal></expr>, <expr><literal type="number">42262316</literal></expr>,

<expr><literal type="number">43081432</literal></expr>, <expr><literal type="number">43909732</literal></expr>, <expr><literal type="number">44747252</literal></expr>, <expr><literal type="number">45594016</literal></expr>, <expr><literal type="number">46450052</literal></expr>, <expr><literal type="number">47315392</literal></expr>, <expr><literal type="number">48190064</literal></expr>, <expr><literal type="number">49074096</literal></expr>,

<expr><literal type="number">49967516</literal></expr>, <expr><literal type="number">50870356</literal></expr>, <expr><literal type="number">51782636</literal></expr>, <expr><literal type="number">52704392</literal></expr>, <expr><literal type="number">53635648</literal></expr>, <expr><literal type="number">54576432</literal></expr>, <expr><literal type="number">55526772</literal></expr>, <expr><literal type="number">56486700</literal></expr>,

<expr><literal type="number">57456236</literal></expr>, <expr><literal type="number">58435408</literal></expr>, <expr><literal type="number">59424248</literal></expr>, <expr><literal type="number">60422780</literal></expr>, <expr><literal type="number">61431036</literal></expr>, <expr><literal type="number">62449032</literal></expr>, <expr><literal type="number">63476804</literal></expr>, <expr><literal type="number">64514376</literal></expr>,

<expr><literal type="number">65561776</literal></expr>, <expr><literal type="number">66619028</literal></expr>, <expr><literal type="number">67686160</literal></expr>, <expr><literal type="number">68763192</literal></expr>, <expr><literal type="number">69850160</literal></expr>, <expr><literal type="number">70947088</literal></expr>, <expr><literal type="number">72053992</literal></expr>, <expr><literal type="number">73170912</literal></expr>,

<expr><literal type="number">74297864</literal></expr>, <expr><literal type="number">75434880</literal></expr>, <expr><literal type="number">76581976</literal></expr>, <expr><literal type="number">77739184</literal></expr>, <expr><literal type="number">78906536</literal></expr>, <expr><literal type="number">80084040</literal></expr>, <expr><literal type="number">81271736</literal></expr>, <expr><literal type="number">82469648</literal></expr>,

<expr><literal type="number">83677792</literal></expr>, <expr><literal type="number">84896192</literal></expr>, <expr><literal type="number">86124888</literal></expr>, <expr><literal type="number">87363888</literal></expr>, <expr><literal type="number">88613232</literal></expr>, <expr><literal type="number">89872928</literal></expr>, <expr><literal type="number">91143016</literal></expr>, <expr><literal type="number">92423512</literal></expr>,

<expr><literal type="number">93714432</literal></expr>, <expr><literal type="number">95015816</literal></expr>, <expr><literal type="number">96327688</literal></expr>, <expr><literal type="number">97650056</literal></expr>, <expr><literal type="number">98982952</literal></expr>, <expr><literal type="number">100326408</literal></expr>, <expr><literal type="number">101680440</literal></expr>, <expr><literal type="number">103045072</literal></expr>,

<expr><literal type="number">104420320</literal></expr>, <expr><literal type="number">105806224</literal></expr>, <expr><literal type="number">107202800</literal></expr>, <expr><literal type="number">108610064</literal></expr>, <expr><literal type="number">110028048</literal></expr>, <expr><literal type="number">111456776</literal></expr>, <expr><literal type="number">112896264</literal></expr>, <expr><literal type="number">114346544</literal></expr>,

<expr><literal type="number">115807632</literal></expr>, <expr><literal type="number">117279552</literal></expr>, <expr><literal type="number">118762328</literal></expr>, <expr><literal type="number">120255976</literal></expr>, <expr><literal type="number">121760536</literal></expr>, <expr><literal type="number">123276016</literal></expr>, <expr><literal type="number">124802440</literal></expr>, <expr><literal type="number">126339832</literal></expr>,

<expr><literal type="number">127888216</literal></expr>, <expr><literal type="number">129447616</literal></expr>, <expr><literal type="number">131018048</literal></expr>, <expr><literal type="number">132599544</literal></expr>, <expr><literal type="number">134192112</literal></expr>, <expr><literal type="number">135795792</literal></expr>, <expr><literal type="number">137410592</literal></expr>, <expr><literal type="number">139036528</literal></expr>,

<expr><literal type="number">140673648</literal></expr>, <expr><literal type="number">142321952</literal></expr>, <expr><literal type="number">143981456</literal></expr>, <expr><literal type="number">145652208</literal></expr>, <expr><literal type="number">147334208</literal></expr>, <expr><literal type="number">149027488</literal></expr>, <expr><literal type="number">150732064</literal></expr>, <expr><literal type="number">152447968</literal></expr>,

<expr><literal type="number">154175200</literal></expr>, <expr><literal type="number">155913792</literal></expr>, <expr><literal type="number">157663776</literal></expr>, <expr><literal type="number">159425168</literal></expr>, <expr><literal type="number">161197984</literal></expr>, <expr><literal type="number">162982240</literal></expr>, <expr><literal type="number">164777968</literal></expr>, <expr><literal type="number">166585184</literal></expr>,

<expr><literal type="number">168403904</literal></expr>, <expr><literal type="number">170234160</literal></expr>, <expr><literal type="number">172075968</literal></expr>, <expr><literal type="number">173929344</literal></expr>, <expr><literal type="number">175794320</literal></expr>, <expr><literal type="number">177670896</literal></expr>, <expr><literal type="number">179559120</literal></expr>, <expr><literal type="number">181458992</literal></expr>,

<expr><literal type="number">183370528</literal></expr>, <expr><literal type="number">185293776</literal></expr>, <expr><literal type="number">187228736</literal></expr>, <expr><literal type="number">189175424</literal></expr>, <expr><literal type="number">191133888</literal></expr>, <expr><literal type="number">193104112</literal></expr>, <expr><literal type="number">195086128</literal></expr>, <expr><literal type="number">197079968</literal></expr>,

<expr><literal type="number">199085648</literal></expr>, <expr><literal type="number">201103184</literal></expr>, <expr><literal type="number">203132592</literal></expr>, <expr><literal type="number">205173888</literal></expr>, <expr><literal type="number">207227120</literal></expr>, <expr><literal type="number">209292272</literal></expr>, <expr><literal type="number">211369392</literal></expr>, <expr><literal type="number">213458480</literal></expr>,

<expr><literal type="number">215559568</literal></expr>, <expr><literal type="number">217672656</literal></expr>, <expr><literal type="number">219797792</literal></expr>, <expr><literal type="number">221934976</literal></expr>, <expr><literal type="number">224084240</literal></expr>, <expr><literal type="number">226245600</literal></expr>, <expr><literal type="number">228419056</literal></expr>, <expr><literal type="number">230604656</literal></expr>,

<expr><literal type="number">232802400</literal></expr>, <expr><literal type="number">235012320</literal></expr>, <expr><literal type="number">237234432</literal></expr>, <expr><literal type="number">239468736</literal></expr>, <expr><literal type="number">241715280</literal></expr>, <expr><literal type="number">243974080</literal></expr>, <expr><literal type="number">246245120</literal></expr>, <expr><literal type="number">248528464</literal></expr>,

<expr><literal type="number">250824112</literal></expr>, <expr><literal type="number">253132064</literal></expr>, <expr><literal type="number">255452368</literal></expr>, <expr><literal type="number">257785040</literal></expr>, <expr><literal type="number">260130080</literal></expr>, <expr><literal type="number">262487520</literal></expr>, <expr><literal type="number">264857376</literal></expr>, <expr><literal type="number">267239664</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>stbir_uint8</name></type> <name>stbir__linear_to_srgb_uchar</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>f</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>v</name> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>stbir__srgb_offset_to_linear_scaled</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>v</name> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>stbir__srgb_offset_to_linear_scaled</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>v</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>stbir__srgb_offset_to_linear_scaled</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>v</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>stbir__srgb_offset_to_linear_scaled</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>v</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>stbir__srgb_offset_to_linear_scaled</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>v</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>stbir__srgb_offset_to_linear_scaled</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>stbir__srgb_offset_to_linear_scaled</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>stbir__srgb_offset_to_linear_scaled</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>stbir_uint8</name><operator>)</operator> <name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbir__filter_trapezoid</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>halfscale</name> <init>= <expr><name>scale</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><literal type="number">0.5f</literal> <operator>+</operator> <name>halfscale</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>scale</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>r</name> <init>= <expr><literal type="number">0.5f</literal> <operator>-</operator> <name>halfscale</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>t</name> <operator>-</operator> <name>x</name><operator>)</operator> <operator>/</operator> <name>scale</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbir__support_trapezoid</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>scale</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0.5f</literal> <operator>+</operator> <name>scale</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbir__filter_triangle</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>STBIR__UNUSED_PARAM</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal> <operator>-</operator> <name>x</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbir__filter_cubic</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>STBIR__UNUSED_PARAM</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>x</name><operator>*</operator><name>x</name><operator>*</operator><operator>(</operator><literal type="number">3</literal><operator>*</operator><name>x</name> <operator>-</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">6</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">2.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>x</name><operator>*</operator><operator>(</operator><operator>-</operator><literal type="number">12</literal> <operator>+</operator> <name>x</name><operator>*</operator><operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>x</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0.0f</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbir__filter_catmullrom</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>STBIR__UNUSED_PARAM</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal> <operator>-</operator> <name>x</name><operator>*</operator><name>x</name><operator>*</operator><operator>(</operator><literal type="number">2.5f</literal> <operator>-</operator> <literal type="number">1.5f</literal><operator>*</operator><name>x</name><operator>)</operator></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">2.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal> <operator>-</operator> <name>x</name><operator>*</operator><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>x</name><operator>*</operator><operator>(</operator><literal type="number">0.5f</literal><operator>*</operator><name>x</name> <operator>-</operator> <literal type="number">2.5f</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0.0f</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbir__filter_mitchell</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>STBIR__UNUSED_PARAM</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>x</name><operator>*</operator><name>x</name><operator>*</operator><operator>(</operator><literal type="number">21</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">36</literal><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">18</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">2.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><literal type="number">32</literal> <operator>+</operator> <name>x</name><operator>*</operator><operator>(</operator><operator>-</operator><literal type="number">60</literal> <operator>+</operator> <name>x</name><operator>*</operator><operator>(</operator><literal type="number">36</literal> <operator>-</operator> <literal type="number">7</literal><operator>*</operator><name>x</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">18</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0.0f</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbir__support_zero</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>STBIR__UNUSED_PARAM</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbir__support_one</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>STBIR__UNUSED_PARAM</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbir__support_two</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>STBIR__UNUSED_PARAM</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>stbir__filter_info</name></type> <name><name>stbir__filter_info_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>stbir__support_zero</name></expr> }</block></expr>,

<expr><block>{ <expr><name>stbir__filter_trapezoid</name></expr>, <expr><name>stbir__support_trapezoid</name></expr> }</block></expr>,

<expr><block>{ <expr><name>stbir__filter_triangle</name></expr>, <expr><name>stbir__support_one</name></expr> }</block></expr>,

<expr><block>{ <expr><name>stbir__filter_cubic</name></expr>, <expr><name>stbir__support_two</name></expr> }</block></expr>,

<expr><block>{ <expr><name>stbir__filter_catmullrom</name></expr>, <expr><name>stbir__support_two</name></expr> }</block></expr>,

<expr><block>{ <expr><name>stbir__filter_mitchell</name></expr>, <expr><name>stbir__support_two</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>stbir__inline</name> <specifier>static</specifier> <name>int</name></type> <name>stbir__use_upsampling</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>ratio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>ratio</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>stbir__inline</name> <specifier>static</specifier> <name>int</name></type> <name>stbir__use_width_upsampling</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbir__use_upsampling</name><argument_list>(<argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_scale</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>stbir__inline</name> <specifier>static</specifier> <name>int</name></type> <name>stbir__use_height_upsampling</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbir__use_upsampling</name><argument_list>(<argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_scale</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbir__get_filter_pixel_width</name><parameter_list>(<parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>filter</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>filter</name> <operator>&lt;</operator> <call><name>STBIR__ARRAY_SIZE</name><argument_list>(<argument><expr><name>stbir__filter_info_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbir__use_upsampling</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><name><name>stbir__filter_info_table</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><call><name>support</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>/</operator><name>scale</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><name><name>stbir__filter_info_table</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><call><name>support</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbir__get_filter_pixel_margin</name><parameter_list>(<parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbir__get_filter_pixel_width</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbir__get_coefficient_width</name><parameter_list>(<parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbir__use_upsampling</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><name><name>stbir__filter_info_table</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><call><name>support</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>/</operator> <name>scale</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><name><name>stbir__filter_info_table</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><call><name>support</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbir__get_contributors</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>input_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbir__use_upsampling</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>output_size</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>input_size</name> <operator>+</operator> <call><name>stbir__get_filter_pixel_margin</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbir__get_total_horizontal_coefficients</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_num_contributors</name></name>

<operator>*</operator> <call><name>stbir__get_coefficient_width</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_scale</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbir__get_total_vertical_coefficients</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>info</name><operator>-&gt;</operator><name>vertical_num_contributors</name></name>

<operator>*</operator> <call><name>stbir__get_coefficient_width</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_scale</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbir__contributors</name><modifier>*</modifier></type> <name>stbir__get_contributor</name><parameter_list>(<parameter><decl><type><name>stbir__contributors</name><modifier>*</modifier></type> <name>contributors</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>contributors</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name><modifier>*</modifier></type> <name>stbir__get_coefficient</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>coefficients</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>stbir__get_coefficient_width</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>&amp;</operator><name><name>coefficients</name><index>[<expr><name>width</name><operator>*</operator><name>n</name> <operator>+</operator> <name>c</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbir__edge_wrap_slow</name><parameter_list>(<parameter><decl><type><name>stbir_edge</name></type> <name>edge</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>edge</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>STBIR_EDGE_ZERO</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

<case>case <expr><name>STBIR_EDGE_CLAMP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>max</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return> 

<case>case <expr><name>STBIR_EDGE_REFLECT</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><name>n</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>max</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max2</name> <init>= <expr><name>max</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>max2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>max2</name> <operator>-</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return> 

</block_content>}</block>

<case>case <expr><name>STBIR_EDGE_WRAP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>n</name> <operator>%</operator> <name>max</name><operator>)</operator></expr>;</return></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><operator>-</operator><name>n</name><operator>)</operator> <operator>%</operator> <name>max</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>m</name><operator>)</operator></expr>;</return>

</block_content>}</block></else></if_stmt>

<default>default:</default>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"Unimplemented edge type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>stbir__inline</name> <specifier>static</specifier> <name>int</name></type> <name>stbir__edge_wrap</name><parameter_list>(<parameter><decl><type><name>stbir_edge</name></type> <name>edge</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>stbir__edge_wrap_slow</name><argument_list>(<argument><expr><name>edge</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__calculate_sample_range_upsample</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>out_filter_radius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_ratio</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>out_shift</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>in_first_pixel</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>in_last_pixel</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>in_center_of_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>out_pixel_center</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>n</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>out_pixel_influence_lowerbound</name> <init>= <expr><name>out_pixel_center</name> <operator>-</operator> <name>out_filter_radius</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>out_pixel_influence_upperbound</name> <init>= <expr><name>out_pixel_center</name> <operator>+</operator> <name>out_filter_radius</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>in_pixel_influence_lowerbound</name> <init>= <expr><operator>(</operator><name>out_pixel_influence_lowerbound</name> <operator>+</operator> <name>out_shift</name><operator>)</operator> <operator>/</operator> <name>scale_ratio</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>in_pixel_influence_upperbound</name> <init>= <expr><operator>(</operator><name>out_pixel_influence_upperbound</name> <operator>+</operator> <name>out_shift</name><operator>)</operator> <operator>/</operator> <name>scale_ratio</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>in_center_of_out</name> <operator>=</operator> <operator>(</operator><name>out_pixel_center</name> <operator>+</operator> <name>out_shift</name><operator>)</operator> <operator>/</operator> <name>scale_ratio</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>in_first_pixel</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>floor</name><argument_list>(<argument><expr><name>in_pixel_influence_lowerbound</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>in_last_pixel</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>floor</name><argument_list>(<argument><expr><name>in_pixel_influence_upperbound</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__calculate_sample_range_downsample</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>in_pixels_radius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_ratio</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>out_shift</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>out_first_pixel</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>out_last_pixel</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>out_center_of_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>in_pixel_center</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>n</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>in_pixel_influence_lowerbound</name> <init>= <expr><name>in_pixel_center</name> <operator>-</operator> <name>in_pixels_radius</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>in_pixel_influence_upperbound</name> <init>= <expr><name>in_pixel_center</name> <operator>+</operator> <name>in_pixels_radius</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>out_pixel_influence_lowerbound</name> <init>= <expr><name>in_pixel_influence_lowerbound</name> <operator>*</operator> <name>scale_ratio</name> <operator>-</operator> <name>out_shift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>out_pixel_influence_upperbound</name> <init>= <expr><name>in_pixel_influence_upperbound</name> <operator>*</operator> <name>scale_ratio</name> <operator>-</operator> <name>out_shift</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>out_center_of_in</name> <operator>=</operator> <name>in_pixel_center</name> <operator>*</operator> <name>scale_ratio</name> <operator>-</operator> <name>out_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_first_pixel</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>floor</name><argument_list>(<argument><expr><name>out_pixel_influence_lowerbound</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_last_pixel</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>floor</name><argument_list>(<argument><expr><name>out_pixel_influence_upperbound</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__calculate_coefficients_upsample</name><parameter_list>(<parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_first_pixel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_last_pixel</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>in_center_of_out</name></decl></parameter>, <parameter><decl><type><name>stbir__contributors</name><modifier>*</modifier></type> <name>contributor</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>coefficient_group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>total_filter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>filter_scale</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>in_last_pixel</name> <operator>-</operator> <name>in_first_pixel</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><name><name>stbir__filter_info_table</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><call><name>support</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>/</operator><name>scale</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>contributor</name><operator>-&gt;</operator><name>n0</name></name> <operator>=</operator> <name>in_first_pixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>contributor</name><operator>-&gt;</operator><name>n1</name></name> <operator>=</operator> <name>in_last_pixel</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name><name>contributor</name><operator>-&gt;</operator><name>n1</name></name> <operator>&gt;=</operator> <name><name>contributor</name><operator>-&gt;</operator><name>n0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>in_last_pixel</name> <operator>-</operator> <name>in_first_pixel</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>in_pixel_center</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <name>in_first_pixel</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coefficient_group</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>stbir__filter_info_table</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><call><name>kernel</name><argument_list>(<argument><expr><name>in_center_of_out</name> <operator>-</operator> <name>in_pixel_center</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>/</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>coefficient_group</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>contributor</name><operator>-&gt;</operator><name>n0</name></name> <operator>=</operator> <operator>++</operator><name>in_first_pixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>total_filter</name> <operator>+=</operator> <name><name>coefficient_group</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name><name>stbir__filter_info_table</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><call><name>kernel</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>in_last_pixel</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal> <operator>-</operator> <name>in_center_of_out</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>/</operator><name>scale</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>total_filter</name> <operator>&gt;</operator> <literal type="number">0.9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>total_filter</name> <operator>&lt;</operator> <literal type="number">1.1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>filter_scale</name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <name>total_filter</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>in_last_pixel</name> <operator>-</operator> <name>in_first_pixel</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coefficient_group</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>filter_scale</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>in_last_pixel</name> <operator>-</operator> <name>in_first_pixel</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>coefficient_group</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>contributor</name><operator>-&gt;</operator><name>n1</name></name> <operator>=</operator> <name><name>contributor</name><operator>-&gt;</operator><name>n0</name></name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__calculate_coefficients_downsample</name><parameter_list>(<parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_ratio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_first_pixel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_last_pixel</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>out_center_of_in</name></decl></parameter>, <parameter><decl><type><name>stbir__contributors</name><modifier>*</modifier></type> <name>contributor</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>coefficient_group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>out_last_pixel</name> <operator>-</operator> <name>out_first_pixel</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><name><name>stbir__filter_info_table</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><call><name>support</name><argument_list>(<argument><expr><name>scale_ratio</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>contributor</name><operator>-&gt;</operator><name>n0</name></name> <operator>=</operator> <name>out_first_pixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>contributor</name><operator>-&gt;</operator><name>n1</name></name> <operator>=</operator> <name>out_last_pixel</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name><name>contributor</name><operator>-&gt;</operator><name>n1</name></name> <operator>&gt;=</operator> <name><name>contributor</name><operator>-&gt;</operator><name>n0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>out_last_pixel</name> <operator>-</operator> <name>out_first_pixel</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>out_pixel_center</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <name>out_first_pixel</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name>out_pixel_center</name> <operator>-</operator> <name>out_center_of_in</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coefficient_group</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>stbir__filter_info_table</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><call><name>kernel</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale_ratio</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name><name>stbir__filter_info_table</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><call><name>kernel</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>out_last_pixel</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal> <operator>-</operator> <name>out_center_of_in</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>out_last_pixel</name> <operator>-</operator> <name>out_first_pixel</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>coefficient_group</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>contributor</name><operator>-&gt;</operator><name>n1</name></name> <operator>=</operator> <name><name>contributor</name><operator>-&gt;</operator><name>n0</name></name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__normalize_downsample_coefficients</name><parameter_list>(<parameter><decl><type><name>stbir__contributors</name><modifier>*</modifier></type> <name>contributors</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>coefficients</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_ratio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>input_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_contributors</name> <init>= <expr><call><name>stbir__get_contributors</name><argument_list>(<argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>input_size</name></expr></argument>, <argument><expr><name>output_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_coefficients</name> <init>= <expr><call><name>stbir__get_coefficient_width</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>output_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_contributors</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>contributors</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n0</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>contributors</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n1</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><operator>*</operator><call><name>stbir__get_coefficient</name><argument_list>(<argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name><name>contributors</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>contributors</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n0</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>total</name> <operator>&gt;</operator> <literal type="number">0.9f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>total</name> <operator>&lt;</operator> <literal type="number">1.1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <name>total</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_contributors</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>contributors</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n0</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>contributors</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><call><name>stbir__get_coefficient</name><argument_list>(<argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name><name>contributors</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n0</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>scale</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>contributors</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n0</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_contributors</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>range</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>width</name></decl>;</decl_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><call><name>stbir__get_coefficient</name><argument_list>(<argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>contributors</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n0</name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>contributors</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n0</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>contributors</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n0</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>range</name> <operator>=</operator> <name><name>contributors</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n1</name> <operator>-</operator> <name><name>contributors</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n0</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>stbir__min</name><argument_list>(<argument><expr><name>num_coefficients</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>stbir__get_coefficient_width</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>skip</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><call><name>stbir__get_coefficient</name><argument_list>(<argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>*</operator><call><name>stbir__get_coefficient</name><argument_list>(<argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<continue>continue;</continue>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_contributors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>contributors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n1</name> <operator>=</operator> <call><name>stbir__min</name><argument_list>(<argument><expr><name><name>contributors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n1</name></expr></argument>, <argument><expr><name>output_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__calculate_filters</name><parameter_list>(<parameter><decl><type><name>stbir__contributors</name><modifier>*</modifier></type> <name>contributors</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>coefficients</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_ratio</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>input_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_contributors</name> <init>= <expr><call><name>stbir__get_contributors</name><argument_list>(<argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>input_size</name></expr></argument>, <argument><expr><name>output_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbir__use_upsampling</name><argument_list>(<argument><expr><name>scale_ratio</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>out_pixels_radius</name> <init>= <expr><name><name>stbir__filter_info_table</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><call><name>support</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>/</operator> <name>scale_ratio</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale_ratio</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>total_contributors</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>in_center_of_out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>in_first_pixel</name></decl>, <decl><type ref="prev"/><name>in_last_pixel</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbir__calculate_sample_range_upsample</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>out_pixels_radius</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_first_pixel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_last_pixel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_center_of_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbir__calculate_coefficients_upsample</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>in_first_pixel</name></expr></argument>, <argument><expr><name>in_last_pixel</name></expr></argument>, <argument><expr><name>in_center_of_out</name></expr></argument>, <argument><expr><call><name>stbir__get_contributor</name><argument_list>(<argument><expr><name>contributors</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>stbir__get_coefficient</name><argument_list>(<argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>in_pixels_radius</name> <init>= <expr><name><name>stbir__filter_info_table</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><call><name>support</name><argument_list>(<argument><expr><name>scale_ratio</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>scale_ratio</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>total_contributors</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>out_center_of_in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>out_first_pixel</name></decl>, <decl><type ref="prev"/><name>out_last_pixel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_adjusted</name> <init>= <expr><name>n</name> <operator>-</operator> <call><name>stbir__get_filter_pixel_margin</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbir__calculate_sample_range_downsample</name><argument_list>(<argument><expr><name>n_adjusted</name></expr></argument>, <argument><expr><name>in_pixels_radius</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_first_pixel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_last_pixel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_center_of_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbir__calculate_coefficients_downsample</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>out_first_pixel</name></expr></argument>, <argument><expr><name>out_last_pixel</name></expr></argument>, <argument><expr><name>out_center_of_in</name></expr></argument>, <argument><expr><call><name>stbir__get_contributor</name><argument_list>(<argument><expr><name>contributors</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>stbir__get_coefficient</name><argument_list>(<argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stbir__normalize_downsample_coefficients</name><argument_list>(<argument><expr><name>contributors</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name>input_size</name></expr></argument>, <argument><expr><name>output_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name><modifier>*</modifier></type> <name>stbir__get_decode_buffer</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>decode_buffer</name><index>[<expr><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_filter_pixel_margin</name></name> <operator>*</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>channels</name></name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR__DECODE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>colorspace</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(type) * (STBIR_MAX_COLORSPACES) + (int)(colorspace))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__decode_scanline</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alpha_channel</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>alpha_channel</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>colorspace</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>colorspace</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_w</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>input_w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>input_stride_bytes</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>input_stride_bytes</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>decode_buffer</name> <init>= <expr><call><name>stbir__get_decode_buffer</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir_edge</name></type> <name>edge_horizontal</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>edge_horizontal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir_edge</name></type> <name>edge_vertical</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>edge_vertical</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>in_buffer_row_offset</name> <init>= <expr><call><name>stbir__edge_wrap</name><argument_list>(<argument><expr><name>edge_vertical</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>input_h</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>input_stride_bytes</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input_data</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>input_data</name></name> <operator>+</operator> <name>in_buffer_row_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_x</name> <init>= <expr><name>input_w</name> <operator>+</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_filter_pixel_margin</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decode</name> <init>= <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>colorspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>-</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_filter_pixel_margin</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>edge_vertical</name> <operator>==</operator> <name>STBIR_EDGE_ZERO</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>input_h</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>x</name><operator>*</operator><name>channels</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>decode</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_UINT8</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_LINEAR</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>decode_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_pixel_index</name> <init>= <expr><call><name>stbir__edge_wrap</name><argument_list>(<argument><expr><name>edge_horizontal</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>input_data</name><operator>)</operator><index>[<expr><name>input_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index><operator>)</operator> <operator>/</operator> <name>stbir__max_uint8_as_float</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_UINT8</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_SRGB</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>decode_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_pixel_index</name> <init>= <expr><call><name>stbir__edge_wrap</name><argument_list>(<argument><expr><name>edge_horizontal</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <name><name>stbir__srgb_uchar_to_linear_float</name><index>[<expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>input_data</name><operator>)</operator><index>[<expr><name>input_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>STBIR_FLAG_ALPHA_USES_COLORSPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>input_data</name><operator>)</operator><index>[<expr><name>input_pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index><operator>)</operator> <operator>/</operator> <name>stbir__max_uint8_as_float</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_UINT16</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_LINEAR</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>decode_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_pixel_index</name> <init>= <expr><call><name>stbir__edge_wrap</name><argument_list>(<argument><expr><name>edge_horizontal</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator><name>input_data</name><operator>)</operator><index>[<expr><name>input_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index><operator>)</operator> <operator>/</operator> <name>stbir__max_uint16_as_float</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_UINT16</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_SRGB</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>decode_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_pixel_index</name> <init>= <expr><call><name>stbir__edge_wrap</name><argument_list>(<argument><expr><name>edge_horizontal</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <call><name>stbir__srgb_to_linear</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator><name>input_data</name><operator>)</operator><index>[<expr><name>input_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index><operator>)</operator> <operator>/</operator> <name>stbir__max_uint16_as_float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>STBIR_FLAG_ALPHA_USES_COLORSPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator><name>input_data</name><operator>)</operator><index>[<expr><name>input_pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index><operator>)</operator> <operator>/</operator> <name>stbir__max_uint16_as_float</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_UINT32</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_LINEAR</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>decode_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_pixel_index</name> <init>= <expr><call><name>stbir__edge_wrap</name><argument_list>(<argument><expr><name>edge_horizontal</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator><name>input_data</name><operator>)</operator><index>[<expr><name>input_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index><operator>)</operator> <operator>/</operator> <name>stbir__max_uint32_as_float</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_UINT32</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_SRGB</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>decode_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_pixel_index</name> <init>= <expr><call><name>stbir__edge_wrap</name><argument_list>(<argument><expr><name>edge_horizontal</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <call><name>stbir__srgb_to_linear</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator><name>input_data</name><operator>)</operator><index>[<expr><name>input_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index><operator>)</operator> <operator>/</operator> <name>stbir__max_uint32_as_float</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>STBIR_FLAG_ALPHA_USES_COLORSPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator><name>input_data</name><operator>)</operator><index>[<expr><name>input_pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index><operator>)</operator> <operator>/</operator> <name>stbir__max_uint32_as_float</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_FLOAT</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_LINEAR</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>decode_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_pixel_index</name> <init>= <expr><call><name>stbir__edge_wrap</name><argument_list>(<argument><expr><name>edge_horizontal</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator><name>input_data</name><operator>)</operator><index>[<expr><name>input_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_FLOAT</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_SRGB</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>decode_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_pixel_index</name> <init>= <expr><call><name>stbir__edge_wrap</name><argument_list>(<argument><expr><name>edge_horizontal</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <call><name>stbir__srgb_to_linear</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator><name>input_data</name><operator>)</operator><index>[<expr><name>input_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>STBIR_FLAG_ALPHA_USES_COLORSPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator><name>input_data</name><operator>)</operator><index>[<expr><name>input_pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"Unknown type/colorspace/channels combination."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>STBIR_FLAG_ALPHA_PREMULTIPLIED</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <operator>-</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_filter_pixel_margin</name></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>decode_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>alpha</name> <init>= <expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIR_NO_ALPHA_EPSILON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>stbir_info</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>STBIR_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>alpha</name> <operator>+=</operator> <name>STBIR_ALPHA_EPSILON</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index></name> <operator>=</operator> <name>alpha</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>alpha_channel</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>decode_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>*=</operator> <name>alpha</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>edge_horizontal</name> <operator>==</operator> <name>STBIR_EDGE_ZERO</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <operator>-</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_filter_pixel_margin</name></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>x</name><operator>*</operator><name>channels</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>input_w</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_buffer</name><index>[<expr><name>x</name><operator>*</operator><name>channels</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name><modifier>*</modifier></type> <name>stbir__get_ring_buffer_entry</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ring_buffer_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>ring_buffer</name><index>[<expr><name>index</name> <operator>*</operator> <name>ring_buffer_length</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name><modifier>*</modifier></type> <name>stbir__add_empty_ring_buffer_entry</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_last_scanline</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ring_buffer_index</name> <operator>=</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>ring_buffer_index</name> <operator>=</operator> <operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>+</operator> <operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_last_scanline</name></name> <operator>-</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name><operator>)</operator><operator>)</operator> <operator>%</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_num_entries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>ring_buffer_index</name> <operator>!=</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ring_buffer</name> <operator>=</operator> <call><name>stbir__get_ring_buffer_entry</name><argument_list>(<argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer</name></name></expr></argument>, <argument><expr><name>ring_buffer_index</name></expr></argument>, <argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_length_bytes</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ring_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_length_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ring_buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__resample_horizontal_upsample</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>output_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_w</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>output_w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>decode_buffer</name> <init>= <expr><call><name>stbir__get_decode_buffer</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir__contributors</name><modifier>*</modifier></type> <name>horizontal_contributors</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_contributors</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>horizontal_coefficients</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_coefficients</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_width</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_coefficient_width</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>output_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n0</name> <init>= <expr><name><name>horizontal_contributors</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>n0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n1</name> <init>= <expr><name><name>horizontal_contributors</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_group</name> <init>= <expr><name>coefficient_width</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>n1</name> <operator>&gt;=</operator> <name>n0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>n0</name> <operator>&gt;=</operator> <operator>-</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_filter_pixel_margin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>n1</name> <operator>&gt;=</operator> <operator>-</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_filter_pixel_margin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>n0</name> <operator>&lt;</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>input_w</name></name> <operator>+</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_filter_pixel_margin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>n1</name> <operator>&lt;</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>input_w</name></name> <operator>+</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_filter_pixel_margin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>k</name> <operator>*</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>horizontal_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>coefficient_counter</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>coefficient</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>k</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>horizontal_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>coefficient_counter</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>coefficient</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>k</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>horizontal_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>coefficient_counter</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>coefficient</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>k</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>horizontal_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>coefficient_counter</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>coefficient</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>k</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>horizontal_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>coefficient_counter</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>coefficient</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__resample_horizontal_downsample</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>output_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_w</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>input_w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>decode_buffer</name> <init>= <expr><call><name>stbir__get_decode_buffer</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir__contributors</name><modifier>*</modifier></type> <name>horizontal_contributors</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_contributors</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>horizontal_coefficients</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_coefficients</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_width</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_coefficient_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filter_pixel_margin</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_filter_pixel_margin</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_x</name> <init>= <expr><name>input_w</name> <operator>+</operator> <name>filter_pixel_margin</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>stbir__use_width_upsampling</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n0</name> <init>= <expr><name><name>horizontal_contributors</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>n0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n1</name> <init>= <expr><name><name>horizontal_contributors</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_x</name> <init>= <expr><name>x</name> <operator>-</operator> <name>filter_pixel_margin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>in_x</name> <operator>*</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_n</name> <init>= <expr><name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_group</name> <init>= <expr><name>coefficient_width</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>max_n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>out_pixel_index</name> <init>= <expr><name>k</name> <operator>*</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>horizontal_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>k</name> <operator>-</operator> <name>n0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>coefficient</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n0</name> <init>= <expr><name><name>horizontal_contributors</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>n0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n1</name> <init>= <expr><name><name>horizontal_contributors</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_x</name> <init>= <expr><name>x</name> <operator>-</operator> <name>filter_pixel_margin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>in_x</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_n</name> <init>= <expr><name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_group</name> <init>= <expr><name>coefficient_width</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>max_n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>out_pixel_index</name> <init>= <expr><name>k</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>horizontal_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>k</name> <operator>-</operator> <name>n0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>coefficient</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n0</name> <init>= <expr><name><name>horizontal_contributors</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>n0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n1</name> <init>= <expr><name><name>horizontal_contributors</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_x</name> <init>= <expr><name>x</name> <operator>-</operator> <name>filter_pixel_margin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>in_x</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_n</name> <init>= <expr><name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_group</name> <init>= <expr><name>coefficient_width</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>max_n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>out_pixel_index</name> <init>= <expr><name>k</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>horizontal_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>k</name> <operator>-</operator> <name>n0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>coefficient</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n0</name> <init>= <expr><name><name>horizontal_contributors</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>n0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n1</name> <init>= <expr><name><name>horizontal_contributors</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_x</name> <init>= <expr><name>x</name> <operator>-</operator> <name>filter_pixel_margin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>in_x</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_n</name> <init>= <expr><name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_group</name> <init>= <expr><name>coefficient_width</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>max_n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>out_pixel_index</name> <init>= <expr><name>k</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>horizontal_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>k</name> <operator>-</operator> <name>n0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>coefficient</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>max_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n0</name> <init>= <expr><name><name>horizontal_contributors</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>n0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n1</name> <init>= <expr><name><name>horizontal_contributors</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_x</name> <init>= <expr><name>x</name> <operator>-</operator> <name>filter_pixel_margin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>in_x</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_n</name> <init>= <expr><name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_group</name> <init>= <expr><name>coefficient_width</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>max_n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_pixel_index</name> <init>= <expr><name>k</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>horizontal_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>k</name> <operator>-</operator> <name>n0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>coefficient</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output_buffer</name><index>[<expr><name>out_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>+=</operator> <name><name>decode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__decode_and_resample_upsample</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>stbir__decode_scanline</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbir__use_width_upsampling</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbir__resample_horizontal_upsample</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><call><name>stbir__add_empty_ring_buffer_entry</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbir__resample_horizontal_downsample</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><call><name>stbir__add_empty_ring_buffer_entry</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__decode_and_resample_downsample</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>stbir__decode_scanline</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>output_w</name></name> <operator>*</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbir__use_width_upsampling</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbir__resample_horizontal_upsample</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbir__resample_horizontal_downsample</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name><modifier>*</modifier></type> <name>stbir__get_ring_buffer_scanline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>get_scanline</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>begin_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first_scanline</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ring_buffer_num_entries</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ring_buffer_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_index</name> <init>= <expr><operator>(</operator><name>begin_index</name> <operator>+</operator> <operator>(</operator><name>get_scanline</name> <operator>-</operator> <name>first_scanline</name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>ring_buffer_num_entries</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>stbir__get_ring_buffer_entry</name><argument_list>(<argument><expr><name>ring_buffer</name></expr></argument>, <argument><expr><name>ring_buffer_index</name></expr></argument>, <argument><expr><name>ring_buffer_length</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__encode_scanline</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_pixels</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output_buffer</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>encode_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_nonalpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir_uint16</name></type> <name><name>nonalpha</name><index>[<expr><name>STBIR_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>STBIR_FLAG_ALPHA_PREMULTIPLIED</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_index</name> <init>= <expr><name>x</name><operator>*</operator><name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>alpha</name> <init>= <expr><name><name>encode_buffer</name><index>[<expr><name>pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>reciprocal_alpha</name> <init>= <expr><ternary><condition><expr><name>alpha</name></expr> ?</condition><then> <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>alpha</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>alpha_channel</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>encode_buffer</name><index>[<expr><name>pixel_index</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>*=</operator> <name>reciprocal_alpha</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>num_nonalpha</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>alpha_channel</name> <operator>||</operator> <operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>STBIR_FLAG_ALPHA_USES_COLORSPACE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>nonalpha</name><index>[<expr><name>num_nonalpha</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbir_uint16</name><operator>)</operator><name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR__ROUND_INT</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) ((f)+0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR__ROUND_UINT</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((stbir_uint32) ((f)+0.5))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBIR__SATURATE_INT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR__ENCODE_LINEAR8</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbir__saturate8 (STBIR__ROUND_INT((f) * stbir__max_uint8_as_float ))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR__ENCODE_LINEAR16</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbir__saturate16(STBIR__ROUND_INT((f) * stbir__max_uint16_as_float))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR__ENCODE_LINEAR8</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unsigned char ) STBIR__ROUND_INT(stbir__saturate(f) * stbir__max_uint8_as_float )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR__ENCODE_LINEAR16</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unsigned short) STBIR__ROUND_INT(stbir__saturate(f) * stbir__max_uint16_as_float)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>decode</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_UINT8</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_LINEAR</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_index</name> <init>= <expr><name>x</name><operator>*</operator><name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>pixel_index</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>output_buffer</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index> <operator>=</operator> <call><name>STBIR__ENCODE_LINEAR8</name><argument_list>(<argument><expr><name><name>encode_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_UINT8</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_SRGB</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_index</name> <init>= <expr><name>x</name><operator>*</operator><name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_nonalpha</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>pixel_index</name> <operator>+</operator> <name><name>nonalpha</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>output_buffer</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index> <operator>=</operator> <call><name>stbir__linear_to_srgb_uchar</name><argument_list>(<argument><expr><name><name>encode_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>STBIR_FLAG_ALPHA_USES_COLORSPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>output_buffer</name><operator>)</operator><index>[<expr><name>pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index> <operator>=</operator> <call><name>STBIR__ENCODE_LINEAR8</name><argument_list>(<argument><expr><name><name>encode_buffer</name><index>[<expr><name>pixel_index</name><operator>+</operator><name>alpha_channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_UINT16</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_LINEAR</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_index</name> <init>= <expr><name>x</name><operator>*</operator><name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>pixel_index</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator><name>output_buffer</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index> <operator>=</operator> <call><name>STBIR__ENCODE_LINEAR16</name><argument_list>(<argument><expr><name><name>encode_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_UINT16</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_SRGB</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_index</name> <init>= <expr><name>x</name><operator>*</operator><name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_nonalpha</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>pixel_index</name> <operator>+</operator> <name><name>nonalpha</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator><name>output_buffer</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><call><name>STBIR__ROUND_INT</name><argument_list>(<argument><expr><call><name>stbir__linear_to_srgb</name><argument_list>(<argument><expr><call><name>stbir__saturate</name><argument_list>(<argument><expr><name><name>encode_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <name>stbir__max_uint16_as_float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>STBIR_FLAG_ALPHA_USES_COLORSPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator><name>output_buffer</name><operator>)</operator><index>[<expr><name>pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index> <operator>=</operator> <call><name>STBIR__ENCODE_LINEAR16</name><argument_list>(<argument><expr><name><name>encode_buffer</name><index>[<expr><name>pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_UINT32</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_LINEAR</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_index</name> <init>= <expr><name>x</name><operator>*</operator><name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>pixel_index</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator><name>output_buffer</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>STBIR__ROUND_UINT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>stbir__saturate</name><argument_list>(<argument><expr><name><name>encode_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>stbir__max_uint32_as_float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_UINT32</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_SRGB</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_index</name> <init>= <expr><name>x</name><operator>*</operator><name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_nonalpha</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>pixel_index</name> <operator>+</operator> <name><name>nonalpha</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator><name>output_buffer</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>STBIR__ROUND_UINT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>stbir__linear_to_srgb</name><argument_list>(<argument><expr><call><name>stbir__saturate</name><argument_list>(<argument><expr><name><name>encode_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>stbir__max_uint32_as_float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>STBIR_FLAG_ALPHA_USES_COLORSPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator><name>output_buffer</name><operator>)</operator><index>[<expr><name>pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>STBIR__ROUND_INT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>stbir__saturate</name><argument_list>(<argument><expr><name><name>encode_buffer</name><index>[<expr><name>pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>stbir__max_uint32_as_float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_FLOAT</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_LINEAR</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_index</name> <init>= <expr><name>x</name><operator>*</operator><name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>pixel_index</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>output_buffer</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index> <operator>=</operator> <name><name>encode_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>STBIR_TYPE_FLOAT</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_SRGB</name></expr></argument>)</argument_list></call></expr>:</case>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_index</name> <init>= <expr><name>x</name><operator>*</operator><name>channels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_nonalpha</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>pixel_index</name> <operator>+</operator> <name><name>nonalpha</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>output_buffer</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index> <operator>=</operator> <call><name>stbir__linear_to_srgb</name><argument_list>(<argument><expr><name><name>encode_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>STBIR_FLAG_ALPHA_USES_COLORSPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>output_buffer</name><operator>)</operator><index>[<expr><name>pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index> <operator>=</operator> <name><name>encode_buffer</name><index>[<expr><name>pixel_index</name> <operator>+</operator> <name>alpha_channel</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"Unknown type/colorspace/channels combination."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__resample_vertical_upsample</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_w</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>output_w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir__contributors</name><modifier>*</modifier></type> <name>vertical_contributors</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_contributors</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>vertical_coefficients</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_coefficients</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alpha_channel</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>alpha_channel</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>colorspace</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>colorspace</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_entries</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_num_entries</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>output_data</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>output_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>encode_buffer</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>encode_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decode</name> <init>= <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>colorspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_width</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_coefficient_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_counter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>contributor</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_begin_index</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_first_scanline</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_length</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_length_bytes</name></name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n0</name></decl>,<decl><type ref="prev"/><name>n1</name></decl>, <decl><type ref="prev"/><name>output_row_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_group</name> <init>= <expr><name>coefficient_width</name> <operator>*</operator> <name>contributor</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n0</name> <operator>=</operator> <name><name>vertical_contributors</name><index>[<expr><name>contributor</name></expr>]</index></name><operator>.</operator><name>n0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name><name>vertical_contributors</name><index>[<expr><name>contributor</name></expr>]</index></name><operator>.</operator><name>n1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output_row_start</name> <operator>=</operator> <name>n</name> <operator>*</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>output_stride_bytes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><call><name>stbir__use_height_upsampling</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>encode_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>output_w</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coefficient_counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_index</name> <init>= <expr><name>coefficient_counter</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer_entry</name> <init>= <expr><call><name>stbir__get_ring_buffer_scanline</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>ring_buffer</name></expr></argument>, <argument><expr><name>ring_buffer_begin_index</name></expr></argument>, <argument><expr><name>ring_buffer_first_scanline</name></expr></argument>, <argument><expr><name>ring_buffer_entries</name></expr></argument>, <argument><expr><name>ring_buffer_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>vertical_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>coefficient_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>output_w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>encode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_index</name> <init>= <expr><name>coefficient_counter</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer_entry</name> <init>= <expr><call><name>stbir__get_ring_buffer_scanline</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>ring_buffer</name></expr></argument>, <argument><expr><name>ring_buffer_begin_index</name></expr></argument>, <argument><expr><name>ring_buffer_first_scanline</name></expr></argument>, <argument><expr><name>ring_buffer_entries</name></expr></argument>, <argument><expr><name>ring_buffer_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>vertical_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>coefficient_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>output_w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>encode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_index</name> <init>= <expr><name>coefficient_counter</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer_entry</name> <init>= <expr><call><name>stbir__get_ring_buffer_scanline</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>ring_buffer</name></expr></argument>, <argument><expr><name>ring_buffer_begin_index</name></expr></argument>, <argument><expr><name>ring_buffer_first_scanline</name></expr></argument>, <argument><expr><name>ring_buffer_entries</name></expr></argument>, <argument><expr><name>ring_buffer_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>vertical_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>coefficient_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>output_w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>encode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_index</name> <init>= <expr><name>coefficient_counter</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer_entry</name> <init>= <expr><call><name>stbir__get_ring_buffer_scanline</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>ring_buffer</name></expr></argument>, <argument><expr><name>ring_buffer_begin_index</name></expr></argument>, <argument><expr><name>ring_buffer_first_scanline</name></expr></argument>, <argument><expr><name>ring_buffer_entries</name></expr></argument>, <argument><expr><name>ring_buffer_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>vertical_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>coefficient_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>output_w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>encode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_index</name> <init>= <expr><name>coefficient_counter</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer_entry</name> <init>= <expr><call><name>stbir__get_ring_buffer_scanline</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>ring_buffer</name></expr></argument>, <argument><expr><name>ring_buffer_begin_index</name></expr></argument>, <argument><expr><name>ring_buffer_first_scanline</name></expr></argument>, <argument><expr><name>ring_buffer_entries</name></expr></argument>, <argument><expr><name>ring_buffer_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>vertical_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>coefficient_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>output_w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>encode_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>+=</operator> <name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>stbir__encode_scanline</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name>output_w</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>output_data</name> <operator>+</operator> <name>output_row_start</name></expr></argument>, <argument><expr><name>encode_buffer</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>alpha_channel</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__resample_vertical_downsample</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_w</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>output_w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbir__contributors</name><modifier>*</modifier></type> <name>vertical_contributors</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_contributors</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>vertical_coefficients</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_coefficients</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_entries</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_num_entries</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>horizontal_buffer</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>horizontal_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_width</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_coefficient_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>contributor</name> <init>= <expr><name>n</name> <operator>+</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_filter_pixel_margin</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_begin_index</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_first_scanline</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_length</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_length_bytes</name></name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n0</name></decl>,<decl><type ref="prev"/><name>n1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n0</name> <operator>=</operator> <name><name>vertical_contributors</name><index>[<expr><name>contributor</name></expr>]</index></name><operator>.</operator><name>n0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name><name>vertical_contributors</name><index>[<expr><name>contributor</name></expr>]</index></name><operator>.</operator><name>n1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>stbir__use_height_upsampling</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_index</name> <init>= <expr><name>k</name> <operator>-</operator> <name>n0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coefficient_group</name> <init>= <expr><name>coefficient_width</name> <operator>*</operator> <name>contributor</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coefficient</name> <init>= <expr><name><name>vertical_coefficients</name><index>[<expr><name>coefficient_group</name> <operator>+</operator> <name>coefficient_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer_entry</name> <init>= <expr><call><name>stbir__get_ring_buffer_scanline</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>ring_buffer</name></expr></argument>, <argument><expr><name>ring_buffer_begin_index</name></expr></argument>, <argument><expr><name>ring_buffer_first_scanline</name></expr></argument>, <argument><expr><name>ring_buffer_entries</name></expr></argument>, <argument><expr><name>ring_buffer_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>output_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>horizontal_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>output_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>horizontal_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>horizontal_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>output_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>horizontal_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>horizontal_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>horizontal_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>output_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>horizontal_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>horizontal_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>horizontal_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>horizontal_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>output_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_pixel_index</name> <init>= <expr><name>x</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ring_buffer_entry</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>+=</operator> <name><name>horizontal_buffer</name><index>[<expr><name>in_pixel_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>*</operator> <name>coefficient</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__buffer_loop_upsample</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale_ratio</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_scale</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>out_scanlines_radius</name> <init>= <expr><name><name>stbir__filter_info_table</name><index>[<expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_filter</name></name></expr>]</index></name><operator>.</operator><call><name>support</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>/</operator><name>scale_ratio</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale_ratio</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><call><name>stbir__use_height_upsampling</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>output_h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>in_center_of_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>in_first_scanline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>in_last_scanline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbir__calculate_sample_range_upsample</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>out_scanlines_radius</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_shift</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_first_scanline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_last_scanline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_center_of_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>in_last_scanline</name> <operator>-</operator> <name>in_first_scanline</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_num_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>in_first_scanline</name> <operator>&gt;</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name> <operator>==</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_last_scanline</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_last_scanline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>=</operator> <operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_num_entries</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbir__decode_and_resample_upsample</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name>in_first_scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>in_last_scanline</name> <operator>&gt;</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_last_scanline</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbir__decode_and_resample_upsample</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_last_scanline</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>stbir__resample_vertical_upsample</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_PROGRESS_REPORT</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>y</name> <operator>/</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>output_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__empty_ring_buffer</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first_necessary_scanline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>output_stride_bytes</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>output_stride_bytes</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alpha_channel</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>alpha_channel</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>colorspace</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>colorspace</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_w</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>output_w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>output_data</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>output_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decode</name> <init>= <expr><call><name>STBIR__DECODE</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>colorspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring_buffer_length</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_length_bytes</name></name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>first_necessary_scanline</name> <operator>&gt;</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name> <operator>&lt;</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>output_h</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>output_row_start</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name> <operator>*</operator> <name>output_stride_bytes</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>ring_buffer_entry</name> <init>= <expr><call><name>stbir__get_ring_buffer_entry</name><argument_list>(<argument><expr><name>ring_buffer</name></expr></argument>, <argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name></expr></argument>, <argument><expr><name>ring_buffer_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbir__encode_scanline</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name>output_w</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>output_data</name> <operator>+</operator> <name>output_row_start</name></expr></argument>, <argument><expr><name>ring_buffer_entry</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>alpha_channel</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_PROGRESS_REPORT</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name> <operator>/</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>output_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name> <operator>==</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_last_scanline</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_last_scanline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_first_scanline</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>=</operator> <operator>(</operator><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_num_entries</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__buffer_loop_downsample</name><parameter_list>(<parameter><decl><type><name>stbir__info</name><modifier>*</modifier></type> <name>stbir_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale_ratio</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_scale</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_h</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>output_h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>in_pixels_radius</name> <init>= <expr><name><name>stbir__filter_info_table</name><index>[<expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_filter</name></name></expr>]</index></name><operator>.</operator><call><name>support</name><argument_list>(<argument><expr><name>scale_ratio</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>scale_ratio</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_margin</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_filter_pixel_margin</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_y</name> <init>= <expr><name><name>stbir_info</name><operator>-&gt;</operator><name>input_h</name></name> <operator>+</operator> <name>pixel_margin</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>stbir__use_height_upsampling</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>pixel_margin</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>max_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>out_center_of_in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>out_first_scanline</name></decl>, <decl><type ref="prev"/><name>out_last_scanline</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbir__calculate_sample_range_downsample</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>in_pixels_radius</name></expr></argument>, <argument><expr><name>scale_ratio</name></expr></argument>, <argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>vertical_shift</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_first_scanline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_last_scanline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_center_of_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>out_last_scanline</name> <operator>-</operator> <name>out_first_scanline</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_num_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_last_scanline</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>out_first_scanline</name> <operator>&gt;=</operator> <name>output_h</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbir__empty_ring_buffer</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name>out_first_scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbir__decode_and_resample_downsample</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbir__add_empty_ring_buffer_entry</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name>out_first_scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>out_last_scanline</name> <operator>&gt;</operator> <name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_last_scanline</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbir__add_empty_ring_buffer_entry</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>ring_buffer_last_scanline</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>stbir__resample_vertical_downsample</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stbir__empty_ring_buffer</name><argument_list>(<argument><expr><name>stbir_info</name></expr></argument>, <argument><expr><name><name>stbir_info</name><operator>-&gt;</operator><name>output_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__setup</name><parameter_list>(<parameter><decl><type><name>stbir__info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>input_w</name></name> <operator>=</operator> <name>input_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>input_h</name></name> <operator>=</operator> <name>input_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>output_w</name></name> <operator>=</operator> <name>output_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>output_h</name></name> <operator>=</operator> <name>output_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__calculate_transform</name><parameter_list>(<parameter><decl><type><name>stbir__info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>transform</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>s0</name></name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>t0</name></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>s1</name></name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>t1</name></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>transform</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_scale</name></name> <operator>=</operator> <name><name>transform</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_scale</name></name> <operator>=</operator> <name><name>transform</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_shift</name></name> <operator>=</operator> <name><name>transform</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_shift</name></name> <operator>=</operator> <name><name>transform</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_scale</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>output_w</name></name> <operator>/</operator> <name><name>info</name><operator>-&gt;</operator><name>input_w</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>s1</name> <operator>-</operator> <name>s0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_scale</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>output_h</name></name> <operator>/</operator> <name><name>info</name><operator>-&gt;</operator><name>input_h</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>t1</name> <operator>-</operator> <name>t0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_shift</name></name> <operator>=</operator> <name>s0</name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>output_w</name></name> <operator>/</operator> <operator>(</operator><name>s1</name> <operator>-</operator> <name>s0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_shift</name></name> <operator>=</operator> <name>t0</name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>output_h</name></name> <operator>/</operator> <operator>(</operator><name>t1</name> <operator>-</operator> <name>t0</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbir__choose_filter</name><parameter_list>(<parameter><decl><type><name>stbir__info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>h_filter</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>v_filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>h_filter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>h_filter</name> <operator>=</operator> <ternary><condition><expr><call><name>stbir__use_upsampling</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_scale</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>STBIR_DEFAULT_FILTER_UPSAMPLE</name></expr> </then><else>: <expr><name>STBIR_DEFAULT_FILTER_DOWNSAMPLE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v_filter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v_filter</name> <operator>=</operator> <ternary><condition><expr><call><name>stbir__use_upsampling</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_scale</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>STBIR_DEFAULT_FILTER_UPSAMPLE</name></expr> </then><else>: <expr><name>STBIR_DEFAULT_FILTER_DOWNSAMPLE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter</name></name> <operator>=</operator> <name>h_filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter</name></name> <operator>=</operator> <name>v_filter</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbir_uint32</name></type> <name>stbir__calculate_memory</name><parameter_list>(<parameter><decl><type><name>stbir__info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_margin</name> <init>= <expr><call><name>stbir__get_filter_pixel_margin</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_scale</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filter_height</name> <init>= <expr><call><name>stbir__get_filter_pixel_width</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_scale</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_num_contributors</name></name> <operator>=</operator> <call><name>stbir__get_contributors</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_scale</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>input_w</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>output_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_num_contributors</name></name> <operator>=</operator> <call><name>stbir__get_contributors</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_scale</name></name></expr></argument> , <argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter</name></name></expr></argument> , <argument><expr><name><name>info</name><operator>-&gt;</operator><name>input_h</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>output_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ring_buffer_num_entries</name></name> <operator>=</operator> <name>filter_height</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_contributors_size</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>horizontal_num_contributors</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>stbir__contributors</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_coefficients_size</name></name> <operator>=</operator> <call><name>stbir__get_total_horizontal_coefficients</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_contributors_size</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>vertical_num_contributors</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>stbir__contributors</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_coefficients_size</name></name> <operator>=</operator> <call><name>stbir__get_total_vertical_coefficients</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>decode_buffer_size</name></name> <operator>=</operator> <operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>input_w</name></name> <operator>+</operator> <name>pixel_margin</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_buffer_size</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>output_w</name></name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ring_buffer_size</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>output_w</name></name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>ring_buffer_num_entries</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>encode_buffer_size</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>output_w</name></name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter</name></name> <operator>&lt;</operator> <call><name>STBIR__ARRAY_SIZE</name><argument_list>(<argument><expr><name>stbir__filter_info_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter</name></name> <operator>&lt;</operator> <call><name>STBIR__ARRAY_SIZE</name><argument_list>(<argument><expr><name>stbir__filter_info_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>stbir__use_height_upsampling</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>encode_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_contributors_size</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>horizontal_coefficients_size</name></name>

<operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>vertical_contributors_size</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>vertical_coefficients_size</name></name>

<operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>decode_buffer_size</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>horizontal_buffer_size</name></name>

<operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>ring_buffer_size</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>encode_buffer_size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbir__resize_allocated</name><parameter_list>(<parameter><decl><type><name>stbir__info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>output_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>stbir_uint32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>stbir_datatype</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_edge</name></type> <name>edge_vertical</name></decl></parameter>, <parameter><decl><type><name>stbir_colorspace</name></type> <name>colorspace</name></decl></parameter>,

<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tempmem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tempmem_size_in_bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>memory_required</name> <init>= <expr><call><name>stbir__calculate_memory</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width_stride_input</name> <init>= <expr><ternary><condition><expr><name>input_stride_in_bytes</name></expr> ?</condition><then> <expr><name>input_stride_in_bytes</name></expr> </then><else>: <expr><name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>input_w</name></name> <operator>*</operator> <name><name>stbir__type_size</name><index>[<expr><name>type</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width_stride_output</name> <init>= <expr><ternary><condition><expr><name>output_stride_in_bytes</name></expr> ?</condition><then> <expr><name>output_stride_in_bytes</name></expr> </then><else>: <expr><name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>output_w</name></name> <operator>*</operator> <name><name>stbir__type_size</name><index>[<expr><name>type</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBIR_DEBUG_OVERWRITE_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OVERWRITE_ARRAY_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>overwrite_output_before_pre</name><index>[<expr><name>OVERWRITE_ARRAY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>overwrite_tempmem_before_pre</name><index>[<expr><name>OVERWRITE_ARRAY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>overwrite_output_after_pre</name><index>[<expr><name>OVERWRITE_ARRAY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>overwrite_tempmem_after_pre</name><index>[<expr><name>OVERWRITE_ARRAY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>begin_forbidden</name> <init>= <expr><name>width_stride_output</name> <operator>*</operator> <operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>output_h</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>output_w</name></name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>stbir__type_size</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>overwrite_output_before_pre</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>output_data</name><operator>)</operator><index>[<expr><operator>-</operator><name>OVERWRITE_ARRAY_SIZE</name></expr>]</index></expr></argument>, <argument><expr><name>OVERWRITE_ARRAY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>overwrite_output_after_pre</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>output_data</name><operator>)</operator><index>[<expr><name>begin_forbidden</name></expr>]</index></expr></argument>, <argument><expr><name>OVERWRITE_ARRAY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>overwrite_tempmem_before_pre</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>tempmem</name><operator>)</operator><index>[<expr><operator>-</operator><name>OVERWRITE_ARRAY_SIZE</name></expr>]</index></expr></argument>, <argument><expr><name>OVERWRITE_ARRAY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>overwrite_tempmem_after_pre</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>tempmem</name><operator>)</operator><index>[<expr><name>tempmem_size_in_bytes</name></expr>]</index></expr></argument>, <argument><expr><name>OVERWRITE_ARRAY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;=</operator> <name>STBIR_MAX_CHANNELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>STBIR_MAX_CHANNELS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter</name></name> <operator>&lt;</operator> <call><name>STBIR__ARRAY_SIZE</name><argument_list>(<argument><expr><name>stbir__filter_info_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter</name></name> <operator>&lt;</operator> <call><name>STBIR__ARRAY_SIZE</name><argument_list>(<argument><expr><name>stbir__filter_info_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter</name></name> <operator>&gt;=</operator> <call><name>STBIR__ARRAY_SIZE</name><argument_list>(<argument><expr><name>stbir__filter_info_table</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter</name></name> <operator>&gt;=</operator> <call><name>STBIR__ARRAY_SIZE</name><argument_list>(<argument><expr><name>stbir__filter_info_table</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_channel</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>STBIR_FLAG_ALPHA_USES_COLORSPACE</name> <operator>|</operator> <name>STBIR_FLAG_ALPHA_PREMULTIPLIED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name><operator>&amp;</operator><name>STBIR_FLAG_ALPHA_USES_COLORSPACE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>flags</name><operator>&amp;</operator><name>STBIR_FLAG_ALPHA_PREMULTIPLIED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>alpha_channel</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>alpha_channel</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_channel</name> <operator>&gt;=</operator> <name><name>info</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>tempmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tempmem</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><name>tempmem_size_in_bytes</name> <operator>&gt;=</operator> <name>memory_required</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tempmem_size_in_bytes</name> <operator>&lt;</operator> <name>memory_required</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tempmem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tempmem_size_in_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>input_data</name></name> <operator>=</operator> <name>input_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>input_stride_bytes</name></name> <operator>=</operator> <name>width_stride_input</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>output_data</name></name> <operator>=</operator> <name>output_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>output_stride_bytes</name></name> <operator>=</operator> <name>width_stride_output</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>alpha_channel</name></name> <operator>=</operator> <name>alpha_channel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>edge_horizontal</name></name> <operator>=</operator> <name>edge_horizontal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>edge_vertical</name></name> <operator>=</operator> <name>edge_vertical</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>colorspace</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_coefficient_width</name></name> <operator>=</operator> <call><name>stbir__get_coefficient_width</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_coefficient_width</name></name> <operator>=</operator> <call><name>stbir__get_coefficient_width</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter</name></name></expr></argument> , <argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_scale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter_pixel_width</name></name> <operator>=</operator> <call><name>stbir__get_filter_pixel_width</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter_pixel_width</name></name> <operator>=</operator> <call><name>stbir__get_filter_pixel_width</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter</name></name></expr></argument> , <argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_scale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter_pixel_margin</name></name> <operator>=</operator> <call><name>stbir__get_filter_pixel_margin</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter_pixel_margin</name></name> <operator>=</operator> <call><name>stbir__get_filter_pixel_margin</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter</name></name></expr></argument> , <argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_scale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ring_buffer_length_bytes</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>output_w</name></name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>decode_buffer_pixels</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>input_w</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>horizontal_filter_pixel_margin</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR__NEXT_MEMPTR</name><parameter_list>(<parameter><type><name>current</name></type></parameter>, <parameter><type><name>newtype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(newtype*)(((unsigned char*)current) + current##_size)</cpp:value></cpp:define>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_contributors</name></name> <operator>=</operator> <operator>(</operator><name>stbir__contributors</name> <operator>*</operator><operator>)</operator> <name>tempmem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_coefficients</name></name> <operator>=</operator> <call><name>STBIR__NEXT_MEMPTR</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_contributors</name></name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_contributors</name></name> <operator>=</operator> <call><name>STBIR__NEXT_MEMPTR</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_coefficients</name></name></expr></argument>, <argument><expr><name>stbir__contributors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_coefficients</name></name> <operator>=</operator> <call><name>STBIR__NEXT_MEMPTR</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_contributors</name></name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>decode_buffer</name></name> <operator>=</operator> <call><name>STBIR__NEXT_MEMPTR</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_coefficients</name></name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbir__use_height_upsampling</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ring_buffer</name></name> <operator>=</operator> <call><name>STBIR__NEXT_MEMPTR</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>decode_buffer</name></name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>encode_buffer</name></name> <operator>=</operator> <call><name>STBIR__NEXT_MEMPTR</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>ring_buffer</name></name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><macro><name>STBIR__NEXT_MEMPTR</name><argument_list>(<argument>info-&gt;encode_buffer</argument>, <argument>unsigned char</argument>)</argument_list></macro> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>tempmem</name> <operator>+</operator> <name>tempmem_size_in_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_buffer</name></name> <operator>=</operator> <call><name>STBIR__NEXT_MEMPTR</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>decode_buffer</name></name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ring_buffer</name></name> <operator>=</operator> <call><name>STBIR__NEXT_MEMPTR</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_buffer</name></name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>encode_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><macro><name>STBIR__NEXT_MEMPTR</name><argument_list>(<argument>info-&gt;ring_buffer</argument>, <argument>unsigned char</argument>)</argument_list></macro> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>tempmem</name> <operator>+</operator> <name>tempmem_size_in_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STBIR__NEXT_MEMPTR</name></cpp:undef>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ring_buffer_begin_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbir__calculate_filters</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_contributors</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_coefficients</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_filter</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_scale</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>horizontal_shift</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>input_w</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>output_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbir__calculate_filters</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_contributors</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_coefficients</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_filter</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_scale</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>vertical_shift</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>input_h</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>output_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_PROGRESS_REPORT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbir__use_height_upsampling</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbir__buffer_loop_upsample</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stbir__buffer_loop_downsample</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>STBIR_PROGRESS_REPORT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBIR_DEBUG_OVERWRITE_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>overwrite_output_before_pre</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>output_data</name><operator>)</operator><index>[<expr><operator>-</operator><name>OVERWRITE_ARRAY_SIZE</name></expr>]</index></expr></argument>, <argument><expr><name>OVERWRITE_ARRAY_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>overwrite_output_after_pre</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>output_data</name><operator>)</operator><index>[<expr><name>begin_forbidden</name></expr>]</index></expr></argument>, <argument><expr><name>OVERWRITE_ARRAY_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>overwrite_tempmem_before_pre</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>tempmem</name><operator>)</operator><index>[<expr><operator>-</operator><name>OVERWRITE_ARRAY_SIZE</name></expr>]</index></expr></argument>, <argument><expr><name>OVERWRITE_ARRAY_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>overwrite_tempmem_after_pre</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>tempmem</name><operator>)</operator><index>[<expr><name>tempmem_size_in_bytes</name></expr>]</index></expr></argument>, <argument><expr><name>OVERWRITE_ARRAY_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbir__resize_arbitrary</name><parameter_list>(

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>output_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>transform</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>stbir_uint32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>stbir_datatype</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>stbir_filter</name></type> <name>h_filter</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>v_filter</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_edge</name></type> <name>edge_vertical</name></decl></parameter>, <parameter><decl><type><name>stbir_colorspace</name></type> <name>colorspace</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbir__info</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>memory_required</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>extra_memory</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbir__setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>, <argument><expr><name>input_h</name></expr></argument>, <argument><expr><name>output_w</name></expr></argument>, <argument><expr><name>output_h</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbir__calculate_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>,<argument><expr><name>t0</name></expr></argument>,<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>t1</name></expr></argument>,<argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbir__choose_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>h_filter</name></expr></argument>, <argument><expr><name>v_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>memory_required</name> <operator>=</operator> <call><name>stbir__calculate_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>extra_memory</name> <operator>=</operator> <call><name>STBIR_MALLOC</name><argument_list>(<argument><expr><name>memory_required</name></expr></argument>, <argument><expr><name>alloc_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extra_memory</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stbir__resize_allocated</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>input_data</name></expr></argument>, <argument><expr><name>input_stride_in_bytes</name></expr></argument>,

<argument><expr><name>output_data</name></expr></argument>, <argument><expr><name>output_stride_in_bytes</name></expr></argument>,

<argument><expr><name>alpha_channel</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,

<argument><expr><name>edge_horizontal</name></expr></argument>, <argument><expr><name>edge_vertical</name></expr></argument>,

<argument><expr><name>colorspace</name></expr></argument>, <argument><expr><name>extra_memory</name></expr></argument>, <argument><expr><name>memory_required</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIR_FREE</name><argument_list>(<argument><expr><name>extra_memory</name></expr></argument>, <argument><expr><name>alloc_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_uint8</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbir__resize_arbitrary</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>input_pixels</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>, <argument><expr><name>input_h</name></expr></argument>, <argument><expr><name>input_stride_in_bytes</name></expr></argument>,

<argument><expr><name>output_pixels</name></expr></argument>, <argument><expr><name>output_w</name></expr></argument>, <argument><expr><name>output_h</name></expr></argument>, <argument><expr><name>output_stride_in_bytes</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>num_channels</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>STBIR_TYPE_UINT8</name></expr></argument>, <argument><expr><name>STBIR_FILTER_DEFAULT</name></expr></argument>, <argument><expr><name>STBIR_FILTER_DEFAULT</name></expr></argument>,

<argument><expr><name>STBIR_EDGE_CLAMP</name></expr></argument>, <argument><expr><name>STBIR_EDGE_CLAMP</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_LINEAR</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_float</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbir__resize_arbitrary</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>input_pixels</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>, <argument><expr><name>input_h</name></expr></argument>, <argument><expr><name>input_stride_in_bytes</name></expr></argument>,

<argument><expr><name>output_pixels</name></expr></argument>, <argument><expr><name>output_w</name></expr></argument>, <argument><expr><name>output_h</name></expr></argument>, <argument><expr><name>output_stride_in_bytes</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>num_channels</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>STBIR_TYPE_FLOAT</name></expr></argument>, <argument><expr><name>STBIR_FILTER_DEFAULT</name></expr></argument>, <argument><expr><name>STBIR_FILTER_DEFAULT</name></expr></argument>,

<argument><expr><name>STBIR_EDGE_CLAMP</name></expr></argument>, <argument><expr><name>STBIR_EDGE_CLAMP</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_LINEAR</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_uint8_srgb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbir__resize_arbitrary</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>input_pixels</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>, <argument><expr><name>input_h</name></expr></argument>, <argument><expr><name>input_stride_in_bytes</name></expr></argument>,

<argument><expr><name>output_pixels</name></expr></argument>, <argument><expr><name>output_w</name></expr></argument>, <argument><expr><name>output_h</name></expr></argument>, <argument><expr><name>output_stride_in_bytes</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>num_channels</name></expr></argument>,<argument><expr><name>alpha_channel</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>STBIR_TYPE_UINT8</name></expr></argument>, <argument><expr><name>STBIR_FILTER_DEFAULT</name></expr></argument>, <argument><expr><name>STBIR_FILTER_DEFAULT</name></expr></argument>,

<argument><expr><name>STBIR_EDGE_CLAMP</name></expr></argument>, <argument><expr><name>STBIR_EDGE_CLAMP</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_SRGB</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_uint8_srgb_edgemode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_wrap_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbir__resize_arbitrary</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>input_pixels</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>, <argument><expr><name>input_h</name></expr></argument>, <argument><expr><name>input_stride_in_bytes</name></expr></argument>,

<argument><expr><name>output_pixels</name></expr></argument>, <argument><expr><name>output_w</name></expr></argument>, <argument><expr><name>output_h</name></expr></argument>, <argument><expr><name>output_stride_in_bytes</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>num_channels</name></expr></argument>,<argument><expr><name>alpha_channel</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>STBIR_TYPE_UINT8</name></expr></argument>, <argument><expr><name>STBIR_FILTER_DEFAULT</name></expr></argument>, <argument><expr><name>STBIR_FILTER_DEFAULT</name></expr></argument>,

<argument><expr><name>edge_wrap_mode</name></expr></argument>, <argument><expr><name>edge_wrap_mode</name></expr></argument>, <argument><expr><name>STBIR_COLORSPACE_SRGB</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_uint8_generic</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_wrap_mode</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>stbir_colorspace</name></type> <name>space</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbir__resize_arbitrary</name><argument_list>(<argument><expr><name>alloc_context</name></expr></argument>, <argument><expr><name>input_pixels</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>, <argument><expr><name>input_h</name></expr></argument>, <argument><expr><name>input_stride_in_bytes</name></expr></argument>,

<argument><expr><name>output_pixels</name></expr></argument>, <argument><expr><name>output_w</name></expr></argument>, <argument><expr><name>output_h</name></expr></argument>, <argument><expr><name>output_stride_in_bytes</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>num_channels</name></expr></argument>,<argument><expr><name>alpha_channel</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>STBIR_TYPE_UINT8</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,

<argument><expr><name>edge_wrap_mode</name></expr></argument>, <argument><expr><name>edge_wrap_mode</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_uint16_generic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbir_uint16</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>stbir_uint16</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_wrap_mode</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>stbir_colorspace</name></type> <name>space</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbir__resize_arbitrary</name><argument_list>(<argument><expr><name>alloc_context</name></expr></argument>, <argument><expr><name>input_pixels</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>, <argument><expr><name>input_h</name></expr></argument>, <argument><expr><name>input_stride_in_bytes</name></expr></argument>,

<argument><expr><name>output_pixels</name></expr></argument>, <argument><expr><name>output_w</name></expr></argument>, <argument><expr><name>output_h</name></expr></argument>, <argument><expr><name>output_stride_in_bytes</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>num_channels</name></expr></argument>,<argument><expr><name>alpha_channel</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>STBIR_TYPE_UINT16</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,

<argument><expr><name>edge_wrap_mode</name></expr></argument>, <argument><expr><name>edge_wrap_mode</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_float_generic</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_wrap_mode</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>stbir_colorspace</name></type> <name>space</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbir__resize_arbitrary</name><argument_list>(<argument><expr><name>alloc_context</name></expr></argument>, <argument><expr><name>input_pixels</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>, <argument><expr><name>input_h</name></expr></argument>, <argument><expr><name>input_stride_in_bytes</name></expr></argument>,

<argument><expr><name>output_pixels</name></expr></argument>, <argument><expr><name>output_w</name></expr></argument>, <argument><expr><name>output_h</name></expr></argument>, <argument><expr><name>output_stride_in_bytes</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>num_channels</name></expr></argument>,<argument><expr><name>alpha_channel</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>STBIR_TYPE_FLOAT</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,

<argument><expr><name>edge_wrap_mode</name></expr></argument>, <argument><expr><name>edge_wrap_mode</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>stbir_datatype</name></type> <name>datatype</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_mode_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_edge</name></type> <name>edge_mode_vertical</name></decl></parameter>,

<parameter><decl><type><name>stbir_filter</name></type> <name>filter_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter_vertical</name></decl></parameter>,

<parameter><decl><type><name>stbir_colorspace</name></type> <name>space</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbir__resize_arbitrary</name><argument_list>(<argument><expr><name>alloc_context</name></expr></argument>, <argument><expr><name>input_pixels</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>, <argument><expr><name>input_h</name></expr></argument>, <argument><expr><name>input_stride_in_bytes</name></expr></argument>,

<argument><expr><name>output_pixels</name></expr></argument>, <argument><expr><name>output_w</name></expr></argument>, <argument><expr><name>output_h</name></expr></argument>, <argument><expr><name>output_stride_in_bytes</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>num_channels</name></expr></argument>,<argument><expr><name>alpha_channel</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>datatype</name></expr></argument>, <argument><expr><name>filter_horizontal</name></expr></argument>, <argument><expr><name>filter_vertical</name></expr></argument>,

<argument><expr><name>edge_mode_horizontal</name></expr></argument>, <argument><expr><name>edge_mode_vertical</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_subpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>stbir_datatype</name></type> <name>datatype</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_mode_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_edge</name></type> <name>edge_mode_vertical</name></decl></parameter>,

<parameter><decl><type><name>stbir_filter</name></type> <name>filter_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter_vertical</name></decl></parameter>,

<parameter><decl><type><name>stbir_colorspace</name></type> <name>space</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x_scale</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y_scale</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x_offset</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y_offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>transform</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>transform</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x_scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transform</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y_scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transform</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>x_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transform</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>y_offset</name></expr>;</expr_stmt>

<return>return <expr><call><name>stbir__resize_arbitrary</name><argument_list>(<argument><expr><name>alloc_context</name></expr></argument>, <argument><expr><name>input_pixels</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>, <argument><expr><name>input_h</name></expr></argument>, <argument><expr><name>input_stride_in_bytes</name></expr></argument>,

<argument><expr><name>output_pixels</name></expr></argument>, <argument><expr><name>output_w</name></expr></argument>, <argument><expr><name>output_h</name></expr></argument>, <argument><expr><name>output_stride_in_bytes</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>transform</name></expr></argument>,<argument><expr><name>num_channels</name></expr></argument>,<argument><expr><name>alpha_channel</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>datatype</name></expr></argument>, <argument><expr><name>filter_horizontal</name></expr></argument>, <argument><expr><name>filter_vertical</name></expr></argument>,

<argument><expr><name>edge_mode_horizontal</name></expr></argument>, <argument><expr><name>edge_mode_vertical</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>STBIRDEF</name> <name>int</name></type> <name>stbir_resize_region</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>input_pixels</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_w</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_h</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>input_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output_pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_stride_in_bytes</name></decl></parameter>,

<parameter><decl><type><name>stbir_datatype</name></type> <name>datatype</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>stbir_edge</name></type> <name>edge_mode_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_edge</name></type> <name>edge_mode_vertical</name></decl></parameter>,

<parameter><decl><type><name>stbir_filter</name></type> <name>filter_horizontal</name></decl></parameter>, <parameter><decl><type><name>stbir_filter</name></type> <name>filter_vertical</name></decl></parameter>,

<parameter><decl><type><name>stbir_colorspace</name></type> <name>space</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>stbir__resize_arbitrary</name><argument_list>(<argument><expr><name>alloc_context</name></expr></argument>, <argument><expr><name>input_pixels</name></expr></argument>, <argument><expr><name>input_w</name></expr></argument>, <argument><expr><name>input_h</name></expr></argument>, <argument><expr><name>input_stride_in_bytes</name></expr></argument>,

<argument><expr><name>output_pixels</name></expr></argument>, <argument><expr><name>output_w</name></expr></argument>, <argument><expr><name>output_h</name></expr></argument>, <argument><expr><name>output_stride_in_bytes</name></expr></argument>,

<argument><expr><name>s0</name></expr></argument>,<argument><expr><name>t0</name></expr></argument>,<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>t1</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>num_channels</name></expr></argument>,<argument><expr><name>alpha_channel</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>datatype</name></expr></argument>, <argument><expr><name>filter_horizontal</name></expr></argument>, <argument><expr><name>filter_vertical</name></expr></argument>,

<argument><expr><name>edge_mode_horizontal</name></expr></argument>, <argument><expr><name>edge_mode_vertical</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
