<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\src\glx_context.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLXBadProfileARB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLXBadProfileARB</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getGLXFBConfigAttrib</name><parameter_list>(<parameter><decl><type><name>GLXFBConfig</name></type> <name>fbconfig</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attrib</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glXGetFBConfigAttrib</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>chooseGLXFBConfig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>desired</name></decl></parameter>,

<parameter><decl><type><name>GLXFBConfig</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLXFBConfig</name><modifier>*</modifier></type> <name>nativeConfigs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>usableConfigs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>closest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nativeCount</name></decl>, <decl><type ref="prev"/><name>usableCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>vendor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>trustWindowBit</name> <init>= <expr><name>GLFW_TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vendor</name> <operator>=</operator> <call><name>glXGetClientString</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>GLX_VENDOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vendor</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>vendor</name></expr></argument>, <argument><expr><literal type="string">"Chromium"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>trustWindowBit</name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nativeConfigs</name> <operator>=</operator>

<call><name>glXGetFBConfigs</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nativeCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nativeConfigs</name> <operator>||</operator> <operator>!</operator><name>nativeCount</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>, <argument><expr><literal type="string">"GLX: No GLXFBConfigs returned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>usableConfigs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nativeCount</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWfbconfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>usableCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nativeCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLXFBConfig</name></type> <name>n</name> <init>= <expr><name><name>nativeConfigs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>u</name> <init>= <expr><name>usableConfigs</name> <operator>+</operator> <name>usableCount</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_RENDER_TYPE</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>GLX_RGBA_BIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_DRAWABLE_TYPE</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>GLX_WINDOW_BIT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>trustWindowBit</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>transparent</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XVisualInfo</name><modifier>*</modifier></type> <name>vi</name> <init>= <expr><call><name>glXGetVisualFromFBConfig</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vi</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>transparent</name></name> <operator>=</operator> <call><name>_glfwIsVisualTransparentX11</name><argument_list>(<argument><expr><name><name>vi</name><operator>-&gt;</operator><name>visual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>redBits</name></name> <operator>=</operator> <call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_RED_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>greenBits</name></name> <operator>=</operator> <call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_GREEN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>blueBits</name></name> <operator>=</operator> <call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_BLUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>alphaBits</name></name> <operator>=</operator> <call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_ALPHA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>depthBits</name></name> <operator>=</operator> <call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_DEPTH_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>stencilBits</name></name> <operator>=</operator> <call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_STENCIL_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>accumRedBits</name></name> <operator>=</operator> <call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_ACCUM_RED_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>accumGreenBits</name></name> <operator>=</operator> <call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_ACCUM_GREEN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>accumBlueBits</name></name> <operator>=</operator> <call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_ACCUM_BLUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>accumAlphaBits</name></name> <operator>=</operator> <call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_ACCUM_ALPHA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>auxBuffers</name></name> <operator>=</operator> <call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_AUX_BUFFERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_STEREO</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>stereo</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_DOUBLEBUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>doublebuffer</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_multisample</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_framebuffer_sRGB</name></name> <operator>||</operator> <name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>EXT_framebuffer_sRGB</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>sRGB</name></name> <operator>=</operator> <call><name>getGLXFBConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>usableCount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>closest</name> <operator>=</operator> <call><name>_glfwChooseFBConfig</name><argument_list>(<argument><expr><name>desired</name></expr></argument>, <argument><expr><name>usableConfigs</name></expr></argument>, <argument><expr><name>usableCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>closest</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>(</operator><name>GLXFBConfig</name><operator>)</operator> <name><name>closest</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>nativeConfigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>usableConfigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>closest</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLXContext</name></type> <name>createLegacyContextGLX</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,

<parameter><decl><type><name>GLXFBConfig</name></type> <name>fbconfig</name></decl></parameter>,

<parameter><decl><type><name>GLXContext</name></type> <name>share</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>glXCreateNewContext</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name>fbconfig</name></expr></argument>,

<argument><expr><name>GLX_RGBA_TYPE</name></expr></argument>,

<argument><expr><name>share</name></expr></argument>,

<argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>makeContextCurrentGLX</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>window</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXMakeCurrent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>window</name></name></expr></argument>,

<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"GLX: Failed to make context current"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXMakeCurrent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"GLX: Failed to clear current context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swapBuffersGLX</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>glXSwapBuffers</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swapIntervalGLX</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><call><name>_glfwPlatformGetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>EXT_swap_control</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>SwapIntervalEXT</name></name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>window</name></name></expr></argument>,

<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>MESA_swap_control</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>SwapIntervalMESA</name></name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>SGI_swap_control</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>interval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>SwapIntervalSGI</name></name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>extensionSupportedGLX</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extension</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extensions</name> <init>=

<expr><call><name>glXQueryExtensionsString</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>extensions</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_glfwStringInExtensionString</name><argument_list>(<argument><expr><name>extension</name></expr></argument>, <argument><expr><name>extensions</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWglproc</name></type> <name>getProcAddressGLX</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>procname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetProcAddress</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetProcAddress</name></name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>GLubyte</name><operator>*</operator><operator>)</operator> <name>procname</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetProcAddressARB</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetProcAddressARB</name></name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>GLubyte</name><operator>*</operator><operator>)</operator> <name>procname</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyContextGLX</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>window</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>glXDestroyWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>glXDestroyContext</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>GLFWbool</name></type> <name>_glfwInitGLX</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>sonames</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_GLX_LIBRARY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>_GLFW_GLX_LIBRARY</name></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr><literal type="string">"libGL-1.so"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"libGL.so.1"</literal></expr>,

<expr><literal type="string">"libGL.so"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sonames</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><name><name>sonames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>, <argument><expr><literal type="string">"GLX: Failed to load GLX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetFBConfigs</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXGetFBConfigs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetFBConfigAttrib</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXGetFBConfigAttrib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetClientString</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXGetClientString"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>QueryExtension</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXQueryExtension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>QueryVersion</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXQueryVersion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>DestroyContext</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXDestroyContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>MakeCurrent</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXMakeCurrent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>SwapBuffers</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXSwapBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>QueryExtensionsString</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXQueryExtensionsString"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>CreateNewContext</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXCreateNewContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>CreateWindow</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXCreateWindow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>DestroyWindow</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXDestroyWindow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetProcAddress</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXGetProcAddress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetProcAddressARB</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXGetProcAddressARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetVisualFromFBConfig</name></name> <operator>=</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"glXGetVisualFromFBConfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetFBConfigs</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetFBConfigAttrib</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetClientString</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>QueryExtension</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>QueryVersion</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>DestroyContext</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>MakeCurrent</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>SwapBuffers</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>QueryExtensionsString</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>CreateNewContext</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>CreateWindow</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>DestroyWindow</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetProcAddress</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetProcAddressARB</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>GetVisualFromFBConfig</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"GLX: Failed to load required entry points"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXQueryExtension</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>errorBase</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>eventBase</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>, <argument><expr><literal type="string">"GLX: GLX extension not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXQueryVersion</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"GLX: Failed to query GLX version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>major</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>minor</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"GLX: GLX version 1.3 is required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extensionSupportedGLX</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_swap_control"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>SwapIntervalEXT</name></name> <operator>=</operator> <operator>(</operator><name>PFNGLXSWAPINTERVALEXTPROC</name><operator>)</operator>

<call><name>getProcAddressGLX</name><argument_list>(<argument><expr><literal type="string">"glXSwapIntervalEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>SwapIntervalEXT</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>EXT_swap_control</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extensionSupportedGLX</name><argument_list>(<argument><expr><literal type="string">"GLX_SGI_swap_control"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>SwapIntervalSGI</name></name> <operator>=</operator> <operator>(</operator><name>PFNGLXSWAPINTERVALSGIPROC</name><operator>)</operator>

<call><name>getProcAddressGLX</name><argument_list>(<argument><expr><literal type="string">"glXSwapIntervalSGI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>SwapIntervalSGI</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>SGI_swap_control</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extensionSupportedGLX</name><argument_list>(<argument><expr><literal type="string">"GLX_MESA_swap_control"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>SwapIntervalMESA</name></name> <operator>=</operator> <operator>(</operator><name>PFNGLXSWAPINTERVALMESAPROC</name><operator>)</operator>

<call><name>getProcAddressGLX</name><argument_list>(<argument><expr><literal type="string">"glXSwapIntervalMESA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>SwapIntervalMESA</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>MESA_swap_control</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extensionSupportedGLX</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_multisample"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_multisample</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extensionSupportedGLX</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_framebuffer_sRGB"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_framebuffer_sRGB</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extensionSupportedGLX</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_framebuffer_sRGB"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>EXT_framebuffer_sRGB</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extensionSupportedGLX</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_create_context"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>CreateContextAttribsARB</name></name> <operator>=</operator> <operator>(</operator><name>PFNGLXCREATECONTEXTATTRIBSARBPROC</name><operator>)</operator>

<call><name>getProcAddressGLX</name><argument_list>(<argument><expr><literal type="string">"glXCreateContextAttribsARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>CreateContextAttribsARB</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_create_context</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extensionSupportedGLX</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_create_context_robustness"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_create_context_robustness</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extensionSupportedGLX</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_create_context_profile"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_create_context_profile</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extensionSupportedGLX</name><argument_list>(<argument><expr><literal type="string">"GLX_EXT_create_context_es2_profile"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>EXT_create_context_es2_profile</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extensionSupportedGLX</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_create_context_no_error"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_create_context_no_error</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extensionSupportedGLX</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_context_flush_control"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_context_flush_control</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwTerminateGLX</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setAttrib</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ assert(((size_t) index + 1) &lt; sizeof(attribs) / sizeof(attribs[0])); attribs[index++] = a; attribs[index++] = v; }</cpp:value></cpp:define>

<function><type><name>GLFWbool</name></type> <name>_glfwCreateContextGLX</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>attribs</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLXFBConfig</name></type> <name>native</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLXContext</name></type> <name>share</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>share</name> <operator>=</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>chooseGLXFBConfig</name><argument_list>(<argument><expr><name>fbconfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>native</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_FORMAT_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"GLX: Failed to find a suitable GLXFBConfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_ES_API</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_create_context</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_create_context_profile</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>EXT_create_context_es2_profile</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"GLX: OpenGL ES requested but GLX_EXT_create_context_es2_profile is unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>forward</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_create_context</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"GLX: Forward compatibility requested but GLX_ARB_create_context_profile is unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_create_context</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_create_context_profile</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"GLX: An OpenGL profile requested but GLX_ARB_create_context_profile is unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwGrabErrorHandlerX11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_create_context</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>forward</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>GLFW_OPENGL_CORE_PROFILE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>GLX_CONTEXT_CORE_PROFILE_BIT_ARB</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>GLFW_OPENGL_COMPAT_PROFILE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>GLX_CONTEXT_ES2_PROFILE_BIT_EXT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>debug</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>GLX_CONTEXT_DEBUG_BIT_ARB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>robustness</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_create_context_robustness</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>robustness</name></name> <operator>==</operator> <name>GLFW_NO_RESET_NOTIFICATION</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB</name></expr></argument>,

<argument><expr><name>GLX_NO_RESET_NOTIFICATION_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>robustness</name></name> <operator>==</operator> <name>GLFW_LOSE_CONTEXT_ON_RESET</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB</name></expr></argument>,

<argument><expr><name>GLX_LOSE_CONTEXT_ON_RESET_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>release</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_context_flush_control</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>release</name></name> <operator>==</operator> <name>GLFW_RELEASE_BEHAVIOR_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>GLX_CONTEXT_RELEASE_BEHAVIOR_ARB</name></expr></argument>,

<argument><expr><name>GLX_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>release</name></name> <operator>==</operator> <name>GLFW_RELEASE_BEHAVIOR_FLUSH</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>GLX_CONTEXT_RELEASE_BEHAVIOR_ARB</name></expr></argument>,

<argument><expr><name>GLX_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>noerror</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>ARB_create_context_no_error</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>GLX_CONTEXT_OPENGL_NO_ERROR_ARB</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>GLX_CONTEXT_MAJOR_VERSION_ARB</name></expr></argument>, <argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>GLX_CONTEXT_MINOR_VERSION_ARB</name></expr></argument>, <argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>GLX_CONTEXT_PROFILE_MASK_ARB</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>GLX_CONTEXT_FLAGS_ARB</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>None</name></expr></argument>, <argument><expr><name>None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name> <operator>=</operator>

<call><name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>CreateContextAttribsARB</name></name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name>native</name></expr></argument>,

<argument><expr><name>share</name></expr></argument>,

<argument><expr><name>True</name></expr></argument>,

<argument><expr><name>attribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>errorCode</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>glx</name><operator>.</operator><name>errorBase</name></name> <operator>+</operator> <name>GLXBadProfileARB</name> <operator>&amp;&amp;</operator>

<name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name> <operator>&amp;&amp;</operator>

<name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>GLFW_OPENGL_ANY_PROFILE</name> <operator>&amp;&amp;</operator>

<name><name>ctxconfig</name><operator>-&gt;</operator><name>forward</name></name> <operator>==</operator> <name>GLFW_FALSE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name> <operator>=</operator>

<call><name>createLegacyContextGLX</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>native</name></expr></argument>, <argument><expr><name>share</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name> <operator>=</operator>

<call><name>createLegacyContextGLX</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>native</name></expr></argument>, <argument><expr><name>share</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_glfwReleaseErrorHandlerX11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputErrorX11</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>, <argument><expr><literal type="string">"GLX: Failed to create context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>window</name></name> <operator>=</operator>

<call><name>glXCreateWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>native</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>window</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"GLX: Failed to create window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>makeCurrent</name></name> <operator>=</operator> <name>makeContextCurrentGLX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>swapBuffers</name></name> <operator>=</operator> <name>swapBuffersGLX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>swapInterval</name></name> <operator>=</operator> <name>swapIntervalGLX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>extensionSupported</name></name> <operator>=</operator> <name>extensionSupportedGLX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>getProcAddress</name></name> <operator>=</operator> <name>getProcAddressGLX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>destroy</name></name> <operator>=</operator> <name>destroyContextGLX</name></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>setAttrib</name></cpp:undef>

<function><type><name>GLFWbool</name></type> <name>_glfwChooseVisualGLX</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWwndconfig</name><modifier>*</modifier></type> <name>wndconfig</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>,

<parameter><decl><type><name>Visual</name><modifier>*</modifier><modifier>*</modifier></type> <name>visual</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLXFBConfig</name></type> <name>native</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XVisualInfo</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>chooseGLXFBConfig</name><argument_list>(<argument><expr><name>fbconfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>native</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_FORMAT_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"GLX: Failed to find a suitable GLXFBConfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>glXGetVisualFromFBConfig</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"GLX: Failed to retrieve Visual for GLXFBConfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>visual</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>visual</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>depth</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLXContext</name></type> <name>glfwGetGLXContext</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>GLFW_NO_API</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_NO_WINDOW_CONTEXT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>handle</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLXWindow</name></type> <name>glfwGetGLXWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>GLFW_NO_API</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_NO_WINDOW_CONTEXT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>None</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>glx</name><operator>.</operator><name>window</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
