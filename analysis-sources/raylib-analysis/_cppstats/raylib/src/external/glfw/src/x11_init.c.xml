<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\src\x11_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xresource.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>translateKeyCode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>keySym</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scancode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>scancode</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_KEY_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>available</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>keySym</name> <operator>=</operator> <call><name>XkbKeycodeToKeysym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>keySym</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>XK_KP_0</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_0</name></expr>;</return>

<case>case <expr><name>XK_KP_1</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_1</name></expr>;</return>

<case>case <expr><name>XK_KP_2</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_2</name></expr>;</return>

<case>case <expr><name>XK_KP_3</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_3</name></expr>;</return>

<case>case <expr><name>XK_KP_4</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_4</name></expr>;</return>

<case>case <expr><name>XK_KP_5</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_5</name></expr>;</return>

<case>case <expr><name>XK_KP_6</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_6</name></expr>;</return>

<case>case <expr><name>XK_KP_7</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_7</name></expr>;</return>

<case>case <expr><name>XK_KP_8</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_8</name></expr>;</return>

<case>case <expr><name>XK_KP_9</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_9</name></expr>;</return>

<case>case <expr><name>XK_KP_Separator</name></expr>:</case>

<case>case <expr><name>XK_KP_Decimal</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_DECIMAL</name></expr>;</return>

<case>case <expr><name>XK_KP_Equal</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_EQUAL</name></expr>;</return>

<case>case <expr><name>XK_KP_Enter</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_ENTER</name></expr>;</return>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>keySym</name> <operator>=</operator> <call><name>XkbKeycodeToKeysym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>KeySym</name><modifier>*</modifier></type> <name>keySyms</name></decl>;</decl_stmt>

<expr_stmt><expr><name>keySyms</name> <operator>=</operator> <call><name>XGetKeyboardMapping</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keySym</name> <operator>=</operator> <name><name>keySyms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>keySyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>keySym</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>XK_Escape</name></expr>:</case> <return>return <expr><name>GLFW_KEY_ESCAPE</name></expr>;</return>

<case>case <expr><name>XK_Tab</name></expr>:</case> <return>return <expr><name>GLFW_KEY_TAB</name></expr>;</return>

<case>case <expr><name>XK_Shift_L</name></expr>:</case> <return>return <expr><name>GLFW_KEY_LEFT_SHIFT</name></expr>;</return>

<case>case <expr><name>XK_Shift_R</name></expr>:</case> <return>return <expr><name>GLFW_KEY_RIGHT_SHIFT</name></expr>;</return>

<case>case <expr><name>XK_Control_L</name></expr>:</case> <return>return <expr><name>GLFW_KEY_LEFT_CONTROL</name></expr>;</return>

<case>case <expr><name>XK_Control_R</name></expr>:</case> <return>return <expr><name>GLFW_KEY_RIGHT_CONTROL</name></expr>;</return>

<case>case <expr><name>XK_Meta_L</name></expr>:</case>

<case>case <expr><name>XK_Alt_L</name></expr>:</case> <return>return <expr><name>GLFW_KEY_LEFT_ALT</name></expr>;</return>

<case>case <expr><name>XK_Mode_switch</name></expr>:</case> 

<case>case <expr><name>XK_ISO_Level3_Shift</name></expr>:</case> 

<case>case <expr><name>XK_Meta_R</name></expr>:</case>

<case>case <expr><name>XK_Alt_R</name></expr>:</case> <return>return <expr><name>GLFW_KEY_RIGHT_ALT</name></expr>;</return>

<case>case <expr><name>XK_Super_L</name></expr>:</case> <return>return <expr><name>GLFW_KEY_LEFT_SUPER</name></expr>;</return>

<case>case <expr><name>XK_Super_R</name></expr>:</case> <return>return <expr><name>GLFW_KEY_RIGHT_SUPER</name></expr>;</return>

<case>case <expr><name>XK_Menu</name></expr>:</case> <return>return <expr><name>GLFW_KEY_MENU</name></expr>;</return>

<case>case <expr><name>XK_Num_Lock</name></expr>:</case> <return>return <expr><name>GLFW_KEY_NUM_LOCK</name></expr>;</return>

<case>case <expr><name>XK_Caps_Lock</name></expr>:</case> <return>return <expr><name>GLFW_KEY_CAPS_LOCK</name></expr>;</return>

<case>case <expr><name>XK_Print</name></expr>:</case> <return>return <expr><name>GLFW_KEY_PRINT_SCREEN</name></expr>;</return>

<case>case <expr><name>XK_Scroll_Lock</name></expr>:</case> <return>return <expr><name>GLFW_KEY_SCROLL_LOCK</name></expr>;</return>

<case>case <expr><name>XK_Pause</name></expr>:</case> <return>return <expr><name>GLFW_KEY_PAUSE</name></expr>;</return>

<case>case <expr><name>XK_Delete</name></expr>:</case> <return>return <expr><name>GLFW_KEY_DELETE</name></expr>;</return>

<case>case <expr><name>XK_BackSpace</name></expr>:</case> <return>return <expr><name>GLFW_KEY_BACKSPACE</name></expr>;</return>

<case>case <expr><name>XK_Return</name></expr>:</case> <return>return <expr><name>GLFW_KEY_ENTER</name></expr>;</return>

<case>case <expr><name>XK_Home</name></expr>:</case> <return>return <expr><name>GLFW_KEY_HOME</name></expr>;</return>

<case>case <expr><name>XK_End</name></expr>:</case> <return>return <expr><name>GLFW_KEY_END</name></expr>;</return>

<case>case <expr><name>XK_Page_Up</name></expr>:</case> <return>return <expr><name>GLFW_KEY_PAGE_UP</name></expr>;</return>

<case>case <expr><name>XK_Page_Down</name></expr>:</case> <return>return <expr><name>GLFW_KEY_PAGE_DOWN</name></expr>;</return>

<case>case <expr><name>XK_Insert</name></expr>:</case> <return>return <expr><name>GLFW_KEY_INSERT</name></expr>;</return>

<case>case <expr><name>XK_Left</name></expr>:</case> <return>return <expr><name>GLFW_KEY_LEFT</name></expr>;</return>

<case>case <expr><name>XK_Right</name></expr>:</case> <return>return <expr><name>GLFW_KEY_RIGHT</name></expr>;</return>

<case>case <expr><name>XK_Down</name></expr>:</case> <return>return <expr><name>GLFW_KEY_DOWN</name></expr>;</return>

<case>case <expr><name>XK_Up</name></expr>:</case> <return>return <expr><name>GLFW_KEY_UP</name></expr>;</return>

<case>case <expr><name>XK_F1</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F1</name></expr>;</return>

<case>case <expr><name>XK_F2</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F2</name></expr>;</return>

<case>case <expr><name>XK_F3</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F3</name></expr>;</return>

<case>case <expr><name>XK_F4</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F4</name></expr>;</return>

<case>case <expr><name>XK_F5</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F5</name></expr>;</return>

<case>case <expr><name>XK_F6</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F6</name></expr>;</return>

<case>case <expr><name>XK_F7</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F7</name></expr>;</return>

<case>case <expr><name>XK_F8</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F8</name></expr>;</return>

<case>case <expr><name>XK_F9</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F9</name></expr>;</return>

<case>case <expr><name>XK_F10</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F10</name></expr>;</return>

<case>case <expr><name>XK_F11</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F11</name></expr>;</return>

<case>case <expr><name>XK_F12</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F12</name></expr>;</return>

<case>case <expr><name>XK_F13</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F13</name></expr>;</return>

<case>case <expr><name>XK_F14</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F14</name></expr>;</return>

<case>case <expr><name>XK_F15</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F15</name></expr>;</return>

<case>case <expr><name>XK_F16</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F16</name></expr>;</return>

<case>case <expr><name>XK_F17</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F17</name></expr>;</return>

<case>case <expr><name>XK_F18</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F18</name></expr>;</return>

<case>case <expr><name>XK_F19</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F19</name></expr>;</return>

<case>case <expr><name>XK_F20</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F20</name></expr>;</return>

<case>case <expr><name>XK_F21</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F21</name></expr>;</return>

<case>case <expr><name>XK_F22</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F22</name></expr>;</return>

<case>case <expr><name>XK_F23</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F23</name></expr>;</return>

<case>case <expr><name>XK_F24</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F24</name></expr>;</return>

<case>case <expr><name>XK_F25</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F25</name></expr>;</return>

<case>case <expr><name>XK_KP_Divide</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_DIVIDE</name></expr>;</return>

<case>case <expr><name>XK_KP_Multiply</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_MULTIPLY</name></expr>;</return>

<case>case <expr><name>XK_KP_Subtract</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_SUBTRACT</name></expr>;</return>

<case>case <expr><name>XK_KP_Add</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_ADD</name></expr>;</return>

<case>case <expr><name>XK_KP_Insert</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_0</name></expr>;</return>

<case>case <expr><name>XK_KP_End</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_1</name></expr>;</return>

<case>case <expr><name>XK_KP_Down</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_2</name></expr>;</return>

<case>case <expr><name>XK_KP_Page_Down</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_3</name></expr>;</return>

<case>case <expr><name>XK_KP_Left</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_4</name></expr>;</return>

<case>case <expr><name>XK_KP_Right</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_6</name></expr>;</return>

<case>case <expr><name>XK_KP_Home</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_7</name></expr>;</return>

<case>case <expr><name>XK_KP_Up</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_8</name></expr>;</return>

<case>case <expr><name>XK_KP_Page_Up</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_9</name></expr>;</return>

<case>case <expr><name>XK_KP_Delete</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_DECIMAL</name></expr>;</return>

<case>case <expr><name>XK_KP_Equal</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_EQUAL</name></expr>;</return>

<case>case <expr><name>XK_KP_Enter</name></expr>:</case> <return>return <expr><name>GLFW_KEY_KP_ENTER</name></expr>;</return>

<case>case <expr><name>XK_a</name></expr>:</case> <return>return <expr><name>GLFW_KEY_A</name></expr>;</return>

<case>case <expr><name>XK_b</name></expr>:</case> <return>return <expr><name>GLFW_KEY_B</name></expr>;</return>

<case>case <expr><name>XK_c</name></expr>:</case> <return>return <expr><name>GLFW_KEY_C</name></expr>;</return>

<case>case <expr><name>XK_d</name></expr>:</case> <return>return <expr><name>GLFW_KEY_D</name></expr>;</return>

<case>case <expr><name>XK_e</name></expr>:</case> <return>return <expr><name>GLFW_KEY_E</name></expr>;</return>

<case>case <expr><name>XK_f</name></expr>:</case> <return>return <expr><name>GLFW_KEY_F</name></expr>;</return>

<case>case <expr><name>XK_g</name></expr>:</case> <return>return <expr><name>GLFW_KEY_G</name></expr>;</return>

<case>case <expr><name>XK_h</name></expr>:</case> <return>return <expr><name>GLFW_KEY_H</name></expr>;</return>

<case>case <expr><name>XK_i</name></expr>:</case> <return>return <expr><name>GLFW_KEY_I</name></expr>;</return>

<case>case <expr><name>XK_j</name></expr>:</case> <return>return <expr><name>GLFW_KEY_J</name></expr>;</return>

<case>case <expr><name>XK_k</name></expr>:</case> <return>return <expr><name>GLFW_KEY_K</name></expr>;</return>

<case>case <expr><name>XK_l</name></expr>:</case> <return>return <expr><name>GLFW_KEY_L</name></expr>;</return>

<case>case <expr><name>XK_m</name></expr>:</case> <return>return <expr><name>GLFW_KEY_M</name></expr>;</return>

<case>case <expr><name>XK_n</name></expr>:</case> <return>return <expr><name>GLFW_KEY_N</name></expr>;</return>

<case>case <expr><name>XK_o</name></expr>:</case> <return>return <expr><name>GLFW_KEY_O</name></expr>;</return>

<case>case <expr><name>XK_p</name></expr>:</case> <return>return <expr><name>GLFW_KEY_P</name></expr>;</return>

<case>case <expr><name>XK_q</name></expr>:</case> <return>return <expr><name>GLFW_KEY_Q</name></expr>;</return>

<case>case <expr><name>XK_r</name></expr>:</case> <return>return <expr><name>GLFW_KEY_R</name></expr>;</return>

<case>case <expr><name>XK_s</name></expr>:</case> <return>return <expr><name>GLFW_KEY_S</name></expr>;</return>

<case>case <expr><name>XK_t</name></expr>:</case> <return>return <expr><name>GLFW_KEY_T</name></expr>;</return>

<case>case <expr><name>XK_u</name></expr>:</case> <return>return <expr><name>GLFW_KEY_U</name></expr>;</return>

<case>case <expr><name>XK_v</name></expr>:</case> <return>return <expr><name>GLFW_KEY_V</name></expr>;</return>

<case>case <expr><name>XK_w</name></expr>:</case> <return>return <expr><name>GLFW_KEY_W</name></expr>;</return>

<case>case <expr><name>XK_x</name></expr>:</case> <return>return <expr><name>GLFW_KEY_X</name></expr>;</return>

<case>case <expr><name>XK_y</name></expr>:</case> <return>return <expr><name>GLFW_KEY_Y</name></expr>;</return>

<case>case <expr><name>XK_z</name></expr>:</case> <return>return <expr><name>GLFW_KEY_Z</name></expr>;</return>

<case>case <expr><name>XK_1</name></expr>:</case> <return>return <expr><name>GLFW_KEY_1</name></expr>;</return>

<case>case <expr><name>XK_2</name></expr>:</case> <return>return <expr><name>GLFW_KEY_2</name></expr>;</return>

<case>case <expr><name>XK_3</name></expr>:</case> <return>return <expr><name>GLFW_KEY_3</name></expr>;</return>

<case>case <expr><name>XK_4</name></expr>:</case> <return>return <expr><name>GLFW_KEY_4</name></expr>;</return>

<case>case <expr><name>XK_5</name></expr>:</case> <return>return <expr><name>GLFW_KEY_5</name></expr>;</return>

<case>case <expr><name>XK_6</name></expr>:</case> <return>return <expr><name>GLFW_KEY_6</name></expr>;</return>

<case>case <expr><name>XK_7</name></expr>:</case> <return>return <expr><name>GLFW_KEY_7</name></expr>;</return>

<case>case <expr><name>XK_8</name></expr>:</case> <return>return <expr><name>GLFW_KEY_8</name></expr>;</return>

<case>case <expr><name>XK_9</name></expr>:</case> <return>return <expr><name>GLFW_KEY_9</name></expr>;</return>

<case>case <expr><name>XK_0</name></expr>:</case> <return>return <expr><name>GLFW_KEY_0</name></expr>;</return>

<case>case <expr><name>XK_space</name></expr>:</case> <return>return <expr><name>GLFW_KEY_SPACE</name></expr>;</return>

<case>case <expr><name>XK_minus</name></expr>:</case> <return>return <expr><name>GLFW_KEY_MINUS</name></expr>;</return>

<case>case <expr><name>XK_equal</name></expr>:</case> <return>return <expr><name>GLFW_KEY_EQUAL</name></expr>;</return>

<case>case <expr><name>XK_bracketleft</name></expr>:</case> <return>return <expr><name>GLFW_KEY_LEFT_BRACKET</name></expr>;</return>

<case>case <expr><name>XK_bracketright</name></expr>:</case> <return>return <expr><name>GLFW_KEY_RIGHT_BRACKET</name></expr>;</return>

<case>case <expr><name>XK_backslash</name></expr>:</case> <return>return <expr><name>GLFW_KEY_BACKSLASH</name></expr>;</return>

<case>case <expr><name>XK_semicolon</name></expr>:</case> <return>return <expr><name>GLFW_KEY_SEMICOLON</name></expr>;</return>

<case>case <expr><name>XK_apostrophe</name></expr>:</case> <return>return <expr><name>GLFW_KEY_APOSTROPHE</name></expr>;</return>

<case>case <expr><name>XK_grave</name></expr>:</case> <return>return <expr><name>GLFW_KEY_GRAVE_ACCENT</name></expr>;</return>

<case>case <expr><name>XK_comma</name></expr>:</case> <return>return <expr><name>GLFW_KEY_COMMA</name></expr>;</return>

<case>case <expr><name>XK_period</name></expr>:</case> <return>return <expr><name>GLFW_KEY_PERIOD</name></expr>;</return>

<case>case <expr><name>XK_slash</name></expr>:</case> <return>return <expr><name>GLFW_KEY_SLASH</name></expr>;</return>

<case>case <expr><name>XK_less</name></expr>:</case> <return>return <expr><name>GLFW_KEY_WORLD_1</name></expr>;</return> 

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>GLFW_KEY_UNKNOWN</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>createKeyTables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>scancode</name></decl>, <decl><type ref="prev"/><name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>keycodes</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>keycodes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>scancodes</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>scancodes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>available</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>XkbKeyNameLength</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XkbDescPtr</name></type> <name>desc</name> <init>= <expr><call><name>XkbGetMap</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XkbUseCoreKbd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XkbGetNames</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>XkbKeyNamesMask</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>scancode</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>min_key_code</name></name></expr>;</init> <condition><expr><name>scancode</name> <operator>&lt;=</operator> <name><name>desc</name><operator>-&gt;</operator><name>max_key_code</name></name></expr>;</condition> <incr><expr><name>scancode</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>names</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>scancode</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>XkbKeyNameLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>XkbKeyNameLength</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"TLDE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_GRAVE_ACCENT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AE01"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_1</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AE02"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_2</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AE03"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_3</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AE04"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_4</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AE05"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_5</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AE06"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_6</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AE07"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_7</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AE08"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_8</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AE09"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_9</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AE10"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_0</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AE11"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_MINUS</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AE12"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_EQUAL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AD01"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_Q</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AD02"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_W</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AD03"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_E</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AD04"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_R</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AD05"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_T</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AD06"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_Y</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AD07"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_U</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AD08"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_I</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AD09"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_O</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AD10"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_P</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AD11"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_LEFT_BRACKET</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AD12"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_RIGHT_BRACKET</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AC01"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_A</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AC02"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_S</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AC03"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_D</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AC04"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_F</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AC05"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_G</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AC06"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_H</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AC07"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_J</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AC08"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_K</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AC09"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_L</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AC10"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_SEMICOLON</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AC11"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_APOSTROPHE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AB01"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_Z</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AB02"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_X</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AB03"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_C</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AB04"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_V</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AB05"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_B</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AB06"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_N</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AB07"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_M</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AB08"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_COMMA</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AB09"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_PERIOD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AB10"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_SLASH</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"BKSL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_BACKSLASH</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"LSGT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_WORLD_1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scancode</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>scancode</name> <operator>&lt;</operator> <literal type="number">256</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XkbFreeNames</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>XkbKeyNamesMask</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XkbFreeKeyboard</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>scancode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>scancode</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>scancode</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name> <operator>=</operator> <call><name>translateKeyCode</name><argument_list>(<argument><expr><name>scancode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>scancodes</name><index>[<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>scancode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>hasUsableInputMethodStyle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>found</name> <init>= <expr><name>GLFW_FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XIMStyles</name><modifier>*</modifier></type> <name>styles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetIMValues</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>im</name></name></expr></argument>, <argument><expr><name>XNQueryInputStyle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>styles</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>styles</name><operator>-&gt;</operator><name>count_styles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>styles</name><operator>-&gt;</operator><name>supported_styles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>XIMPreeditNothing</name> <operator>|</operator> <name>XIMStatusNothing</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>styles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>found</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Atom</name></type> <name>getSupportedAtom</name><parameter_list>(<parameter><decl><type><name>Atom</name><modifier>*</modifier></type> <name>supportedAtoms</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>atomCount</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>atomName</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>Atom</name></type> <name>atom</name> <init>= <expr><call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>atomName</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>atomCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>supportedAtoms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>atom</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>atom</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>None</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>detectEWMH</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Window</name><modifier>*</modifier></type> <name>windowFromRoot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_SUPPORTING_WM_CHECK</name></name></expr></argument>,

<argument><expr><name>XA_WINDOW</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>windowFromRoot</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwGrabErrorHandlerX11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Window</name><modifier>*</modifier></type> <name>windowFromChild</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><operator>*</operator><name>windowFromRoot</name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_SUPPORTING_WM_CHECK</name></name></expr></argument>,

<argument><expr><name>XA_WINDOW</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>windowFromChild</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>windowFromRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwReleaseErrorHandlerX11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>windowFromRoot</name> <operator>!=</operator> <operator>*</operator><name>windowFromChild</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>windowFromRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>windowFromChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>windowFromRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>windowFromChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Atom</name><modifier>*</modifier></type> <name>supportedAtoms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>atomCount</name> <init>=

<expr><call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_SUPPORTED</name></name></expr></argument>,

<argument><expr><name>XA_ATOM</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>supportedAtoms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_STATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_ABOVE</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_STATE_ABOVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_FULLSCREEN</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_STATE_FULLSCREEN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_VERT</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_STATE_MAXIMIZED_VERT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_HORZ</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_STATE_MAXIMIZED_HORZ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_DEMANDS_ATTENTION</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_STATE_DEMANDS_ATTENTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_FULLSCREEN_MONITORS</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_FULLSCREEN_MONITORS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_WINDOW_TYPE</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_WINDOW_TYPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_WINDOW_TYPE_NORMAL</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_WINDOW_TYPE_NORMAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WORKAREA</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_WORKAREA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_CURRENT_DESKTOP</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_CURRENT_DESKTOP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_ACTIVE_WINDOW</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_ACTIVE_WINDOW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_FRAME_EXTENTS</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_FRAME_EXTENTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_REQUEST_FRAME_EXTENTS</name></name> <operator>=</operator>

<call><name>getSupportedAtom</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>, <argument><expr><name>atomCount</name></expr></argument>, <argument><expr><literal type="string">"_NET_REQUEST_FRAME_EXTENTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>supportedAtoms</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>supportedAtoms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>initExtensions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libXxf86vm.so.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>QueryExtension</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XF86VidModeQueryExtension</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XF86VidModeQueryExtension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>GetGammaRamp</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XF86VidModeGetGammaRamp</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XF86VidModeGetGammaRamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>SetGammaRamp</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XF86VidModeSetGammaRamp</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XF86VidModeSetGammaRamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>GetGammaRampSize</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XF86VidModeGetGammaRampSize</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XF86VidModeGetGammaRampSize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>available</name></name> <operator>=</operator>

<call><name>XF86VidModeQueryExtension</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>eventBase</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>errorBase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libXi-6.so"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libXi.so.6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>QueryVersion</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XIQueryVersion</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XIQueryVersion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>SelectEvents</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XISelectEvents</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XISelectEvents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XQueryExtension</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><literal type="string">"XInputExtension"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>majorOpcode</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>eventBase</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>errorBase</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>major</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>minor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XIQueryVersion</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>major</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Success</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>available</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libXrandr-2.so"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libXrandr.so.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>AllocGamma</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRAllocGamma</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRAllocGamma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>FreeGamma</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRFreeGamma</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRFreeGamma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>FreeCrtcInfo</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRFreeCrtcInfo</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRFreeCrtcInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>FreeGamma</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRFreeGamma</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRFreeGamma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>FreeOutputInfo</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRFreeOutputInfo</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRFreeOutputInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>FreeScreenResources</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRFreeScreenResources</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRFreeScreenResources"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>GetCrtcGamma</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRGetCrtcGamma</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRGetCrtcGamma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>GetCrtcGammaSize</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRGetCrtcGammaSize</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRGetCrtcGammaSize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>GetCrtcInfo</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRGetCrtcInfo</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRGetCrtcInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>GetOutputInfo</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRGetOutputInfo</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRGetOutputInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>GetOutputPrimary</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRGetOutputPrimary</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRGetOutputPrimary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>GetScreenResourcesCurrent</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRGetScreenResourcesCurrent</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRGetScreenResourcesCurrent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>QueryExtension</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRQueryExtension</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRQueryExtension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>QueryVersion</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRQueryVersion</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRQueryVersion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>SelectInput</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRSelectInput</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRSelectInput"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>SetCrtcConfig</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRSetCrtcConfig</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRSetCrtcConfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>SetCrtcGamma</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRSetCrtcGamma</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRSetCrtcGamma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>UpdateConfiguration</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRRUpdateConfiguration</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRRUpdateConfiguration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XRRQueryExtension</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>eventBase</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>errorBase</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XRRQueryVersion</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>major</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>major</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>minor</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>available</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"X11: Failed to query RandR version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>available</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XRRScreenResources</name><modifier>*</modifier></type> <name>sr</name> <init>= <expr><call><name>XRRGetScreenResourcesCurrent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sr</name><operator>-&gt;</operator><name>ncrtc</name></name> <operator>||</operator> <operator>!</operator><call><name>XRRGetCrtcGammaSize</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>sr</name><operator>-&gt;</operator><name>crtcs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>gammaBroken</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sr</name><operator>-&gt;</operator><name>ncrtc</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>monitorBroken</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XRRFreeScreenResources</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>monitorBroken</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XRRSelectInput</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>,

<argument><expr><name>RROutputChangeNotifyMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libXcursor-1.so"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libXcursor.so.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>ImageCreate</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XcursorImageCreate</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XcursorImageCreate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>ImageDestroy</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XcursorImageDestroy</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XcursorImageDestroy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>ImageLoadCursor</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XcursorImageLoadCursor</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XcursorImageLoadCursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>GetTheme</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XcursorGetTheme</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XcursorGetTheme"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>GetDefaultSize</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XcursorGetDefaultSize</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XcursorGetDefaultSize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>LibraryLoadImage</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XcursorLibraryLoadImage</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XcursorLibraryLoadImage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libXinerama-1.so"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libXinerama.so.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>IsActive</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XineramaIsActive</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XineramaIsActive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>QueryExtension</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XineramaQueryExtension</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XineramaQueryExtension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>QueryScreens</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XineramaQueryScreens</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XineramaQueryScreens"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XineramaQueryExtension</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>major</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XineramaIsActive</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>available</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>major</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>minor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>available</name></name> <operator>=</operator>

<call><name>XkbQueryExtension</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>majorOpcode</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>eventBase</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>errorBase</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>major</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>available</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Bool</name></type> <name>supported</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XkbSetDetectableAutoRepeat</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>supported</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>supported</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>detectable</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>group</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>XkbStateRec</name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XkbGetState</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>XkbUseCoreKbd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Success</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XkbSelectEventDetails</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>XkbUseCoreKbd</name></expr></argument>, <argument><expr><name>XkbStateNotify</name></expr></argument>, <argument><expr><name>XkbAllStateComponentsMask</name></expr></argument>, <argument><expr><name>XkbGroupStateMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>group</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>state</name><operator>.</operator><name>group</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>x11xcb</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libX11-xcb-1.so"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>x11xcb</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libX11-xcb.so.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>x11xcb</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>x11xcb</name><operator>.</operator><name>GetXCBConnection</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XGetXCBConnection</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>x11xcb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XGetXCBConnection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libXrender-1.so"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libXrender.so.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>QueryExtension</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRenderQueryExtension</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRenderQueryExtension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>QueryVersion</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRenderQueryVersion</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRenderQueryVersion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>FindVisualFormat</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XRenderFindVisualFormat</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"XRenderFindVisualFormat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XRenderQueryExtension</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>errorBase</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>eventBase</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XRenderQueryVersion</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>major</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>available</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>createKeyTables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NULL_</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>UTF8_STRING</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"UTF8_STRING"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>ATOM_PAIR</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"ATOM_PAIR"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>GLFW_SELECTION</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"GLFW_SELECTION"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>TARGETS</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"TARGETS"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>MULTIPLE</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"MULTIPLE"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>PRIMARY</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"PRIMARY"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>INCR</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"INCR"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>CLIPBOARD</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"CLIPBOARD"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>CLIPBOARD_MANAGER</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"CLIPBOARD_MANAGER"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>SAVE_TARGETS</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"SAVE_TARGETS"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndAware</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"XdndAware"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndEnter</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"XdndEnter"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndPosition</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"XdndPosition"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndStatus</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"XdndStatus"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndActionCopy</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"XdndActionCopy"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndDrop</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"XdndDrop"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndFinished</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"XdndFinished"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndSelection</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"XdndSelection"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndTypeList</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"XdndTypeList"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>text_uri_list</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"text/uri-list"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>WM_PROTOCOLS</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"WM_PROTOCOLS"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>WM_STATE</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"WM_STATE"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>WM_DELETE_WINDOW</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"WM_DELETE_WINDOW"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_SUPPORTED</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"_NET_SUPPORTED"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_SUPPORTING_WM_CHECK</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"_NET_SUPPORTING_WM_CHECK"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_ICON</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_ICON"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_PING</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_PING"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_PID</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_PID"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_NAME</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_NAME"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_ICON_NAME</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_ICON_NAME"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_BYPASS_COMPOSITOR</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_BYPASS_COMPOSITOR"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_WINDOW_OPACITY</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_WINDOW_OPACITY"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>MOTIF_WM_HINTS</name></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"_MOTIF_WM_HINTS"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"_NET_WM_CM_S%u"</literal></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_CM_Sx</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>detectEWMH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getSystemContentScale</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>xdpi</name> <init>= <expr><literal type="number">96.f</literal></expr></init></decl>, <decl><type ref="prev"/><name>ydpi</name> <init>= <expr><literal type="number">96.f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>rms</name> <init>= <expr><call><name>XResourceManagerString</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rms</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XrmDatabase</name></type> <name>db</name> <init>= <expr><call><name>XrmGetStringDatabase</name><argument_list>(<argument><expr><name>rms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XrmValue</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XrmGetResource</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Xft.dpi"</literal></expr></argument>, <argument><expr><literal type="string">"Xft.Dpi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"String"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>xdpi</name> <operator>=</operator> <name>ydpi</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XrmDestroyDatabase</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>xscale</name> <operator>=</operator> <name>xdpi</name> <operator>/</operator> <literal type="number">96.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yscale</name> <operator>=</operator> <name>ydpi</name> <operator>/</operator> <literal type="number">96.f</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Cursor</name></type> <name>createHiddenCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pixels</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWimage</name></type> <name>image</name> <init>= <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>pixels</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>_glfwCreateCursorX11</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Window</name></type> <name>createHelperWindow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XSetWindowAttributes</name></type> <name>wa</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wa</name><operator>.</operator><name>event_mask</name></name> <operator>=</operator> <name>PropertyChangeMask</name></expr>;</expr_stmt>

<return>return <expr><call><name>XCreateWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>InputOnly</name></expr></argument>,

<argument><expr><call><name>DefaultVisual</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>CWEventMask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wa</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>errorHandler</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>XErrorEvent</name><modifier>*</modifier></type> <name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>errorCode</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>error_code</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwGrabErrorHandlerX11</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>errorCode</name></name> <operator>=</operator> <name>Success</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetErrorHandler</name><argument_list>(<argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwReleaseErrorHandlerX11</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetErrorHandler</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwInputErrorX11</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>_GLFW_MESSAGE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XGetErrorText</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>errorCode</name></name></expr></argument>,

<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>Cursor</name></type> <name>_glfwCreateCursorX11</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xhot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yhot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>None</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>XcursorImage</name><modifier>*</modifier></type> <name>native</name> <init>= <expr><call><name>XcursorImageCreate</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>native</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>None</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>native</name><operator>-&gt;</operator><name>xhot</name></name> <operator>=</operator> <name>xhot</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>native</name><operator>-&gt;</operator><name>yhot</name></name> <operator>=</operator> <name>yhot</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>source</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name><name>image</name><operator>-&gt;</operator><name>pixels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XcursorPixel</name><modifier>*</modifier></type> <name>target</name> <init>= <expr><name><name>native</name><operator>-&gt;</operator><name>pixels</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>target</name><operator>++</operator></expr><operator>,</operator> <expr><name>source</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>alpha</name> <init>= <expr><name><name>source</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <operator>(</operator><name>alpha</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>alpha</name><operator>)</operator> <operator>/</operator> <literal type="number">255</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>alpha</name><operator>)</operator> <operator>/</operator> <literal type="number">255</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>alpha</name><operator>)</operator> <operator>/</operator> <literal type="number">255</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>XcursorImageLoadCursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XcursorImageDestroy</name><argument_list>(<argument><expr><name>native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cursor</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>X_HAVE_UTF8_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XInitThreads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XrmInitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name> <operator>=</operator> <call><name>XOpenDisplay</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>display</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"DISPLAY"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"X11: Failed to open display %s"</literal></expr></argument>, <argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"X11: The DISPLAY environment variable is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name> <operator>=</operator> <call><name>DefaultScreen</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name> <operator>=</operator> <call><name>RootWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>context</name></name> <operator>=</operator> <call><name>XUniqueContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getSystemContentScale</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>contentScaleX</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>contentScaleY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>initExtensions</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name> <operator>=</operator> <call><name>createHelperWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>hiddenCursorHandle</name></name> <operator>=</operator> <call><name>createHiddenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XSupportsLocale</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XSetLocaleModifiers</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>im</name></name> <operator>=</operator> <call><name>XOpenIM</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>im</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasUsableInputMethodStyle</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XCloseIM</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>im</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>im</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitJoysticksLinux</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>_glfwInitTimerPOSIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPollMonitorsX11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformTerminate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XGetSelectionOwner</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>CLIPBOARD</name></name></expr></argument>)</argument_list></call> <operator>==</operator>

<name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwPushSelectionToManagerX11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XDestroyWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>hiddenCursorHandle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XFreeCursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>hiddenCursorHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>hiddenCursorHandle</name></name> <operator>=</operator> <operator>(</operator><name>Cursor</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>primarySelectionString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>clipboardString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>im</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XCloseIM</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>im</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>im</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>x11xcb</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>x11xcb</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>x11xcb</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwTerminateEGL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwTerminateGLX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>_glfwTerminateJoysticksLinux</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwPlatformGetVersionString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>_GLFW_VERSION_NUMBER</name> <literal type="string">" X11 GLX EGL OSMesa"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_TIMERS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_MONOTONIC_CLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<literal type="string">" clock_gettime"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="string">" gettimeofday"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<literal type="string">" evdev"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_BUILD_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<literal type="string">" shared"</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</return>

</block_content>}</block></function>

</unit>
