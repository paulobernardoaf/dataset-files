<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\src\wl_init.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_C_SOURCE</name></cpp:macro> <cpp:value>199309L</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/input.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timerfd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wayland-client.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>n1</name> <operator>&lt;</operator> <name>n2</name></expr> ?</condition><then> <expr><name>n1</name></expr> </then><else>: <expr><name>n2</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>_GLFWwindow</name><modifier>*</modifier></type> <name>findWindowFromDecorationSurface</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>surface</name></decl></parameter>,

<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>which</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>focus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>windowListHead</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>which</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>which</name> <operator>=</operator> <operator>&amp;</operator><name>focus</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>window</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>surface</name> <operator>==</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>top</name><operator>.</operator><name>surface</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>which</name> <operator>=</operator> <name>topDecoration</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>surface</name> <operator>==</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>left</name><operator>.</operator><name>surface</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>which</name> <operator>=</operator> <name>leftDecoration</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>surface</name> <operator>==</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>right</name><operator>.</operator><name>surface</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>which</name> <operator>=</operator> <name>rightDecoration</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>surface</name> <operator>==</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>bottom</name><operator>.</operator><name>surface</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>which</name> <operator>=</operator> <name>bottomDecoration</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>window</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointerHandleEnter</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>surface</name></decl></parameter>,

<parameter><decl><type><name>wl_fixed_t</name></type> <name>sx</name></decl></parameter>,

<parameter><decl><type><name>wl_fixed_t</name></type> <name>sy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>surface</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>focus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><call><name>wl_surface_get_user_data</name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>findWindowFromDecorationSurface</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>focus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>focus</name></name> <operator>=</operator> <name>focus</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>serial</name></name> <operator>=</operator> <name>serial</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerFocus</name></name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>hovered</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>currentCursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputCursorEnter</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointerHandleLeave</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>surface</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerFocus</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>hovered</name></name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>serial</name></name> <operator>=</operator> <name>serial</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerFocus</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputCursorEnter</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorPreviousName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>wl_buffer</name></name><modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor</name></name><modifier>*</modifier></type> <name>cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor_image</name></name><modifier>*</modifier></type> <name>image</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>surface</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorSurface</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor_theme</name></name><modifier>*</modifier></type> <name>theme</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTheme</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorThemeHiDPI</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>theme</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorThemeHiDPI</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>wl_cursor_theme_get_cursor</name><argument_list>(<argument><expr><name>theme</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cursor</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Standard cursor not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>image</name> <operator>=</operator> <name><name>cursor</name><operator>-&gt;</operator><name>images</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>image</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>wl_cursor_image_get_buffer</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wl_pointer_set_cursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>serial</name></name></expr></argument>,

<argument><expr><name>surface</name></expr></argument>,

<argument><expr><name><name>image</name><operator>-&gt;</operator><name>hotspot_x</name></name> <operator>/</operator> <name>scale</name></expr></argument>,

<argument><expr><name><name>image</name><operator>-&gt;</operator><name>hotspot_y</name></name> <operator>/</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_surface_set_buffer_scale</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_surface_attach</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_surface_damage</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorPreviousName</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointerHandleMotion</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>time</name></decl></parameter>,

<parameter><decl><type><name>wl_fixed_t</name></type> <name>sx</name></decl></parameter>,

<parameter><decl><type><name>wl_fixed_t</name></type> <name>sy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerFocus</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cursorName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>wl_fixed_to_double</name><argument_list>(<argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>wl_fixed_to_double</name><argument_list>(<argument><expr><name>sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>focus</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>mainWindow</name></expr>:</case>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorPosX</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorPosY</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorPreviousName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><name>topDecoration</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>_GLFW_DECORATION_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cursorName</name> <operator>=</operator> <literal type="string">"n-resize"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cursorName</name> <operator>=</operator> <literal type="string">"left_ptr"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>leftDecoration</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>_GLFW_DECORATION_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cursorName</name> <operator>=</operator> <literal type="string">"nw-resize"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cursorName</name> <operator>=</operator> <literal type="string">"w-resize"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>rightDecoration</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>_GLFW_DECORATION_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cursorName</name> <operator>=</operator> <literal type="string">"ne-resize"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cursorName</name> <operator>=</operator> <literal type="string">"e-resize"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>bottomDecoration</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>_GLFW_DECORATION_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cursorName</name> <operator>=</operator> <literal type="string">"sw-resize"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>_GLFW_DECORATION_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cursorName</name> <operator>=</operator> <literal type="string">"se-resize"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cursorName</name> <operator>=</operator> <literal type="string">"s-resize"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorPreviousName</name></name> <operator>!=</operator> <name>cursorName</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>cursorName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointerHandleButton</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>time</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>button</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerFocus</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>glfwButton</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>edges</name> <init>= <expr><name>XDG_TOPLEVEL_RESIZE_EDGE_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <name>BTN_LEFT</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>focus</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>mainWindow</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>topDecoration</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorPosY</name></name> <operator>&lt;</operator> <name>_GLFW_DECORATION_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edges</name> <operator>=</operator> <name>XDG_TOPLEVEL_RESIZE_EDGE_TOP</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>xdg_toplevel_move</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>seat</name></name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>leftDecoration</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorPosY</name></name> <operator>&lt;</operator> <name>_GLFW_DECORATION_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edges</name> <operator>=</operator> <name>XDG_TOPLEVEL_RESIZE_EDGE_TOP_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>edges</name> <operator>=</operator> <name>XDG_TOPLEVEL_RESIZE_EDGE_LEFT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>rightDecoration</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorPosY</name></name> <operator>&lt;</operator> <name>_GLFW_DECORATION_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edges</name> <operator>=</operator> <name>XDG_TOPLEVEL_RESIZE_EDGE_TOP_RIGHT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>edges</name> <operator>=</operator> <name>XDG_TOPLEVEL_RESIZE_EDGE_RIGHT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>bottomDecoration</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorPosX</name></name> <operator>&lt;</operator> <name>_GLFW_DECORATION_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edges</name> <operator>=</operator> <name>XDG_TOPLEVEL_RESIZE_EDGE_BOTTOM_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorPosX</name></name> <operator>&gt;</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>_GLFW_DECORATION_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edges</name> <operator>=</operator> <name>XDG_TOPLEVEL_RESIZE_EDGE_BOTTOM_RIGHT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>edges</name> <operator>=</operator> <name>XDG_TOPLEVEL_RESIZE_EDGE_BOTTOM</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>edges</name> <operator>!=</operator> <name>XDG_TOPLEVEL_RESIZE_EDGE_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>xdg_toplevel_resize</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>seat</name></name></expr></argument>,

<argument><expr><name>serial</name></expr></argument>, <argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>button</name> <operator>==</operator> <name>BTN_RIGHT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>focus</name></name> <operator>!=</operator> <name>mainWindow</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>xdg_toplevel_show_window_menu</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>seat</name></name></expr></argument>, <argument><expr><name>serial</name></expr></argument>,

<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorPosX</name></name></expr></argument>,

<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorPosY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>focus</name></name> <operator>!=</operator> <name>mainWindow</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>serial</name></name> <operator>=</operator> <name>serial</name></expr>;</expr_stmt>

<expr_stmt><expr><name>glfwButton</name> <operator>=</operator> <name>button</name> <operator>-</operator> <name>BTN_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputMouseClick</name><argument_list>(<argument><expr><name>window</name></expr></argument>,

<argument><expr><name>glfwButton</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>state</name> <operator>==</operator> <name>WL_POINTER_BUTTON_STATE_PRESSED</name></expr>

?</condition><then> <expr><name>GLFW_PRESS</name></expr>

</then><else>: <expr><name>GLFW_RELEASE</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>modifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointerHandleAxis</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>time</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>axis</name></decl></parameter>,

<parameter><decl><type><name>wl_fixed_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerFocus</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>scrollFactor</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">10.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>axis</name> <operator>==</operator> <name>WL_POINTER_AXIS_HORIZONTAL_SCROLL</name> <operator>||</operator>

<name>axis</name> <operator>==</operator> <name>WL_POINTER_AXIS_VERTICAL_SCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>axis</name> <operator>==</operator> <name>WL_POINTER_AXIS_HORIZONTAL_SCROLL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>wl_fixed_to_double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scrollFactor</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>axis</name> <operator>==</operator> <name>WL_POINTER_AXIS_VERTICAL_SCROLL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>wl_fixed_to_double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scrollFactor</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputScroll</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_pointer_listener</name></name></type> <name>pointerListener</name> <init>= <expr><block>{

<expr><name>pointerHandleEnter</name></expr>,

<expr><name>pointerHandleLeave</name></expr>,

<expr><name>pointerHandleMotion</name></expr>,

<expr><name>pointerHandleButton</name></expr>,

<expr><name>pointerHandleAxis</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboardHandleKeymap</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_keyboard</name></name><modifier>*</modifier></type> <name>keyboard</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>format</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>xkb_keymap</name></name><modifier>*</modifier></type> <name>keymap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>xkb_state</name></name><modifier>*</modifier></type> <name>state</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON_COMPOSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>xkb_compose_table</name></name><modifier>*</modifier></type> <name>composeTable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>xkb_compose_state</name></name><modifier>*</modifier></type> <name>composeState</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>mapStr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>locale</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>!=</operator> <name>WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mapStr</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mapStr</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>keymap</name> <operator>=</operator> <call><name>xkb_keymap_new_from_string</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>context</name></name></expr></argument>,

<argument><expr><name>mapStr</name></expr></argument>,

<argument><expr><name>XKB_KEYMAP_FORMAT_TEXT_V1</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>mapStr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keymap</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Failed to compile keymap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>xkb_state_new</name><argument_list>(<argument><expr><name>keymap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Failed to create XKB state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xkb_keymap_unref</name><argument_list>(<argument><expr><name>keymap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>locale</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LC_ALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locale</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>locale</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LC_CTYPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locale</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>locale</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LANG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locale</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>locale</name> <operator>=</operator> <literal type="string">"C"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON_COMPOSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>composeTable</name> <operator>=</operator>

<call><name>xkb_compose_table_new_from_locale</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name>locale</name></expr></argument>,

<argument><expr><name>XKB_COMPOSE_COMPILE_NO_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>composeTable</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>composeState</name> <operator>=</operator>

<call><name>xkb_compose_state_new</name><argument_list>(<argument><expr><name>composeTable</name></expr></argument>, <argument><expr><name>XKB_COMPOSE_STATE_NO_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xkb_compose_table_unref</name><argument_list>(<argument><expr><name>composeTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>composeState</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>composeState</name></name> <operator>=</operator> <name>composeState</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Failed to create XKB compose state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Failed to create XKB compose table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>xkb_keymap_unref</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xkb_state_unref</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap</name></name> <operator>=</operator> <name>keymap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>controlMask</name></name> <operator>=</operator>

<literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>xkb_keymap_mod_get_index</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap</name></name></expr></argument>, <argument><expr><literal type="string">"Control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>altMask</name></name> <operator>=</operator>

<literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>xkb_keymap_mod_get_index</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap</name></name></expr></argument>, <argument><expr><literal type="string">"Mod1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>shiftMask</name></name> <operator>=</operator>

<literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>xkb_keymap_mod_get_index</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap</name></name></expr></argument>, <argument><expr><literal type="string">"Shift"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>superMask</name></name> <operator>=</operator>

<literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>xkb_keymap_mod_get_index</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap</name></name></expr></argument>, <argument><expr><literal type="string">"Mod4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>capsLockMask</name></name> <operator>=</operator>

<literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>xkb_keymap_mod_get_index</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap</name></name></expr></argument>, <argument><expr><literal type="string">"Lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>numLockMask</name></name> <operator>=</operator>

<literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>xkb_keymap_mod_get_index</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap</name></name></expr></argument>, <argument><expr><literal type="string">"Mod2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboardHandleEnter</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_keyboard</name></name><modifier>*</modifier></type> <name>keyboard</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>surface</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_array</name></name><modifier>*</modifier></type> <name>keys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>surface</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><call><name>wl_surface_get_user_data</name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>findWindowFromDecorationSurface</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>serial</name></name> <operator>=</operator> <name>serial</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardFocus</name></name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputWindowFocus</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboardHandleLeave</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_keyboard</name></name><modifier>*</modifier></type> <name>keyboard</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>surface</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardFocus</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>serial</name></name> <operator>=</operator> <name>serial</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardFocus</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputWindowFocus</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>toGLFWKeyCode</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>GLFW_KEY_UNKNOWN</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON_COMPOSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>xkb_keysym_t</name></type> <name>composeSymbol</name><parameter_list>(<parameter><decl><type><name>xkb_keysym_t</name></type> <name>sym</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sym</name> <operator>==</operator> <name>XKB_KEY_NoSymbol</name> <operator>||</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>composeState</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sym</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xkb_compose_state_feed</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>composeState</name></name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>XKB_COMPOSE_FEED_ACCEPTED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sym</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>xkb_compose_state_get_status</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>composeState</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>XKB_COMPOSE_COMPOSED</name></expr>:</case>

<return>return <expr><call><name>xkb_compose_state_get_one_sym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>composeState</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>XKB_COMPOSE_COMPOSING</name></expr>:</case>

<case>case <expr><name>XKB_COMPOSE_CANCELLED</name></expr>:</case>

<return>return <expr><name>XKB_KEY_NoSymbol</name></expr>;</return>

<case>case <expr><name>XKB_COMPOSE_NOTHING</name></expr>:</case>

<default>default:</default>

<return>return <expr><name>sym</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>inputChar</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>numSyms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xkb_keysym_t</name> <modifier>*</modifier></type><name>syms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xkb_keysym_t</name></type> <name>sym</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name>key</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>numSyms</name> <operator>=</operator> <call><name>xkb_state_key_get_syms</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>syms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>numSyms</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON_COMPOSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>composeSymbol</name><argument_list>(<argument><expr><name><name>syms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <name><name>syms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>_glfwKeySym2Unicode</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mods</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>modifiers</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plain</name> <init>= <expr><operator>!</operator><operator>(</operator><name>mods</name> <operator>&amp;</operator> <operator>(</operator><name>GLFW_MOD_CONTROL</name> <operator>|</operator> <name>GLFW_MOD_ALT</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_glfwInputChar</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>, <argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>xkb_keymap_key_repeats</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap</name></name></expr></argument>, <argument><expr><name><name>syms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboardHandleKey</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_keyboard</name></name><modifier>*</modifier></type> <name>keyboard</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>time</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>key</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>keyCode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>action</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardFocus</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>shouldRepeat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>itimerspec</name></name></type> <name>timer</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>keyCode</name> <operator>=</operator> <call><name>toGLFWKeyCode</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>action</name> <operator>=</operator> <ternary><condition><expr><name>state</name> <operator>==</operator> <name>WL_KEYBOARD_KEY_STATE_PRESSED</name></expr>

?</condition><then> <expr><name>GLFW_PRESS</name></expr> </then><else>: <expr><name>GLFW_RELEASE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>serial</name></name> <operator>=</operator> <name>serial</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputKey</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>keyCode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>action</name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>modifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>GLFW_PRESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>shouldRepeat</name> <operator>=</operator> <call><name>inputChar</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shouldRepeat</name> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardRepeatRate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardLastKey</name></name> <operator>=</operator> <name>keyCode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardLastScancode</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardRepeatRate</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>timer</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">1000000000</literal> <operator>/</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardRepeatRate</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>timer</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>timer</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardRepeatDelay</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardRepeatDelay</name></name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>timerfd_settime</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>timerfd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboardHandleModifiers</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_keyboard</name></name><modifier>*</modifier></type> <name>keyboard</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>modsDepressed</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>modsLatched</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>modsLocked</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xkb_mod_mask_t</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>serial</name></name> <operator>=</operator> <name>serial</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xkb_state_update_mask</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>state</name></name></expr></argument>,

<argument><expr><name>modsDepressed</name></expr></argument>,

<argument><expr><name>modsLatched</name></expr></argument>,

<argument><expr><name>modsLocked</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>xkb_state_serialize_mods</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>state</name></name></expr></argument>,

<argument><expr><name>XKB_STATE_MODS_DEPRESSED</name> <operator>|</operator>

<name>XKB_STATE_LAYOUT_DEPRESSED</name> <operator>|</operator>

<name>XKB_STATE_MODS_LATCHED</name> <operator>|</operator>

<name>XKB_STATE_LAYOUT_LATCHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>controlMask</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>GLFW_MOD_CONTROL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>altMask</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>GLFW_MOD_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>shiftMask</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>GLFW_MOD_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>superMask</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>GLFW_MOD_SUPER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>capsLockMask</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>GLFW_MOD_CAPS_LOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>numLockMask</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>GLFW_MOD_NUM_LOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>modifiers</name></name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WL_KEYBOARD_REPEAT_INFO_SINCE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboardHandleRepeatInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_keyboard</name></name><modifier>*</modifier></type> <name>keyboard</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>rate</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>keyboard</name> <operator>!=</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboard</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardRepeatRate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardRepeatDelay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_keyboard_listener</name></name></type> <name>keyboardListener</name> <init>= <expr><block>{

<expr><name>keyboardHandleKeymap</name></expr>,

<expr><name>keyboardHandleEnter</name></expr>,

<expr><name>keyboardHandleLeave</name></expr>,

<expr><name>keyboardHandleKey</name></expr>,

<expr><name>keyboardHandleModifiers</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WL_KEYBOARD_REPEAT_INFO_SINCE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>keyboardHandleRepeatInfo</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>seatHandleCapabilities</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_seat</name></name><modifier>*</modifier></type> <name>seat</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>wl_seat_capability</name></name></type> <name>caps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>caps</name> <operator>&amp;</operator> <name>WL_SEAT_CAPABILITY_POINTER</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <call><name>wl_seat_get_pointer</name><argument_list>(<argument><expr><name>seat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_pointer_add_listener</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pointerListener</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>caps</name> <operator>&amp;</operator> <name>WL_SEAT_CAPABILITY_POINTER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>wl_pointer_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>caps</name> <operator>&amp;</operator> <name>WL_SEAT_CAPABILITY_KEYBOARD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboard</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboard</name></name> <operator>=</operator> <call><name>wl_seat_get_keyboard</name><argument_list>(<argument><expr><name>seat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_keyboard_add_listener</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboard</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyboardListener</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>caps</name> <operator>&amp;</operator> <name>WL_SEAT_CAPABILITY_KEYBOARD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboard</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>wl_keyboard_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboard</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>seatHandleName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_seat</name></name><modifier>*</modifier></type> <name>seat</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_seat_listener</name></name></type> <name>seatListener</name> <init>= <expr><block>{

<expr><name>seatHandleCapabilities</name></expr>,

<expr><name>seatHandleName</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dataOfferHandleOffer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_data_offer</name></name><modifier>*</modifier></type> <name>dataOffer</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mimeType</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_data_offer_listener</name></name></type> <name>dataOfferListener</name> <init>= <expr><block>{

<expr><name>dataOfferHandleOffer</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dataDeviceHandleDataOffer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_data_device</name></name><modifier>*</modifier></type> <name>dataDevice</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_data_offer</name></name><modifier>*</modifier></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataOffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_data_offer_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataOffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataOffer</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_data_offer_add_listener</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataOffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataOfferListener</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dataDeviceHandleEnter</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_data_device</name></name><modifier>*</modifier></type> <name>dataDevice</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name> <modifier>*</modifier></type><name>surface</name></decl></parameter>,

<parameter><decl><type><name>wl_fixed_t</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>wl_fixed_t</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_data_offer</name></name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dataDeviceHandleLeave</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_data_device</name></name><modifier>*</modifier></type> <name>dataDevice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dataDeviceHandleMotion</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_data_device</name></name><modifier>*</modifier></type> <name>dataDevice</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>time</name></decl></parameter>,

<parameter><decl><type><name>wl_fixed_t</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>wl_fixed_t</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dataDeviceHandleDrop</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_data_device</name></name><modifier>*</modifier></type> <name>dataDevice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dataDeviceHandleSelection</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_data_device</name></name><modifier>*</modifier></type> <name>dataDevice</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_data_offer</name></name><modifier>*</modifier></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_data_device_listener</name></name></type> <name>dataDeviceListener</name> <init>= <expr><block>{

<expr><name>dataDeviceHandleDataOffer</name></expr>,

<expr><name>dataDeviceHandleEnter</name></expr>,

<expr><name>dataDeviceHandleLeave</name></expr>,

<expr><name>dataDeviceHandleMotion</name></expr>,

<expr><name>dataDeviceHandleDrop</name></expr>,

<expr><name>dataDeviceHandleSelection</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wmBaseHandlePing</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>xdg_wm_base</name></name><modifier>*</modifier></type> <name>wmBase</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xdg_wm_base_pong</name><argument_list>(<argument><expr><name>wmBase</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>xdg_wm_base_listener</name></name></type> <name>wmBaseListener</name> <init>= <expr><block>{

<expr><name>wmBaseHandlePing</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>registryHandleGlobal</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name><modifier>*</modifier></type> <name>registry</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>interface</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>version</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>interface</name></expr></argument>, <argument><expr><literal type="string">"wl_compositor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>compositorVersion</name></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>compositor</name></name> <operator>=</operator>

<call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wl_compositor_interface</name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>compositorVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>interface</name></expr></argument>, <argument><expr><literal type="string">"wl_subcompositor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>subcompositor</name></name> <operator>=</operator>

<call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wl_subcompositor_interface</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>interface</name></expr></argument>, <argument><expr><literal type="string">"wl_shm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>shm</name></name> <operator>=</operator>

<call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wl_shm_interface</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>interface</name></expr></argument>, <argument><expr><literal type="string">"wl_output"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwAddOutputWayland</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>interface</name></expr></argument>, <argument><expr><literal type="string">"wl_seat"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>seat</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>seatVersion</name></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>seat</name></name> <operator>=</operator>

<call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wl_seat_interface</name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>seatVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_seat_add_listener</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>seat</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seatListener</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>interface</name></expr></argument>, <argument><expr><literal type="string">"wl_data_device_manager"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataDeviceManager</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataDeviceManager</name></name> <operator>=</operator>

<call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>wl_data_device_manager_interface</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>interface</name></expr></argument>, <argument><expr><literal type="string">"xdg_wm_base"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>wmBase</name></name> <operator>=</operator>

<call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xdg_wm_base_interface</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdg_wm_base_add_listener</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>wmBase</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wmBaseListener</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>interface</name></expr></argument>, <argument><expr><literal type="string">"zxdg_decoration_manager_v1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>decorationManager</name></name> <operator>=</operator>

<call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>zxdg_decoration_manager_v1_interface</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>interface</name></expr></argument>, <argument><expr><literal type="string">"wp_viewporter"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>viewporter</name></name> <operator>=</operator>

<call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wp_viewporter_interface</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>interface</name></expr></argument>, <argument><expr><literal type="string">"zwp_relative_pointer_manager_v1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>relativePointerManager</name></name> <operator>=</operator>

<call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>zwp_relative_pointer_manager_v1_interface</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>interface</name></expr></argument>, <argument><expr><literal type="string">"zwp_pointer_constraints_v1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerConstraints</name></name> <operator>=</operator>

<call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>zwp_pointer_constraints_v1_interface</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>interface</name></expr></argument>, <argument><expr><literal type="string">"zwp_idle_inhibit_manager_v1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>idleInhibitManager</name></name> <operator>=</operator>

<call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>zwp_idle_inhibit_manager_v1_interface</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>registryHandleGlobalRemove</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>monitor</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>monitors</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>name</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>GLFW_DISCONNECTED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_registry_listener</name></name></type> <name>registryListener</name> <init>= <expr><block>{

<expr><name>registryHandleGlobal</name></expr>,

<expr><name>registryHandleGlobalRemove</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>createKeyTables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>scancode</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>scancodes</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>scancodes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_GRAVE</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_GRAVE_ACCENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_1</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_2</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_3</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_4</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_5</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_6</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_7</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_7</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_8</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_9</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_9</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_0</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_SPACE</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_SPACE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_MINUS</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_MINUS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_EQUAL</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_Q</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_Q</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_W</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_E</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_E</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_R</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_R</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_T</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_T</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_Y</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_Y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_U</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_U</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_I</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_O</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_O</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_P</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_LEFTBRACE</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_LEFT_BRACKET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_RIGHTBRACE</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_RIGHT_BRACKET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_A</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_A</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_S</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_S</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_D</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_D</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_G</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_G</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_H</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_J</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_J</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_K</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_K</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_L</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_L</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_SEMICOLON</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_SEMICOLON</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_APOSTROPHE</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_APOSTROPHE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_Z</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_Z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_X</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_X</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_C</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_C</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_V</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_V</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_B</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_N</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_M</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_M</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_COMMA</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_COMMA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_DOT</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_PERIOD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_SLASH</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_SLASH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_BACKSLASH</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_BACKSLASH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_ESC</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_ESCAPE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_TAB</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_TAB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_LEFTSHIFT</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_LEFT_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_RIGHTSHIFT</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_RIGHT_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_LEFTCTRL</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_LEFT_CONTROL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_RIGHTCTRL</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_RIGHT_CONTROL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_LEFTALT</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_LEFT_ALT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_RIGHTALT</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_RIGHT_ALT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_LEFTMETA</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_LEFT_SUPER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_RIGHTMETA</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_RIGHT_SUPER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_MENU</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_MENU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_NUMLOCK</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_NUM_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_CAPSLOCK</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_CAPS_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_PRINT</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_PRINT_SCREEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_SCROLLLOCK</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_SCROLL_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_PAUSE</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_PAUSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_DELETE</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_DELETE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_BACKSPACE</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_BACKSPACE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_ENTER</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_ENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_HOME</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_HOME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_END</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_END</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_PAGEUP</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_PAGE_UP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_PAGEDOWN</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_PAGE_DOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_INSERT</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_INSERT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_LEFT</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_RIGHT</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_DOWN</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_DOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_UP</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_UP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F1</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F2</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F3</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F4</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F5</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F6</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F7</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F7</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F8</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F9</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F9</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F10</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F10</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F11</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F11</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F12</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F12</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F13</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F13</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F14</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F14</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F15</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F15</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F16</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F17</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F17</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F18</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F18</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F19</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F19</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F20</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F20</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F21</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F21</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F22</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F22</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F23</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F23</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_F24</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F24</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KPSLASH</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_DIVIDE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KPDOT</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_MULTIPLY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KPMINUS</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_SUBTRACT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KPPLUS</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KP0</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KP1</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KP2</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KP3</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KP4</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KP5</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KP6</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KP7</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_7</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KP8</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KP9</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_9</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KPCOMMA</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_DECIMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KPEQUAL</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>KEY_KPENTER</name></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_ENTER</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>scancode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>scancode</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>scancode</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>scancodes</name><index>[<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>scancode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cursorTheme</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cursorSizeStr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cursorSizeEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>cursorSizeLong</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursorSize</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libwayland-cursor.so.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Failed to open libwayland-cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>.</operator><name>theme_load</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wl_cursor_theme_load</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"wl_cursor_theme_load"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>.</operator><name>theme_destroy</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wl_cursor_theme_destroy</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"wl_cursor_theme_destroy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>.</operator><name>theme_get_cursor</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wl_cursor_theme_get_cursor</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"wl_cursor_theme_get_cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>.</operator><name>image_get_buffer</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wl_cursor_image_get_buffer</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"wl_cursor_image_get_buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libwayland-egl.so.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Failed to open libwayland-egl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>egl</name><operator>.</operator><name>window_create</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wl_egl_window_create</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"wl_egl_window_create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>egl</name><operator>.</operator><name>window_destroy</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wl_egl_window_destroy</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"wl_egl_window_destroy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>egl</name><operator>.</operator><name>window_resize</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wl_egl_window_resize</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"wl_egl_window_resize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libxkbcommon.so.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Failed to open libxkbcommon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>context_new</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_context_new</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_context_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>context_unref</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_context_unref</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_context_unref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap_new_from_string</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_keymap_new_from_string</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_keymap_new_from_string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap_unref</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_keymap_unref</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_keymap_unref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap_mod_get_index</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_keymap_mod_get_index</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_keymap_mod_get_index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap_key_repeats</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_keymap_key_repeats</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_keymap_key_repeats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>state_new</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_state_new</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_state_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>state_unref</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_state_unref</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_state_unref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>state_key_get_syms</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_state_key_get_syms</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_state_key_get_syms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>state_update_mask</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_state_update_mask</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_state_update_mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>state_serialize_mods</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_state_serialize_mods</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_state_serialize_mods"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON_COMPOSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>compose_table_new_from_locale</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_compose_table_new_from_locale</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_compose_table_new_from_locale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>compose_table_unref</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_compose_table_unref</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_compose_table_unref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>compose_state_new</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_compose_state_new</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_compose_state_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>compose_state_unref</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_compose_state_unref</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_compose_state_unref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>compose_state_feed</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_compose_state_feed</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_compose_state_feed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>compose_state_get_status</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_compose_state_get_status</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_compose_state_get_status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>compose_state_get_one_sym</name></name> <operator>=</operator> <operator>(</operator><name>PFN_xkb_compose_state_get_one_sym</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"xkb_compose_state_get_one_sym"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name> <operator>=</operator> <call><name>wl_display_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Failed to connect to display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>registry</name></name> <operator>=</operator> <call><name>wl_display_get_registry</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_registry_add_listener</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>registry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>registryListener</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>createKeyTables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>context</name></name> <operator>=</operator> <call><name>xkb_context_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>context</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Failed to initialize xkb context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wl_display_roundtrip</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_display_roundtrip</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitJoysticksLinux</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>_glfwInitTimerPOSIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>timerfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>seatVersion</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>timerfd</name></name> <operator>=</operator> <call><name>timerfd_create</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><name>TFD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>wmBase</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Failed to find xdg-shell in your compositor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>shm</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cursorTheme</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"XCURSOR_THEME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursorSizeStr</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"XCURSOR_SIZE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursorSize</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cursorSizeStr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cursorSizeLong</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>cursorSizeStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursorSizeEnd</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cursorSizeEnd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>errno</name> <operator>&amp;&amp;</operator> <name>cursorSizeLong</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cursorSizeLong</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cursorSize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>cursorSizeLong</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTheme</name></name> <operator>=</operator>

<call><name>wl_cursor_theme_load</name><argument_list>(<argument><expr><name>cursorTheme</name></expr></argument>, <argument><expr><name>cursorSize</name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>shm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTheme</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Unable to load default cursor theme"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorThemeHiDPI</name></name> <operator>=</operator>

<call><name>wl_cursor_theme_load</name><argument_list>(<argument><expr><name>cursorTheme</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>cursorSize</name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>shm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorSurface</name></name> <operator>=</operator>

<call><name>wl_compositor_create_surface</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>compositor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTimerfd</name></name> <operator>=</operator> <call><name>timerfd_create</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><name>TFD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>seat</name></name> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataDeviceManager</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataDevice</name></name> <operator>=</operator>

<call><name>wl_data_device_manager_get_data_device</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataDeviceManager</name></name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>seat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_data_device_add_listener</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataDevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataDeviceListener</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardString</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardString</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Unable to allocate clipboard memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSize</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformTerminate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_glfwTerminateJoysticksLinux</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>_glfwTerminateEGL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON_COMPOSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>composeState</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xkb_compose_state_unref</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>composeState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xkb_keymap_unref</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>keymap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>state</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xkb_state_unref</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>context</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xkb_context_unref</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTheme</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_cursor_theme_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorThemeHiDPI</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_cursor_theme_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorThemeHiDPI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorSurface</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_surface_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorSurface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>subcompositor</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_subcompositor_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>subcompositor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>compositor</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_compositor_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>compositor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>shm</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_shm_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>shm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>viewporter</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wp_viewporter_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>viewporter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>decorationManager</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>zxdg_decoration_manager_v1_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>decorationManager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>wmBase</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xdg_wm_base_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>wmBase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_data_source_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataDevice</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_data_device_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataDevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataOffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_data_offer_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataOffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataDeviceManager</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_data_device_manager_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataDeviceManager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_pointer_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboard</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_keyboard_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>seat</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_seat_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>seat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>relativePointerManager</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>zwp_relative_pointer_manager_v1_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>relativePointerManager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerConstraints</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>zwp_pointer_constraints_v1_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerConstraints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>idleInhibitManager</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>zwp_idle_inhibit_manager_v1_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>idleInhibitManager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>registry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_registry_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>registry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>wl_display_flush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_display_disconnect</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>timerfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>timerfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTimerfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTimerfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardString</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSendString</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSendString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwPlatformGetVersionString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>_GLFW_VERSION_NUMBER</name> <literal type="string">" Wayland EGL OSMesa"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_TIMERS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_MONOTONIC_CLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<literal type="string">" clock_gettime"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="string">" gettimeofday"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">" evdev"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_BUILD_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<literal type="string">" shared"</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</return>

</block_content>}</block></function>

</unit>
