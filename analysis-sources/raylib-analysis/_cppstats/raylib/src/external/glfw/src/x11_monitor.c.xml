<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\src\x11_monitor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>modeIsGood</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XRRModeInfo</name><modifier>*</modifier></type> <name>mi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>mi</name><operator>-&gt;</operator><name>modeFlags</name></name> <operator>&amp;</operator> <name>RR_Interlace</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>calculateRefreshRate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XRRModeInfo</name><modifier>*</modifier></type> <name>mi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>hTotal</name></name> <operator>&amp;&amp;</operator> <name><name>mi</name><operator>-&gt;</operator><name>vTotal</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>round</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>mi</name><operator>-&gt;</operator><name>dotClock</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>mi</name><operator>-&gt;</operator><name>hTotal</name></name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>mi</name><operator>-&gt;</operator><name>vTotal</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>XRRModeInfo</name><modifier>*</modifier></type> <name>getModeInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XRRScreenResources</name><modifier>*</modifier></type> <name>sr</name></decl></parameter>, <parameter><decl><type><name>RRMode</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sr</name><operator>-&gt;</operator><name>nmode</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sr</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>sr</name><operator>-&gt;</operator><name>modes</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWvidmode</name></type> <name>vidmodeFromModeInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XRRModeInfo</name><modifier>*</modifier></type> <name>mi</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>XRRCrtcInfo</name><modifier>*</modifier></type> <name>ci</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLFWvidmode</name></type> <name>mode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>rotation</name></name> <operator>==</operator> <name>RR_Rotate_90</name> <operator>||</operator> <name><name>ci</name><operator>-&gt;</operator><name>rotation</name></name> <operator>==</operator> <name>RR_Rotate_270</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>refreshRate</name></name> <operator>=</operator> <call><name>calculateRefreshRate</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwSplitBPP</name><argument_list>(<argument><expr><call><name>DefaultDepth</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>mode</name><operator>.</operator><name>redBits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mode</name><operator>.</operator><name>greenBits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mode</name><operator>.</operator><name>blueBits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mode</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPollMonitorsX11</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>monitorBroken</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>disconnectedCount</name></decl>, <decl><type ref="prev"/><name>screenCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier><modifier>*</modifier></type> <name>disconnected</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XineramaScreenInfo</name><modifier>*</modifier></type> <name>screens</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XRRScreenResources</name><modifier>*</modifier></type> <name>sr</name> <init>= <expr><call><name>XRRGetScreenResourcesCurrent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RROutput</name></type> <name>primary</name> <init>= <expr><call><name>XRRGetOutputPrimary</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>available</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>screens</name> <operator>=</operator> <call><name>XineramaQueryScreens</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screenCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>disconnectedCount</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>disconnectedCount</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>disconnected</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWmonitor</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>disconnected</name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>monitors</name></name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWmonitor</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sr</name><operator>-&gt;</operator><name>noutput</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>widthMM</name></decl>, <decl><type ref="prev"/><name>heightMM</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XRROutputInfo</name><modifier>*</modifier></type> <name>oi</name> <init>= <expr><call><name>XRRGetOutputInfo</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>sr</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oi</name><operator>-&gt;</operator><name>connection</name></name> <operator>!=</operator> <name>RR_Connected</name> <operator>||</operator> <name><name>oi</name><operator>-&gt;</operator><name>crtc</name></name> <operator>==</operator> <name>None</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XRRFreeOutputInfo</name><argument_list>(<argument><expr><name>oi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>disconnectedCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>disconnected</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>disconnected</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>x11</name><operator>.</operator><name>output</name></name> <operator>==</operator> <name><name>sr</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>disconnected</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>disconnectedCount</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XRRFreeOutputInfo</name><argument_list>(<argument><expr><name>oi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>XRRCrtcInfo</name><modifier>*</modifier></type> <name>ci</name> <init>= <expr><call><name>XRRGetCrtcInfo</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>oi</name><operator>-&gt;</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>rotation</name></name> <operator>==</operator> <name>RR_Rotate_90</name> <operator>||</operator> <name><name>ci</name><operator>-&gt;</operator><name>rotation</name></name> <operator>==</operator> <name>RR_Rotate_270</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>widthMM</name> <operator>=</operator> <name><name>oi</name><operator>-&gt;</operator><name>mm_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>heightMM</name> <operator>=</operator> <name><name>oi</name><operator>-&gt;</operator><name>mm_width</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>widthMM</name> <operator>=</operator> <name><name>oi</name><operator>-&gt;</operator><name>mm_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>heightMM</name> <operator>=</operator> <name><name>oi</name><operator>-&gt;</operator><name>mm_height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>widthMM</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>heightMM</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>widthMM</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">25.4f</literal> <operator>/</operator> <literal type="number">96.f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>heightMM</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">25.4f</literal> <operator>/</operator> <literal type="number">96.f</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><call><name>_glfwAllocMonitor</name><argument_list>(<argument><expr><name><name>oi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>widthMM</name></expr></argument>, <argument><expr><name>heightMM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name><name>sr</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name> <operator>=</operator> <name><name>oi</name><operator>-&gt;</operator><name>crtc</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>screenCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>screens</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x_org</name> <operator>==</operator> <name><name>ci</name><operator>-&gt;</operator><name>x</name></name> <operator>&amp;&amp;</operator>

<name><name>screens</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y_org</name> <operator>==</operator> <name><name>ci</name><operator>-&gt;</operator><name>y</name></name> <operator>&amp;&amp;</operator>

<name><name>screens</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>==</operator> <name><name>ci</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator>

<name><name>screens</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>==</operator> <name><name>ci</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>output</name></name> <operator>==</operator> <name>primary</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>_GLFW_INSERT_FIRST</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>_GLFW_INSERT_LAST</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>_glfwInputMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>GLFW_CONNECTED</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeOutputInfo</name><argument_list>(<argument><expr><name>oi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeCrtcInfo</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XRRFreeScreenResources</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>screens</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>screens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>disconnectedCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>disconnected</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_glfwInputMonitor</name><argument_list>(<argument><expr><name><name>disconnected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>GLFW_DISCONNECTED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>disconnected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>widthMM</name> <init>= <expr><call><name>DisplayWidthMM</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>heightMM</name> <init>= <expr><call><name>DisplayHeightMM</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_glfwInputMonitor</name><argument_list>(<argument><expr><call><name>_glfwAllocMonitor</name><argument_list>(<argument><expr><literal type="string">"Display"</literal></expr></argument>, <argument><expr><name>widthMM</name></expr></argument>, <argument><expr><name>heightMM</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>GLFW_CONNECTED</name></expr></argument>,

<argument><expr><name>_GLFW_INSERT_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwSetVideoModeX11</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>desired</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>monitorBroken</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GLFWvidmode</name></type> <name>current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRMode</name></type> <name>native</name> <init>= <expr><name>None</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>best</name> <init>= <expr><call><name>_glfwChooseVideoMode</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>desired</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_glfwPlatformGetVideoMode</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwCompareVideoModes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current</name></expr></argument>, <argument><expr><name>best</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>XRRScreenResources</name><modifier>*</modifier></type> <name>sr</name> <init>=

<expr><call><name>XRRGetScreenResourcesCurrent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XRRCrtcInfo</name><modifier>*</modifier></type> <name>ci</name> <init>= <expr><call><name>XRRGetCrtcInfo</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XRROutputInfo</name><modifier>*</modifier></type> <name>oi</name> <init>= <expr><call><name>XRRGetOutputInfo</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oi</name><operator>-&gt;</operator><name>nmode</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>XRRModeInfo</name><modifier>*</modifier></type> <name>mi</name> <init>= <expr><call><name>getModeInfo</name><argument_list>(<argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>oi</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>modeIsGood</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name></type> <name>mode</name> <init>= <expr><call><name>vidmodeFromModeInfo</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwCompareVideoModes</name><argument_list>(<argument><expr><name>best</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>native</name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>native</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>oldMode</name></name> <operator>==</operator> <name>None</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>oldMode</name></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XRRSetCrtcConfig</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name></expr></argument>,

<argument><expr><name>CurrentTime</name></expr></argument>,

<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>y</name></name></expr></argument>,

<argument><expr><name>native</name></expr></argument>,

<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>rotation</name></name></expr></argument>,

<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>,

<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>noutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XRRFreeOutputInfo</name><argument_list>(<argument><expr><name>oi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeCrtcInfo</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeScreenResources</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwRestoreVideoModeX11</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>monitorBroken</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>oldMode</name></name> <operator>==</operator> <name>None</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>XRRScreenResources</name><modifier>*</modifier></type> <name>sr</name> <init>=

<expr><call><name>XRRGetScreenResourcesCurrent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XRRCrtcInfo</name><modifier>*</modifier></type> <name>ci</name> <init>= <expr><call><name>XRRGetCrtcInfo</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XRRSetCrtcConfig</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name></expr></argument>,

<argument><expr><name>CurrentTime</name></expr></argument>,

<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>oldMode</name></name></expr></argument>,

<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>rotation</name></name></expr></argument>,

<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>,

<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>noutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeCrtcInfo</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeScreenResources</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>oldMode</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformFreeMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetMonitorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>monitorBroken</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XRRScreenResources</name><modifier>*</modifier></type> <name>sr</name> <init>=

<expr><call><name>XRRGetScreenResourcesCurrent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XRRCrtcInfo</name><modifier>*</modifier></type> <name>ci</name> <init>= <expr><call><name>XRRGetCrtcInfo</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ci</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XRRFreeCrtcInfo</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XRRFreeScreenResources</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetMonitorContentScale</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,

<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>xscale</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>xscale</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>contentScaleX</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>yscale</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>yscale</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>contentScaleY</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetMonitorWorkarea</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>areaX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>areaY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>areaWidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>areaHeight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>monitorBroken</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XRRScreenResources</name><modifier>*</modifier></type> <name>sr</name> <init>=

<expr><call><name>XRRGetScreenResourcesCurrent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XRRCrtcInfo</name><modifier>*</modifier></type> <name>ci</name> <init>= <expr><call><name>XRRGetCrtcInfo</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>areaX</name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>areaY</name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>XRRModeInfo</name><modifier>*</modifier></type> <name>mi</name> <init>= <expr><call><name>getModeInfo</name><argument_list>(<argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>rotation</name></name> <operator>==</operator> <name>RR_Rotate_90</name> <operator>||</operator> <name><name>ci</name><operator>-&gt;</operator><name>rotation</name></name> <operator>==</operator> <name>RR_Rotate_270</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>areaWidth</name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>areaHeight</name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>areaWidth</name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>areaHeight</name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XRRFreeCrtcInfo</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeScreenResources</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>areaWidth</name> <operator>=</operator> <call><name>DisplayWidth</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>areaHeight</name> <operator>=</operator> <call><name>DisplayHeight</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WORKAREA</name></name> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_CURRENT_DESKTOP</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Atom</name><modifier>*</modifier></type> <name>extents</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name><modifier>*</modifier></type> <name>desktop</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>extentCount</name> <init>=

<expr><call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WORKAREA</name></name></expr></argument>,

<argument><expr><name>XA_CARDINAL</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>extents</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_CURRENT_DESKTOP</name></name></expr></argument>,

<argument><expr><name>XA_CARDINAL</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>desktop</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>extentCount</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>desktop</name> <operator>&lt;</operator> <name>extentCount</name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>globalX</name> <init>= <expr><name><name>extents</name><index>[<expr><operator>*</operator><name>desktop</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>globalY</name> <init>= <expr><name><name>extents</name><index>[<expr><operator>*</operator><name>desktop</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>globalWidth</name> <init>= <expr><name><name>extents</name><index>[<expr><operator>*</operator><name>desktop</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>globalHeight</name> <init>= <expr><name><name>extents</name><index>[<expr><operator>*</operator><name>desktop</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>areaX</name> <operator>&lt;</operator> <name>globalX</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>areaWidth</name> <operator>-=</operator> <name>globalX</name> <operator>-</operator> <name>areaX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>areaX</name> <operator>=</operator> <name>globalX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>areaY</name> <operator>&lt;</operator> <name>globalY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>areaHeight</name> <operator>-=</operator> <name>globalY</name> <operator>-</operator> <name>areaY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>areaY</name> <operator>=</operator> <name>globalY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>areaX</name> <operator>+</operator> <name>areaWidth</name> <operator>&gt;</operator> <name>globalX</name> <operator>+</operator> <name>globalWidth</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>areaWidth</name> <operator>=</operator> <name>globalX</name> <operator>-</operator> <name>areaX</name> <operator>+</operator> <name>globalWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>areaY</name> <operator>+</operator> <name>areaHeight</name> <operator>&gt;</operator> <name>globalY</name> <operator>+</operator> <name>globalHeight</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>areaHeight</name> <operator>=</operator> <name>globalY</name> <operator>-</operator> <name>areaY</name> <operator>+</operator> <name>globalHeight</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extents</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>extents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>desktop</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>desktop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <name>areaX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <name>areaY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>areaWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name>areaHeight</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>GLFWvidmode</name><modifier>*</modifier></type> <name>_glfwPlatformGetVideoModes</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLFWvidmode</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>monitorBroken</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XRRScreenResources</name><modifier>*</modifier></type> <name>sr</name> <init>=

<expr><call><name>XRRGetScreenResourcesCurrent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XRRCrtcInfo</name><modifier>*</modifier></type> <name>ci</name> <init>= <expr><call><name>XRRGetCrtcInfo</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XRROutputInfo</name><modifier>*</modifier></type> <name>oi</name> <init>= <expr><call><name>XRRGetOutputInfo</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>oi</name><operator>-&gt;</operator><name>nmode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLFWvidmode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oi</name><operator>-&gt;</operator><name>nmode</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>XRRModeInfo</name><modifier>*</modifier></type> <name>mi</name> <init>= <expr><call><name>getModeInfo</name><argument_list>(<argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>oi</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>modeIsGood</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name></type> <name>mode</name> <init>= <expr><call><name>vidmodeFromModeInfo</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>*</operator><name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_glfwCompareVideoModes</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <operator>*</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><operator>*</operator><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XRRFreeOutputInfo</name><argument_list>(<argument><expr><name>oi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeCrtcInfo</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeScreenResources</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLFWvidmode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformGetVideoMode</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetVideoMode</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>GLFWvidmode</name><modifier>*</modifier></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>monitorBroken</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XRRScreenResources</name><modifier>*</modifier></type> <name>sr</name> <init>=

<expr><call><name>XRRGetScreenResourcesCurrent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XRRCrtcInfo</name><modifier>*</modifier></type> <name>ci</name> <init>= <expr><call><name>XRRGetCrtcInfo</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ci</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>XRRModeInfo</name><modifier>*</modifier></type> <name>mi</name> <init>= <expr><call><name>getModeInfo</name><argument_list>(<argument><expr><name>sr</name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mi</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>mode</name> <operator>=</operator> <call><name>vidmodeFromModeInfo</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XRRFreeCrtcInfo</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XRRFreeScreenResources</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>DisplayWidth</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>DisplayHeight</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>refreshRate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwSplitBPP</name><argument_list>(<argument><expr><call><name>DefaultDepth</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>mode</name><operator>-&gt;</operator><name>redBits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mode</name><operator>-&gt;</operator><name>greenBits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mode</name><operator>-&gt;</operator><name>blueBits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>GLFWbool</name></type> <name>_glfwPlatformGetGammaRamp</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>gammaBroken</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name> <init>= <expr><call><name>XRRGetCrtcGammaSize</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XRRCrtcGamma</name><modifier>*</modifier></type> <name>gamma</name> <init>= <expr><call><name>XRRGetCrtcGamma</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_glfwAllocGammaArrays</name><argument_list>(<argument><expr><name>ramp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>gamma</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>gamma</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>, <argument><expr><name><name>gamma</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeGamma</name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>available</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XF86VidModeGetGammaRampSize</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwAllocGammaArrays</name><argument_list>(<argument><expr><name>ramp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XF86VidModeGetGammaRamp</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>,

<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"X11: Gamma ramp access not supported by server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetGammaRamp</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>gammaBroken</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XRRGetCrtcGammaSize</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>ramp</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"X11: Gamma ramp size must match current ramp size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>XRRCrtcGamma</name><modifier>*</modifier></type> <name>gamma</name> <init>= <expr><call><name>XRRAllocGamma</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>gamma</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>gamma</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>gamma</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>, <argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>, <argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRSetCrtcGamma</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeGamma</name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>vidmode</name><operator>.</operator><name>available</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XF86VidModeSetGammaRamp</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>,

<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator> <name><name>ramp</name><operator>-&gt;</operator><name>red</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator> <name><name>ramp</name><operator>-&gt;</operator><name>green</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator> <name><name>ramp</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"X11: Gamma ramp access not supported by server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>RRCrtc</name></type> <name>glfwGetX11Adapter</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>crtc</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>RROutput</name></type> <name>glfwGetX11Monitor</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>output</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
