<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\src\osmesa_context.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>makeContextCurrentOSMesa</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>window</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_glfwPlatformGetFramebufferSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>width</name> <operator>!=</operator> <name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>height</name> <operator>!=</operator> <name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>width</name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OSMesaMakeCurrent</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr></argument>,

<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>buffer</name></name></expr></argument>,

<argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"OSMesa: Failed to make context current"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWglproc</name></type> <name>getProcAddressOSMesa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>procname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>GLFWglproc</name><operator>)</operator> <call><name>OSMesaGetProcAddress</name><argument_list>(<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyContextOSMesa</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OSMesaDestroyContext</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>buffer</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swapBuffersOSMesa</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swapIntervalOSMesa</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>extensionSupportedOSMesa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extension</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>GLFWbool</name></type> <name>_glfwInitOSMesa</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>sonames</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_OSMESA_LIBRARY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>_GLFW_OSMESA_LIBRARY</name></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr><literal type="string">"libOSMesa.dll"</literal></expr>,

<expr><literal type="string">"OSMesa.dll"</literal></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr><literal type="string">"libOSMesa.8.dylib"</literal></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr><literal type="string">"libOSMesa-8.so"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"libOSMesa.so.8"</literal></expr>,

<expr><literal type="string">"libOSMesa.so.6"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sonames</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><name><name>sonames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>, <argument><expr><literal type="string">"OSMesa: Library not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>CreateContextExt</name></name> <operator>=</operator> <operator>(</operator><name>PFN_OSMesaCreateContextExt</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"OSMesaCreateContextExt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>CreateContextAttribs</name></name> <operator>=</operator> <operator>(</operator><name>PFN_OSMesaCreateContextAttribs</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"OSMesaCreateContextAttribs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>DestroyContext</name></name> <operator>=</operator> <operator>(</operator><name>PFN_OSMesaDestroyContext</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"OSMesaDestroyContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>MakeCurrent</name></name> <operator>=</operator> <operator>(</operator><name>PFN_OSMesaMakeCurrent</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"OSMesaMakeCurrent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>GetColorBuffer</name></name> <operator>=</operator> <operator>(</operator><name>PFN_OSMesaGetColorBuffer</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"OSMesaGetColorBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>GetDepthBuffer</name></name> <operator>=</operator> <operator>(</operator><name>PFN_OSMesaGetDepthBuffer</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"OSMesaGetDepthBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>GetProcAddress</name></name> <operator>=</operator> <operator>(</operator><name>PFN_OSMesaGetProcAddress</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"OSMesaGetProcAddress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>CreateContextExt</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>DestroyContext</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>MakeCurrent</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>GetColorBuffer</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>GetDepthBuffer</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>GetProcAddress</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"OSMesa: Failed to load required entry points"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwTerminateOSMesa</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwTerminateOSMesa</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setAttrib</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ assert(((size_t) index + 1) &lt; sizeof(attribs) / sizeof(attribs[0])); attribs[index++] = a; attribs[index++] = v; }</cpp:value></cpp:define>

<function><type><name>GLFWbool</name></type> <name>_glfwCreateContextOSMesa</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSMesaContext</name></type> <name>share</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>accumBits</name> <init>= <expr><name><name>fbconfig</name><operator>-&gt;</operator><name>accumRedBits</name></name> <operator>+</operator>

<name><name>fbconfig</name><operator>-&gt;</operator><name>accumGreenBits</name></name> <operator>+</operator>

<name><name>fbconfig</name><operator>-&gt;</operator><name>accumBlueBits</name></name> <operator>+</operator>

<name><name>fbconfig</name><operator>-&gt;</operator><name>accumAlphaBits</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_ES_API</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"OSMesa: OpenGL ES is not available on OSMesa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>share</name> <operator>=</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>OSMesaCreateContextAttribs</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>attribs</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>OSMESA_FORMAT</name></expr></argument>, <argument><expr><name>OSMESA_RGBA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>OSMESA_DEPTH_BITS</name></expr></argument>, <argument><expr><name><name>fbconfig</name><operator>-&gt;</operator><name>depthBits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>OSMESA_STENCIL_BITS</name></expr></argument>, <argument><expr><name><name>fbconfig</name><operator>-&gt;</operator><name>stencilBits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>OSMESA_ACCUM_BITS</name></expr></argument>, <argument><expr><name>accumBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>GLFW_OPENGL_CORE_PROFILE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>OSMESA_PROFILE</name></expr></argument>, <argument><expr><name>OSMESA_CORE_PROFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>GLFW_OPENGL_COMPAT_PROFILE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>OSMESA_PROFILE</name></expr></argument>, <argument><expr><name>OSMESA_COMPAT_PROFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>OSMESA_CONTEXT_MAJOR_VERSION</name></expr></argument>, <argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>OSMESA_CONTEXT_MINOR_VERSION</name></expr></argument>, <argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>forward</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"OSMesa: Forward-compatible contexts not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name> <operator>=</operator>

<call><name>OSMesaCreateContextAttribs</name><argument_list>(<argument><expr><name>attribs</name></expr></argument>, <argument><expr><name>share</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"OSMesa: OpenGL profiles unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name> <operator>=</operator>

<call><name>OSMesaCreateContextExt</name><argument_list>(<argument><expr><name>OSMESA_RGBA</name></expr></argument>,

<argument><expr><name><name>fbconfig</name><operator>-&gt;</operator><name>depthBits</name></name></expr></argument>,

<argument><expr><name><name>fbconfig</name><operator>-&gt;</operator><name>stencilBits</name></name></expr></argument>,

<argument><expr><name>accumBits</name></expr></argument>,

<argument><expr><name>share</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"OSMesa: Failed to create context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>makeCurrent</name></name> <operator>=</operator> <name>makeContextCurrentOSMesa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>swapBuffers</name></name> <operator>=</operator> <name>swapBuffersOSMesa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>swapInterval</name></name> <operator>=</operator> <name>swapIntervalOSMesa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>extensionSupported</name></name> <operator>=</operator> <name>extensionSupportedOSMesa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>getProcAddress</name></name> <operator>=</operator> <name>getProcAddressOSMesa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>destroy</name></name> <operator>=</operator> <name>destroyContextOSMesa</name></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>setAttrib</name></cpp:undef>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetOSMesaColorBuffer</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>mesaBuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>mesaWidth</name></decl>, <decl><type ref="prev"/><name>mesaHeight</name></decl>, <decl><type ref="prev"/><name>mesaFormat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OSMesaGetColorBuffer</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>mesaWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mesaHeight</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>mesaFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mesaBuffer</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"OSMesa: Failed to retrieve color buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>mesaWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name>mesaHeight</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>mesaFormat</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <name>mesaBuffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetOSMesaDepthBuffer</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,

<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bytesPerValue</name></decl></parameter>,

<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>mesaBuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>mesaWidth</name></decl>, <decl><type ref="prev"/><name>mesaHeight</name></decl>, <decl><type ref="prev"/><name>mesaBytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OSMesaGetDepthBuffer</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>mesaWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mesaHeight</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>mesaBytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mesaBuffer</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"OSMesa: Failed to retrieve depth buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>mesaWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name>mesaHeight</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerValue</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bytesPerValue</name> <operator>=</operator> <name>mesaBytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <name>mesaBuffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>OSMesaContext</name></type> <name>glfwGetOSMesaContext</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>GLFW_NO_API</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_NO_WINDOW_CONTEXT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>osmesa</name><operator>.</operator><name>handle</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
