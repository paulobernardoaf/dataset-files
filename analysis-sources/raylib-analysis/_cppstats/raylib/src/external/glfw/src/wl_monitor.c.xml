<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\src\wl_monitor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>outputHandleGeometry</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_output</name></name><modifier>*</modifier></type> <name>output</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>physicalWidth</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>physicalHeight</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>subpixel</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>make</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>model</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>transform</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>_GLFWmonitor</name></name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>widthMM</name></name> <operator>=</operator> <name>physicalWidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>heightMM</name></name> <operator>=</operator> <name>physicalHeight</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>make</name></expr></argument>, <argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>_glfw_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>outputHandleMode</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_output</name></name><modifier>*</modifier></type> <name>output</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>refresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>_GLFWmonitor</name></name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWvidmode</name></type> <name>mode</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>redBits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>greenBits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>blueBits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>refreshRate</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>round</name><argument_list>(<argument><expr><name>refresh</name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>modeCount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>modes</name></name> <operator>=</operator>

<call><name>realloc</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>modeCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLFWvidmode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name><name>monitor</name><operator>-&gt;</operator><name>modeCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WL_OUTPUT_MODE_CURRENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>currentMode</name></name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>modeCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>outputHandleDone</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_output</name></name><modifier>*</modifier></type> <name>output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>_GLFWmonitor</name></name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_glfwInputMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>GLFW_CONNECTED</name></expr></argument>, <argument><expr><name>_GLFW_INSERT_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>outputHandleScale</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>wl_output</name></name><modifier>*</modifier></type> <name>output</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>factor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>_GLFWmonitor</name></name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name>factor</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_output_listener</name></name></type> <name>outputListener</name> <init>= <expr><block>{

<expr><name>outputHandleGeometry</name></expr>,

<expr><name>outputHandleMode</name></expr>,

<expr><name>outputHandleDone</name></expr>,

<expr><name>outputHandleScale</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>_glfwAddOutputWayland</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>version</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWmonitor</name> <modifier>*</modifier></type><name>monitor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>wl_output</name></name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Unsupported output interface version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>monitor</name> <operator>=</operator> <call><name>_glfwAllocMonitor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>wl_registry_bind</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>registry</name></name></expr></argument>,

<argument><expr><name>name</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>wl_output_interface</name></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwFreeMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_output_add_listener</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputListener</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformFreeMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>output</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_output_destroy</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetMonitorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetMonitorContentScale</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,

<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>xscale</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>xscale</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>yscale</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>yscale</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetMonitorWorkarea</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,

<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>,

<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>currentMode</name></name></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>currentMode</name></name></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>GLFWvidmode</name><modifier>*</modifier></type> <name>_glfwPlatformGetVideoModes</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>found</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>modeCount</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>monitor</name><operator>-&gt;</operator><name>modes</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetVideoMode</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>GLFWvidmode</name><modifier>*</modifier></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mode</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>currentMode</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>GLFWbool</name></type> <name>_glfwPlatformGetGammaRamp</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Gamma ramp access is not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetGammaRamp</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wayland: Gamma ramp access is not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name><name>struct</name> <name>wl_output</name></name><modifier>*</modifier></type> <name>glfwGetWaylandMonitor</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>output</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
