<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\src\egl_context.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>getEGLErrorString</name><parameter_list>(<parameter><decl><type><name>EGLint</name></type> <name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>error</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>EGL_SUCCESS</name></expr>:</case>

<return>return <expr><literal type="string">"Success"</literal></expr>;</return>

<case>case <expr><name>EGL_NOT_INITIALIZED</name></expr>:</case>

<return>return <expr><literal type="string">"EGL is not or could not be initialized"</literal></expr>;</return>

<case>case <expr><name>EGL_BAD_ACCESS</name></expr>:</case>

<return>return <expr><literal type="string">"EGL cannot access a requested resource"</literal></expr>;</return>

<case>case <expr><name>EGL_BAD_ALLOC</name></expr>:</case>

<return>return <expr><literal type="string">"EGL failed to allocate resources for the requested operation"</literal></expr>;</return>

<case>case <expr><name>EGL_BAD_ATTRIBUTE</name></expr>:</case>

<return>return <expr><literal type="string">"An unrecognized attribute or attribute value was passed in the attribute list"</literal></expr>;</return>

<case>case <expr><name>EGL_BAD_CONTEXT</name></expr>:</case>

<return>return <expr><literal type="string">"An EGLContext argument does not name a valid EGL rendering context"</literal></expr>;</return>

<case>case <expr><name>EGL_BAD_CONFIG</name></expr>:</case>

<return>return <expr><literal type="string">"An EGLConfig argument does not name a valid EGL frame buffer configuration"</literal></expr>;</return>

<case>case <expr><name>EGL_BAD_CURRENT_SURFACE</name></expr>:</case>

<return>return <expr><literal type="string">"The current surface of the calling thread is a window, pixel buffer or pixmap that is no longer valid"</literal></expr>;</return>

<case>case <expr><name>EGL_BAD_DISPLAY</name></expr>:</case>

<return>return <expr><literal type="string">"An EGLDisplay argument does not name a valid EGL display connection"</literal></expr>;</return>

<case>case <expr><name>EGL_BAD_SURFACE</name></expr>:</case>

<return>return <expr><literal type="string">"An EGLSurface argument does not name a valid surface configured for GL rendering"</literal></expr>;</return>

<case>case <expr><name>EGL_BAD_MATCH</name></expr>:</case>

<return>return <expr><literal type="string">"Arguments are inconsistent"</literal></expr>;</return>

<case>case <expr><name>EGL_BAD_PARAMETER</name></expr>:</case>

<return>return <expr><literal type="string">"One or more argument values are invalid"</literal></expr>;</return>

<case>case <expr><name>EGL_BAD_NATIVE_PIXMAP</name></expr>:</case>

<return>return <expr><literal type="string">"A NativePixmapType argument does not refer to a valid native pixmap"</literal></expr>;</return>

<case>case <expr><name>EGL_BAD_NATIVE_WINDOW</name></expr>:</case>

<return>return <expr><literal type="string">"A NativeWindowType argument does not refer to a valid native window"</literal></expr>;</return>

<case>case <expr><name>EGL_CONTEXT_LOST</name></expr>:</case>

<return>return <expr><literal type="string">"The application must destroy all contexts and reinitialise"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">"ERROR: UNKNOWN EGL ERROR"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getEGLConfigAttrib</name><parameter_list>(<parameter><decl><type><name>EGLConfig</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attrib</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eglGetConfigAttrib</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>chooseEGLConfig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>desired</name></decl></parameter>,

<parameter><decl><type><name>EGLConfig</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EGLConfig</name><modifier>*</modifier></type> <name>nativeConfigs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>usableConfigs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>closest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nativeCount</name></decl>, <decl><type ref="prev"/><name>usableCount</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eglGetConfigs</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nativeCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nativeCount</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>, <argument><expr><literal type="string">"EGL: No EGLConfigs returned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nativeConfigs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nativeCount</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EGLConfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eglGetConfigs</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>nativeConfigs</name></expr></argument>, <argument><expr><name>nativeCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nativeCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>usableConfigs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nativeCount</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWfbconfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>usableCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nativeCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>EGLConfig</name></type> <name>n</name> <init>= <expr><name><name>nativeConfigs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>u</name> <init>= <expr><name>usableConfigs</name> <operator>+</operator> <name>usableCount</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getEGLConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EGL_COLOR_BUFFER_TYPE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EGL_RGB_BUFFER</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>getEGLConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EGL_SURFACE_TYPE</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>EGL_WINDOW_BIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>XVisualInfo</name></type> <name>vi</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vi</name><operator>.</operator><name>visualid</name></name> <operator>=</operator> <call><name>getEGLConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EGL_NATIVE_VISUAL_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vi</name><operator>.</operator><name>visualid</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>transparent</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XVisualInfo</name><modifier>*</modifier></type> <name>vis</name> <init>=

<expr><call><name>XGetVisualInfo</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>VisualIDMask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vis</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>transparent</name></name> <operator>=</operator> <call><name>_glfwIsVisualTransparentX11</name><argument_list>(<argument><expr><name><name>vis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>visual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_ES_API</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>getEGLConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EGL_RENDERABLE_TYPE</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>EGL_OPENGL_ES_BIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>getEGLConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EGL_RENDERABLE_TYPE</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>EGL_OPENGL_ES2_BIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>getEGLConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EGL_RENDERABLE_TYPE</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>EGL_OPENGL_BIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>redBits</name></name> <operator>=</operator> <call><name>getEGLConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EGL_RED_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>greenBits</name></name> <operator>=</operator> <call><name>getEGLConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EGL_GREEN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>blueBits</name></name> <operator>=</operator> <call><name>getEGLConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EGL_BLUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>alphaBits</name></name> <operator>=</operator> <call><name>getEGLConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EGL_ALPHA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>depthBits</name></name> <operator>=</operator> <call><name>getEGLConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EGL_DEPTH_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>stencilBits</name></name> <operator>=</operator> <call><name>getEGLConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EGL_STENCIL_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <call><name>getEGLConfigAttrib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EGL_SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>doublebuffer</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>usableCount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>closest</name> <operator>=</operator> <call><name>_glfwChooseFBConfig</name><argument_list>(<argument><expr><name>desired</name></expr></argument>, <argument><expr><name>usableConfigs</name></expr></argument>, <argument><expr><name>usableCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>closest</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>(</operator><name>EGLConfig</name><operator>)</operator> <name><name>closest</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nativeConfigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>usableConfigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>closest</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>makeContextCurrentEGL</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>window</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eglMakeCurrent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>surface</name></name></expr></argument>,

<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>surface</name></name></expr></argument>,

<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"EGL: Failed to make context current: %s"</literal></expr></argument>,

<argument><expr><call><name>getEGLErrorString</name><argument_list>(<argument><expr><call><name>eglGetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eglMakeCurrent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name>EGL_NO_SURFACE</name></expr></argument>,

<argument><expr><name>EGL_NO_SURFACE</name></expr></argument>,

<argument><expr><name>EGL_NO_CONTEXT</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"EGL: Failed to clear current context: %s"</literal></expr></argument>,

<argument><expr><call><name>getEGLErrorString</name><argument_list>(<argument><expr><call><name>eglGetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swapBuffersEGL</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>window</name> <operator>!=</operator> <call><name>_glfwPlatformGetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"EGL: The context must be current on the calling thread when swapping buffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eglSwapBuffers</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swapIntervalEGL</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>eglSwapInterval</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>extensionSupportedEGL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extension</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extensions</name> <init>= <expr><call><name>eglQueryString</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>EGL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>extensions</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_glfwStringInExtensionString</name><argument_list>(<argument><expr><name>extension</name></expr></argument>, <argument><expr><name>extensions</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWglproc</name></type> <name>getProcAddressEGL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>procname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><call><name>_glfwPlatformGetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>client</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GLFWglproc</name></type> <name>proc</name> <init>= <expr><operator>(</operator><name>GLFWglproc</name><operator>)</operator> <call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>client</name></name></expr></argument>,

<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>proc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>proc</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>eglGetProcAddress</name><argument_list>(<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyContextEGL</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>!=</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>client</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>surface</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>eglDestroySurface</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <name>EGL_NO_SURFACE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>eglDestroyContext</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>EGL_NO_CONTEXT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>GLFWbool</name></type> <name>_glfwInitEGL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>sonames</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_EGL_LIBRARY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>_GLFW_EGL_LIBRARY</name></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr><literal type="string">"libEGL.dll"</literal></expr>,

<expr><literal type="string">"EGL.dll"</literal></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr><literal type="string">"libEGL.dylib"</literal></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr><literal type="string">"libEGL-1.so"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"libEGL.so.1"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sonames</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><name><name>sonames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>, <argument><expr><literal type="string">"EGL: Library not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>sonames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"lib"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>GetConfigAttrib</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglGetConfigAttrib</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglGetConfigAttrib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>GetConfigs</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglGetConfigs</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglGetConfigs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>GetDisplay</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglGetDisplay</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglGetDisplay"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>GetError</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglGetError</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglGetError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>Initialize</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglInitialize</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglInitialize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>Terminate</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglTerminate</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglTerminate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>BindAPI</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglBindAPI</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglBindAPI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>CreateContext</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglCreateContext</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglCreateContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>DestroySurface</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglDestroySurface</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglDestroySurface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>DestroyContext</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglDestroyContext</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglDestroyContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>CreateWindowSurface</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglCreateWindowSurface</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglCreateWindowSurface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>MakeCurrent</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglMakeCurrent</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglMakeCurrent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>SwapBuffers</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglSwapBuffers</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglSwapBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>SwapInterval</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglSwapInterval</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglSwapInterval"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>QueryString</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglQueryString</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglQueryString"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>GetProcAddress</name></name> <operator>=</operator> <operator>(</operator><name>PFN_eglGetProcAddress</name><operator>)</operator>

<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"eglGetProcAddress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>GetConfigAttrib</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>GetConfigs</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>GetDisplay</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>GetError</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>Initialize</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>Terminate</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>BindAPI</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>CreateContext</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>DestroySurface</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>DestroyContext</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>CreateWindowSurface</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>MakeCurrent</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>SwapBuffers</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>SwapInterval</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>QueryString</name></name> <operator>||</operator>

<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>GetProcAddress</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"EGL: Failed to load required entry points"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwTerminateEGL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name> <operator>=</operator> <call><name>eglGetDisplay</name><argument_list>(<argument><expr><name>_GLFW_EGL_NATIVE_DISPLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name> <operator>==</operator> <name>EGL_NO_DISPLAY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"EGL: Failed to get EGL display: %s"</literal></expr></argument>,

<argument><expr><call><name>getEGLErrorString</name><argument_list>(<argument><expr><call><name>eglGetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwTerminateEGL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eglInitialize</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"EGL: Failed to initialize EGL: %s"</literal></expr></argument>,

<argument><expr><call><name>getEGLErrorString</name><argument_list>(<argument><expr><call><name>eglGetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwTerminateEGL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>KHR_create_context</name></name> <operator>=</operator>

<call><name>extensionSupportedEGL</name><argument_list>(<argument><expr><literal type="string">"EGL_KHR_create_context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>KHR_create_context_no_error</name></name> <operator>=</operator>

<call><name>extensionSupportedEGL</name><argument_list>(<argument><expr><literal type="string">"EGL_KHR_create_context_no_error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>KHR_gl_colorspace</name></name> <operator>=</operator>

<call><name>extensionSupportedEGL</name><argument_list>(<argument><expr><literal type="string">"EGL_KHR_gl_colorspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>KHR_get_all_proc_addresses</name></name> <operator>=</operator>

<call><name>extensionSupportedEGL</name><argument_list>(<argument><expr><literal type="string">"EGL_KHR_get_all_proc_addresses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>KHR_context_flush_control</name></name> <operator>=</operator>

<call><name>extensionSupportedEGL</name><argument_list>(<argument><expr><literal type="string">"EGL_KHR_context_flush_control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwTerminateEGL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>eglTerminate</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>EGL_NO_DISPLAY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setAttrib</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ assert(((size_t) index + 1) &lt; sizeof(attribs) / sizeof(attribs[0])); attribs[index++] = a; attribs[index++] = v; }</cpp:value></cpp:define>

<function><type><name>GLFWbool</name></type> <name>_glfwCreateContextEGL</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EGLint</name></type> <name><name>attribs</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLConfig</name></type> <name>config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLContext</name></type> <name>share</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>, <argument><expr><literal type="string">"EGL: API not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>share</name> <operator>=</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>chooseEGLConfig</name><argument_list>(<argument><expr><name>ctxconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_FORMAT_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"EGL: Failed to find a suitable EGLConfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_ES_API</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eglBindAPI</name><argument_list>(<argument><expr><name>EGL_OPENGL_ES_API</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"EGL: Failed to bind OpenGL ES: %s"</literal></expr></argument>,

<argument><expr><call><name>getEGLErrorString</name><argument_list>(<argument><expr><call><name>eglGetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eglBindAPI</name><argument_list>(<argument><expr><name>EGL_OPENGL_API</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"EGL: Failed to bind OpenGL: %s"</literal></expr></argument>,

<argument><expr><call><name>getEGLErrorString</name><argument_list>(<argument><expr><call><name>eglGetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>KHR_create_context</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>forward</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>GLFW_OPENGL_CORE_PROFILE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>GLFW_OPENGL_COMPAT_PROFILE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>debug</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>robustness</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>robustness</name></name> <operator>==</operator> <name>GLFW_NO_RESET_NOTIFICATION</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR</name></expr></argument>,

<argument><expr><name>EGL_NO_RESET_NOTIFICATION_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>robustness</name></name> <operator>==</operator> <name>GLFW_LOSE_CONTEXT_ON_RESET</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR</name></expr></argument>,

<argument><expr><name>EGL_LOSE_CONTEXT_ON_RESET_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>noerror</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>KHR_create_context_no_error</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>EGL_CONTEXT_OPENGL_NO_ERROR_KHR</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>EGL_CONTEXT_MAJOR_VERSION_KHR</name></expr></argument>, <argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>EGL_CONTEXT_MINOR_VERSION_KHR</name></expr></argument>, <argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>EGL_CONTEXT_FLAGS_KHR</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_ES_API</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>EGL_CONTEXT_CLIENT_VERSION</name></expr></argument>, <argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>KHR_context_flush_control</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>release</name></name> <operator>==</operator> <name>GLFW_RELEASE_BEHAVIOR_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>EGL_CONTEXT_RELEASE_BEHAVIOR_KHR</name></expr></argument>,

<argument><expr><name>EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>release</name></name> <operator>==</operator> <name>GLFW_RELEASE_BEHAVIOR_FLUSH</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>EGL_CONTEXT_RELEASE_BEHAVIOR_KHR</name></expr></argument>,

<argument><expr><name>EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>EGL_NONE</name></expr></argument>, <argument><expr><name>EGL_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>eglCreateContext</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name>config</name></expr></argument>, <argument><expr><name>share</name></expr></argument>, <argument><expr><name>attribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name> <operator>==</operator> <name>EGL_NO_CONTEXT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"EGL: Failed to create context: %s"</literal></expr></argument>,

<argument><expr><call><name>getEGLErrorString</name><argument_list>(<argument><expr><call><name>eglGetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fbconfig</name><operator>-&gt;</operator><name>sRGB</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>KHR_gl_colorspace</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>EGL_GL_COLORSPACE_KHR</name></expr></argument>, <argument><expr><name>EGL_GL_COLORSPACE_SRGB_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>EGL_NONE</name></expr></argument>, <argument><expr><name>EGL_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>surface</name></name> <operator>=</operator>

<call><name>eglCreateWindowSurface</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>,

<argument><expr><name>config</name></expr></argument>,

<argument><expr><name>_GLFW_EGL_NATIVE_WINDOW</name></expr></argument>,

<argument><expr><name>attribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>surface</name></name> <operator>==</operator> <name>EGL_NO_SURFACE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"EGL: Failed to create window surface: %s"</literal></expr></argument>,

<argument><expr><call><name>getEGLErrorString</name><argument_list>(<argument><expr><call><name>eglGetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>config</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>KHR_get_all_proc_addresses</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>sonames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>es1sonames</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_GLESV1_LIBRARY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>_GLFW_GLESV1_LIBRARY</name></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr><literal type="string">"GLESv1_CM.dll"</literal></expr>,

<expr><literal type="string">"libGLES_CM.dll"</literal></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr><literal type="string">"libGLESv1_CM.dylib"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"libGLESv1_CM.so.1"</literal></expr>,

<expr><literal type="string">"libGLES_CM.so.1"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>es2sonames</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_GLESV2_LIBRARY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>_GLFW_GLESV2_LIBRARY</name></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr><literal type="string">"GLESv2.dll"</literal></expr>,

<expr><literal type="string">"libGLESv2.dll"</literal></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr><literal type="string">"libGLESv2.dylib"</literal></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr><literal type="string">"libGLESv2-2.so"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"libGLESv2.so.2"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>glsonames</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_OPENGL_LIBRARY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>_GLFW_OPENGL_LIBRARY</name></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"libGL.so.1"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_ES_API</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sonames</name> <operator>=</operator> <name>es1sonames</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sonames</name> <operator>=</operator> <name>es2sonames</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sonames</name> <operator>=</operator> <name>glsonames</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sonames</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>prefix</name></name> <operator>!=</operator> <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>sonames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"lib"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>client</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><name><name>sonames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>client</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>client</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"EGL: Failed to load client library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>makeCurrent</name></name> <operator>=</operator> <name>makeContextCurrentEGL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>swapBuffers</name></name> <operator>=</operator> <name>swapBuffersEGL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>swapInterval</name></name> <operator>=</operator> <name>swapIntervalEGL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>extensionSupported</name></name> <operator>=</operator> <name>extensionSupportedEGL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>getProcAddress</name></name> <operator>=</operator> <name>getProcAddressEGL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>destroy</name></name> <operator>=</operator> <name>destroyContextEGL</name></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>setAttrib</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>GLFWbool</name></type> <name>_glfwChooseVisualEGL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWwndconfig</name><modifier>*</modifier></type> <name>wndconfig</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>,

<parameter><decl><type><name>Visual</name><modifier>*</modifier><modifier>*</modifier></type> <name>visual</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XVisualInfo</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XVisualInfo</name></type> <name>desired</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLConfig</name></type> <name>native</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLint</name></type> <name>visualID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>vimask</name> <init>= <expr><name>VisualScreenMask</name> <operator>|</operator> <name>VisualIDMask</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>chooseEGLConfig</name><argument_list>(<argument><expr><name>ctxconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>native</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_FORMAT_UNAVAILABLE</name></expr></argument>,

<argument><expr><literal type="string">"EGL: Failed to find a suitable EGLConfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eglGetConfigAttrib</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>native</name></expr></argument>,

<argument><expr><name>EGL_NATIVE_VISUAL_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>visualID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desired</name><operator>.</operator><name>screen</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desired</name><operator>.</operator><name>visualid</name></name> <operator>=</operator> <name>visualID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>XGetVisualInfo</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>vimask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desired</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"EGL: Failed to retrieve Visual for EGLConfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>visual</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>visual</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>depth</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>GLFWAPI</name> <name>EGLDisplay</name></type> <name>glfwGetEGLDisplay</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>EGL_NO_DISPLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>_glfw</name><operator>.</operator><name>egl</name><operator>.</operator><name>display</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>EGLContext</name></type> <name>glfwGetEGLContext</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>EGL_NO_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>GLFW_NO_API</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_NO_WINDOW_CONTEXT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EGL_NO_CONTEXT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>handle</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>EGLSurface</name></type> <name>glfwGetEGLSurface</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>EGL_NO_SURFACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>GLFW_NO_API</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_NO_WINDOW_CONTEXT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EGL_NO_SURFACE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>egl</name><operator>.</operator><name>surface</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
