<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\src\egl_context.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_USE_EGLPLATFORM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;EGL/eglplatform.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGLAPIENTRY</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>

<typedef>typedef <type><name>HDC</name></type> <name>EGLNativeDisplayType</name>;</typedef>

<typedef>typedef <type><name>HWND</name></type> <name>EGLNativeWindowType</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGLAPIENTRY</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>EGLNativeDisplayType</name>;</typedef>

<typedef>typedef <type><name>id</name></type> <name>EGLNativeWindowType</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_X11</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGLAPIENTRY</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>Display</name><modifier>*</modifier></type> <name>EGLNativeDisplayType</name>;</typedef>

<typedef>typedef <type><name>Window</name></type> <name>EGLNativeWindowType</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WAYLAND</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGLAPIENTRY</name></cpp:macro></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>wl_display</name></name><modifier>*</modifier></type> <name>EGLNativeDisplayType</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>wl_egl_window</name></name><modifier>*</modifier></type> <name>EGLNativeWindowType</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"No supported EGL platform selected"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SUCCESS</name></cpp:macro> <cpp:value>0x3000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NOT_INITIALIZED</name></cpp:macro> <cpp:value>0x3001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_ACCESS</name></cpp:macro> <cpp:value>0x3002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_ALLOC</name></cpp:macro> <cpp:value>0x3003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_ATTRIBUTE</name></cpp:macro> <cpp:value>0x3004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_CONFIG</name></cpp:macro> <cpp:value>0x3005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_CONTEXT</name></cpp:macro> <cpp:value>0x3006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_CURRENT_SURFACE</name></cpp:macro> <cpp:value>0x3007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_DISPLAY</name></cpp:macro> <cpp:value>0x3008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_MATCH</name></cpp:macro> <cpp:value>0x3009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_NATIVE_PIXMAP</name></cpp:macro> <cpp:value>0x300a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_NATIVE_WINDOW</name></cpp:macro> <cpp:value>0x300b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_PARAMETER</name></cpp:macro> <cpp:value>0x300c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_SURFACE</name></cpp:macro> <cpp:value>0x300d</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_LOST</name></cpp:macro> <cpp:value>0x300e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_COLOR_BUFFER_TYPE</name></cpp:macro> <cpp:value>0x303f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_RGB_BUFFER</name></cpp:macro> <cpp:value>0x308e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SURFACE_TYPE</name></cpp:macro> <cpp:value>0x3033</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_WINDOW_BIT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_RENDERABLE_TYPE</name></cpp:macro> <cpp:value>0x3040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_OPENGL_ES_BIT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_OPENGL_ES2_BIT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_OPENGL_BIT</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x3021</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BLUE_SIZE</name></cpp:macro> <cpp:value>0x3022</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GREEN_SIZE</name></cpp:macro> <cpp:value>0x3023</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_RED_SIZE</name></cpp:macro> <cpp:value>0x3024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x3025</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x3026</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SAMPLES</name></cpp:macro> <cpp:value>0x3031</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_OPENGL_ES_API</name></cpp:macro> <cpp:value>0x30a0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_OPENGL_API</name></cpp:macro> <cpp:value>0x30a2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NONE</name></cpp:macro> <cpp:value>0x3038</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXTENSIONS</name></cpp:macro> <cpp:value>0x3055</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_CLIENT_VERSION</name></cpp:macro> <cpp:value>0x3098</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NATIVE_VISUAL_ID</name></cpp:macro> <cpp:value>0x302e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NO_SURFACE</name></cpp:macro> <cpp:value>((EGLSurface) 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NO_DISPLAY</name></cpp:macro> <cpp:value>((EGLDisplay) 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NO_CONTEXT</name></cpp:macro> <cpp:value>((EGLContext) 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DEFAULT_DISPLAY</name></cpp:macro> <cpp:value>((EGLNativeDisplayType) 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR</name></cpp:macro> <cpp:value>0x31bd</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NO_RESET_NOTIFICATION_KHR</name></cpp:macro> <cpp:value>0x31be</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_LOSE_CONTEXT_ON_RESET_KHR</name></cpp:macro> <cpp:value>0x31bf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_MAJOR_VERSION_KHR</name></cpp:macro> <cpp:value>0x3098</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_MINOR_VERSION_KHR</name></cpp:macro> <cpp:value>0x30fb</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR</name></cpp:macro> <cpp:value>0x30fd</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_FLAGS_KHR</name></cpp:macro> <cpp:value>0x30fc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_NO_ERROR_KHR</name></cpp:macro> <cpp:value>0x31b3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_COLORSPACE_KHR</name></cpp:macro> <cpp:value>0x309d</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_COLORSPACE_SRGB_KHR</name></cpp:macro> <cpp:value>0x3089</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_RELEASE_BEHAVIOR_KHR</name></cpp:macro> <cpp:value>0x2097</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR</name></cpp:macro> <cpp:value>0x2098</cpp:value></cpp:define>

<typedef>typedef <type><name>int</name></type> <name>EGLint</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>EGLBoolean</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>EGLenum</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>EGLConfig</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>EGLContext</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>EGLDisplay</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>EGLSurface</name>;</typedef>

<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglGetConfigAttrib</name>)<parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type></decl></parameter>,<parameter><decl><type><name>EGLConfig</name></type></decl></parameter>,<parameter><decl><type><name>EGLint</name></type></decl></parameter>,<parameter><decl><type><name>EGLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglGetConfigs</name>)<parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type></decl></parameter>,<parameter><decl><type><name>EGLConfig</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>EGLint</name></type></decl></parameter>,<parameter><decl><type><name>EGLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>EGLDisplay</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglGetDisplay</name>)<parameter_list>(<parameter><decl><type><name>EGLNativeDisplayType</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>EGLint</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglGetError</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglInitialize</name>)<parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type></decl></parameter>,<parameter><decl><type><name>EGLint</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>EGLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglTerminate</name>)<parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglBindAPI</name>)<parameter_list>(<parameter><decl><type><name>EGLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>EGLContext</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglCreateContext</name>)<parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type></decl></parameter>,<parameter><decl><type><name>EGLConfig</name></type></decl></parameter>,<parameter><decl><type><name>EGLContext</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>EGLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglDestroySurface</name>)<parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type></decl></parameter>,<parameter><decl><type><name>EGLSurface</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglDestroyContext</name>)<parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type></decl></parameter>,<parameter><decl><type><name>EGLContext</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>EGLSurface</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglCreateWindowSurface</name>)<parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type></decl></parameter>,<parameter><decl><type><name>EGLConfig</name></type></decl></parameter>,<parameter><decl><type><name>EGLNativeWindowType</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>EGLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglMakeCurrent</name>)<parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type></decl></parameter>,<parameter><decl><type><name>EGLSurface</name></type></decl></parameter>,<parameter><decl><type><name>EGLSurface</name></type></decl></parameter>,<parameter><decl><type><name>EGLContext</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglSwapBuffers</name>)<parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type></decl></parameter>,<parameter><decl><type><name>EGLSurface</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglSwapInterval</name>)<parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type></decl></parameter>,<parameter><decl><type><name>EGLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglQueryString</name>)<parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type></decl></parameter>,<parameter><decl><type><name>EGLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLFWglproc</name></type> (<name>EGLAPIENTRY</name> <modifier>*</modifier> <name>PFN_eglGetProcAddress</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglGetConfigAttrib</name></cpp:macro> <cpp:value>_glfw.egl.GetConfigAttrib</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglGetConfigs</name></cpp:macro> <cpp:value>_glfw.egl.GetConfigs</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglGetDisplay</name></cpp:macro> <cpp:value>_glfw.egl.GetDisplay</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglGetError</name></cpp:macro> <cpp:value>_glfw.egl.GetError</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglInitialize</name></cpp:macro> <cpp:value>_glfw.egl.Initialize</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglTerminate</name></cpp:macro> <cpp:value>_glfw.egl.Terminate</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglBindAPI</name></cpp:macro> <cpp:value>_glfw.egl.BindAPI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglCreateContext</name></cpp:macro> <cpp:value>_glfw.egl.CreateContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglDestroySurface</name></cpp:macro> <cpp:value>_glfw.egl.DestroySurface</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglDestroyContext</name></cpp:macro> <cpp:value>_glfw.egl.DestroyContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglCreateWindowSurface</name></cpp:macro> <cpp:value>_glfw.egl.CreateWindowSurface</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglMakeCurrent</name></cpp:macro> <cpp:value>_glfw.egl.MakeCurrent</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglSwapBuffers</name></cpp:macro> <cpp:value>_glfw.egl.SwapBuffers</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglSwapInterval</name></cpp:macro> <cpp:value>_glfw.egl.SwapInterval</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglQueryString</name></cpp:macro> <cpp:value>_glfw.egl.QueryString</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eglGetProcAddress</name></cpp:macro> <cpp:value>_glfw.egl.GetProcAddress</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_EGL_CONTEXT_STATE</name></cpp:macro> <cpp:value>_GLFWcontextEGL egl</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_EGL_LIBRARY_CONTEXT_STATE</name></cpp:macro> <cpp:value>_GLFWlibraryEGL egl</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_GLFWcontextEGL</name>

<block>{

<decl_stmt><decl><type><name>EGLConfig</name></type> <name>config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLContext</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLSurface</name></type> <name>surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>client</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWcontextEGL</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_GLFWlibraryEGL</name>

<block>{

<decl_stmt><decl><type><name>EGLDisplay</name></type> <name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLint</name></type> <name>major</name></decl>, <name>minor</name>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>KHR_create_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>KHR_create_context_no_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>KHR_gl_colorspace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>KHR_get_all_proc_addresses</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>KHR_context_flush_control</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglGetConfigAttrib</name></type> <name>GetConfigAttrib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglGetConfigs</name></type> <name>GetConfigs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglGetDisplay</name></type> <name>GetDisplay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglGetError</name></type> <name>GetError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglInitialize</name></type> <name>Initialize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglTerminate</name></type> <name>Terminate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglBindAPI</name></type> <name>BindAPI</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglCreateContext</name></type> <name>CreateContext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglDestroySurface</name></type> <name>DestroySurface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglDestroyContext</name></type> <name>DestroyContext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglCreateWindowSurface</name></type> <name>CreateWindowSurface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglMakeCurrent</name></type> <name>MakeCurrent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglSwapBuffers</name></type> <name>SwapBuffers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglSwapInterval</name></type> <name>SwapInterval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglQueryString</name></type> <name>QueryString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_eglGetProcAddress</name></type> <name>GetProcAddress</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWlibraryEGL</name>;</typedef>

<function_decl><type><name>GLFWbool</name></type> <name>_glfwInitEGL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwTerminateEGL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>GLFWbool</name></type> <name>_glfwCreateContextEGL</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>GLFWbool</name></type> <name>_glfwChooseVisualEGL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWwndconfig</name><modifier>*</modifier></type> <name>wndconfig</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>,

<parameter><decl><type><name>Visual</name><modifier>*</modifier><modifier>*</modifier></type> <name>visual</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
