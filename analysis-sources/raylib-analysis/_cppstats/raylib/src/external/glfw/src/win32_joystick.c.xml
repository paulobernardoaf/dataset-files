<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\src\win32_joystick.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_TYPE_AXIS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_TYPE_SLIDER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_TYPE_BUTTON</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_TYPE_POV</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_GLFWobjenumWin32</name>

<block>{

<decl_stmt><decl><type><name>IDirectInputDevice8W</name><modifier>*</modifier></type> <name>device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWjoyobjectWin32</name><modifier>*</modifier></type> <name>objects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>objectCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>axisCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sliderCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buttonCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>povCount</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWobjenumWin32</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>_glfw_IID_IDirectInput8W</name> <init>=

<expr><block>{<expr><literal type="number">0xbf798031</literal></expr>,<expr><literal type="number">0x483a</literal></expr>,<expr><literal type="number">0x4da2</literal></expr>,<expr><block>{<expr><literal type="number">0xaa</literal></expr>,<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0x5d</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0xed</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x97</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>_glfw_GUID_XAxis</name> <init>=

<expr><block>{<expr><literal type="number">0xa36d02e0</literal></expr>,<expr><literal type="number">0xc9f3</literal></expr>,<expr><literal type="number">0x11cf</literal></expr>,<expr><block>{<expr><literal type="number">0xbf</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>_glfw_GUID_YAxis</name> <init>=

<expr><block>{<expr><literal type="number">0xa36d02e1</literal></expr>,<expr><literal type="number">0xc9f3</literal></expr>,<expr><literal type="number">0x11cf</literal></expr>,<expr><block>{<expr><literal type="number">0xbf</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>_glfw_GUID_ZAxis</name> <init>=

<expr><block>{<expr><literal type="number">0xa36d02e2</literal></expr>,<expr><literal type="number">0xc9f3</literal></expr>,<expr><literal type="number">0x11cf</literal></expr>,<expr><block>{<expr><literal type="number">0xbf</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>_glfw_GUID_RxAxis</name> <init>=

<expr><block>{<expr><literal type="number">0xa36d02f4</literal></expr>,<expr><literal type="number">0xc9f3</literal></expr>,<expr><literal type="number">0x11cf</literal></expr>,<expr><block>{<expr><literal type="number">0xbf</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>_glfw_GUID_RyAxis</name> <init>=

<expr><block>{<expr><literal type="number">0xa36d02f5</literal></expr>,<expr><literal type="number">0xc9f3</literal></expr>,<expr><literal type="number">0x11cf</literal></expr>,<expr><block>{<expr><literal type="number">0xbf</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>_glfw_GUID_RzAxis</name> <init>=

<expr><block>{<expr><literal type="number">0xa36d02e3</literal></expr>,<expr><literal type="number">0xc9f3</literal></expr>,<expr><literal type="number">0x11cf</literal></expr>,<expr><block>{<expr><literal type="number">0xbf</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>_glfw_GUID_Slider</name> <init>=

<expr><block>{<expr><literal type="number">0xa36d02e4</literal></expr>,<expr><literal type="number">0xc9f3</literal></expr>,<expr><literal type="number">0x11cf</literal></expr>,<expr><block>{<expr><literal type="number">0xbf</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>_glfw_GUID_POV</name> <init>=

<expr><block>{<expr><literal type="number">0xa36d02f2</literal></expr>,<expr><literal type="number">0xc9f3</literal></expr>,<expr><literal type="number">0x11cf</literal></expr>,<expr><block>{<expr><literal type="number">0xbf</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDirectInput8W</name></cpp:macro> <cpp:value>_glfw_IID_IDirectInput8W</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUID_XAxis</name></cpp:macro> <cpp:value>_glfw_GUID_XAxis</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUID_YAxis</name></cpp:macro> <cpp:value>_glfw_GUID_YAxis</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUID_ZAxis</name></cpp:macro> <cpp:value>_glfw_GUID_ZAxis</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUID_RxAxis</name></cpp:macro> <cpp:value>_glfw_GUID_RxAxis</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUID_RyAxis</name></cpp:macro> <cpp:value>_glfw_GUID_RyAxis</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUID_RzAxis</name></cpp:macro> <cpp:value>_glfw_GUID_RzAxis</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUID_Slider</name></cpp:macro> <cpp:value>_glfw_GUID_Slider</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUID_POV</name></cpp:macro> <cpp:value>_glfw_GUID_POV</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>DIOBJECTDATAFORMAT</name></type> <name><name>_glfwObjectDataFormats</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><operator>&amp;</operator><name>GUID_XAxis</name></expr>,<expr><name>DIJOFS_X</name></expr>,<expr><name>DIDFT_AXIS</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><name>DIDOI_ASPECTPOSITION</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>GUID_YAxis</name></expr>,<expr><name>DIJOFS_Y</name></expr>,<expr><name>DIDFT_AXIS</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><name>DIDOI_ASPECTPOSITION</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>GUID_ZAxis</name></expr>,<expr><name>DIJOFS_Z</name></expr>,<expr><name>DIDFT_AXIS</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><name>DIDOI_ASPECTPOSITION</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>GUID_RxAxis</name></expr>,<expr><name>DIJOFS_RX</name></expr>,<expr><name>DIDFT_AXIS</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><name>DIDOI_ASPECTPOSITION</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>GUID_RyAxis</name></expr>,<expr><name>DIJOFS_RY</name></expr>,<expr><name>DIDFT_AXIS</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><name>DIDOI_ASPECTPOSITION</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>GUID_RzAxis</name></expr>,<expr><name>DIJOFS_RZ</name></expr>,<expr><name>DIDFT_AXIS</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><name>DIDOI_ASPECTPOSITION</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>GUID_Slider</name></expr>,<expr><call><name>DIJOFS_SLIDER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_AXIS</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><name>DIDOI_ASPECTPOSITION</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>GUID_Slider</name></expr>,<expr><call><name>DIJOFS_SLIDER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_AXIS</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><name>DIDOI_ASPECTPOSITION</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>GUID_POV</name></expr>,<expr><call><name>DIJOFS_POV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_POV</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>GUID_POV</name></expr>,<expr><call><name>DIJOFS_POV</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_POV</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>GUID_POV</name></expr>,<expr><call><name>DIJOFS_POV</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_POV</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>GUID_POV</name></expr>,<expr><call><name>DIJOFS_POV</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_POV</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>,<expr><call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>,<expr><name>DIDFT_BUTTON</name><operator>|</operator><name>DIDFT_OPTIONAL</name><operator>|</operator><name>DIDFT_ANYINSTANCE</name></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>DIDATAFORMAT</name></type> <name>_glfwDataFormat</name> <init>=

<expr><block>{

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>DIDATAFORMAT</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>DIOBJECTDATAFORMAT</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><name>DIDFT_ABSAXIS</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>DIJOYSTATE</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>_glfwObjectDataFormats</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DIOBJECTDATAFORMAT</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><name>_glfwObjectDataFormats</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>getDeviceDescription</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XINPUT_CAPABILITIES</name><modifier>*</modifier></type> <name>xic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>xic</name><operator>-&gt;</operator><name>SubType</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>XINPUT_DEVSUBTYPE_WHEEL</name></expr>:</case>

<return>return <expr><literal type="string">"XInput Wheel"</literal></expr>;</return>

<case>case <expr><name>XINPUT_DEVSUBTYPE_ARCADE_STICK</name></expr>:</case>

<return>return <expr><literal type="string">"XInput Arcade Stick"</literal></expr>;</return>

<case>case <expr><name>XINPUT_DEVSUBTYPE_FLIGHT_STICK</name></expr>:</case>

<return>return <expr><literal type="string">"XInput Flight Stick"</literal></expr>;</return>

<case>case <expr><name>XINPUT_DEVSUBTYPE_DANCE_PAD</name></expr>:</case>

<return>return <expr><literal type="string">"XInput Dance Pad"</literal></expr>;</return>

<case>case <expr><name>XINPUT_DEVSUBTYPE_GUITAR</name></expr>:</case>

<return>return <expr><literal type="string">"XInput Guitar"</literal></expr>;</return>

<case>case <expr><name>XINPUT_DEVSUBTYPE_DRUM_KIT</name></expr>:</case>

<return>return <expr><literal type="string">"XInput Drum Kit"</literal></expr>;</return>

<case>case <expr><name>XINPUT_DEVSUBTYPE_GAMEPAD</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>xic</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;</operator> <name>XINPUT_CAPS_WIRELESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"Wireless Xbox Controller"</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="string">"Xbox Controller"</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"Unknown XInput Device"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compareJoystickObjects</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>second</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>_GLFWjoyobjectWin32</name><modifier>*</modifier></type> <name>fo</name> <init>= <expr><name>first</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>_GLFWjoyobjectWin32</name><modifier>*</modifier></type> <name>so</name> <init>= <expr><name>second</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fo</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>so</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>fo</name><operator>-&gt;</operator><name>type</name></name> <operator>-</operator> <name><name>so</name><operator>-&gt;</operator><name>type</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>fo</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>so</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>supportsXInput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GUID</name><modifier>*</modifier></type> <name>guid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAWINPUTDEVICELIST</name><modifier>*</modifier></type> <name>ridl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>result</name> <init>= <expr><name>GLFW_FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetRawInputDeviceList</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RAWINPUTDEVICELIST</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ridl</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RAWINPUTDEVICELIST</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetRawInputDeviceList</name><argument_list>(<argument><expr><name>ridl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RAWINPUTDEVICELIST</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>UINT</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ridl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>RID_DEVICE_INFO</name></type> <name>rdi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ridl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dwType</name> <operator>!=</operator> <name>RIM_TYPEHID</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rdi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rdi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rdi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>INT</name><operator>)</operator> <call><name>GetRawInputDeviceInfoA</name><argument_list>(<argument><expr><name><name>ridl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hDevice</name></expr></argument>,

<argument><expr><name>RIDI_DEVICEINFO</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rdi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MAKELONG</name><argument_list>(<argument><expr><name><name>rdi</name><operator>.</operator><name>hid</name><operator>.</operator><name>dwVendorId</name></name></expr></argument>, <argument><expr><name><name>rdi</name><operator>.</operator><name>hid</name><operator>.</operator><name>dwProductId</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>LONG</name><operator>)</operator> <name><name>guid</name><operator>-&gt;</operator><name>Data1</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>INT</name><operator>)</operator> <call><name>GetRawInputDeviceInfoA</name><argument_list>(<argument><expr><name><name>ridl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hDevice</name></expr></argument>,

<argument><expr><name>RIDI_DEVICENAME</name></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"IG_"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ridl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>closeJoystick</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>device</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IDirectInputDevice8_Unacquire</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirectInputDevice8_Release</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwFreeJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>GLFW_DISCONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>deviceObjectCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DIDEVICEOBJECTINSTANCEW</name><modifier>*</modifier></type> <name>doi</name></decl></parameter>,

<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWobjenumWin32</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWjoyobjectWin32</name><modifier>*</modifier></type> <name>object</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>objects</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>objectCount</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DIDFT_GETTYPE</name><argument_list>(<argument><expr><name><name>doi</name><operator>-&gt;</operator><name>dwType</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>DIDFT_AXIS</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DIPROPRANGE</name></type> <name>dipr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>doi</name><operator>-&gt;</operator><name>guidType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_Slider</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>DIJOFS_SLIDER</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sliderCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>doi</name><operator>-&gt;</operator><name>guidType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_XAxis</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>DIJOFS_X</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>doi</name><operator>-&gt;</operator><name>guidType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_YAxis</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>DIJOFS_Y</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>doi</name><operator>-&gt;</operator><name>guidType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_ZAxis</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>DIJOFS_Z</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>doi</name><operator>-&gt;</operator><name>guidType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_RxAxis</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>DIJOFS_RX</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>doi</name><operator>-&gt;</operator><name>guidType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_RyAxis</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>DIJOFS_RY</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>doi</name><operator>-&gt;</operator><name>guidType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_RzAxis</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>DIJOFS_RZ</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>DIENUM_CONTINUE</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dipr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dipr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dipr</name><operator>.</operator><name>diph</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dipr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dipr</name><operator>.</operator><name>diph</name><operator>.</operator><name>dwHeaderSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>dipr</name><operator>.</operator><name>diph</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dipr</name><operator>.</operator><name>diph</name><operator>.</operator><name>dwObj</name></name> <operator>=</operator> <name><name>doi</name><operator>-&gt;</operator><name>dwType</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dipr</name><operator>.</operator><name>diph</name><operator>.</operator><name>dwHow</name></name> <operator>=</operator> <name>DIPH_BYID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dipr</name><operator>.</operator><name>lMin</name></name> <operator>=</operator> <operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dipr</name><operator>.</operator><name>lMax</name></name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectInputDevice8_SetProperty</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>DIPROP_RANGE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>dipr</name><operator>.</operator><name>diph</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>DIENUM_CONTINUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>doi</name><operator>-&gt;</operator><name>guidType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_Slider</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>_GLFW_TYPE_SLIDER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sliderCount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>_GLFW_TYPE_AXIS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>axisCount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>DIDFT_GETTYPE</name><argument_list>(<argument><expr><name><name>doi</name><operator>-&gt;</operator><name>dwType</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>DIDFT_BUTTON</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>DIJOFS_BUTTON</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buttonCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>_GLFW_TYPE_BUTTON</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>buttonCount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>DIDFT_GETTYPE</name><argument_list>(<argument><expr><name><name>doi</name><operator>-&gt;</operator><name>dwType</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>DIDFT_POV</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>DIJOFS_POV</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>povCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>_GLFW_TYPE_POV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>povCount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>objectCount</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>DIENUM_CONTINUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>deviceCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DIDEVICEINSTANCE</name><modifier>*</modifier></type> <name>di</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>jid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DIDEVCAPS</name></type> <name>dc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DIPROPDWORD</name></type> <name>dipd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirectInputDevice8</name><modifier>*</modifier></type> <name>device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWobjenumWin32</name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>guid</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>jid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr>;</condition> <incr><expr><name>jid</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>guid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>guidInstance</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DIENUM_CONTINUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>supportsXInput</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>guidProduct</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DIENUM_CONTINUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectInput8_CreateDevice</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dinput8</name><operator>.</operator><name>api</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>guidInstance</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>device</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Win32: Failed to create device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DIENUM_CONTINUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectInputDevice8_SetDataFormat</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_glfwDataFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Win32: Failed to set device data format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirectInputDevice8_Release</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DIENUM_CONTINUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectInputDevice8_GetCapabilities</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Win32: Failed to query device capabilities"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirectInputDevice8_Release</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DIENUM_CONTINUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dipd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dipd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dipd</name><operator>.</operator><name>diph</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dipd</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dipd</name><operator>.</operator><name>diph</name><operator>.</operator><name>dwHeaderSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>dipd</name><operator>.</operator><name>diph</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dipd</name><operator>.</operator><name>diph</name><operator>.</operator><name>dwHow</name></name> <operator>=</operator> <name>DIPH_DEVICE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dipd</name><operator>.</operator><name>dwData</name></name> <operator>=</operator> <name>DIPROPAXISMODE_ABS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectInputDevice8_SetProperty</name><argument_list>(<argument><expr><name>device</name></expr></argument>,

<argument><expr><name>DIPROP_AXISMODE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>dipd</name><operator>.</operator><name>diph</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Win32: Failed to set device axis mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirectInputDevice8_Release</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DIENUM_CONTINUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>objects</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>dc</name><operator>.</operator><name>dwAxes</name></name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>dc</name><operator>.</operator><name>dwButtons</name></name> <operator>+</operator> <name><name>dc</name><operator>.</operator><name>dwPOVs</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWjoyobjectWin32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectInputDevice8_EnumObjects</name><argument_list>(<argument><expr><name>device</name></expr></argument>,

<argument><expr><name>deviceObjectCallback</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>,

<argument><expr><name>DIDFT_AXIS</name> <operator>|</operator> <name>DIDFT_BUTTON</name> <operator>|</operator> <name>DIDFT_POV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Win32: Failed to enumerate device objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirectInputDevice8_Release</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DIENUM_CONTINUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>objects</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>objectCount</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWjoyobjectWin32</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>compareJoystickObjects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>di</name><operator>-&gt;</operator><name>tszInstanceName</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Win32: Failed to convert joystick name to UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirectInputDevice8_Release</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DIENUM_STOP</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>guidProduct</name><operator>.</operator><name>Data4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"PIDVID"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>guid</name></expr></argument>, <argument><expr><literal type="string">"03000000%02x%02x0000%02x%02x000000000000"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>di</name><operator>-&gt;</operator><name>guidProduct</name><operator>.</operator><name>Data1</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>guidProduct</name><operator>.</operator><name>Data1</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>guidProduct</name><operator>.</operator><name>Data1</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>guidProduct</name><operator>.</operator><name>Data1</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>guid</name></expr></argument>, <argument><expr><literal type="string">"05000000%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x00"</literal></expr></argument>,

<argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>name</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <call><name>_glfwAllocJoystick</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>,

<argument><expr><name><name>data</name><operator>.</operator><name>axisCount</name></name> <operator>+</operator> <name><name>data</name><operator>.</operator><name>sliderCount</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>.</operator><name>buttonCount</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>.</operator><name>povCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>js</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IDirectInputDevice8_Release</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DIENUM_STOP</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>guid</name></name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>guidInstance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>objects</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>objects</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>objectCount</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>objectCount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>GLFW_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DIENUM_CONTINUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwInitJoysticksWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dinput8</name><operator>.</operator><name>instance</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>DirectInput8Create</name><argument_list>(<argument><expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIRECTINPUT_VERSION</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IDirectInput8W</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dinput8</name><operator>.</operator><name>api</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Win32: Failed to create interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwDetectJoystickConnectionWin32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwTerminateJoysticksWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>jid</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>jid</name> <operator>=</operator> <name>GLFW_JOYSTICK_1</name></expr>;</init> <condition><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr>;</condition> <incr><expr><name>jid</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>closeJoystick</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dinput8</name><operator>.</operator><name>api</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IDirectInput8_Release</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dinput8</name><operator>.</operator><name>api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwDetectJoystickConnectionWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>xinput</name><operator>.</operator><name>instance</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>index</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>XUSER_MAX_COUNT</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>jid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>guid</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XINPUT_CAPABILITIES</name></type> <name>xic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>jid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr>;</condition> <incr><expr><name>jid</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>joysticks</name><index>[<expr><name>jid</name></expr>]</index></name><operator>.</operator><name>present</name> <operator>&amp;&amp;</operator>

<name><name>_glfw</name><operator>.</operator><name>joysticks</name><index>[<expr><name>jid</name></expr>]</index></name><operator>.</operator><name><name>win32</name><operator>.</operator><name>device</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<name><name>_glfw</name><operator>.</operator><name>joysticks</name><index>[<expr><name>jid</name></expr>]</index></name><operator>.</operator><name><name>win32</name><operator>.</operator><name>index</name></name> <operator>==</operator> <name>index</name></expr>)</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XInputGetCapabilities</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>xic</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>guid</name></expr></argument>, <argument><expr><literal type="string">"78696e707574%02x000000000000000000"</literal></expr></argument>,

<argument><expr><name><name>xic</name><operator>.</operator><name>SubType</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <call><name>_glfwAllocJoystick</name><argument_list>(<argument><expr><call><name>getDeviceDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guid</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>js</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>GLFW_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dinput8</name><operator>.</operator><name>api</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectInput8_EnumDevices</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dinput8</name><operator>.</operator><name>api</name></name></expr></argument>,

<argument><expr><name>DI8DEVCLASS_GAMECTRL</name></expr></argument>,

<argument><expr><name>deviceCallback</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>DIEDFL_ALLDEVICES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Failed to enumerate DirectInput8 devices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwDetectJoystickDisconnectionWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>jid</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>jid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr>;</condition> <incr><expr><name>jid</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_glfwPlatformPollJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>_GLFW_POLL_PRESENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformPollJoystick</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>device</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ai</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DIJOYSTATE</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>IDirectInputDevice8_Poll</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>IDirectInputDevice8_GetDeviceState</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>device</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DIERR_NOTACQUIRED</name> <operator>||</operator> <name>result</name> <operator>==</operator> <name>DIERR_INPUTLOST</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IDirectInputDevice8_Acquire</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirectInputDevice8_Poll</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>IDirectInputDevice8_GetDeviceState</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>device</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>closeJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>_GLFW_POLL_PRESENCE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>objectCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>state</name> <operator>+</operator> <name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>_GLFW_TYPE_AXIS</name></expr>:</case>

<case>case <expr><name>_GLFW_TYPE_SLIDER</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>value</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>LONG</name><operator>*</operator><operator>)</operator> <name>data</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator> <operator>/</operator> <literal type="number">32767.5f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystickAxis</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ai</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>_GLFW_TYPE_BUTTON</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>value</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator> <name>data</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystickButton</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>bi</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bi</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>_GLFW_TYPE_POV</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>states</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><name>GLFW_HAT_UP</name></expr>,

<expr><name>GLFW_HAT_RIGHT_UP</name></expr>,

<expr><name>GLFW_HAT_RIGHT</name></expr>,

<expr><name>GLFW_HAT_RIGHT_DOWN</name></expr>,

<expr><name>GLFW_HAT_DOWN</name></expr>,

<expr><name>GLFW_HAT_LEFT_DOWN</name></expr>,

<expr><name>GLFW_HAT_LEFT</name></expr>,

<expr><name>GLFW_HAT_LEFT_UP</name></expr>,

<expr><name>GLFW_HAT_CENTERED</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><call><name>LOWORD</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">45</literal> <operator>*</operator> <name>DI_DEGREES</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>state</name></expr></argument> &gt;</argument_list></name> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystickHat</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>pi</name></expr></argument>, <argument><expr><name><name>states</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pi</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dpad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XINPUT_STATE</name></type> <name>xis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>WORD</name></type> <name><name>buttons</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><name>XINPUT_GAMEPAD_A</name></expr>,

<expr><name>XINPUT_GAMEPAD_B</name></expr>,

<expr><name>XINPUT_GAMEPAD_X</name></expr>,

<expr><name>XINPUT_GAMEPAD_Y</name></expr>,

<expr><name>XINPUT_GAMEPAD_LEFT_SHOULDER</name></expr>,

<expr><name>XINPUT_GAMEPAD_RIGHT_SHOULDER</name></expr>,

<expr><name>XINPUT_GAMEPAD_BACK</name></expr>,

<expr><name>XINPUT_GAMEPAD_START</name></expr>,

<expr><name>XINPUT_GAMEPAD_LEFT_THUMB</name></expr>,

<expr><name>XINPUT_GAMEPAD_RIGHT_THUMB</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>XInputGetState</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>ERROR_DEVICE_NOT_CONNECTED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>closeJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>_GLFW_POLL_PRESENCE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystickAxis</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>xis</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>sThumbLX</name></name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator> <operator>/</operator> <literal type="number">32767.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystickAxis</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name><name>xis</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>sThumbLY</name></name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator> <operator>/</operator> <literal type="number">32767.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystickAxis</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>xis</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>sThumbRX</name></name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator> <operator>/</operator> <literal type="number">32767.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystickAxis</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name><name>xis</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>sThumbRY</name></name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator> <operator>/</operator> <literal type="number">32767.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystickAxis</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>xis</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>bLeftTrigger</name></name> <operator>/</operator> <literal type="number">127.5f</literal> <operator>-</operator> <literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystickAxis</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>xis</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>bRightTrigger</name></name> <operator>/</operator> <literal type="number">127.5f</literal> <operator>-</operator> <literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>value</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>xis</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>wButtons</name></name> <operator>&amp;</operator> <name><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystickButton</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>xis</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>wButtons</name></name> <operator>&amp;</operator> <name>XINPUT_GAMEPAD_DPAD_UP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dpad</name> <operator>|=</operator> <name>GLFW_HAT_UP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xis</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>wButtons</name></name> <operator>&amp;</operator> <name>XINPUT_GAMEPAD_DPAD_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dpad</name> <operator>|=</operator> <name>GLFW_HAT_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xis</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>wButtons</name></name> <operator>&amp;</operator> <name>XINPUT_GAMEPAD_DPAD_DOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dpad</name> <operator>|=</operator> <name>GLFW_HAT_DOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xis</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>wButtons</name></name> <operator>&amp;</operator> <name>XINPUT_GAMEPAD_DPAD_LEFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dpad</name> <operator>|=</operator> <name>GLFW_HAT_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystickHat</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformUpdateGamepadGUID</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>guid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>guid</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"504944564944"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>original</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>original</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>guid</name></expr></argument>, <argument><expr><literal type="string">"03000000%.4s0000%.4s000000000000"</literal></expr></argument>,

<argument><expr><name>original</name></expr></argument>, <argument><expr><name>original</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
