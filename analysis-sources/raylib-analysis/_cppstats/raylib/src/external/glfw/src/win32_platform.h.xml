<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\src\win32_platform.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VC_EXTRALEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VC_EXTRALEAN</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_LEAN_AND_MEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APIENTRY</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WINVER</name> <operator>&lt;</operator> <literal type="number">0x0501</literal></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WINVER</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINVER</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN32_WINNT</name> <operator>&lt;</operator> <literal type="number">0x0501</literal></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_WIN32_WINNT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRECTINPUT_VERSION</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEMRESOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dinput.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xinput.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dbt.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WM_MOUSEHWHEEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_MOUSEHWHEEL</name></cpp:macro> <cpp:value>0x020E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WM_DWMCOMPOSITIONCHANGED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_DWMCOMPOSITIONCHANGED</name></cpp:macro> <cpp:value>0x031E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WM_COPYGLOBALDATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_COPYGLOBALDATA</name></cpp:macro> <cpp:value>0x0049</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WM_UNICHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_UNICHAR</name></cpp:macro> <cpp:value>0x0109</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE_NOCHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE_NOCHAR</name></cpp:macro> <cpp:value>0xFFFF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WM_DPICHANGED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_DPICHANGED</name></cpp:macro> <cpp:value>0x02E0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GET_XBUTTON_WPARAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_XBUTTON_WPARAM</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HIWORD(w))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EDS_ROTATEDMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDS_ROTATEDMODE</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DISPLAY_DEVICE_ACTIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPLAY_DEVICE_ACTIVE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT_WINBLUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT_WINBLUE</name></cpp:macro> <cpp:value>0x0602</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT_WIN8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT_WIN8</name></cpp:macro> <cpp:value>0x0602</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WM_GETDPISCALEDSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_GETDPISCALEDSIZE</name></cpp:macro> <cpp:value>0x02e4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USER_DEFAULT_SCREEN_DPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_DEFAULT_SCREEN_DPI</name></cpp:macro> <cpp:value>96</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OCR_HAND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OCR_HAND</name></cpp:macro> <cpp:value>32649</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WINVER</name> <operator>&lt;</operator> <literal type="number">0x0601</literal></expr></cpp:if>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>cbSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ExtStatus</name></decl>;</decl_stmt>

}</block></struct></type> <name>CHANGEFILTERSTRUCT</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSGFLT_ALLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSGFLT_ALLOW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WINVER</name> <operator>&lt;</operator> <literal type="number">0x0600</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DWM_BB_ENABLE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DWM_BB_BLURREGION</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fEnable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRGN</name></type> <name>hRgnBlur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fTransitionOnMaximized</name></decl>;</decl_stmt>

}</block></struct></type> <name>DWM_BLURBEHIND</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dwmapi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DPI_ENUMS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><enum>enum

<block>{

<decl><name>PROCESS_DPI_UNAWARE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PROCESS_SYSTEM_DPI_AWARE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>PROCESS_PER_MONITOR_DPI_AWARE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block></enum></type> <name>PROCESS_DPI_AWARENESS</name>;</typedef>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>MDT_EFFECTIVE_DPI</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MDT_ANGULAR_DPI</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>MDT_RAW_DPI</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>MDT_DEFAULT</name> <init>= <expr><name>MDT_EFFECTIVE_DPI</name></expr></init></decl>

}</block></enum></type> <name>MONITOR_DPI_TYPE</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2</name></cpp:macro> <cpp:value>((HANDLE) -4)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsWindowsXPOrGreater</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_glfwIsWindowsVersionOrGreaterWin32(HIBYTE(_WIN32_WINNT_WINXP), LOBYTE(_WIN32_WINNT_WINXP), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsWindowsVistaOrGreater</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_glfwIsWindowsVersionOrGreaterWin32(HIBYTE(_WIN32_WINNT_VISTA), LOBYTE(_WIN32_WINNT_VISTA), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsWindows7OrGreater</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_glfwIsWindowsVersionOrGreaterWin32(HIBYTE(_WIN32_WINNT_WIN7), LOBYTE(_WIN32_WINNT_WIN7), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsWindows8OrGreater</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_glfwIsWindowsVersionOrGreaterWin32(HIBYTE(_WIN32_WINNT_WIN8), LOBYTE(_WIN32_WINNT_WIN8), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsWindows8Point1OrGreater</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_glfwIsWindowsVersionOrGreaterWin32(HIBYTE(_WIN32_WINNT_WINBLUE), LOBYTE(_WIN32_WINNT_WINBLUE), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfwIsWindows10AnniversaryUpdateOrGreaterWin32</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_glfwIsWindows10BuildOrGreaterWin32(14393)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfwIsWindows10CreatorsUpdateOrGreaterWin32</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_glfwIsWindows10BuildOrGreaterWin32(15063)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XINPUT_CAPS_WIRELESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_CAPS_WIRELESS</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XINPUT_DEVSUBTYPE_WHEEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_WHEEL</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XINPUT_DEVSUBTYPE_ARCADE_STICK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_ARCADE_STICK</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XINPUT_DEVSUBTYPE_FLIGHT_STICK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_FLIGHT_STICK</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XINPUT_DEVSUBTYPE_DANCE_PAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_DANCE_PAD</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XINPUT_DEVSUBTYPE_GUITAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_GUITAR</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XINPUT_DEVSUBTYPE_DRUM_KIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_DRUM_KIT</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XINPUT_DEVSUBTYPE_ARCADE_PAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_ARCADE_PAD</name></cpp:macro> <cpp:value>0x13</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XUSER_MAX_COUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XUSER_MAX_COUNT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DIDFT_OPTIONAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_OPTIONAL</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_timeGetTime</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timeGetTime</name></cpp:macro> <cpp:value>_glfw.win32.winmm.GetTime</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_XInputGetCapabilities</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>XINPUT_CAPABILITIES</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_XInputGetState</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>XINPUT_STATE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XInputGetCapabilities</name></cpp:macro> <cpp:value>_glfw.win32.xinput.GetCapabilities</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XInputGetState</name></cpp:macro> <cpp:value>_glfw.win32.xinput.GetState</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_DirectInput8Create</name>)<parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type></decl></parameter>,<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>REFIID</name></type></decl></parameter>,<parameter><decl><type><name>LPVOID</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>LPUNKNOWN</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DirectInput8Create</name></cpp:macro> <cpp:value>_glfw.win32.dinput8.Create</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_SetProcessDPIAware</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_ChangeWindowMessageFilterEx</name>)<parameter_list>(<parameter><decl><type><name>HWND</name></type></decl></parameter>,<parameter><decl><type><name>UINT</name></type></decl></parameter>,<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>CHANGEFILTERSTRUCT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_EnableNonClientDpiScaling</name>)<parameter_list>(<parameter><decl><type><name>HWND</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_SetProcessDpiAwarenessContext</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>UINT</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_GetDpiForWindow</name>)<parameter_list>(<parameter><decl><type><name>HWND</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_AdjustWindowRectExForDpi</name>)<parameter_list>(<parameter><decl><type><name>LPRECT</name></type></decl></parameter>,<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>BOOL</name></type></decl></parameter>,<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetProcessDPIAware</name></cpp:macro> <cpp:value>_glfw.win32.user32.SetProcessDPIAware_</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ChangeWindowMessageFilterEx</name></cpp:macro> <cpp:value>_glfw.win32.user32.ChangeWindowMessageFilterEx_</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EnableNonClientDpiScaling</name></cpp:macro> <cpp:value>_glfw.win32.user32.EnableNonClientDpiScaling_</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetProcessDpiAwarenessContext</name></cpp:macro> <cpp:value>_glfw.win32.user32.SetProcessDpiAwarenessContext_</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetDpiForWindow</name></cpp:macro> <cpp:value>_glfw.win32.user32.GetDpiForWindow_</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AdjustWindowRectExForDpi</name></cpp:macro> <cpp:value>_glfw.win32.user32.AdjustWindowRectExForDpi_</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_DwmIsCompositionEnabled</name>)<parameter_list>(<parameter><decl><type><name>BOOL</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_DwmFlush</name>)<parameter_list>(<parameter><decl><type><name>VOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>HRESULT</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>PFN_DwmEnableBlurBehindWindow</name>)<parameter_list>(<parameter><decl><type><name>HWND</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>DWM_BLURBEHIND</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DwmIsCompositionEnabled</name></cpp:macro> <cpp:value>_glfw.win32.dwmapi.IsCompositionEnabled</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DwmFlush</name></cpp:macro> <cpp:value>_glfw.win32.dwmapi.Flush</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DwmEnableBlurBehindWindow</name></cpp:macro> <cpp:value>_glfw.win32.dwmapi.EnableBlurBehindWindow</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_SetProcessDpiAwareness</name>)<parameter_list>(<parameter><decl><type><name>PROCESS_DPI_AWARENESS</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_GetDpiForMonitor</name>)<parameter_list>(<parameter><decl><type><name>HMONITOR</name></type></decl></parameter>,<parameter><decl><type><name>MONITOR_DPI_TYPE</name></type></decl></parameter>,<parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetProcessDpiAwareness</name></cpp:macro> <cpp:value>_glfw.win32.shcore.SetProcessDpiAwareness_</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetDpiForMonitor</name></cpp:macro> <cpp:value>_glfw.win32.shcore.GetDpiForMonitor_</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>LONG</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>PFN_RtlVerifyVersionInfo</name>)<parameter_list>(<parameter><decl><type><name>OSVERSIONINFOEXW</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>ULONG</name></type></decl></parameter>,<parameter><decl><type><name>ULONGLONG</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RtlVerifyVersionInfo</name></cpp:macro> <cpp:value>_glfw.win32.ntdll.RtlVerifyVersionInfo_</cpp:value></cpp:define>

<typedef>typedef <type><name>VkFlags</name></type> <name>VkWin32SurfaceCreateFlagsKHR</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VkWin32SurfaceCreateInfoKHR</name>

<block>{

<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkWin32SurfaceCreateFlagsKHR</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hinstance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

}</block></struct></type> <name>VkWin32SurfaceCreateInfoKHR</name>;</typedef>

<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFN_vkCreateWin32SurfaceKHR</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VkWin32SurfaceCreateInfoKHR</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VkSurfaceKHR</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>VkBool32</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type></decl></parameter>,<parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32_joystick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wgl_context.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"egl_context.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osmesa_context.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WNDCLASSNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_WNDCLASSNAME</name></cpp:macro> <cpp:value>L"GLFW30"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw_dlopen</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LoadLibraryA(name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw_dlclose</name><parameter_list>(<parameter><type><name>handle</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FreeLibrary((HMODULE) handle)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw_dlsym</name><parameter_list>(<parameter><type><name>handle</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GetProcAddress((HMODULE) handle, name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_EGL_NATIVE_WINDOW</name></cpp:macro> <cpp:value>((EGLNativeWindowType) window-&gt;win32.handle)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_EGL_NATIVE_DISPLAY</name></cpp:macro> <cpp:value>EGL_DEFAULT_DISPLAY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_WINDOW_STATE</name></cpp:macro> <cpp:value>_GLFWwindowWin32 win32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_LIBRARY_WINDOW_STATE</name></cpp:macro> <cpp:value>_GLFWlibraryWin32 win32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_LIBRARY_TIMER_STATE</name></cpp:macro> <cpp:value>_GLFWtimerWin32 win32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_MONITOR_STATE</name></cpp:macro> <cpp:value>_GLFWmonitorWin32 win32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_CURSOR_STATE</name></cpp:macro> <cpp:value>_GLFWcursorWin32 win32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_TLS_STATE</name></cpp:macro> <cpp:value>_GLFWtlsWin32 win32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_MUTEX_STATE</name></cpp:macro> <cpp:value>_GLFWmutexWin32 win32</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_GLFWwindowWin32</name>

<block>{

<decl_stmt><decl><type><name>HWND</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HICON</name></type> <name>bigIcon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HICON</name></type> <name>smallIcon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>cursorTracked</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>frameAction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>iconified</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>maximized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>transparent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>scaleToMonitor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>keymenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lastCursorPosX</name></decl>, <name>lastCursorPosY</name>;</decl_stmt>

}</block></struct></type> <name>_GLFWwindowWin32</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_GLFWlibraryWin32</name>

<block>{

<decl_stmt><decl><type><name>HWND</name></type> <name>helperWindowHandle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDEVNOTIFY</name></type> <name>deviceNotificationHandle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>foregroundLockTimeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>acquiredMonitorCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>clipboardString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name><name>keycodes</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name><name>scancodes</name><index>[<expr><name>GLFW_KEY_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>keynames</name><index>[<expr><name>GLFW_KEY_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>restoreCursorPosX</name></decl>, <name>restoreCursorPosY</name>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>disabledCursorWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAWINPUT</name><modifier>*</modifier></type> <name>rawInput</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rawInputSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>mouseTrailSize</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>instance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_timeGetTime</name></type> <name>GetTime</name></decl>;</decl_stmt>

}</block> <decl><name>winmm</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>instance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_DirectInput8Create</name></type> <name>Create</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirectInput8W</name><modifier>*</modifier></type> <name>api</name></decl>;</decl_stmt>

}</block> <decl><name>dinput8</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>instance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_XInputGetCapabilities</name></type> <name>GetCapabilities</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_XInputGetState</name></type> <name>GetState</name></decl>;</decl_stmt>

}</block> <decl><name>xinput</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>instance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_SetProcessDPIAware</name></type> <name>SetProcessDPIAware_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_ChangeWindowMessageFilterEx</name></type> <name>ChangeWindowMessageFilterEx_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_EnableNonClientDpiScaling</name></type> <name>EnableNonClientDpiScaling_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_SetProcessDpiAwarenessContext</name></type> <name>SetProcessDpiAwarenessContext_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_GetDpiForWindow</name></type> <name>GetDpiForWindow_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_AdjustWindowRectExForDpi</name></type> <name>AdjustWindowRectExForDpi_</name></decl>;</decl_stmt>

}</block> <decl><name>user32</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>instance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_DwmIsCompositionEnabled</name></type> <name>IsCompositionEnabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_DwmFlush</name></type> <name>Flush</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_DwmEnableBlurBehindWindow</name></type> <name>EnableBlurBehindWindow</name></decl>;</decl_stmt>

}</block> <decl><name>dwmapi</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>instance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_SetProcessDpiAwareness</name></type> <name>SetProcessDpiAwareness_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_GetDpiForMonitor</name></type> <name>GetDpiForMonitor_</name></decl>;</decl_stmt>

}</block> <decl><name>shcore</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>instance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_RtlVerifyVersionInfo</name></type> <name>RtlVerifyVersionInfo_</name></decl>;</decl_stmt>

}</block> <decl><name>ntdll</name></decl>;</struct>

}</block></struct></type> <name>_GLFWlibraryWin32</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_GLFWmonitorWin32</name>

<block>{

<decl_stmt><decl><type><name>HMONITOR</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>adapterName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>displayName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>publicAdapterName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>publicDisplayName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>modesPruned</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>modeChanged</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWmonitorWin32</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_GLFWcursorWin32</name>

<block>{

<decl_stmt><decl><type><name>HCURSOR</name></type> <name>handle</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWcursorWin32</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_GLFWtimerWin32</name>

<block>{

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>hasPC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>frequency</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWtimerWin32</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_GLFWtlsWin32</name>

<block>{

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>index</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWtlsWin32</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_GLFWmutexWin32</name>

<block>{

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>section</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWmutexWin32</name>;</typedef>

<function_decl><type><name>GLFWbool</name></type> <name>_glfwRegisterWindowClassWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwUnregisterWindowClassWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>WCHAR</name><modifier>*</modifier></type> <name>_glfwCreateWideStringFromUTF8Win32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name><modifier>*</modifier></type> <name>_glfwCreateUTF8FromWideStringWin32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name><modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BOOL</name></type> <name>_glfwIsWindowsVersionOrGreaterWin32</name><parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>WORD</name></type> <name>minor</name></decl></parameter>, <parameter><decl><type><name>WORD</name></type> <name>sp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BOOL</name></type> <name>_glfwIsWindows10BuildOrGreaterWin32</name><parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>build</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwInputErrorWin32</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwUpdateKeyNamesWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwInitTimerWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwPollMonitorsWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwSetVideoModeWin32</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>desired</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwRestoreVideoModeWin32</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwGetMonitorContentScaleWin32</name><parameter_list>(<parameter><decl><type><name>HMONITOR</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
