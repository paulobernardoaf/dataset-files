<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\src\cocoa_platform.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SILENCE_DEPRECATION</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OBJC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:empty>#import &lt;Cocoa/Cocoa.h&gt;</cpp:empty>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>id</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAC_OS_X_VERSION_MAX_ALLOWED</name> <operator>&lt;</operator> <literal type="number">101200</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSBitmapFormatAlphaNonpremultiplied</name></cpp:macro> <cpp:value>NSAlphaNonpremultipliedBitmapFormat</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEventMaskAny</name></cpp:macro> <cpp:value>NSAnyEventMask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEventMaskKeyUp</name></cpp:macro> <cpp:value>NSKeyUpMask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEventModifierFlagCapsLock</name></cpp:macro> <cpp:value>NSAlphaShiftKeyMask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEventModifierFlagCommand</name></cpp:macro> <cpp:value>NSCommandKeyMask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEventModifierFlagControl</name></cpp:macro> <cpp:value>NSControlKeyMask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEventModifierFlagDeviceIndependentFlagsMask</name></cpp:macro> <cpp:value>NSDeviceIndependentModifierFlagsMask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEventModifierFlagOption</name></cpp:macro> <cpp:value>NSAlternateKeyMask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEventModifierFlagShift</name></cpp:macro> <cpp:value>NSShiftKeyMask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEventTypeApplicationDefined</name></cpp:macro> <cpp:value>NSApplicationDefined</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSWindowStyleMaskBorderless</name></cpp:macro> <cpp:value>NSBorderlessWindowMask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSWindowStyleMaskClosable</name></cpp:macro> <cpp:value>NSClosableWindowMask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSWindowStyleMaskMiniaturizable</name></cpp:macro> <cpp:value>NSMiniaturizableWindowMask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSWindowStyleMaskResizable</name></cpp:macro> <cpp:value>NSResizableWindowMask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSWindowStyleMaskTitled</name></cpp:macro> <cpp:value>NSTitledWindowMask</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>VkFlags</name></type> <name>VkMacOSSurfaceCreateFlagsMVK</name>;</typedef>

<typedef>typedef <type><name>VkFlags</name></type> <name>VkMetalSurfaceCreateFlagsEXT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VkMacOSSurfaceCreateInfoMVK</name>

<block>{

<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMacOSSurfaceCreateFlagsMVK</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pView</name></decl>;</decl_stmt>

}</block></struct></type> <name>VkMacOSSurfaceCreateInfoMVK</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VkMetalSurfaceCreateInfoEXT</name>

<block>{

<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMetalSurfaceCreateFlagsEXT</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pLayer</name></decl>;</decl_stmt>

}</block></struct></type> <name>VkMetalSurfaceCreateInfoEXT</name>;</typedef>

<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFN_vkCreateMacOSSurfaceMVK</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VkMacOSSurfaceCreateInfoMVK</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VkSurfaceKHR</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFN_vkCreateMetalSurfaceEXT</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VkMetalSurfaceCreateInfoEXT</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VkSurfaceKHR</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"posix_thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cocoa_joystick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsgl_context.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"egl_context.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osmesa_context.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw_dlopen</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlopen(name, RTLD_LAZY | RTLD_LOCAL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw_dlclose</name><parameter_list>(<parameter><type><name>handle</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlclose(handle)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw_dlsym</name><parameter_list>(<parameter><type><name>handle</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlsym(handle, name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_EGL_NATIVE_WINDOW</name></cpp:macro> <cpp:value>((EGLNativeWindowType) window-&gt;ns.view)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_EGL_NATIVE_DISPLAY</name></cpp:macro> <cpp:value>EGL_DEFAULT_DISPLAY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_WINDOW_STATE</name></cpp:macro> <cpp:value>_GLFWwindowNS ns</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_LIBRARY_WINDOW_STATE</name></cpp:macro> <cpp:value>_GLFWlibraryNS ns</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_LIBRARY_TIMER_STATE</name></cpp:macro> <cpp:value>_GLFWtimerNS ns</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_MONITOR_STATE</name></cpp:macro> <cpp:value>_GLFWmonitorNS ns</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_CURSOR_STATE</name></cpp:macro> <cpp:value>_GLFWcursorNS ns</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kTISPropertyUnicodeKeyLayoutData</name></cpp:macro> <cpp:value>_glfw.ns.tis.kPropertyUnicodeKeyLayoutData</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>TISInputSourceRef</name></type> (<modifier>*</modifier><name>PFN_TISCopyCurrentKeyboardLayoutInputSource</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TISCopyCurrentKeyboardLayoutInputSource</name></cpp:macro> <cpp:value>_glfw.ns.tis.CopyCurrentKeyboardLayoutInputSource</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>PFN_TISGetInputSourceProperty</name>)<parameter_list>(<parameter><decl><type><name>TISInputSourceRef</name></type></decl></parameter>,<parameter><decl><type><name>CFStringRef</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TISGetInputSourceProperty</name></cpp:macro> <cpp:value>_glfw.ns.tis.GetInputSourceProperty</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>UInt8</name></type> (<modifier>*</modifier><name>PFN_LMGetKbdType</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LMGetKbdType</name></cpp:macro> <cpp:value>_glfw.ns.tis.GetKbdType</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_GLFWwindowNS</name>

<block>{

<decl_stmt><decl><type><name>id</name></type> <name>object</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>id</name></type> <name>delegate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>id</name></type> <name>view</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>id</name></type> <name>layer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>maximized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>retina</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fbWidth</name></decl>, <name>fbHeight</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xscale</name></decl>, <name>yscale</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>cursorWarpDeltaX</name></decl>, <name>cursorWarpDeltaY</name>;</decl_stmt>

}</block></struct></type> <name>_GLFWwindowNS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_GLFWlibraryNS</name>

<block>{

<decl_stmt><decl><type><name>CGEventSourceRef</name></type> <name>eventSource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>id</name></type> <name>delegate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>finishedLaunching</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>cursorHidden</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TISInputSourceRef</name></type> <name>inputSource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IOHIDManagerRef</name></type> <name>hidManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>id</name></type> <name>unicodeData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>id</name></type> <name>helper</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>id</name></type> <name>keyUpMonitor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>id</name></type> <name>nibObjects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>keynames</name><index>[<expr><name>GLFW_KEY_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name><name>keycodes</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name><name>scancodes</name><index>[<expr><name>GLFW_KEY_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>clipboardString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CGPoint</name></type> <name>cascadePoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>restoreCursorPosX</name></decl>, <name>restoreCursorPosY</name>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>disabledCursorWindow</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>CFBundleRef</name></type> <name>bundle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_TISCopyCurrentKeyboardLayoutInputSource</name></type> <name>CopyCurrentKeyboardLayoutInputSource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_TISGetInputSourceProperty</name></type> <name>GetInputSourceProperty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_LMGetKbdType</name></type> <name>GetKbdType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kPropertyUnicodeKeyLayoutData</name></decl>;</decl_stmt>

}</block> <decl><name>tis</name></decl>;</struct>

}</block></struct></type> <name>_GLFWlibraryNS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_GLFWmonitorNS</name>

<block>{

<decl_stmt><decl><type><name>CGDirectDisplayID</name></type> <name>displayID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CGDisplayModeRef</name></type> <name>previousMode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>unitNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>id</name></type> <name>screen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>fallbackRefreshRate</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWmonitorNS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_GLFWcursorNS</name>

<block>{

<decl_stmt><decl><type><name>id</name></type> <name>object</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWcursorNS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_GLFWtimerNS</name>

<block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>frequency</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWtimerNS</name>;</typedef>

<function_decl><type><name>void</name></type> <name>_glfwInitTimerNS</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwPollMonitorsNS</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwSetVideoModeNS</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>desired</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwRestoreVideoModeNS</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float</name></type> <name>_glfwTransformYNS</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name><modifier>*</modifier></type> <name>_glfwLoadLocalVulkanLoaderNS</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

</unit>
