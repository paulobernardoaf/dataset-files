<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\src\win32_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>_glfw_GUID_DEVINTERFACE_HID</name> <init>=

<expr><block>{<expr><literal type="number">0x4d1e55b2</literal></expr>,<expr><literal type="number">0xf16f</literal></expr>,<expr><literal type="number">0x11cf</literal></expr>,<expr><block>{<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0xcb</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x30</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUID_DEVINTERFACE_HID</name></cpp:macro> <cpp:value>_glfw_GUID_DEVINTERFACE_HID</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_USE_HYBRID_HPG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_USE_OPTIMUS_HPG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro> <decl_stmt><decl><type><name>DWORD</name></type> <name>NvOptimusEnablement</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro> <decl_stmt><decl><type><name>int</name></type> <name>AmdPowerXpressRequestHighPerformance</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_BUILD_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>BOOL</name> <name>WINAPI</name></type> <name>DllMain</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>reason</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type> <name>reserved</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>loadLibraries</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>winmm</name><operator>.</operator><name>instance</name></name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"winmm.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>winmm</name><operator>.</operator><name>instance</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Win32: Failed to load winmm.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>winmm</name><operator>.</operator><name>GetTime</name></name> <operator>=</operator> <operator>(</operator><name>PFN_timeGetTime</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>winmm</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"timeGetTime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>instance</name></name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"user32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>instance</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Win32: Failed to load user32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>SetProcessDPIAware_</name></name> <operator>=</operator> <operator>(</operator><name>PFN_SetProcessDPIAware</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"SetProcessDPIAware"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>ChangeWindowMessageFilterEx_</name></name> <operator>=</operator> <operator>(</operator><name>PFN_ChangeWindowMessageFilterEx</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"ChangeWindowMessageFilterEx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>EnableNonClientDpiScaling_</name></name> <operator>=</operator> <operator>(</operator><name>PFN_EnableNonClientDpiScaling</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"EnableNonClientDpiScaling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>SetProcessDpiAwarenessContext_</name></name> <operator>=</operator> <operator>(</operator><name>PFN_SetProcessDpiAwarenessContext</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"SetProcessDpiAwarenessContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>GetDpiForWindow_</name></name> <operator>=</operator> <operator>(</operator><name>PFN_GetDpiForWindow</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"GetDpiForWindow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>AdjustWindowRectExForDpi_</name></name> <operator>=</operator> <operator>(</operator><name>PFN_AdjustWindowRectExForDpi</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"AdjustWindowRectExForDpi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dinput8</name><operator>.</operator><name>instance</name></name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"dinput8.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dinput8</name><operator>.</operator><name>instance</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dinput8</name><operator>.</operator><name>Create</name></name> <operator>=</operator> <operator>(</operator><name>PFN_DirectInput8Create</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dinput8</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"DirectInput8Create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"xinput1_4.dll"</literal></expr>,

<expr><literal type="string">"xinput1_3.dll"</literal></expr>,

<expr><literal type="string">"xinput9_1_0.dll"</literal></expr>,

<expr><literal type="string">"xinput1_2.dll"</literal></expr>,

<expr><literal type="string">"xinput1_1.dll"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>xinput</name><operator>.</operator><name>instance</name></name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>xinput</name><operator>.</operator><name>instance</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>xinput</name><operator>.</operator><name>GetCapabilities</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XInputGetCapabilities</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>xinput</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"XInputGetCapabilities"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>xinput</name><operator>.</operator><name>GetState</name></name> <operator>=</operator> <operator>(</operator><name>PFN_XInputGetState</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>xinput</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"XInputGetState"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dwmapi</name><operator>.</operator><name>instance</name></name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"dwmapi.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dwmapi</name><operator>.</operator><name>instance</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dwmapi</name><operator>.</operator><name>IsCompositionEnabled</name></name> <operator>=</operator> <operator>(</operator><name>PFN_DwmIsCompositionEnabled</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dwmapi</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"DwmIsCompositionEnabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dwmapi</name><operator>.</operator><name>Flush</name></name> <operator>=</operator> <operator>(</operator><name>PFN_DwmFlush</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dwmapi</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"DwmFlush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dwmapi</name><operator>.</operator><name>EnableBlurBehindWindow</name></name> <operator>=</operator> <operator>(</operator><name>PFN_DwmEnableBlurBehindWindow</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dwmapi</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"DwmEnableBlurBehindWindow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>shcore</name><operator>.</operator><name>instance</name></name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"shcore.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>shcore</name><operator>.</operator><name>instance</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>shcore</name><operator>.</operator><name>SetProcessDpiAwareness_</name></name> <operator>=</operator> <operator>(</operator><name>PFN_SetProcessDpiAwareness</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>shcore</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"SetProcessDpiAwareness"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>shcore</name><operator>.</operator><name>GetDpiForMonitor_</name></name> <operator>=</operator> <operator>(</operator><name>PFN_GetDpiForMonitor</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>shcore</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"GetDpiForMonitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>ntdll</name><operator>.</operator><name>instance</name></name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"ntdll.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>ntdll</name><operator>.</operator><name>instance</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>ntdll</name><operator>.</operator><name>RtlVerifyVersionInfo_</name></name> <operator>=</operator> <operator>(</operator><name>PFN_RtlVerifyVersionInfo</name><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>ntdll</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"RtlVerifyVersionInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freeLibraries</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>xinput</name><operator>.</operator><name>instance</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>xinput</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dinput8</name><operator>.</operator><name>instance</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dinput8</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>winmm</name><operator>.</operator><name>instance</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>winmm</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>instance</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>user32</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dwmapi</name><operator>.</operator><name>instance</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>dwmapi</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>shcore</name><operator>.</operator><name>instance</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>shcore</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>ntdll</name><operator>.</operator><name>instance</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>ntdll</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>createKeyTables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>scancode</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>scancodes</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>scancodes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x00B</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x002</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x003</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x004</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x005</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x006</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x007</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x008</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_7</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x009</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x00A</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_9</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x01E</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_A</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x030</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x02E</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_C</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x020</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_D</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x012</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_E</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x021</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x022</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_G</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x023</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x017</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x024</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_J</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x025</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_K</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x026</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_L</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x032</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_M</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x031</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x018</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_O</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x019</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x010</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_Q</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x013</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_R</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x01F</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_S</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x014</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_T</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x016</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_U</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x02F</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_V</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x011</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x02D</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_X</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x015</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_Y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x02C</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_Z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x028</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_APOSTROPHE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x02B</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_BACKSLASH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x033</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_COMMA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x00D</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x029</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_GRAVE_ACCENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x01A</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_LEFT_BRACKET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x00C</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_MINUS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x034</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_PERIOD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x01B</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_RIGHT_BRACKET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x027</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_SEMICOLON</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x035</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_SLASH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x056</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_WORLD_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x00E</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_BACKSPACE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x153</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_DELETE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x14F</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_END</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x01C</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_ENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x001</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_ESCAPE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x147</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_HOME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x152</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_INSERT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x15D</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_MENU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x151</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_PAGE_DOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x149</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_PAGE_UP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x045</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_PAUSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x146</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_PAUSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x039</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_SPACE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x00F</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_TAB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x03A</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_CAPS_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x145</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_NUM_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x046</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_SCROLL_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x03B</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x03C</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x03D</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x03E</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x03F</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x040</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x041</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F7</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x042</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x043</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F9</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x044</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F10</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x057</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F11</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x058</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F12</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x064</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F13</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x065</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F14</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x066</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F15</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x067</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x068</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F17</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x069</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F18</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x06A</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F19</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x06B</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F20</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x06C</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F21</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x06D</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F22</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x06E</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F23</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x076</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_F24</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x038</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_LEFT_ALT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x01D</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_LEFT_CONTROL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x02A</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_LEFT_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x15B</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_LEFT_SUPER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x137</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_PRINT_SCREEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x138</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_RIGHT_ALT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x11D</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_RIGHT_CONTROL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x036</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_RIGHT_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x15C</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_RIGHT_SUPER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x150</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_DOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x14B</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x14D</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x148</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_UP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x052</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x04F</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x050</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x051</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x04B</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x04C</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x04D</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x047</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_7</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x048</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x049</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_9</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x04E</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x053</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_DECIMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x135</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_DIVIDE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x11C</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_ENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x059</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x037</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_MULTIPLY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><literal type="number">0x04A</literal></expr>]</index></name> <operator>=</operator> <name>GLFW_KEY_KP_SUBTRACT</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>scancode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>scancode</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>scancode</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>scancodes</name><index>[<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>scancode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>createHelperWindow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>helperWindowHandle</name></name> <operator>=</operator>

<call><name>CreateWindowExW</name><argument_list>(<argument><expr><name>WS_EX_OVERLAPPEDWINDOW</name></expr></argument>,

<argument><expr><name>_GLFW_WNDCLASSNAME</name></expr></argument>,

<argument><expr><literal type="string">L"GLFW message window"</literal></expr></argument>,

<argument><expr><name>WS_CLIPSIBLINGS</name> <operator>|</operator> <name>WS_CLIPCHILDREN</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>GetModuleHandleW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>helperWindowHandle</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Win32: Failed to create helper window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>DEV_BROADCAST_DEVICEINTERFACE_W</name></type> <name>dbi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbi</name><operator>.</operator><name>dbcc_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dbi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbi</name><operator>.</operator><name>dbcc_devicetype</name></name> <operator>=</operator> <name>DBT_DEVTYP_DEVICEINTERFACE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbi</name><operator>.</operator><name>dbcc_classguid</name></name> <operator>=</operator> <name>GUID_DEVINTERFACE_HID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>deviceNotificationHandle</name></name> <operator>=</operator>

<call><name>RegisterDeviceNotificationW</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>DEV_BROADCAST_HDR</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>dbi</name></expr></argument>,

<argument><expr><name>DEVICE_NOTIFY_WINDOW_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<while>while <condition>(<expr><call><name>PeekMessageW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DispatchMessageW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>WCHAR</name><modifier>*</modifier></type> <name>_glfwCreateWideStringFromUTF8Win32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name><modifier>*</modifier></type> <name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Win32: Failed to convert string from UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Win32: Failed to convert string from UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>target</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>_glfwCreateUTF8FromWideStringWin32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name><modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Win32: Failed to convert string to UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Win32: Failed to convert string to UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>target</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwInputErrorWin32</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>buffer</name><index>[<expr><name>_GLFW_MESSAGE_SIZE</name></expr>]</index></name> <init>= <expr><literal type="string">L""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>message</name><index>[<expr><name>_GLFW_MESSAGE_SIZE</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FormatMessageW</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator>

<name>FORMAT_MESSAGE_IGNORE_INSERTS</name> <operator>|</operator>

<name>FORMAT_MESSAGE_MAX_WIDTH_MASK</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>,

<argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_NEUTRAL</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>buffer</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwUpdateKeyNamesWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>state</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keynames</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keynames</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_SPACE</name></expr>;</init> <condition><expr><name>key</name> <operator>&lt;=</operator> <name>GLFW_KEY_LAST</name></expr>;</condition> <incr><expr><name>key</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>vk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scancode</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>chars</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>scancode</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>scancodes</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scancode</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <name>GLFW_KEY_KP_0</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <name>GLFW_KEY_KP_ADD</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>UINT</name></type> <name><name>vks</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VK_NUMPAD0</name></expr>, <expr><name>VK_NUMPAD1</name></expr>, <expr><name>VK_NUMPAD2</name></expr>, <expr><name>VK_NUMPAD3</name></expr>,

<expr><name>VK_NUMPAD4</name></expr>, <expr><name>VK_NUMPAD5</name></expr>, <expr><name>VK_NUMPAD6</name></expr>, <expr><name>VK_NUMPAD7</name></expr>,

<expr><name>VK_NUMPAD8</name></expr>, <expr><name>VK_NUMPAD9</name></expr>, <expr><name>VK_DECIMAL</name></expr>, <expr><name>VK_DIVIDE</name></expr>,

<expr><name>VK_MULTIPLY</name></expr>, <expr><name>VK_SUBTRACT</name></expr>, <expr><name>VK_ADD</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vk</name> <operator>=</operator> <name><name>vks</name><index>[<expr><name>key</name> <operator>-</operator> <name>GLFW_KEY_KP_0</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>vk</name> <operator>=</operator> <call><name>MapVirtualKey</name><argument_list>(<argument><expr><name>scancode</name></expr></argument>, <argument><expr><name>MAPVK_VSC_TO_VK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>ToUnicode</name><argument_list>(<argument><expr><name>vk</name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>, <argument><expr><name>state</name></expr></argument>,

<argument><expr><name>chars</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>ToUnicode</name><argument_list>(<argument><expr><name>vk</name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>, <argument><expr><name>state</name></expr></argument>,

<argument><expr><name>chars</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keynames</name><index>[<expr><name>key</name></expr>]</index></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keynames</name><index>[<expr><name>key</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>BOOL</name></type> <name>_glfwIsWindowsVersionOrGreaterWin32</name><parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>WORD</name></type> <name>minor</name></decl></parameter>, <parameter><decl><type><name>WORD</name></type> <name>sp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSVERSIONINFOEXW</name></type> <name>osvi</name> <init>= <expr><block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>osvi</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>major</name></expr>, <expr><name>minor</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><name>sp</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>mask</name> <init>= <expr><name>VER_MAJORVERSION</name> <operator>|</operator> <name>VER_MINORVERSION</name> <operator>|</operator> <name>VER_SERVICEPACKMAJOR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>cond</name> <init>= <expr><call><name>VerSetConditionMask</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>VER_MAJORVERSION</name></expr></argument>, <argument><expr><name>VER_GREATER_EQUAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cond</name> <operator>=</operator> <call><name>VerSetConditionMask</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>VER_MINORVERSION</name></expr></argument>, <argument><expr><name>VER_GREATER_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cond</name> <operator>=</operator> <call><name>VerSetConditionMask</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>VER_SERVICEPACKMAJOR</name></expr></argument>, <argument><expr><name>VER_GREATER_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>RtlVerifyVersionInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osvi</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>BOOL</name></type> <name>_glfwIsWindows10BuildOrGreaterWin32</name><parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>build</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSVERSIONINFOEXW</name></type> <name>osvi</name> <init>= <expr><block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>osvi</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>build</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>mask</name> <init>= <expr><name>VER_MAJORVERSION</name> <operator>|</operator> <name>VER_MINORVERSION</name> <operator>|</operator> <name>VER_BUILDNUMBER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>cond</name> <init>= <expr><call><name>VerSetConditionMask</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>VER_MAJORVERSION</name></expr></argument>, <argument><expr><name>VER_GREATER_EQUAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cond</name> <operator>=</operator> <call><name>VerSetConditionMask</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>VER_MINORVERSION</name></expr></argument>, <argument><expr><name>VER_GREATER_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cond</name> <operator>=</operator> <call><name>VerSetConditionMask</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>VER_BUILDNUMBER</name></expr></argument>, <argument><expr><name>VER_GREATER_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>RtlVerifyVersionInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osvi</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SystemParametersInfoW</name><argument_list>(<argument><expr><name>SPI_GETFOREGROUNDLOCKTIMEOUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>foregroundLockTimeout</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SystemParametersInfoW</name><argument_list>(<argument><expr><name>SPI_SETFOREGROUNDLOCKTIMEOUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>UIntToPtr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>SPIF_SENDCHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>loadLibraries</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>createKeyTables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwUpdateKeyNamesWin32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10CreatorsUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetProcessDpiAwarenessContext</name><argument_list>(<argument><expr><name>DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsWindows8Point1OrGreater</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetProcessDpiAwareness</name><argument_list>(<argument><expr><name>PROCESS_PER_MONITOR_DPI_AWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsWindowsVistaOrGreater</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetProcessDPIAware</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwRegisterWindowClassWin32</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>createHelperWindow</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInitTimerWin32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInitJoysticksWin32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPollMonitorsWin32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformTerminate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>deviceNotificationHandle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>UnregisterDeviceNotification</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>deviceNotificationHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>helperWindowHandle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwUnregisterWindowClassWin32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SystemParametersInfoW</name><argument_list>(<argument><expr><name>SPI_SETFOREGROUNDLOCKTIMEOUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>UIntToPtr</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>foregroundLockTimeout</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>SPIF_SENDCHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>clipboardString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>rawInput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwTerminateWGL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwTerminateEGL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwTerminateJoysticksWin32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freeLibraries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwPlatformGetVersionString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>_GLFW_VERSION_NUMBER</name> <literal type="string">" Win32 WGL EGL OSMesa"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<literal type="string">" MinGW"</literal>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<literal type="string">" VisualC"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_USE_HYBRID_HPG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_USE_OPTIMUS_HPG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<literal type="string">" hybrid-GPU"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_BUILD_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<literal type="string">" DLL"</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</return>

</block_content>}</block></function>

</unit>
