<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\src\linux_joystick.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/inotify.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SYN_DROPPED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYN_DROPPED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleKeyEvent</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputJoystickButton</name><argument_list>(<argument><expr><name>js</name></expr></argument>,

<argument><expr><name><name>js</name><operator>-&gt;</operator><name>linjs</name><operator>.</operator><name>keyMap</name><index>[<expr><name>code</name> <operator>-</operator> <name>BTN_MISC</name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_PRESS</name></expr> </then><else>: <expr><name>GLFW_RELEASE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleAbsEvent</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name> <init>= <expr><name><name>js</name><operator>-&gt;</operator><name>linjs</name><operator>.</operator><name>absMap</name><index>[<expr><name>code</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <name>ABS_HAT0X</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <name>ABS_HAT3Y</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>stateMap</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>GLFW_HAT_CENTERED</name></expr>, <expr><name>GLFW_HAT_UP</name></expr>, <expr><name>GLFW_HAT_DOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><name>GLFW_HAT_LEFT</name></expr>, <expr><name>GLFW_HAT_LEFT_UP</name></expr>, <expr><name>GLFW_HAT_LEFT_DOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><name>GLFW_HAT_RIGHT</name></expr>, <expr><name>GLFW_HAT_RIGHT_UP</name></expr>, <expr><name>GLFW_HAT_RIGHT_DOWN</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hat</name> <init>= <expr><operator>(</operator><name>code</name> <operator>-</operator> <name>ABS_HAT0X</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>axis</name> <init>= <expr><operator>(</operator><name>code</name> <operator>-</operator> <name>ABS_HAT0X</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>state</name> <init>= <expr><name><name>js</name><operator>-&gt;</operator><name>linjs</name><operator>.</operator><name>hats</name><index>[<expr><name>hat</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><index>[<expr><name>axis</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><index>[<expr><name>axis</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><index>[<expr><name>axis</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystickHat</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>stateMap</name><index>[<expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>input_absinfo</name></name><modifier>*</modifier></type> <name>info</name> <init>= <expr><operator>&amp;</operator><name><name>js</name><operator>-&gt;</operator><name>linjs</name><operator>.</operator><name>absInfo</name><index>[<expr><name>code</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>normalized</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>range</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>maximum</name></name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>minimum</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>normalized</name> <operator>=</operator> <operator>(</operator><name>normalized</name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>minimum</name></name><operator>)</operator> <operator>/</operator> <name>range</name></expr>;</expr_stmt>

<expr_stmt><expr><name>normalized</name> <operator>=</operator> <name>normalized</name> <operator>*</operator> <literal type="number">2.0f</literal> <operator>-</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystickAxis</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pollAbsState</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>code</name> <operator>&lt;</operator> <name>ABS_CNT</name></expr>;</condition> <incr><expr><name>code</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>js</name><operator>-&gt;</operator><name>linjs</name><operator>.</operator><name>absMap</name><index>[<expr><name>code</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>input_absinfo</name></name><modifier>*</modifier></type> <name>info</name> <init>= <expr><operator>&amp;</operator><name><name>js</name><operator>-&gt;</operator><name>linjs</name><operator>.</operator><name>absInfo</name><index>[<expr><name>code</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>linjs</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>EVIOCGABS</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>handleAbsEvent</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isBitSet</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>, <parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(arr[(bit) / 8] &amp; (1 &lt;&lt; ((bit) % 8)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>openJoystickDevice</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>jid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr>;</condition> <incr><expr><name>jid</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>joysticks</name><index>[<expr><name>jid</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>joysticks</name><index>[<expr><name>jid</name></expr>]</index></name><operator>.</operator><name><name>linjs</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>_GLFWjoystickLinux</name></type> <name>linjs</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>linjs</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>linjs</name><operator>.</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>evBits</name><index>[<expr><operator>(</operator><name>EV_CNT</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>keyBits</name><index>[<expr><operator>(</operator><name>KEY_CNT</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>absBits</name><index>[<expr><operator>(</operator><name>ABS_CNT</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>input_id</name></name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>linjs</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>evBits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>evBits</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>ioctl</name><argument_list>(<argument><expr><name><name>linjs</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><name>EV_KEY</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keyBits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyBits</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>ioctl</name><argument_list>(<argument><expr><name><name>linjs</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><name>EV_ABS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>absBits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>absBits</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>ioctl</name><argument_list>(<argument><expr><name><name>linjs</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EVIOCGID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Linux: Failed to query input device: %s"</literal></expr></argument>,

<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>linjs</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isBitSet</name><argument_list>(<argument><expr><name>EV_KEY</name></expr></argument>, <argument><expr><name>evBits</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isBitSet</name><argument_list>(<argument><expr><name>EV_ABS</name></expr></argument>, <argument><expr><name>evBits</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>linjs</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>linjs</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>EVIOCGNAME</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Unknown"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>guid</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>.</operator><name>vendor</name></name> <operator>&amp;&amp;</operator> <name><name>id</name><operator>.</operator><name>product</name></name> <operator>&amp;&amp;</operator> <name><name>id</name><operator>.</operator><name>version</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>guid</name></expr></argument>, <argument><expr><literal type="string">"%02x%02x0000%02x%02x0000%02x%02x0000%02x%02x0000"</literal></expr></argument>,

<argument><expr><name><name>id</name><operator>.</operator><name>bustype</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>bustype</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><name><name>id</name><operator>.</operator><name>vendor</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>vendor</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><name><name>id</name><operator>.</operator><name>product</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>product</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><name><name>id</name><operator>.</operator><name>version</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>version</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>guid</name></expr></argument>, <argument><expr><literal type="string">"%02x%02x0000%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x00"</literal></expr></argument>,

<argument><expr><name><name>id</name><operator>.</operator><name>bustype</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>bustype</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>name</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>axisCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>buttonCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hatCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>BTN_MISC</name></expr></init></decl>;</init> <condition><expr><name>code</name> <operator>&lt;</operator> <name>KEY_CNT</name></expr>;</condition> <incr><expr><name>code</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isBitSet</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>keyBits</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>linjs</name><operator>.</operator><name>keyMap</name><index>[<expr><name>code</name> <operator>-</operator> <name>BTN_MISC</name></expr>]</index></name> <operator>=</operator> <name>buttonCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buttonCount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>code</name> <operator>&lt;</operator> <name>ABS_CNT</name></expr>;</condition> <incr><expr><name>code</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>linjs</name><operator>.</operator><name>absMap</name><index>[<expr><name>code</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isBitSet</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>absBits</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <name>ABS_HAT0X</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <name>ABS_HAT3Y</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>linjs</name><operator>.</operator><name>absMap</name><index>[<expr><name>code</name></expr>]</index></name> <operator>=</operator> <name>hatCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hatCount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>linjs</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>EVIOCGABS</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>linjs</name><operator>.</operator><name>absInfo</name><index>[<expr><name>code</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>linjs</name><operator>.</operator><name>absMap</name><index>[<expr><name>code</name></expr>]</index></name> <operator>=</operator> <name>axisCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>axisCount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name> <init>=

<expr><call><name>_glfwAllocJoystick</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>, <argument><expr><name>axisCount</name></expr></argument>, <argument><expr><name>buttonCount</name></expr></argument>, <argument><expr><name>hatCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>js</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>linjs</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>linjs</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>linjs</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>js</name><operator>-&gt;</operator><name>linjs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linjs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>linjs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pollAbsState</name><argument_list>(<argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>GLFW_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isBitSet</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>closeJoystick</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>linjs</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwFreeJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>GLFW_DISCONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compareJoysticks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>sp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>_GLFWjoystick</name><modifier>*</modifier></type> <name>fj</name> <init>= <expr><name>fp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>_GLFWjoystick</name><modifier>*</modifier></type> <name>sj</name> <init>= <expr><name>sp</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fj</name><operator>-&gt;</operator><name>linjs</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>linjs</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>GLFWbool</name></type> <name>_glfwInitJoysticksLinux</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dirname</name> <init>= <expr><literal type="string">"/dev/input"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>inotify</name></name> <operator>=</operator> <call><name>inotify_init1</name><argument_list>(<argument><expr><name>IN_NONBLOCK</name> <operator>|</operator> <name>IN_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>inotify</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>watch</name></name> <operator>=</operator> <call><name>inotify_add_watch</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>inotify</name></name></expr></argument>,

<argument><expr><name>dirname</name></expr></argument>,

<argument><expr><name>IN_CREATE</name> <operator>|</operator> <name>IN_ATTRIB</name> <operator>|</operator> <name>IN_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>regex</name></name></expr></argument>, <argument><expr><literal type="string">"^event[0-9]\\+$"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Linux: Failed to compile regex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DIR</name><modifier>*</modifier></type> <name>dir</name> <init>= <expr><call><name>opendir</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name><modifier>*</modifier></type> <name>entry</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>regmatch_t</name></type> <name>match</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>regex</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>match</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>openJoystickDevice</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>joysticks</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWjoystick</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compareJoysticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwTerminateJoysticksLinux</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>jid</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>jid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr>;</condition> <incr><expr><name>jid</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>closeJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>regex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>inotify</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>watch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inotify_rm_watch</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>inotify</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>watch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>inotify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwDetectJoystickConnectionLinux</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>inotify</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>size</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>inotify</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>offset</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>regmatch_t</name></type> <name>match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>inotify_event</name></name><modifier>*</modifier></type> <name>e</name> <init>= <expr><operator>(</operator>struct <name>inotify_event</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>buffer</name> <operator>+</operator> <name>offset</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>inotify_event</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>regex</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>match</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/dev/input/%s"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>IN_CREATE</name> <operator>|</operator> <name>IN_ATTRIB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>openJoystickDevice</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>IN_DELETE</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>jid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr>;</condition> <incr><expr><name>jid</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>joysticks</name><index>[<expr><name>jid</name></expr>]</index></name><operator>.</operator><name><name>linjs</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>closeJoystick</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformPollJoystick</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_event</name></name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>linjs</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENODEV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>closeJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>EV_SYN</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>SYN_DROPPED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>dropped</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>e</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>SYN_REPORT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>dropped</name></name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pollAbsState</name><argument_list>(<argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>dropped</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>EV_KEY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>handleKeyEvent</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>e</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>EV_ABS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>handleAbsEvent</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformUpdateGamepadGUID</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>guid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

</unit>
