<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\deps\vs2008\stdint.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Use this header only with Microsoft Visual C++ compilers!"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_STDINT_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MSC_STDINT_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_W64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__midl</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_X86_</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_W64</name></cpp:macro> <cpp:value>__w64</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_W64</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1300</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>int8_t</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>short</name></type> <name>int16_t</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>int</name></type> <name>int32_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uint8_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>uint16_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint32_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>signed</name> <name>__int8</name></type> <name>int8_t</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>__int16</name></type> <name>int16_t</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>__int32</name></type> <name>int32_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int8</name></type> <name>uint8_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int16</name></type> <name>uint16_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int32</name></type> <name>uint32_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>signed</name> <name>__int64</name></type> <name>int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>uint64_t</name>;</typedef>

<typedef>typedef <type><name>int8_t</name></type> <name>int_least8_t</name>;</typedef>

<typedef>typedef <type><name>int16_t</name></type> <name>int_least16_t</name>;</typedef>

<typedef>typedef <type><name>int32_t</name></type> <name>int_least32_t</name>;</typedef>

<typedef>typedef <type><name>int64_t</name></type> <name>int_least64_t</name>;</typedef>

<typedef>typedef <type><name>uint8_t</name></type> <name>uint_least8_t</name>;</typedef>

<typedef>typedef <type><name>uint16_t</name></type> <name>uint_least16_t</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>uint_least32_t</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>uint_least64_t</name>;</typedef>

<typedef>typedef <type><name>int8_t</name></type> <name>int_fast8_t</name>;</typedef>

<typedef>typedef <type><name>int16_t</name></type> <name>int_fast16_t</name>;</typedef>

<typedef>typedef <type><name>int32_t</name></type> <name>int_fast32_t</name>;</typedef>

<typedef>typedef <type><name>int64_t</name></type> <name>int_fast64_t</name>;</typedef>

<typedef>typedef <type><name>uint8_t</name></type> <name>uint_fast8_t</name>;</typedef>

<typedef>typedef <type><name>uint16_t</name></type> <name>uint_fast16_t</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>uint_fast32_t</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>uint_fast64_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>signed</name> <name>__int64</name></type> <name>intptr_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>uintptr_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<typedef>typedef <type><name>_W64</name> <name>signed</name> <name>int</name></type> <name>intptr_t</name>;</typedef>

<typedef>typedef <type><name>_W64</name> <name>unsigned</name> <name>int</name></type> <name>uintptr_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><name>int64_t</name></type> <name>intmax_t</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>uintmax_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_LIMIT_MACROS</name></expr></argument>)</argument_list></call></expr></cpp:if> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT8_MIN</name></cpp:macro> <cpp:value>((int8_t)_I8_MIN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT8_MAX</name></cpp:macro> <cpp:value>_I8_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT16_MIN</name></cpp:macro> <cpp:value>((int16_t)_I16_MIN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT16_MAX</name></cpp:macro> <cpp:value>_I16_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT32_MIN</name></cpp:macro> <cpp:value>((int32_t)_I32_MIN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT32_MAX</name></cpp:macro> <cpp:value>_I32_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64_MIN</name></cpp:macro> <cpp:value>((int64_t)_I64_MIN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64_MAX</name></cpp:macro> <cpp:value>_I64_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT8_MAX</name></cpp:macro> <cpp:value>_UI8_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT16_MAX</name></cpp:macro> <cpp:value>_UI16_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT32_MAX</name></cpp:macro> <cpp:value>_UI32_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT64_MAX</name></cpp:macro> <cpp:value>_UI64_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST8_MIN</name></cpp:macro> <cpp:value>INT8_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST8_MAX</name></cpp:macro> <cpp:value>INT8_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST16_MIN</name></cpp:macro> <cpp:value>INT16_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST16_MAX</name></cpp:macro> <cpp:value>INT16_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST32_MIN</name></cpp:macro> <cpp:value>INT32_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST32_MAX</name></cpp:macro> <cpp:value>INT32_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST64_MIN</name></cpp:macro> <cpp:value>INT64_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST64_MAX</name></cpp:macro> <cpp:value>INT64_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST8_MAX</name></cpp:macro> <cpp:value>UINT8_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST16_MAX</name></cpp:macro> <cpp:value>UINT16_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST32_MAX</name></cpp:macro> <cpp:value>UINT32_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST64_MAX</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST8_MIN</name></cpp:macro> <cpp:value>INT8_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST8_MAX</name></cpp:macro> <cpp:value>INT8_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST16_MIN</name></cpp:macro> <cpp:value>INT16_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST16_MAX</name></cpp:macro> <cpp:value>INT16_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST32_MIN</name></cpp:macro> <cpp:value>INT32_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST32_MAX</name></cpp:macro> <cpp:value>INT32_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST64_MIN</name></cpp:macro> <cpp:value>INT64_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST64_MAX</name></cpp:macro> <cpp:value>INT64_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_FAST8_MAX</name></cpp:macro> <cpp:value>UINT8_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_FAST16_MAX</name></cpp:macro> <cpp:value>UINT16_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_FAST32_MAX</name></cpp:macro> <cpp:value>UINT32_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_FAST64_MAX</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTPTR_MIN</name></cpp:macro> <cpp:value>INT64_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTPTR_MAX</name></cpp:macro> <cpp:value>INT64_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINTPTR_MAX</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTPTR_MIN</name></cpp:macro> <cpp:value>INT32_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTPTR_MAX</name></cpp:macro> <cpp:value>INT32_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINTPTR_MAX</name></cpp:macro> <cpp:value>UINT32_MAX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTMAX_MIN</name></cpp:macro> <cpp:value>INT64_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTMAX_MAX</name></cpp:macro> <cpp:value>INT64_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINTMAX_MAX</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTRDIFF_MIN</name></cpp:macro> <cpp:value>_I64_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTRDIFF_MAX</name></cpp:macro> <cpp:value>_I64_MAX</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTRDIFF_MIN</name></cpp:macro> <cpp:value>_I32_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTRDIFF_MAX</name></cpp:macro> <cpp:value>_I32_MAX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_ATOMIC_MIN</name></cpp:macro> <cpp:value>INT_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_ATOMIC_MAX</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MAX</name></cpp:macro> <cpp:value>_UI64_MAX</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MAX</name></cpp:macro> <cpp:value>_UI32_MAX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WCHAR_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WCHAR_MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WCHAR_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WCHAR_MAX</name></cpp:macro> <cpp:value>_UI16_MAX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINT_MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINT_MAX</name></cpp:macro> <cpp:value>_UI16_MAX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_CONSTANT_MACROS</name></expr></argument>)</argument_list></call></expr></cpp:if> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT8_C</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>val##i8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT16_C</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>val##i16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT32_C</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>val##i32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64_C</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>val##i64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT8_C</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>val##ui8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT16_C</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>val##ui16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT32_C</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>val##ui32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT64_C</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>val##ui64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTMAX_C</name></cpp:macro> <cpp:value>INT64_C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINTMAX_C</name></cpp:macro> <cpp:value>UINT64_C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
