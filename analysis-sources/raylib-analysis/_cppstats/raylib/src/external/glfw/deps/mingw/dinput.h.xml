<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\deps\mingw\dinput.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_NO_WINDOWS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;objbase.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;_mingw_dxhelper.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DIRECTINPUT_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRECTINPUT_VERSION</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>CLSID_DirectInput</name></expr></argument>, <argument><expr><literal type="number">0x25E609E0</literal></expr></argument>,<argument><expr><literal type="number">0xB259</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>CLSID_DirectInputDevice</name></expr></argument>, <argument><expr><literal type="number">0x25E609E1</literal></expr></argument>,<argument><expr><literal type="number">0xB259</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>CLSID_DirectInput8</name></expr></argument>, <argument><expr><literal type="number">0x25E609E4</literal></expr></argument>,<argument><expr><literal type="number">0xB259</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>CLSID_DirectInputDevice8</name></expr></argument>, <argument><expr><literal type="number">0x25E609E5</literal></expr></argument>,<argument><expr><literal type="number">0xB259</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInputA</name></expr></argument>, <argument><expr><literal type="number">0x89521360</literal></expr></argument>,<argument><expr><literal type="number">0xAA8A</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInputW</name></expr></argument>, <argument><expr><literal type="number">0x89521361</literal></expr></argument>,<argument><expr><literal type="number">0xAA8A</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInput2A</name></expr></argument>, <argument><expr><literal type="number">0x5944E662</literal></expr></argument>,<argument><expr><literal type="number">0xAA8A</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInput2W</name></expr></argument>, <argument><expr><literal type="number">0x5944E663</literal></expr></argument>,<argument><expr><literal type="number">0xAA8A</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInput7A</name></expr></argument>, <argument><expr><literal type="number">0x9A4CB684</literal></expr></argument>,<argument><expr><literal type="number">0x236D</literal></expr></argument>,<argument><expr><literal type="number">0x11D3</literal></expr></argument>,<argument><expr><literal type="number">0x8E</literal></expr></argument>,<argument><expr><literal type="number">0x9D</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xC0</literal></expr></argument>,<argument><expr><literal type="number">0x4F</literal></expr></argument>,<argument><expr><literal type="number">0x68</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0xAE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInput7W</name></expr></argument>, <argument><expr><literal type="number">0x9A4CB685</literal></expr></argument>,<argument><expr><literal type="number">0x236D</literal></expr></argument>,<argument><expr><literal type="number">0x11D3</literal></expr></argument>,<argument><expr><literal type="number">0x8E</literal></expr></argument>,<argument><expr><literal type="number">0x9D</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xC0</literal></expr></argument>,<argument><expr><literal type="number">0x4F</literal></expr></argument>,<argument><expr><literal type="number">0x68</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0xAE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInput8A</name></expr></argument>, <argument><expr><literal type="number">0xBF798030</literal></expr></argument>,<argument><expr><literal type="number">0x483A</literal></expr></argument>,<argument><expr><literal type="number">0x4DA2</literal></expr></argument>,<argument><expr><literal type="number">0xAA</literal></expr></argument>,<argument><expr><literal type="number">0x99</literal></expr></argument>,<argument><expr><literal type="number">0x5D</literal></expr></argument>,<argument><expr><literal type="number">0x64</literal></expr></argument>,<argument><expr><literal type="number">0xED</literal></expr></argument>,<argument><expr><literal type="number">0x36</literal></expr></argument>,<argument><expr><literal type="number">0x97</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInput8W</name></expr></argument>, <argument><expr><literal type="number">0xBF798031</literal></expr></argument>,<argument><expr><literal type="number">0x483A</literal></expr></argument>,<argument><expr><literal type="number">0x4DA2</literal></expr></argument>,<argument><expr><literal type="number">0xAA</literal></expr></argument>,<argument><expr><literal type="number">0x99</literal></expr></argument>,<argument><expr><literal type="number">0x5D</literal></expr></argument>,<argument><expr><literal type="number">0x64</literal></expr></argument>,<argument><expr><literal type="number">0xED</literal></expr></argument>,<argument><expr><literal type="number">0x36</literal></expr></argument>,<argument><expr><literal type="number">0x97</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInputDeviceA</name></expr></argument>, <argument><expr><literal type="number">0x5944E680</literal></expr></argument>,<argument><expr><literal type="number">0xC92E</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInputDeviceW</name></expr></argument>, <argument><expr><literal type="number">0x5944E681</literal></expr></argument>,<argument><expr><literal type="number">0xC92E</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInputDevice2A</name></expr></argument>, <argument><expr><literal type="number">0x5944E682</literal></expr></argument>,<argument><expr><literal type="number">0xC92E</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInputDevice2W</name></expr></argument>, <argument><expr><literal type="number">0x5944E683</literal></expr></argument>,<argument><expr><literal type="number">0xC92E</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInputDevice7A</name></expr></argument>, <argument><expr><literal type="number">0x57D7C6BC</literal></expr></argument>,<argument><expr><literal type="number">0x2356</literal></expr></argument>,<argument><expr><literal type="number">0x11D3</literal></expr></argument>,<argument><expr><literal type="number">0x8E</literal></expr></argument>,<argument><expr><literal type="number">0x9D</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xC0</literal></expr></argument>,<argument><expr><literal type="number">0x4F</literal></expr></argument>,<argument><expr><literal type="number">0x68</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0xAE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInputDevice7W</name></expr></argument>, <argument><expr><literal type="number">0x57D7C6BD</literal></expr></argument>,<argument><expr><literal type="number">0x2356</literal></expr></argument>,<argument><expr><literal type="number">0x11D3</literal></expr></argument>,<argument><expr><literal type="number">0x8E</literal></expr></argument>,<argument><expr><literal type="number">0x9D</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xC0</literal></expr></argument>,<argument><expr><literal type="number">0x4F</literal></expr></argument>,<argument><expr><literal type="number">0x68</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0xAE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInputDevice8A</name></expr></argument>, <argument><expr><literal type="number">0x54D41080</literal></expr></argument>,<argument><expr><literal type="number">0xDC15</literal></expr></argument>,<argument><expr><literal type="number">0x4833</literal></expr></argument>,<argument><expr><literal type="number">0xA4</literal></expr></argument>,<argument><expr><literal type="number">0x1B</literal></expr></argument>,<argument><expr><literal type="number">0x74</literal></expr></argument>,<argument><expr><literal type="number">0x8F</literal></expr></argument>,<argument><expr><literal type="number">0x73</literal></expr></argument>,<argument><expr><literal type="number">0xA3</literal></expr></argument>,<argument><expr><literal type="number">0x81</literal></expr></argument>,<argument><expr><literal type="number">0x79</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInputDevice8W</name></expr></argument>, <argument><expr><literal type="number">0x54D41081</literal></expr></argument>,<argument><expr><literal type="number">0xDC15</literal></expr></argument>,<argument><expr><literal type="number">0x4833</literal></expr></argument>,<argument><expr><literal type="number">0xA4</literal></expr></argument>,<argument><expr><literal type="number">0x1B</literal></expr></argument>,<argument><expr><literal type="number">0x74</literal></expr></argument>,<argument><expr><literal type="number">0x8F</literal></expr></argument>,<argument><expr><literal type="number">0x73</literal></expr></argument>,<argument><expr><literal type="number">0xA3</literal></expr></argument>,<argument><expr><literal type="number">0x81</literal></expr></argument>,<argument><expr><literal type="number">0x79</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirectInputEffect</name></expr></argument>, <argument><expr><literal type="number">0xE7E1F7C0</literal></expr></argument>,<argument><expr><literal type="number">0x88D2</literal></expr></argument>,<argument><expr><literal type="number">0x11D0</literal></expr></argument>,<argument><expr><literal type="number">0x9A</literal></expr></argument>,<argument><expr><literal type="number">0xD0</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0xC9</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0x6E</literal></expr></argument>,<argument><expr><literal type="number">0x35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_XAxis</name></expr></argument>, <argument><expr><literal type="number">0xA36D02E0</literal></expr></argument>,<argument><expr><literal type="number">0xC9F3</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_YAxis</name></expr></argument>, <argument><expr><literal type="number">0xA36D02E1</literal></expr></argument>,<argument><expr><literal type="number">0xC9F3</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_ZAxis</name></expr></argument>, <argument><expr><literal type="number">0xA36D02E2</literal></expr></argument>,<argument><expr><literal type="number">0xC9F3</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_RxAxis</name></expr></argument>,<argument><expr><literal type="number">0xA36D02F4</literal></expr></argument>,<argument><expr><literal type="number">0xC9F3</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_RyAxis</name></expr></argument>,<argument><expr><literal type="number">0xA36D02F5</literal></expr></argument>,<argument><expr><literal type="number">0xC9F3</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_RzAxis</name></expr></argument>,<argument><expr><literal type="number">0xA36D02E3</literal></expr></argument>,<argument><expr><literal type="number">0xC9F3</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_Slider</name></expr></argument>,<argument><expr><literal type="number">0xA36D02E4</literal></expr></argument>,<argument><expr><literal type="number">0xC9F3</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_Button</name></expr></argument>,<argument><expr><literal type="number">0xA36D02F0</literal></expr></argument>,<argument><expr><literal type="number">0xC9F3</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_Key</name></expr></argument>, <argument><expr><literal type="number">0x55728220</literal></expr></argument>,<argument><expr><literal type="number">0xD33C</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_POV</name></expr></argument>, <argument><expr><literal type="number">0xA36D02F2</literal></expr></argument>,<argument><expr><literal type="number">0xC9F3</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_Unknown</name></expr></argument>,<argument><expr><literal type="number">0xA36D02F3</literal></expr></argument>,<argument><expr><literal type="number">0xC9F3</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_SysMouse</name></expr></argument>, <argument><expr><literal type="number">0x6F1D2B60</literal></expr></argument>,<argument><expr><literal type="number">0xD5A0</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_SysKeyboard</name></expr></argument>, <argument><expr><literal type="number">0x6F1D2B61</literal></expr></argument>,<argument><expr><literal type="number">0xD5A0</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_Joystick</name></expr></argument>, <argument><expr><literal type="number">0x6F1D2B70</literal></expr></argument>,<argument><expr><literal type="number">0xD5A0</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_SysMouseEm</name></expr></argument>, <argument><expr><literal type="number">0x6F1D2B80</literal></expr></argument>,<argument><expr><literal type="number">0xD5A0</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_SysMouseEm2</name></expr></argument>, <argument><expr><literal type="number">0x6F1D2B81</literal></expr></argument>,<argument><expr><literal type="number">0xD5A0</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_SysKeyboardEm</name></expr></argument>, <argument><expr><literal type="number">0x6F1D2B82</literal></expr></argument>,<argument><expr><literal type="number">0xD5A0</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_SysKeyboardEm2</name></expr></argument>,<argument><expr><literal type="number">0x6F1D2B83</literal></expr></argument>,<argument><expr><literal type="number">0xD5A0</literal></expr></argument>,<argument><expr><literal type="number">0x11CF</literal></expr></argument>,<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><literal type="number">0xC7</literal></expr></argument>,<argument><expr><literal type="number">0x44</literal></expr></argument>,<argument><expr><literal type="number">0x45</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0x54</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_ConstantForce</name></expr></argument>, <argument><expr><literal type="number">0x13541C20</literal></expr></argument>,<argument><expr><literal type="number">0x8E33</literal></expr></argument>,<argument><expr><literal type="number">0x11D0</literal></expr></argument>,<argument><expr><literal type="number">0x9A</literal></expr></argument>,<argument><expr><literal type="number">0xD0</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0xC9</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0x6E</literal></expr></argument>,<argument><expr><literal type="number">0x35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_RampForce</name></expr></argument>, <argument><expr><literal type="number">0x13541C21</literal></expr></argument>,<argument><expr><literal type="number">0x8E33</literal></expr></argument>,<argument><expr><literal type="number">0x11D0</literal></expr></argument>,<argument><expr><literal type="number">0x9A</literal></expr></argument>,<argument><expr><literal type="number">0xD0</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0xC9</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0x6E</literal></expr></argument>,<argument><expr><literal type="number">0x35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_Square</name></expr></argument>, <argument><expr><literal type="number">0x13541C22</literal></expr></argument>,<argument><expr><literal type="number">0x8E33</literal></expr></argument>,<argument><expr><literal type="number">0x11D0</literal></expr></argument>,<argument><expr><literal type="number">0x9A</literal></expr></argument>,<argument><expr><literal type="number">0xD0</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0xC9</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0x6E</literal></expr></argument>,<argument><expr><literal type="number">0x35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_Sine</name></expr></argument>, <argument><expr><literal type="number">0x13541C23</literal></expr></argument>,<argument><expr><literal type="number">0x8E33</literal></expr></argument>,<argument><expr><literal type="number">0x11D0</literal></expr></argument>,<argument><expr><literal type="number">0x9A</literal></expr></argument>,<argument><expr><literal type="number">0xD0</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0xC9</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0x6E</literal></expr></argument>,<argument><expr><literal type="number">0x35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_Triangle</name></expr></argument>, <argument><expr><literal type="number">0x13541C24</literal></expr></argument>,<argument><expr><literal type="number">0x8E33</literal></expr></argument>,<argument><expr><literal type="number">0x11D0</literal></expr></argument>,<argument><expr><literal type="number">0x9A</literal></expr></argument>,<argument><expr><literal type="number">0xD0</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0xC9</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0x6E</literal></expr></argument>,<argument><expr><literal type="number">0x35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_SawtoothUp</name></expr></argument>, <argument><expr><literal type="number">0x13541C25</literal></expr></argument>,<argument><expr><literal type="number">0x8E33</literal></expr></argument>,<argument><expr><literal type="number">0x11D0</literal></expr></argument>,<argument><expr><literal type="number">0x9A</literal></expr></argument>,<argument><expr><literal type="number">0xD0</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0xC9</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0x6E</literal></expr></argument>,<argument><expr><literal type="number">0x35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_SawtoothDown</name></expr></argument>, <argument><expr><literal type="number">0x13541C26</literal></expr></argument>,<argument><expr><literal type="number">0x8E33</literal></expr></argument>,<argument><expr><literal type="number">0x11D0</literal></expr></argument>,<argument><expr><literal type="number">0x9A</literal></expr></argument>,<argument><expr><literal type="number">0xD0</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0xC9</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0x6E</literal></expr></argument>,<argument><expr><literal type="number">0x35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_Spring</name></expr></argument>, <argument><expr><literal type="number">0x13541C27</literal></expr></argument>,<argument><expr><literal type="number">0x8E33</literal></expr></argument>,<argument><expr><literal type="number">0x11D0</literal></expr></argument>,<argument><expr><literal type="number">0x9A</literal></expr></argument>,<argument><expr><literal type="number">0xD0</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0xC9</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0x6E</literal></expr></argument>,<argument><expr><literal type="number">0x35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_Damper</name></expr></argument>, <argument><expr><literal type="number">0x13541C28</literal></expr></argument>,<argument><expr><literal type="number">0x8E33</literal></expr></argument>,<argument><expr><literal type="number">0x11D0</literal></expr></argument>,<argument><expr><literal type="number">0x9A</literal></expr></argument>,<argument><expr><literal type="number">0xD0</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0xC9</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0x6E</literal></expr></argument>,<argument><expr><literal type="number">0x35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_Inertia</name></expr></argument>, <argument><expr><literal type="number">0x13541C29</literal></expr></argument>,<argument><expr><literal type="number">0x8E33</literal></expr></argument>,<argument><expr><literal type="number">0x11D0</literal></expr></argument>,<argument><expr><literal type="number">0x9A</literal></expr></argument>,<argument><expr><literal type="number">0xD0</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0xC9</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0x6E</literal></expr></argument>,<argument><expr><literal type="number">0x35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_Friction</name></expr></argument>, <argument><expr><literal type="number">0x13541C2A</literal></expr></argument>,<argument><expr><literal type="number">0x8E33</literal></expr></argument>,<argument><expr><literal type="number">0x11D0</literal></expr></argument>,<argument><expr><literal type="number">0x9A</literal></expr></argument>,<argument><expr><literal type="number">0xD0</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0xC9</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0x6E</literal></expr></argument>,<argument><expr><literal type="number">0x35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_CustomForce</name></expr></argument>, <argument><expr><literal type="number">0x13541C2B</literal></expr></argument>,<argument><expr><literal type="number">0x8E33</literal></expr></argument>,<argument><expr><literal type="number">0x11D0</literal></expr></argument>,<argument><expr><literal type="number">0x9A</literal></expr></argument>,<argument><expr><literal type="number">0xD0</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0xC9</literal></expr></argument>,<argument><expr><literal type="number">0xA0</literal></expr></argument>,<argument><expr><literal type="number">0x6E</literal></expr></argument>,<argument><expr><literal type="number">0x35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInputA</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUTA</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInputW</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUTW</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInput2A</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUT2A</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInput2W</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUT2W</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInput7A</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUT7A</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInput7W</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUT7W</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal></expr></cpp:if>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInput8A</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUT8A</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInput8W</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUT8W</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><name><name>struct</name> <name>IDirectInputDeviceA</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUTDEVICEA</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInputDeviceW</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUTDEVICEW</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal></expr></cpp:if>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInputDevice2A</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUTDEVICE2A</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInputDevice2W</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUTDEVICE2W</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0700</literal></expr></cpp:if>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInputDevice7A</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUTDEVICE7A</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInputDevice7W</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUTDEVICE7W</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal></expr></cpp:if>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInputDevice8A</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUTDEVICE8A</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInputDevice8W</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUTDEVICE8W</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal></expr></cpp:if>

<typedef>typedef <type><name><name>struct</name> <name>IDirectInputEffect</name></name> <modifier>*</modifier></type><name>LPDIRECTINPUTEFFECT</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><name><name>struct</name> <name>SysKeyboardA</name></name> <modifier>*</modifier></type><name>LPSYSKEYBOARDA</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>SysMouseA</name></name> <modifier>*</modifier></type><name>LPSYSMOUSEA</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDirectInput</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IID_IDirectInput)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IDirectInput)</cpp:value></cpp:define>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIRECTINPUT</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDirectInput2</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IID_IDirectInput2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IDirectInput2)</cpp:value></cpp:define>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIRECTINPUT2</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDirectInput7</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IID_IDirectInput7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IDirectInput7)</cpp:value></cpp:define>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIRECTINPUT7</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDirectInput8</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IID_IDirectInput8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IDirectInput8)</cpp:value></cpp:define>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIRECTINPUT8</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDirectInputDevice</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IID_IDirectInputDevice)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IDirectInputDevice)</cpp:value></cpp:define>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIRECTINPUTDEVICE</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDirectInputDevice2</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IID_IDirectInputDevice2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IDirectInputDevice2)</cpp:value></cpp:define>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIRECTINPUTDEVICE2</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0700</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDirectInputDevice7</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IID_IDirectInputDevice7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IDirectInputDevice7)</cpp:value></cpp:define>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIRECTINPUTDEVICE7</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDirectInputDevice8</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IID_IDirectInputDevice8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(IDirectInputDevice8)</cpp:value></cpp:define>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIRECTINPUTDEVICE8</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_OK</name></cpp:macro> <cpp:value>S_OK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_NOTATTACHED</name></cpp:macro> <cpp:value>S_FALSE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_BUFFEROVERFLOW</name></cpp:macro> <cpp:value>S_FALSE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_PROPNOEFFECT</name></cpp:macro> <cpp:value>S_FALSE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_NOEFFECT</name></cpp:macro> <cpp:value>S_FALSE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_POLLEDDEVICE</name></cpp:macro> <cpp:value>((HRESULT)0x00000002L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_DOWNLOADSKIPPED</name></cpp:macro> <cpp:value>((HRESULT)0x00000003L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_EFFECTRESTARTED</name></cpp:macro> <cpp:value>((HRESULT)0x00000004L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_TRUNCATED</name></cpp:macro> <cpp:value>((HRESULT)0x00000008L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_SETTINGSNOTSAVED</name></cpp:macro> <cpp:value>((HRESULT)0x0000000BL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_TRUNCATEDANDRESTARTED</name></cpp:macro> <cpp:value>((HRESULT)0x0000000CL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_WRITEPROTECT</name></cpp:macro> <cpp:value>((HRESULT)0x00000013L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_OLDDIRECTINPUTVERSION</name></cpp:macro> <cpp:value>MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_OLD_WIN_VERSION)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_BETADIRECTINPUTVERSION</name></cpp:macro> <cpp:value>MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_RMODE_APP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_BADDRIVERVER</name></cpp:macro> <cpp:value>MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_BAD_DRIVER_LEVEL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_DEVICENOTREG</name></cpp:macro> <cpp:value>REGDB_E_CLASSNOTREG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_NOTFOUND</name></cpp:macro> <cpp:value>MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_FILE_NOT_FOUND)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_OBJECTNOTFOUND</name></cpp:macro> <cpp:value>MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_FILE_NOT_FOUND)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_INVALIDPARAM</name></cpp:macro> <cpp:value>E_INVALIDARG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_NOINTERFACE</name></cpp:macro> <cpp:value>E_NOINTERFACE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_GENERIC</name></cpp:macro> <cpp:value>E_FAIL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_OUTOFMEMORY</name></cpp:macro> <cpp:value>E_OUTOFMEMORY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_UNSUPPORTED</name></cpp:macro> <cpp:value>E_NOTIMPL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_NOTINITIALIZED</name></cpp:macro> <cpp:value>MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_NOT_READY)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_ALREADYINITIALIZED</name></cpp:macro> <cpp:value>MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_ALREADY_INITIALIZED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_NOAGGREGATION</name></cpp:macro> <cpp:value>CLASS_E_NOAGGREGATION</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_OTHERAPPHASPRIO</name></cpp:macro> <cpp:value>E_ACCESSDENIED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_INPUTLOST</name></cpp:macro> <cpp:value>MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_READ_FAULT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_ACQUIRED</name></cpp:macro> <cpp:value>MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_BUSY)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_NOTACQUIRED</name></cpp:macro> <cpp:value>MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_INVALID_ACCESS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_READONLY</name></cpp:macro> <cpp:value>E_ACCESSDENIED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_HANDLEEXISTS</name></cpp:macro> <cpp:value>E_ACCESSDENIED</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>E_PENDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_PENDING</name></cpp:macro> <cpp:value>0x8000000AL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_INSUFFICIENTPRIVS</name></cpp:macro> <cpp:value>0x80040200L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_DEVICEFULL</name></cpp:macro> <cpp:value>0x80040201L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_MOREDATA</name></cpp:macro> <cpp:value>0x80040202L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_NOTDOWNLOADED</name></cpp:macro> <cpp:value>0x80040203L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_HASEFFECTS</name></cpp:macro> <cpp:value>0x80040204L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_NOTEXCLUSIVEACQUIRED</name></cpp:macro> <cpp:value>0x80040205L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_INCOMPLETEEFFECT</name></cpp:macro> <cpp:value>0x80040206L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_NOTBUFFERED</name></cpp:macro> <cpp:value>0x80040207L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_EFFECTPLAYING</name></cpp:macro> <cpp:value>0x80040208L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_UNPLUGGED</name></cpp:macro> <cpp:value>0x80040209L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_REPORTFULL</name></cpp:macro> <cpp:value>0x8004020AL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIERR_MAPFILEFAIL</name></cpp:macro> <cpp:value>0x8004020BL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIENUM_STOP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIENUM_CONTINUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDFL_ALLDEVICES</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDFL_ATTACHEDONLY</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDFL_FORCEFEEDBACK</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDFL_INCLUDEALIASES</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDFL_INCLUDEPHANTOMS</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDFL_INCLUDEHIDDEN</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPE_DEVICE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPE_MOUSE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPE_KEYBOARD</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPE_JOYSTICK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPE_HID</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVCLASS_ALL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVCLASS_DEVICE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVCLASS_POINTER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVCLASS_KEYBOARD</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVCLASS_GAMECTRL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE_DEVICE</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE_MOUSE</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE_KEYBOARD</name></cpp:macro> <cpp:value>0x13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE_JOYSTICK</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE_GAMEPAD</name></cpp:macro> <cpp:value>0x15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE_DRIVING</name></cpp:macro> <cpp:value>0x16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE_FLIGHT</name></cpp:macro> <cpp:value>0x17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE_1STPERSON</name></cpp:macro> <cpp:value>0x18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE_DEVICECTRL</name></cpp:macro> <cpp:value>0x19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE_SCREENPOINTER</name></cpp:macro> <cpp:value>0x1A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE_REMOTE</name></cpp:macro> <cpp:value>0x1B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE_SUPPLEMENTAL</name></cpp:macro> <cpp:value>0x1C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEMOUSE_UNKNOWN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEMOUSE_TRADITIONAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEMOUSE_FINGERSTICK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEMOUSE_TOUCHPAD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEMOUSE_TRACKBALL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEKEYBOARD_UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEKEYBOARD_PCXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEKEYBOARD_OLIVETTI</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEKEYBOARD_PCAT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEKEYBOARD_PCENH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEKEYBOARD_NOKIA1050</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEKEYBOARD_NOKIA9140</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEKEYBOARD_NEC98</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEKEYBOARD_NEC98LAPTOP</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEKEYBOARD_NEC98106</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEKEYBOARD_JAPAN106</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEKEYBOARD_JAPANAX</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEKEYBOARD_J3100</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEJOYSTICK_UNKNOWN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEJOYSTICK_TRADITIONAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEJOYSTICK_FLIGHTSTICK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEJOYSTICK_GAMEPAD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEJOYSTICK_RUDDER</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEJOYSTICK_WHEEL</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDEVTYPEJOYSTICK_HEADTRACKER</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEMOUSE_UNKNOWN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEMOUSE_TRADITIONAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEMOUSE_FINGERSTICK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEMOUSE_TOUCHPAD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEMOUSE_TRACKBALL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEMOUSE_ABSOLUTE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEKEYBOARD_UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEKEYBOARD_PCXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEKEYBOARD_OLIVETTI</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEKEYBOARD_PCAT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEKEYBOARD_PCENH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEKEYBOARD_NOKIA1050</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEKEYBOARD_NOKIA9140</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEKEYBOARD_NEC98</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEKEYBOARD_NEC98LAPTOP</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEKEYBOARD_NEC98106</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEKEYBOARD_JAPAN106</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEKEYBOARD_JAPANAX</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEKEYBOARD_J3100</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE_LIMITEDGAMESUBTYPE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEJOYSTICK_LIMITED</name></cpp:macro> <cpp:value>DI8DEVTYPE_LIMITEDGAMESUBTYPE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEJOYSTICK_STANDARD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEGAMEPAD_LIMITED</name></cpp:macro> <cpp:value>DI8DEVTYPE_LIMITEDGAMESUBTYPE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEGAMEPAD_STANDARD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEGAMEPAD_TILT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEDRIVING_LIMITED</name></cpp:macro> <cpp:value>DI8DEVTYPE_LIMITEDGAMESUBTYPE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEDRIVING_COMBINEDPEDALS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEDRIVING_DUALPEDALS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEDRIVING_THREEPEDALS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEDRIVING_HANDHELD</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEFLIGHT_LIMITED</name></cpp:macro> <cpp:value>DI8DEVTYPE_LIMITEDGAMESUBTYPE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEFLIGHT_STICK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEFLIGHT_YOKE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEFLIGHT_RC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE1STPERSON_LIMITED</name></cpp:macro> <cpp:value>DI8DEVTYPE_LIMITEDGAMESUBTYPE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE1STPERSON_UNKNOWN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE1STPERSON_SIXDOF</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPE1STPERSON_SHOOTER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESCREENPTR_UNKNOWN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESCREENPTR_LIGHTGUN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESCREENPTR_LIGHTPEN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESCREENPTR_TOUCH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEREMOTE_UNKNOWN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEDEVICECTRL_UNKNOWN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEDEVICECTRL_COMMSSELECTION</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPEDEVICECTRL_COMMSSELECTION_HARDWIRED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESUPPLEMENTAL_UNKNOWN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESUPPLEMENTAL_2NDHANDCONTROLLER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESUPPLEMENTAL_HEADTRACKER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESUPPLEMENTAL_HANDTRACKER</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESUPPLEMENTAL_SHIFTSTICKGATE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESUPPLEMENTAL_SHIFTER</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESUPPLEMENTAL_THROTTLE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESUPPLEMENTAL_SPLITTHROTTLE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESUPPLEMENTAL_COMBINEDPEDALS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESUPPLEMENTAL_DUALPEDALS</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESUPPLEMENTAL_THREEPEDALS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI8DEVTYPESUPPLEMENTAL_RUDDERPEDALS</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DIDEVICE_TYPE</name><parameter_list>(<parameter><type><name>dwDevType</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LOBYTE(dwDevType)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DIDEVICE_SUBTYPE</name><parameter_list>(<parameter><type><name>dwDevType</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIBYTE(dwDevType)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>DIDEVICEOBJECTINSTANCE_DX3A</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwOfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHAR</name></type> <name><name>tszName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIDEVICEOBJECTINSTANCE_DX3A</name><operator>,</operator> *<name>LPDIDEVICEOBJECTINSTANCE_DX3A</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEOBJECTINSTANCE_DX3A</name> <modifier>*</modifier></type><name>LPCDIDEVICEOBJECTINSTANCE_DX3A</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIDEVICEOBJECTINSTANCE_DX3W</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwOfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>tszName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIDEVICEOBJECTINSTANCE_DX3W</name><operator>,</operator> *<name>LPDIDEVICEOBJECTINSTANCE_DX3W</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEOBJECTINSTANCE_DX3W</name> <modifier>*</modifier></type><name>LPCDIDEVICEOBJECTINSTANCE_DX3W</name>;</typedef>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>DIDEVICEOBJECTINSTANCE_DX3</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIDEVICEOBJECTINSTANCE_DX3</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPCDIDEVICEOBJECTINSTANCE_DX3</argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <name>DIDEVICEOBJECTINSTANCEA</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwOfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHAR</name></type> <name><name>tszName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFFMaxForce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFFForceResolution</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wCollectionNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wDesignatorIndex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wUsagePage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wUsage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDimension</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wExponent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wReserved</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block></struct></type> <name>DIDEVICEOBJECTINSTANCEA</name><operator>,</operator> *<name>LPDIDEVICEOBJECTINSTANCEA</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEOBJECTINSTANCEA</name> <modifier>*</modifier></type><name>LPCDIDEVICEOBJECTINSTANCEA</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIDEVICEOBJECTINSTANCEW</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwOfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>tszName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFFMaxForce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFFForceResolution</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wCollectionNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wDesignatorIndex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wUsagePage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wUsage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDimension</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wExponent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wReserved</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block></struct></type> <name>DIDEVICEOBJECTINSTANCEW</name><operator>,</operator> *<name>LPDIDEVICEOBJECTINSTANCEW</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEOBJECTINSTANCEW</name> <modifier>*</modifier></type><name>LPCDIDEVICEOBJECTINSTANCEW</name>;</typedef>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>DIDEVICEOBJECTINSTANCE</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIDEVICEOBJECTINSTANCE</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPCDIDEVICEOBJECTINSTANCE</argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <name>DIDEVICEINSTANCE_DX3A</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidInstance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidProduct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDevType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHAR</name></type> <name><name>tszInstanceName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHAR</name></type> <name><name>tszProductName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIDEVICEINSTANCE_DX3A</name><operator>,</operator> *<name>LPDIDEVICEINSTANCE_DX3A</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEINSTANCE_DX3A</name> <modifier>*</modifier></type><name>LPCDIDEVICEINSTANCE_DX3A</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIDEVICEINSTANCE_DX3W</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidInstance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidProduct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDevType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>tszInstanceName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>tszProductName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIDEVICEINSTANCE_DX3W</name><operator>,</operator> *<name>LPDIDEVICEINSTANCE_DX3W</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEINSTANCE_DX3W</name> <modifier>*</modifier></type><name>LPCDIDEVICEINSTANCE_DX3W</name>;</typedef>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>DIDEVICEINSTANCE_DX3</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIDEVICEINSTANCE_DX3</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPCDIDEVICEINSTANCE_DX3</argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <name>DIDEVICEINSTANCEA</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidInstance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidProduct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDevType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHAR</name></type> <name><name>tszInstanceName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHAR</name></type> <name><name>tszProductName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidFFDriver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wUsagePage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wUsage</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block></struct></type> <name>DIDEVICEINSTANCEA</name><operator>,</operator> *<name>LPDIDEVICEINSTANCEA</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEINSTANCEA</name> <modifier>*</modifier></type><name>LPCDIDEVICEINSTANCEA</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIDEVICEINSTANCEW</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidInstance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidProduct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDevType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>tszInstanceName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>tszProductName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidFFDriver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wUsagePage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wUsage</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block></struct></type> <name>DIDEVICEINSTANCEW</name><operator>,</operator> *<name>LPDIDEVICEINSTANCEW</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEINSTANCEW</name> <modifier>*</modifier></type><name>LPCDIDEVICEINSTANCEW</name>;</typedef>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>DIDEVICEINSTANCE</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIDEVICEINSTANCE</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPCDIDEVICEINSTANCE</argument>)</argument_list></macro>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>CALLBACK</name> <modifier>*</modifier><name>LPDIENUMDEVICESCALLBACKA</name>)<parameter_list>(<parameter><decl><type><name>LPCDIDEVICEINSTANCEA</name></type></decl></parameter>,<parameter><decl><type><name>LPVOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>CALLBACK</name> <modifier>*</modifier><name>LPDIENUMDEVICESCALLBACKW</name>)<parameter_list>(<parameter><decl><type><name>LPCDIDEVICEINSTANCEW</name></type></decl></parameter>,<parameter><decl><type><name>LPVOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIENUMDEVICESCALLBACK</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDBS_MAPPEDPRI1</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDBS_MAPPEDPRI2</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDBS_RECENTDEVICE</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDBS_NEWDEVICE</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDBSFL_ATTACHEDONLY</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDBSFL_THISUSER</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDBSFL_FORCEFEEDBACK</name></cpp:macro> <cpp:value>DIEDFL_FORCEFEEDBACK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDBSFL_AVAILABLEDEVICES</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDBSFL_MULTIMICEKEYBOARDS</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDBSFL_NONGAMINGDEVICES</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEDBSFL_VALID</name></cpp:macro> <cpp:value>0x00007110</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal></expr></cpp:if>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>CALLBACK</name> <modifier>*</modifier><name>LPDIENUMDEVICESBYSEMANTICSCBA</name>)<parameter_list>(<parameter><decl><type><name>LPCDIDEVICEINSTANCEA</name></type></decl></parameter>,<parameter><decl><type><name>LPDIRECTINPUTDEVICE8A</name></type></decl></parameter>,<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>LPVOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>CALLBACK</name> <modifier>*</modifier><name>LPDIENUMDEVICESBYSEMANTICSCBW</name>)<parameter_list>(<parameter><decl><type><name>LPCDIDEVICEINSTANCEW</name></type></decl></parameter>,<parameter><decl><type><name>LPDIRECTINPUTDEVICE8W</name></type></decl></parameter>,<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>LPVOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIENUMDEVICESBYSEMANTICSCB</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>CALLBACK</name> <modifier>*</modifier><name>LPDICONFIGUREDEVICESCALLBACK</name>)<parameter_list>(<parameter><decl><type><name>LPUNKNOWN</name></type></decl></parameter>,<parameter><decl><type><name>LPVOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>CALLBACK</name> <modifier>*</modifier><name>LPDIENUMDEVICEOBJECTSCALLBACKA</name>)<parameter_list>(<parameter><decl><type><name>LPCDIDEVICEOBJECTINSTANCEA</name></type></decl></parameter>,<parameter><decl><type><name>LPVOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>CALLBACK</name> <modifier>*</modifier><name>LPDIENUMDEVICEOBJECTSCALLBACKW</name>)<parameter_list>(<parameter><decl><type><name>LPCDIDEVICEOBJECTINSTANCEW</name></type></decl></parameter>,<parameter><decl><type><name>LPVOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIENUMDEVICEOBJECTSCALLBACK</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal></expr></cpp:if>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>CALLBACK</name> <modifier>*</modifier><name>LPDIENUMCREATEDEFFECTOBJECTSCALLBACK</name>)<parameter_list>(<parameter><decl><type><name>LPDIRECTINPUTEFFECT</name></type></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_ESCAPE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_1</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_2</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_3</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_4</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_5</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_6</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_7</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_8</name></cpp:macro> <cpp:value>0x09</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_9</name></cpp:macro> <cpp:value>0x0A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_0</name></cpp:macro> <cpp:value>0x0B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_MINUS</name></cpp:macro> <cpp:value>0x0C</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_EQUALS</name></cpp:macro> <cpp:value>0x0D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_BACK</name></cpp:macro> <cpp:value>0x0E</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_TAB</name></cpp:macro> <cpp:value>0x0F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_Q</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_W</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_E</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_R</name></cpp:macro> <cpp:value>0x13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_T</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_Y</name></cpp:macro> <cpp:value>0x15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_U</name></cpp:macro> <cpp:value>0x16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_I</name></cpp:macro> <cpp:value>0x17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_O</name></cpp:macro> <cpp:value>0x18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_P</name></cpp:macro> <cpp:value>0x19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_LBRACKET</name></cpp:macro> <cpp:value>0x1A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_RBRACKET</name></cpp:macro> <cpp:value>0x1B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_RETURN</name></cpp:macro> <cpp:value>0x1C</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_LCONTROL</name></cpp:macro> <cpp:value>0x1D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_A</name></cpp:macro> <cpp:value>0x1E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_S</name></cpp:macro> <cpp:value>0x1F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_D</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F</name></cpp:macro> <cpp:value>0x21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_G</name></cpp:macro> <cpp:value>0x22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_H</name></cpp:macro> <cpp:value>0x23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_J</name></cpp:macro> <cpp:value>0x24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_K</name></cpp:macro> <cpp:value>0x25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_L</name></cpp:macro> <cpp:value>0x26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_SEMICOLON</name></cpp:macro> <cpp:value>0x27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_APOSTROPHE</name></cpp:macro> <cpp:value>0x28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_GRAVE</name></cpp:macro> <cpp:value>0x29</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_LSHIFT</name></cpp:macro> <cpp:value>0x2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_BACKSLASH</name></cpp:macro> <cpp:value>0x2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_Z</name></cpp:macro> <cpp:value>0x2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_X</name></cpp:macro> <cpp:value>0x2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_C</name></cpp:macro> <cpp:value>0x2E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_V</name></cpp:macro> <cpp:value>0x2F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_B</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_N</name></cpp:macro> <cpp:value>0x31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_M</name></cpp:macro> <cpp:value>0x32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_COMMA</name></cpp:macro> <cpp:value>0x33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_PERIOD</name></cpp:macro> <cpp:value>0x34</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_SLASH</name></cpp:macro> <cpp:value>0x35</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_RSHIFT</name></cpp:macro> <cpp:value>0x36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_MULTIPLY</name></cpp:macro> <cpp:value>0x37</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_LMENU</name></cpp:macro> <cpp:value>0x38</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_SPACE</name></cpp:macro> <cpp:value>0x39</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_CAPITAL</name></cpp:macro> <cpp:value>0x3A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F1</name></cpp:macro> <cpp:value>0x3B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F2</name></cpp:macro> <cpp:value>0x3C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F3</name></cpp:macro> <cpp:value>0x3D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F4</name></cpp:macro> <cpp:value>0x3E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F5</name></cpp:macro> <cpp:value>0x3F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F6</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F7</name></cpp:macro> <cpp:value>0x41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F8</name></cpp:macro> <cpp:value>0x42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F9</name></cpp:macro> <cpp:value>0x43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F10</name></cpp:macro> <cpp:value>0x44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMLOCK</name></cpp:macro> <cpp:value>0x45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_SCROLL</name></cpp:macro> <cpp:value>0x46</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPAD7</name></cpp:macro> <cpp:value>0x47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPAD8</name></cpp:macro> <cpp:value>0x48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPAD9</name></cpp:macro> <cpp:value>0x49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_SUBTRACT</name></cpp:macro> <cpp:value>0x4A</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPAD4</name></cpp:macro> <cpp:value>0x4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPAD5</name></cpp:macro> <cpp:value>0x4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPAD6</name></cpp:macro> <cpp:value>0x4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_ADD</name></cpp:macro> <cpp:value>0x4E</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPAD1</name></cpp:macro> <cpp:value>0x4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPAD2</name></cpp:macro> <cpp:value>0x50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPAD3</name></cpp:macro> <cpp:value>0x51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPAD0</name></cpp:macro> <cpp:value>0x52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_DECIMAL</name></cpp:macro> <cpp:value>0x53</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_OEM_102</name></cpp:macro> <cpp:value>0x56</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F11</name></cpp:macro> <cpp:value>0x57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F12</name></cpp:macro> <cpp:value>0x58</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F13</name></cpp:macro> <cpp:value>0x64</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F14</name></cpp:macro> <cpp:value>0x65</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_F15</name></cpp:macro> <cpp:value>0x66</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_KANA</name></cpp:macro> <cpp:value>0x70</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_ABNT_C1</name></cpp:macro> <cpp:value>0x73</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_CONVERT</name></cpp:macro> <cpp:value>0x79</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NOCONVERT</name></cpp:macro> <cpp:value>0x7B</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_YEN</name></cpp:macro> <cpp:value>0x7D</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_ABNT_C2</name></cpp:macro> <cpp:value>0x7E</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPADEQUALS</name></cpp:macro> <cpp:value>0x8D</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_CIRCUMFLEX</name></cpp:macro> <cpp:value>0x90</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_AT</name></cpp:macro> <cpp:value>0x91</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_COLON</name></cpp:macro> <cpp:value>0x92</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_UNDERLINE</name></cpp:macro> <cpp:value>0x93</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_KANJI</name></cpp:macro> <cpp:value>0x94</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_STOP</name></cpp:macro> <cpp:value>0x95</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_AX</name></cpp:macro> <cpp:value>0x96</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_UNLABELED</name></cpp:macro> <cpp:value>0x97</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NEXTTRACK</name></cpp:macro> <cpp:value>0x99</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPADENTER</name></cpp:macro> <cpp:value>0x9C</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_RCONTROL</name></cpp:macro> <cpp:value>0x9D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_MUTE</name></cpp:macro> <cpp:value>0xA0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_CALCULATOR</name></cpp:macro> <cpp:value>0xA1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_PLAYPAUSE</name></cpp:macro> <cpp:value>0xA2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_MEDIASTOP</name></cpp:macro> <cpp:value>0xA4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_VOLUMEDOWN</name></cpp:macro> <cpp:value>0xAE</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_VOLUMEUP</name></cpp:macro> <cpp:value>0xB0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_WEBHOME</name></cpp:macro> <cpp:value>0xB2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPADCOMMA</name></cpp:macro> <cpp:value>0xB3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_DIVIDE</name></cpp:macro> <cpp:value>0xB5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_SYSRQ</name></cpp:macro> <cpp:value>0xB7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_RMENU</name></cpp:macro> <cpp:value>0xB8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_PAUSE</name></cpp:macro> <cpp:value>0xC5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_HOME</name></cpp:macro> <cpp:value>0xC7</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_UP</name></cpp:macro> <cpp:value>0xC8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_PRIOR</name></cpp:macro> <cpp:value>0xC9</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_LEFT</name></cpp:macro> <cpp:value>0xCB</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_RIGHT</name></cpp:macro> <cpp:value>0xCD</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_END</name></cpp:macro> <cpp:value>0xCF</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_DOWN</name></cpp:macro> <cpp:value>0xD0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NEXT</name></cpp:macro> <cpp:value>0xD1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_INSERT</name></cpp:macro> <cpp:value>0xD2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_DELETE</name></cpp:macro> <cpp:value>0xD3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_LWIN</name></cpp:macro> <cpp:value>0xDB</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_RWIN</name></cpp:macro> <cpp:value>0xDC</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_APPS</name></cpp:macro> <cpp:value>0xDD</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_POWER</name></cpp:macro> <cpp:value>0xDE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_SLEEP</name></cpp:macro> <cpp:value>0xDF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_WAKE</name></cpp:macro> <cpp:value>0xE3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_WEBSEARCH</name></cpp:macro> <cpp:value>0xE5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_WEBFAVORITES</name></cpp:macro> <cpp:value>0xE6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_WEBREFRESH</name></cpp:macro> <cpp:value>0xE7</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_WEBSTOP</name></cpp:macro> <cpp:value>0xE8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_WEBFORWARD</name></cpp:macro> <cpp:value>0xE9</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_WEBBACK</name></cpp:macro> <cpp:value>0xEA</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_MYCOMPUTER</name></cpp:macro> <cpp:value>0xEB</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_MAIL</name></cpp:macro> <cpp:value>0xEC</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_MEDIASELECT</name></cpp:macro> <cpp:value>0xED</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_BACKSPACE</name></cpp:macro> <cpp:value>DIK_BACK</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPADSTAR</name></cpp:macro> <cpp:value>DIK_MULTIPLY</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_LALT</name></cpp:macro> <cpp:value>DIK_LMENU</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_CAPSLOCK</name></cpp:macro> <cpp:value>DIK_CAPITAL</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPADMINUS</name></cpp:macro> <cpp:value>DIK_SUBTRACT</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPADPLUS</name></cpp:macro> <cpp:value>DIK_ADD</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPADPERIOD</name></cpp:macro> <cpp:value>DIK_DECIMAL</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_NUMPADSLASH</name></cpp:macro> <cpp:value>DIK_DIVIDE</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_RALT</name></cpp:macro> <cpp:value>DIK_RMENU</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_UPARROW</name></cpp:macro> <cpp:value>DIK_UP</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_PGUP</name></cpp:macro> <cpp:value>DIK_PRIOR</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_LEFTARROW</name></cpp:macro> <cpp:value>DIK_LEFT</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_RIGHTARROW</name></cpp:macro> <cpp:value>DIK_RIGHT</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_DOWNARROW</name></cpp:macro> <cpp:value>DIK_DOWN</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIK_PGDN</name></cpp:macro> <cpp:value>DIK_NEXT</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_ALL</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_RELAXIS</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_ABSAXIS</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_AXIS</name></cpp:macro> <cpp:value>0x00000003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_PSHBUTTON</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_TGLBUTTON</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_BUTTON</name></cpp:macro> <cpp:value>0x0000000C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_POV</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_COLLECTION</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_NODATA</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_ANYINSTANCE</name></cpp:macro> <cpp:value>0x00FFFF00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_INSTANCEMASK</name></cpp:macro> <cpp:value>DIDFT_ANYINSTANCE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_MAKEINSTANCE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((WORD)(n) &lt;&lt; 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_GETTYPE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LOBYTE(n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_GETINSTANCE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LOWORD((n) &gt;&gt; 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_FFACTUATOR</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_FFEFFECTTRIGGER</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x050a</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_OUTPUT</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_VENDORDEFINED</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_ALIAS</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DIDFT_OPTIONAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_OPTIONAL</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_ENUMCOLLECTION</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((WORD)(n) &lt;&lt; 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDFT_NOCOLLECTION</name></cpp:macro> <cpp:value>0x00FFFF00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDF_ABSAXIS</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDF_RELAXIS</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGDD_PEEK</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISEQUENCE_COMPARE</name><parameter_list>(<parameter><type><name>dwSq1</name></type></parameter>,<parameter><type><name>cmp</name></type></parameter>,<parameter><type><name>dwSq2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((dwSq1) - (dwSq2)) cmp 0)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>DIDEVICEOBJECTDATA_DX3</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwOfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwTimeStamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSequence</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIDEVICEOBJECTDATA_DX3</name><operator>,</operator>*<name>LPDIDEVICEOBJECTDATA_DX3</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEOBJECTDATA_DX3</name> <modifier>*</modifier></type><name>LPCDIDEVICEOBJECTDATA_DX3</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIDEVICEOBJECTDATA</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwOfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwTimeStamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSequence</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>UINT_PTR</name></type> <name>uAppData</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block></struct></type> <name>DIDEVICEOBJECTDATA</name><operator>,</operator> *<name>LPDIDEVICEOBJECTDATA</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEOBJECTDATA</name> <modifier>*</modifier></type><name>LPCDIDEVICEOBJECTDATA</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_DIOBJECTDATAFORMAT</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>pguid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwOfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIOBJECTDATAFORMAT</name><operator>,</operator> *<name>LPDIOBJECTDATAFORMAT</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIOBJECTDATAFORMAT</name> <modifier>*</modifier></type><name>LPCDIOBJECTDATAFORMAT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_DIDATAFORMAT</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwObjSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwNumObjs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPDIOBJECTDATAFORMAT</name></type> <name>rgodf</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIDATAFORMAT</name><operator>,</operator> *<name>LPDIDATAFORMAT</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDATAFORMAT</name> <modifier>*</modifier></type><name>LPCDIDATAFORMAT</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDOI_FFACTUATOR</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDOI_FFEFFECTTRIGGER</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDOI_POLLED</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDOI_ASPECTPOSITION</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDOI_ASPECTVELOCITY</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDOI_ASPECTACCEL</name></cpp:macro> <cpp:value>0x00000300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDOI_ASPECTFORCE</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDOI_ASPECTMASK</name></cpp:macro> <cpp:value>0x00000F00</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x050a</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDOI_GUIDISUSAGE</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><struct>struct <name>DIPROPHEADER</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwHeaderSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwObj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwHow</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIPROPHEADER</name><operator>,</operator>*<name>LPDIPROPHEADER</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIPROPHEADER</name> <modifier>*</modifier></type><name>LPCDIPROPHEADER</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPH_DEVICE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPH_BYOFFSET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPH_BYID</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x050a</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPH_BYUSAGE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMAKEUSAGEDWORD</name><parameter_list>(<parameter><type><name>UsagePage</name></type></parameter>, <parameter><type><name>Usage</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DWORD)MAKELONG(Usage, UsagePage)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><struct>struct <name>DIPROPDWORD</name> <block>{

<decl_stmt><decl><type><name>DIPROPHEADER</name></type> <name>diph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwData</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIPROPDWORD</name><operator>,</operator> *<name>LPDIPROPDWORD</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIPROPDWORD</name> <modifier>*</modifier></type><name>LPCDIPROPDWORD</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIPROPRANGE</name> <block>{

<decl_stmt><decl><type><name>DIPROPHEADER</name></type> <name>diph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lMin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lMax</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIPROPRANGE</name><operator>,</operator> *<name>LPDIPROPRANGE</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIPROPRANGE</name> <modifier>*</modifier></type><name>LPCDIPROPRANGE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROPRANGE_NOMIN</name></cpp:macro> <cpp:value>((LONG)0x80000000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROPRANGE_NOMAX</name></cpp:macro> <cpp:value>((LONG)0x7FFFFFFF)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x050a</literal></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>DIPROPCAL</name> <block>{

<decl_stmt><decl><type><name>DIPROPHEADER</name></type> <name>diph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lMin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lCenter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lMax</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIPROPCAL</name><operator>,</operator> *<name>LPDIPROPCAL</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIPROPCAL</name> <modifier>*</modifier></type><name>LPCDIPROPCAL</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIPROPCALPOV</name> <block>{

<decl_stmt><decl><type><name>DIPROPHEADER</name></type> <name>diph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name><name>lMin</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name><name>lMax</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIPROPCALPOV</name><operator>,</operator> *<name>LPDIPROPCALPOV</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIPROPCALPOV</name> <modifier>*</modifier></type><name>LPCDIPROPCALPOV</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIPROPGUIDANDPATH</name> <block>{

<decl_stmt><decl><type><name>DIPROPHEADER</name></type> <name>diph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidClass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>wszPath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIPROPGUIDANDPATH</name><operator>,</operator> *<name>LPDIPROPGUIDANDPATH</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIPROPGUIDANDPATH</name> <modifier>*</modifier></type><name>LPCDIPROPGUIDANDPATH</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIPROPSTRING</name> <block>{

<decl_stmt><decl><type><name>DIPROPHEADER</name></type> <name>diph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>wsz</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIPROPSTRING</name><operator>,</operator> *<name>LPDIPROPSTRING</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIPROPSTRING</name> <modifier>*</modifier></type><name>LPCDIPROPSTRING</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>DIPROPPOINTER</name> <block>{

<decl_stmt><decl><type><name>DIPROPHEADER</name></type> <name>diph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT_PTR</name></type> <name>uData</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIPROPPOINTER</name><operator>,</operator> *<name>LPDIPROPPOINTER</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIPROPPOINTER</name> <modifier>*</modifier></type><name>LPCDIPROPPOINTER</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKEDIPROP</name><parameter_list>(<parameter><type><name>prop</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(const GUID *)(prop))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKEDIPROP</name><parameter_list>(<parameter><type><name>prop</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((REFGUID)(prop))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_BUFFERSIZE</name></cpp:macro> <cpp:value>MAKEDIPROP(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_AXISMODE</name></cpp:macro> <cpp:value>MAKEDIPROP(2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROPAXISMODE_ABS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROPAXISMODE_REL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_GRANULARITY</name></cpp:macro> <cpp:value>MAKEDIPROP(3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_RANGE</name></cpp:macro> <cpp:value>MAKEDIPROP(4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_DEADZONE</name></cpp:macro> <cpp:value>MAKEDIPROP(5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_SATURATION</name></cpp:macro> <cpp:value>MAKEDIPROP(6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_FFGAIN</name></cpp:macro> <cpp:value>MAKEDIPROP(7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_FFLOAD</name></cpp:macro> <cpp:value>MAKEDIPROP(8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_AUTOCENTER</name></cpp:macro> <cpp:value>MAKEDIPROP(9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROPAUTOCENTER_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROPAUTOCENTER_ON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_CALIBRATIONMODE</name></cpp:macro> <cpp:value>MAKEDIPROP(10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROPCALIBRATIONMODE_COOKED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROPCALIBRATIONMODE_RAW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x050a</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_CALIBRATION</name></cpp:macro> <cpp:value>MAKEDIPROP(11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_GUIDANDPATH</name></cpp:macro> <cpp:value>MAKEDIPROP(12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_INSTANCENAME</name></cpp:macro> <cpp:value>MAKEDIPROP(13)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_PRODUCTNAME</name></cpp:macro> <cpp:value>MAKEDIPROP(14)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x5B2</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_JOYSTICKID</name></cpp:macro> <cpp:value>MAKEDIPROP(15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_GETPORTDISPLAYNAME</name></cpp:macro> <cpp:value>MAKEDIPROP(16)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0700</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_PHYSICALRANGE</name></cpp:macro> <cpp:value>MAKEDIPROP(18)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_LOGICALRANGE</name></cpp:macro> <cpp:value>MAKEDIPROP(19)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_KEYNAME</name></cpp:macro> <cpp:value>MAKEDIPROP(20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_CPOINTS</name></cpp:macro> <cpp:value>MAKEDIPROP(21)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_APPDATA</name></cpp:macro> <cpp:value>MAKEDIPROP(22)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_SCANCODE</name></cpp:macro> <cpp:value>MAKEDIPROP(23)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_VIDPID</name></cpp:macro> <cpp:value>MAKEDIPROP(24)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_USERNAME</name></cpp:macro> <cpp:value>MAKEDIPROP(25)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIPROP_TYPENAME</name></cpp:macro> <cpp:value>MAKEDIPROP(26)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXCPOINTSNUM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_CPOINT</name> <block>{

<decl_stmt><decl><type><name>LONG</name></type> <name>lP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwLog</name></decl>;</decl_stmt>

}</block></struct></type> <name>CPOINT</name><operator>,</operator> *<name>PCPOINT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIPROPCPOINTS</name> <block>{

<decl_stmt><decl><type><name>DIPROPHEADER</name></type> <name>diph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwCPointsNum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CPOINT</name></type> <name><name>cp</name><index>[<expr><name>MAXCPOINTSNUM</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIPROPCPOINTS</name><operator>,</operator> *<name>LPDIPROPCPOINTS</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIPROPCPOINTS</name> <modifier>*</modifier></type><name>LPCDIPROPCPOINTS</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><struct>struct <name>DIDEVCAPS_DX3</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDevType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwAxes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwButtons</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPOVs</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIDEVCAPS_DX3</name><operator>,</operator> *<name>LPDIDEVCAPS_DX3</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIDEVCAPS</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDevType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwAxes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwButtons</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPOVs</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFFSamplePeriod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFFMinTimeResolution</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFirmwareRevision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwHardwareRevision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFFDriverVersion</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block></struct></type> <name>DIDEVCAPS</name><operator>,</operator>*<name>LPDIDEVCAPS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_ATTACHED</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_POLLEDDEVICE</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_EMULATED</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_POLLEDDATAFORMAT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_FORCEFEEDBACK</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_FFATTACK</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_FFFADE</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_SATURATION</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_POSNEGCOEFFICIENTS</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_POSNEGSATURATION</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_DEADBAND</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_STARTDELAY</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_ALIAS</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_PHANTOM</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDC_HIDDEN</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISCL_EXCLUSIVE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISCL_NONEXCLUSIVE</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISCL_FOREGROUND</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISCL_BACKGROUND</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISCL_NOWINKEY</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISFFC_RESET</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISFFC_STOPALL</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISFFC_PAUSE</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISFFC_CONTINUE</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISFFC_SETACTUATORSON</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISFFC_SETACTUATORSOFF</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGFFS_EMPTY</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGFFS_STOPPED</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGFFS_PAUSED</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGFFS_ACTUATORSON</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGFFS_ACTUATORSOFF</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGFFS_POWERON</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGFFS_POWEROFF</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGFFS_SAFETYSWITCHON</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGFFS_SAFETYSWITCHOFF</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGFFS_USERFFSWITCHON</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGFFS_USERFFSWITCHOFF</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGFFS_DEVICELOST</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_ALL</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_CONSTANTFORCE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_RAMPFORCE</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_PERIODIC</name></cpp:macro> <cpp:value>0x00000003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_CONDITION</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_CUSTOMFORCE</name></cpp:macro> <cpp:value>0x00000005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_HARDWARE</name></cpp:macro> <cpp:value>0x000000FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_FFATTACK</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_FFFADE</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_SATURATION</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_POSNEGCOEFFICIENTS</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_POSNEGSATURATION</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_DEADBAND</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_STARTDELAY</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFT_GETTYPE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LOBYTE(n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFF_OBJECTIDS</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFF_OBJECTOFFSETS</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFF_CARTESIAN</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFF_POLAR</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEFF_SPHERICAL</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_DURATION</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_SAMPLEPERIOD</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_GAIN</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_TRIGGERBUTTON</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_TRIGGERREPEATINTERVAL</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_AXES</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_DIRECTION</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_ENVELOPE</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_TYPESPECIFICPARAMS</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0600</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_STARTDELAY</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_ALLPARAMS_DX5</name></cpp:macro> <cpp:value>0x000001FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_ALLPARAMS</name></cpp:macro> <cpp:value>0x000003FF</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_ALLPARAMS</name></cpp:macro> <cpp:value>0x000001FF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_START</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_NORESTART</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEP_NODOWNLOAD</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEB_NOTRIGGER</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIES_SOLO</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIES_NODOWNLOAD</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEGES_PLAYING</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIEGES_EMULATED</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_DEGREES</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_FFNOMINALMAX</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI_SECONDS</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>DICONSTANTFORCE</name> <block>{

<decl_stmt><decl><type><name>LONG</name></type> <name>lMagnitude</name></decl>;</decl_stmt>

}</block></struct></type> <name>DICONSTANTFORCE</name><operator>,</operator> *<name>LPDICONSTANTFORCE</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DICONSTANTFORCE</name> <modifier>*</modifier></type><name>LPCDICONSTANTFORCE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIRAMPFORCE</name> <block>{

<decl_stmt><decl><type><name>LONG</name></type> <name>lStart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lEnd</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIRAMPFORCE</name><operator>,</operator> *<name>LPDIRAMPFORCE</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIRAMPFORCE</name> <modifier>*</modifier></type><name>LPCDIRAMPFORCE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIPERIODIC</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwMagnitude</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPhase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPeriod</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIPERIODIC</name><operator>,</operator> *<name>LPDIPERIODIC</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIPERIODIC</name> <modifier>*</modifier></type><name>LPCDIPERIODIC</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DICONDITION</name> <block>{

<decl_stmt><decl><type><name>LONG</name></type> <name>lOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lPositiveCoefficient</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lNegativeCoefficient</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPositiveSaturation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwNegativeSaturation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lDeadBand</name></decl>;</decl_stmt>

}</block></struct></type> <name>DICONDITION</name><operator>,</operator> *<name>LPDICONDITION</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DICONDITION</name> <modifier>*</modifier></type><name>LPCDICONDITION</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DICUSTOMFORCE</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>cChannels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSamplePeriod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cSamples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPLONG</name></type> <name>rglForceData</name></decl>;</decl_stmt>

}</block></struct></type> <name>DICUSTOMFORCE</name><operator>,</operator> *<name>LPDICUSTOMFORCE</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DICUSTOMFORCE</name> <modifier>*</modifier></type><name>LPCDICUSTOMFORCE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIENVELOPE</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwAttackLevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwAttackTime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFadeLevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFadeTime</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIENVELOPE</name><operator>,</operator> *<name>LPDIENVELOPE</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIENVELOPE</name> <modifier>*</modifier></type><name>LPCDIENVELOPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIEFFECT_DX5</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDuration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSamplePeriod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwGain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwTriggerButton</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwTriggerRepeatInterval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cAxes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPDWORD</name></type> <name>rgdwAxes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPLONG</name></type> <name>rglDirection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPDIENVELOPE</name></type> <name>lpEnvelope</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cbTypeSpecificParams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>lpvTypeSpecificParams</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIEFFECT_DX5</name><operator>,</operator> *<name>LPDIEFFECT_DX5</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIEFFECT_DX5</name> <modifier>*</modifier></type><name>LPCDIEFFECT_DX5</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIEFFECT</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDuration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSamplePeriod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwGain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwTriggerButton</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwTriggerRepeatInterval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cAxes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPDWORD</name></type> <name>rgdwAxes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPLONG</name></type> <name>rglDirection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPDIENVELOPE</name></type> <name>lpEnvelope</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cbTypeSpecificParams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>lpvTypeSpecificParams</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0600</literal><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwStartDelay</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block></struct></type> <name>DIEFFECT</name><operator>,</operator> *<name>LPDIEFFECT</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIEFFECT</name> <modifier>*</modifier></type><name>LPCDIEFFECT</name>;</typedef>

<typedef>typedef <type><name>DIEFFECT</name></type> <name>DIEFFECT_DX6</name>;</typedef>

<typedef>typedef <type><name>LPDIEFFECT</name></type> <name>LPDIEFFECT_DX6</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIEFFECTINFOA</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwEffType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwStaticParams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDynamicParams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHAR</name></type> <name><name>tszName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIEFFECTINFOA</name><operator>,</operator> *<name>LPDIEFFECTINFOA</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIEFFECTINFOA</name> <modifier>*</modifier></type><name>LPCDIEFFECTINFOA</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIEFFECTINFOW</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwEffType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwStaticParams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDynamicParams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>tszName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIEFFECTINFOW</name><operator>,</operator> *<name>LPDIEFFECTINFOW</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIEFFECTINFOW</name> <modifier>*</modifier></type><name>LPCDIEFFECTINFOW</name>;</typedef>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>DIEFFECTINFO</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIEFFECTINFO</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPCDIEFFECTINFO</argument>)</argument_list></macro>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>CALLBACK</name> <modifier>*</modifier><name>LPDIENUMEFFECTSCALLBACKA</name>)<parameter_list>(<parameter><decl><type><name>LPCDIEFFECTINFOA</name></type></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>CALLBACK</name> <modifier>*</modifier><name>LPDIENUMEFFECTSCALLBACKW</name>)<parameter_list>(<parameter><decl><type><name>LPCDIEFFECTINFOW</name></type></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>DIEFFESCAPE</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwCommand</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>lpvInBuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cbInBuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>lpvOutBuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cbOutBuffer</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIEFFESCAPE</name><operator>,</operator> *<name>LPDIEFFESCAPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIJOYSTATE</name> <block>{

<decl_stmt><decl><type><name>LONG</name></type> <name>lX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lZ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lRx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lRy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lRz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name><name>rglSlider</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name><name>rgdwPOV</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>rgbButtons</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIJOYSTATE</name><operator>,</operator> *<name>LPDIJOYSTATE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DIJOYSTATE2</name> <block>{

<decl_stmt><decl><type><name>LONG</name></type> <name>lX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lZ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lRx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lRy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lRz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name><name>rglSlider</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name><name>rgdwPOV</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>rgbButtons</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lVX</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>LONG</name></type> <name>lVY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lVZ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lVRx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lVRy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lVRz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name><name>rglVSlider</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lAX</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>LONG</name></type> <name>lAY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lAZ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lARx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lARy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lARz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name><name>rglASlider</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lFX</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>LONG</name></type> <name>lFY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lFZ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lFRx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>LONG</name></type> <name>lFRy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lFRz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name><name>rglFSlider</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIJOYSTATE2</name><operator>,</operator> *<name>LPDIJOYSTATE2</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_X</name></cpp:macro> <cpp:value>FIELD_OFFSET(DIJOYSTATE, lX)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_Y</name></cpp:macro> <cpp:value>FIELD_OFFSET(DIJOYSTATE, lY)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_Z</name></cpp:macro> <cpp:value>FIELD_OFFSET(DIJOYSTATE, lZ)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_RX</name></cpp:macro> <cpp:value>FIELD_OFFSET(DIJOYSTATE, lRx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_RY</name></cpp:macro> <cpp:value>FIELD_OFFSET(DIJOYSTATE, lRy)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_RZ</name></cpp:macro> <cpp:value>FIELD_OFFSET(DIJOYSTATE, lRz)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_SLIDER</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(FIELD_OFFSET(DIJOYSTATE, rglSlider) + (n) * sizeof(LONG))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_POV</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(FIELD_OFFSET(DIJOYSTATE, rgdwPOV) + (n) * sizeof(DWORD))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(FIELD_OFFSET(DIJOYSTATE, rgbButtons) + (n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON0</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON1</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON2</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON3</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON4</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON5</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON6</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON7</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON8</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON9</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON10</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON11</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON12</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON13</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(13)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON14</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(14)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON15</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON16</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON17</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(17)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON18</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(18)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON19</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(19)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON20</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON21</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(21)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON22</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(22)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON23</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(23)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON24</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(24)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON25</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(25)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON26</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(26)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON27</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(27)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON28</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(28)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON29</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(29)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON30</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(30)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIJOFS_BUTTON31</name></cpp:macro> <cpp:value>DIJOFS_BUTTON(31)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0700</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>DIFILEEFFECT</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>GuidEffect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPCDIEFFECT</name></type> <name>lpDiEffect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHAR</name></type> <name><name>szFriendlyName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIFILEEFFECT</name><operator>,</operator> *<name>LPDIFILEEFFECT</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIFILEEFFECT</name> <modifier>*</modifier></type><name>LPCDIFILEEFFECT</name>;</typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>CALLBACK</name> <modifier>*</modifier><name>LPDIENUMEFFECTSINFILECALLBACK</name>)<parameter_list>(<parameter><decl><type><name>LPCDIFILEEFFECT</name></type></decl></parameter> , <parameter><decl><type><name>LPVOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>_DIACTIONA</name> <block>{

<decl_stmt><decl><type><name>UINT_PTR</name></type> <name>uAppData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSemantic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<macro><name>__GNU_EXTENSION</name></macro> <union>union <block>{

<decl_stmt><decl><type><name>LPCSTR</name></type> <name>lptszActionName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>uResIdString</name></decl>;</decl_stmt>

}</block> <decl><name>DUMMYUNIONNAME</name></decl>;</union>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidInstance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwObjID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwHow</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIACTIONA</name><operator>,</operator> *<name>LPDIACTIONA</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIACTIONA</name> <modifier>*</modifier></type><name>LPCDIACTIONA</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_DIACTIONW</name> <block>{

<decl_stmt><decl><type><name>UINT_PTR</name></type> <name>uAppData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSemantic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<macro><name>__GNU_EXTENSION</name></macro> <union>union <block>{

<decl_stmt><decl><type><name>LPCWSTR</name></type> <name>lptszActionName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>uResIdString</name></decl>;</decl_stmt>

}</block> <decl><name>DUMMYUNIONNAME</name></decl>;</union>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidInstance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwObjID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwHow</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIACTIONW</name><operator>,</operator> *<name>LPDIACTIONW</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIACTIONW</name> <modifier>*</modifier></type><name>LPCDIACTIONW</name>;</typedef>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>DIACTION</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIACTION</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPCDIACTION</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIA_FORCEFEEDBACK</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIA_APPMAPPED</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIA_APPNOMAP</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIA_NORANGE</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIA_APPFIXED</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAH_UNMAPPED</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAH_USERCONFIG</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAH_APPREQUESTED</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAH_HWAPP</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAH_HWDEFAULT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAH_DEFAULT</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAH_ERROR</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_DIACTIONFORMATA</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwActionSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwNumActions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPDIACTIONA</name></type> <name>rgoAction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidActionMap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwGenre</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBufferSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lAxisMin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lAxisMax</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hInstString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILETIME</name></type> <name>ftTimeStamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwCRC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHAR</name></type> <name><name>tszActionMap</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIACTIONFORMATA</name><operator>,</operator> *<name>LPDIACTIONFORMATA</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIACTIONFORMATA</name> <modifier>*</modifier></type><name>LPCDIACTIONFORMATA</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_DIACTIONFORMATW</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwActionSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwNumActions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPDIACTIONW</name></type> <name>rgoAction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidActionMap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwGenre</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBufferSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lAxisMin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lAxisMax</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hInstString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILETIME</name></type> <name>ftTimeStamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwCRC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>tszActionMap</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIACTIONFORMATW</name><operator>,</operator> *<name>LPDIACTIONFORMATW</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIACTIONFORMATW</name> <modifier>*</modifier></type><name>LPCDIACTIONFORMATW</name>;</typedef>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>DIACTIONFORMAT</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIACTIONFORMAT</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPCDIACTIONFORMAT</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAFTS_NEWDEVICELOW</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAFTS_NEWDEVICEHIGH</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAFTS_UNUSEDDEVICELOW</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAFTS_UNUSEDDEVICEHIGH</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDBAM_DEFAULT</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDBAM_PRESERVE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDBAM_INITIALIZE</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDBAM_HWDEFAULTS</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDSAM_DEFAULT</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDSAM_NOUSER</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDSAM_FORCESAVE</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICD_DEFAULT</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICD_EDIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>D3DCOLOR_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>DWORD</name></type> <name>D3DCOLOR</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCOLOR_DEFINED</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>_DICOLORSET</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DCOLOR</name></type> <name>cTextFore</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DCOLOR</name></type> <name>cTextHighlight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DCOLOR</name></type> <name>cCalloutLine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DCOLOR</name></type> <name>cCalloutHighlight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DCOLOR</name></type> <name>cBorder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DCOLOR</name></type> <name>cControlFill</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DCOLOR</name></type> <name>cHighlightFill</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DCOLOR</name></type> <name>cAreaFill</name></decl>;</decl_stmt>

}</block></struct></type> <name>DICOLORSET</name><operator>,</operator> *<name>LPDICOLORSET</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DICOLORSET</name> <modifier>*</modifier></type><name>LPCDICOLORSET</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_DICONFIGUREDEVICESPARAMSA</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcUsers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPSTR</name></type> <name>lptszUserNames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcFormats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPDIACTIONFORMATA</name></type> <name>lprgFormats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DICOLORSET</name></type> <name>dics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPUNKNOWN</name></type> <name>lpUnkDDSTarget</name></decl>;</decl_stmt>

}</block></struct></type> <name>DICONFIGUREDEVICESPARAMSA</name><operator>,</operator> *<name>LPDICONFIGUREDEVICESPARAMSA</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DICONFIGUREDEVICESPARAMSA</name> <modifier>*</modifier></type><name>LPCDICONFIGUREDEVICESPARAMSA</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_DICONFIGUREDEVICESPARAMSW</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcUsers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>lptszUserNames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcFormats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPDIACTIONFORMATW</name></type> <name>lprgFormats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DICOLORSET</name></type> <name>dics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPUNKNOWN</name></type> <name>lpUnkDDSTarget</name></decl>;</decl_stmt>

}</block></struct></type> <name>DICONFIGUREDEVICESPARAMSW</name><operator>,</operator> *<name>LPDICONFIGUREDEVICESPARAMSW</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DICONFIGUREDEVICESPARAMSW</name> <modifier>*</modifier></type><name>LPCDICONFIGUREDEVICESPARAMSW</name>;</typedef>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>DICONFIGUREDEVICESPARAMS</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDICONFIGUREDEVICESPARAMS</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPCDICONFIGUREDEVICESPARAMS</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDIFT_CONFIGURATION</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDIFT_OVERLAY</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDAL_CENTERED</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDAL_LEFTALIGNED</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDAL_RIGHTALIGNED</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDAL_MIDDLE</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDAL_TOPALIGNED</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIDAL_BOTTOMALIGNED</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_DIDEVICEIMAGEINFOA</name> <block>{

<decl_stmt><decl><type><name>CHAR</name></type> <name><name>tszImagePath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwViewID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rcOverlay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwObjID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcValidPts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POINT</name></type> <name><name>rgptCalloutLine</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rcCalloutRect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwTextAlign</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIDEVICEIMAGEINFOA</name><operator>,</operator> *<name>LPDIDEVICEIMAGEINFOA</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEIMAGEINFOA</name> <modifier>*</modifier></type><name>LPCDIDEVICEIMAGEINFOA</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_DIDEVICEIMAGEINFOW</name> <block>{

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>tszImagePath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwViewID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rcOverlay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwObjID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcValidPts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POINT</name></type> <name><name>rgptCalloutLine</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rcCalloutRect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwTextAlign</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIDEVICEIMAGEINFOW</name><operator>,</operator> *<name>LPDIDEVICEIMAGEINFOW</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEIMAGEINFOW</name> <modifier>*</modifier></type><name>LPCDIDEVICEIMAGEINFOW</name>;</typedef>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>DIDEVICEIMAGEINFO</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIDEVICEIMAGEINFO</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPCDIDEVICEIMAGEINFO</argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <name>_DIDEVICEIMAGEINFOHEADERA</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSizeImageInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcViews</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcButtons</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcAxes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcPOVs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBufferSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBufferUsed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPDIDEVICEIMAGEINFOA</name></type> <name>lprgImageInfoArray</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIDEVICEIMAGEINFOHEADERA</name><operator>,</operator> *<name>LPDIDEVICEIMAGEINFOHEADERA</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEIMAGEINFOHEADERA</name> <modifier>*</modifier></type><name>LPCDIDEVICEIMAGEINFOHEADERA</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_DIDEVICEIMAGEINFOHEADERW</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSizeImageInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcViews</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcButtons</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcAxes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwcPOVs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBufferSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBufferUsed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPDIDEVICEIMAGEINFOW</name></type> <name>lprgImageInfoArray</name></decl>;</decl_stmt>

}</block></struct></type> <name>DIDEVICEIMAGEINFOHEADERW</name><operator>,</operator> *<name>LPDIDEVICEIMAGEINFOHEADERW</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>DIDEVICEIMAGEINFOHEADERW</name> <modifier>*</modifier></type><name>LPCDIDEVICEIMAGEINFOHEADERW</name>;</typedef>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>DIDEVICEIMAGEINFOHEADER</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPDIDEVICEIMAGEINFOHEADER</argument>)</argument_list></macro>

<macro><name>DECL_WINELIB_TYPE_AW</name><argument_list>(<argument>LPCDIDEVICEIMAGEINFOHEADER</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal><operator>)</operator></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInputEffect</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInputEffect</argument>,<argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name><operator>,</operator> <name>DWORD</name><operator>,</operator> <name>REFGUID</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetEffectGuid</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPGUID</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetParameters</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFECT</name><operator>,</operator> <name>DWORD</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetParameters</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCDIEFFECT</name><operator>,</operator> <name>DWORD</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Start</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name><operator>,</operator> <name>DWORD</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Stop</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetEffectStatus</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDWORD</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Download</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Unload</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Escape</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFESCAPE</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Initialize(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_GetEffectGuid</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetEffectGuid(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_GetParameters</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetParameters(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_SetParameters</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetParameters(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Start</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Start(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Stop</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Stop(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_GetEffectStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetEffectStatus(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Download</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Download(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Unload</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Unload(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Escape</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Escape(p,a)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Initialize(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_GetEffectGuid</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetEffectGuid(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_GetParameters</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetParameters(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_SetParameters</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetParameters(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Start</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Start(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Stop</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Stop()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_GetEffectStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetEffectStatus(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Download</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Download()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Unload</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Unload()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputEffect_Escape</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Escape(a)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInputDeviceA</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInputDeviceA</argument>,<argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetCapabilities</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVCAPS</name> <name>lpDIDevCaps</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMDEVICEOBJECTSCALLBACKA</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPCDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Acquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Unacquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbData</name><operator>,</operator> <name>LPVOID</name> <name>lpvData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetDataFormat</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCDIDATAFORMAT</name> <name>lpdf</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetEventNotification</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HANDLE</name> <name>hEvent</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetCooperativeLevel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwnd</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetObjectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEOBJECTINSTANCEA</name> <name>pdidoi</name><operator>,</operator> <name>DWORD</name> <name>dwObj</name><operator>,</operator> <name>DWORD</name> <name>dwHow</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEINSTANCEA</name> <name>pdidi</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInputDeviceW</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInputDeviceW</argument>,<argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetCapabilities</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVCAPS</name> <name>lpDIDevCaps</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMDEVICEOBJECTSCALLBACKW</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPCDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Acquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Unacquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbData</name><operator>,</operator> <name>LPVOID</name> <name>lpvData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetDataFormat</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCDIDATAFORMAT</name> <name>lpdf</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetEventNotification</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HANDLE</name> <name>hEvent</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetCooperativeLevel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwnd</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetObjectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEOBJECTINSTANCEW</name> <name>pdidoi</name><operator>,</operator> <name>DWORD</name> <name>dwObj</name><operator>,</operator> <name>DWORD</name> <name>dwHow</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEINSTANCEW</name> <name>pdidi</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_GetCapabilities</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetCapabilities(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_EnumObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumObjects(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_GetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetProperty(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_SetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetProperty(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_Acquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Acquire(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_Unacquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Unacquire(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_GetDeviceState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceState(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_GetDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_SetDataFormat</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetDataFormat(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_SetEventNotification</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetEventNotification(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_SetCooperativeLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetCooperativeLevel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_GetObjectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetObjectInfo(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_GetDeviceInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceInfo(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;RunControlPanel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Initialize(p,a,b,c)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_GetCapabilities</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetCapabilities(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_EnumObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumObjects(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_GetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetProperty(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_SetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetProperty(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_Acquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Acquire()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_Unacquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Unacquire()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_GetDeviceState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceState(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_GetDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_SetDataFormat</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetDataFormat(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_SetEventNotification</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetEventNotification(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_SetCooperativeLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetCooperativeLevel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_GetObjectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetObjectInfo(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_GetDeviceInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceInfo(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;RunControlPanel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Initialize(a,b,c)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal><operator>)</operator></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInputDevice2A</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInputDevice2A</argument>,<argument>IDirectInputDeviceA</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetCapabilities</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVCAPS</name> <name>lpDIDevCaps</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMDEVICEOBJECTSCALLBACKA</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPCDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Acquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Unacquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbData</name><operator>,</operator> <name>LPVOID</name> <name>lpvData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetDataFormat</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCDIDATAFORMAT</name> <name>lpdf</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetEventNotification</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HANDLE</name> <name>hEvent</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetCooperativeLevel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwnd</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetObjectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEOBJECTINSTANCEA</name> <name>pdidoi</name><operator>,</operator> <name>DWORD</name> <name>dwObj</name><operator>,</operator> <name>DWORD</name> <name>dwHow</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEINSTANCEA</name> <name>pdidi</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateEffect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPCDIEFFECT</name> <name>lpeff</name><operator>,</operator> <name>LPDIRECTINPUTEFFECT</name> <operator>*</operator><name>ppdeff</name><operator>,</operator> <name>LPUNKNOWN</name> <name>punkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumEffects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMEFFECTSCALLBACKA</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwEffType</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetEffectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFECTINFOA</name> <name>pdei</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetForceFeedbackState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDWORD</name> <name>pdwOut</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SendForceFeedbackCommand</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumCreatedEffectObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMCREATEDEFFECTOBJECTSCALLBACK</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>fl</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Escape</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFESCAPE</name> <name>pesc</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Poll</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SendDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPCDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>fl</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInputDevice2W</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInputDevice2W</argument>,<argument>IDirectInputDeviceW</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetCapabilities</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVCAPS</name> <name>lpDIDevCaps</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMDEVICEOBJECTSCALLBACKW</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPCDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Acquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Unacquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbData</name><operator>,</operator> <name>LPVOID</name> <name>lpvData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetDataFormat</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCDIDATAFORMAT</name> <name>lpdf</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetEventNotification</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HANDLE</name> <name>hEvent</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetCooperativeLevel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwnd</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetObjectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEOBJECTINSTANCEW</name> <name>pdidoi</name><operator>,</operator> <name>DWORD</name> <name>dwObj</name><operator>,</operator> <name>DWORD</name> <name>dwHow</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEINSTANCEW</name> <name>pdidi</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateEffect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPCDIEFFECT</name> <name>lpeff</name><operator>,</operator> <name>LPDIRECTINPUTEFFECT</name> <operator>*</operator><name>ppdeff</name><operator>,</operator> <name>LPUNKNOWN</name> <name>punkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumEffects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMEFFECTSCALLBACKW</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwEffType</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetEffectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFECTINFOW</name> <name>pdei</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetForceFeedbackState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDWORD</name> <name>pdwOut</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SendForceFeedbackCommand</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumCreatedEffectObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMCREATEDEFFECTOBJECTSCALLBACK</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>fl</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Escape</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFESCAPE</name> <name>pesc</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Poll</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SendDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPCDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>fl</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetCapabilities</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetCapabilities(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_EnumObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumObjects(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetProperty(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_SetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetProperty(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_Acquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Acquire(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_Unacquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Unacquire(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetDeviceState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceState(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_SetDataFormat</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetDataFormat(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_SetEventNotification</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetEventNotification(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_SetCooperativeLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetCooperativeLevel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetObjectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetObjectInfo(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetDeviceInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceInfo(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;RunControlPanel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Initialize(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_CreateEffect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateEffect(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_EnumEffects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumEffects(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetEffectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetEffectInfo(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetForceFeedbackState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetForceFeedbackState(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_SendForceFeedbackCommand</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SendForceFeedbackCommand(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_EnumCreatedEffectObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumCreatedEffectObjects(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_Escape</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Escape(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_Poll</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Poll(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_SendDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SendDeviceData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetCapabilities</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetCapabilities(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_EnumObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumObjects(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetProperty(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_SetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetProperty(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_Acquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Acquire()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_Unacquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Unacquire()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetDeviceState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceState(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_SetDataFormat</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetDataFormat(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_SetEventNotification</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetEventNotification(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_SetCooperativeLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetCooperativeLevel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetObjectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetObjectInfo(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetDeviceInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceInfo(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;RunControlPanel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Initialize(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_CreateEffect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateEffect(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_EnumEffects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumEffects(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetEffectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetEffectInfo(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_GetForceFeedbackState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetForceFeedbackState(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_SendForceFeedbackCommand</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SendForceFeedbackCommand(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_EnumCreatedEffectObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumCreatedEffectObjects(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_Escape</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Escape(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_Poll</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Poll()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice2_SendDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SendDeviceData(a,b,c,d)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0700</literal></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInputDevice7A</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInputDevice7A</argument>,<argument>IDirectInputDevice2A</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetCapabilities</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVCAPS</name> <name>lpDIDevCaps</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMDEVICEOBJECTSCALLBACKA</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPCDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Acquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Unacquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbData</name><operator>,</operator> <name>LPVOID</name> <name>lpvData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetDataFormat</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCDIDATAFORMAT</name> <name>lpdf</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetEventNotification</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HANDLE</name> <name>hEvent</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetCooperativeLevel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwnd</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetObjectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEOBJECTINSTANCEA</name> <name>pdidoi</name><operator>,</operator> <name>DWORD</name> <name>dwObj</name><operator>,</operator> <name>DWORD</name> <name>dwHow</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEINSTANCEA</name> <name>pdidi</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateEffect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPCDIEFFECT</name> <name>lpeff</name><operator>,</operator> <name>LPDIRECTINPUTEFFECT</name> <operator>*</operator><name>ppdeff</name><operator>,</operator> <name>LPUNKNOWN</name> <name>punkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumEffects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMEFFECTSCALLBACKA</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwEffType</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetEffectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFECTINFOA</name> <name>pdei</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetForceFeedbackState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDWORD</name> <name>pdwOut</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SendForceFeedbackCommand</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumCreatedEffectObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMCREATEDEFFECTOBJECTSCALLBACK</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>fl</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Escape</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFESCAPE</name> <name>pesc</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Poll</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SendDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPCDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>fl</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumEffectsInFile</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCSTR</name> <name>lpszFileName</name><operator>,</operator><name>LPDIENUMEFFECTSINFILECALLBACK</name> <name>pec</name><operator>,</operator><name>LPVOID</name> <name>pvRef</name><operator>,</operator><name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>WriteEffectToFile</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCSTR</name> <name>lpszFileName</name><operator>,</operator><name>DWORD</name> <name>dwEntries</name><operator>,</operator><name>LPDIFILEEFFECT</name> <name>rgDiFileEft</name><operator>,</operator><name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInputDevice7W</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInputDevice7W</argument>,<argument>IDirectInputDevice2W</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetCapabilities</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVCAPS</name> <name>lpDIDevCaps</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMDEVICEOBJECTSCALLBACKW</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPCDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Acquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Unacquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbData</name><operator>,</operator> <name>LPVOID</name> <name>lpvData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetDataFormat</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCDIDATAFORMAT</name> <name>lpdf</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetEventNotification</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HANDLE</name> <name>hEvent</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetCooperativeLevel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwnd</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetObjectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEOBJECTINSTANCEW</name> <name>pdidoi</name><operator>,</operator> <name>DWORD</name> <name>dwObj</name><operator>,</operator> <name>DWORD</name> <name>dwHow</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEINSTANCEW</name> <name>pdidi</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateEffect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPCDIEFFECT</name> <name>lpeff</name><operator>,</operator> <name>LPDIRECTINPUTEFFECT</name> <operator>*</operator><name>ppdeff</name><operator>,</operator> <name>LPUNKNOWN</name> <name>punkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumEffects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMEFFECTSCALLBACKW</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwEffType</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetEffectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFECTINFOW</name> <name>pdei</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetForceFeedbackState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDWORD</name> <name>pdwOut</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SendForceFeedbackCommand</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumCreatedEffectObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMCREATEDEFFECTOBJECTSCALLBACK</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>fl</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Escape</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFESCAPE</name> <name>pesc</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Poll</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SendDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPCDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>fl</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumEffectsInFile</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCWSTR</name> <name>lpszFileName</name><operator>,</operator><name>LPDIENUMEFFECTSINFILECALLBACK</name> <name>pec</name><operator>,</operator><name>LPVOID</name> <name>pvRef</name><operator>,</operator><name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>WriteEffectToFile</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCWSTR</name> <name>lpszFileName</name><operator>,</operator><name>DWORD</name> <name>dwEntries</name><operator>,</operator><name>LPDIFILEEFFECT</name> <name>rgDiFileEft</name><operator>,</operator><name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetCapabilities</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetCapabilities(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_EnumObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumObjects(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetProperty(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_SetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetProperty(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_Acquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Acquire(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_Unacquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Unacquire(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetDeviceState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceState(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_SetDataFormat</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetDataFormat(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_SetEventNotification</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetEventNotification(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_SetCooperativeLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetCooperativeLevel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetObjectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetObjectInfo(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetDeviceInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceInfo(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;RunControlPanel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Initialize(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_CreateEffect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateEffect(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_EnumEffects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumEffects(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetEffectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetEffectInfo(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetForceFeedbackState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetForceFeedbackState(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_SendForceFeedbackCommand</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SendForceFeedbackCommand(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_EnumCreatedEffectObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumCreatedEffectObjects(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_Escape</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Escape(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_Poll</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Poll(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_SendDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SendDeviceData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_EnumEffectsInFile</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumEffectsInFile(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_WriteEffectToFile</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;WriteEffectToFile(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetCapabilities</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetCapabilities(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_EnumObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumObjects(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetProperty(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_SetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetProperty(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_Acquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Acquire()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_Unacquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Unacquire()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetDeviceState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceState(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_SetDataFormat</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetDataFormat(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_SetEventNotification</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetEventNotification(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_SetCooperativeLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetCooperativeLevel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetObjectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetObjectInfo(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetDeviceInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceInfo(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;RunControlPanel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Initialize(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_CreateEffect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateEffect(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_EnumEffects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumEffects(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetEffectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetEffectInfo(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_GetForceFeedbackState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetForceFeedbackState(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_SendForceFeedbackCommand</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SendForceFeedbackCommand(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_EnumCreatedEffectObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumCreatedEffectObjects(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_Escape</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Escape(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_Poll</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Poll()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_SendDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SendDeviceData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_EnumEffectsInFile</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumEffectsInFile(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice7_WriteEffectToFile</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;WriteEffectToFile(a,b,c,d)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInputDevice8A</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInputDevice8A</argument>,<argument>IDirectInputDevice7A</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetCapabilities</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVCAPS</name> <name>lpDIDevCaps</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMDEVICEOBJECTSCALLBACKA</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPCDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Acquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Unacquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbData</name><operator>,</operator> <name>LPVOID</name> <name>lpvData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetDataFormat</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCDIDATAFORMAT</name> <name>lpdf</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetEventNotification</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HANDLE</name> <name>hEvent</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetCooperativeLevel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwnd</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetObjectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEOBJECTINSTANCEA</name> <name>pdidoi</name><operator>,</operator> <name>DWORD</name> <name>dwObj</name><operator>,</operator> <name>DWORD</name> <name>dwHow</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEINSTANCEA</name> <name>pdidi</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateEffect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPCDIEFFECT</name> <name>lpeff</name><operator>,</operator> <name>LPDIRECTINPUTEFFECT</name> <operator>*</operator><name>ppdeff</name><operator>,</operator> <name>LPUNKNOWN</name> <name>punkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumEffects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMEFFECTSCALLBACKA</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwEffType</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetEffectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFECTINFOA</name> <name>pdei</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetForceFeedbackState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDWORD</name> <name>pdwOut</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SendForceFeedbackCommand</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumCreatedEffectObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMCREATEDEFFECTOBJECTSCALLBACK</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>fl</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Escape</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFESCAPE</name> <name>pesc</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Poll</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SendDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPCDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>fl</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumEffectsInFile</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCSTR</name> <name>lpszFileName</name><operator>,</operator><name>LPDIENUMEFFECTSINFILECALLBACK</name> <name>pec</name><operator>,</operator><name>LPVOID</name> <name>pvRef</name><operator>,</operator><name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>WriteEffectToFile</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCSTR</name> <name>lpszFileName</name><operator>,</operator><name>DWORD</name> <name>dwEntries</name><operator>,</operator><name>LPDIFILEEFFECT</name> <name>rgDiFileEft</name><operator>,</operator><name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>BuildActionMap</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIACTIONFORMATA</name> <name>lpdiaf</name><operator>,</operator> <name>LPCSTR</name> <name>lpszUserName</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetActionMap</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIACTIONFORMATA</name> <name>lpdiaf</name><operator>,</operator> <name>LPCSTR</name> <name>lpszUserName</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetImageInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEIMAGEINFOHEADERA</name> <name>lpdiDevImageInfoHeader</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInputDevice8W</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInputDevice8W</argument>,<argument>IDirectInputDevice7W</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetCapabilities</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVCAPS</name> <name>lpDIDevCaps</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMDEVICEOBJECTSCALLBACKW</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetProperty</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidProp</name><operator>,</operator> <name>LPCDIPROPHEADER</name> <name>pdiph</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Acquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Unacquire</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbData</name><operator>,</operator> <name>LPVOID</name> <name>lpvData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetDataFormat</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCDIDATAFORMAT</name> <name>lpdf</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetEventNotification</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HANDLE</name> <name>hEvent</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetCooperativeLevel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwnd</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetObjectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEOBJECTINSTANCEW</name> <name>pdidoi</name><operator>,</operator> <name>DWORD</name> <name>dwObj</name><operator>,</operator> <name>DWORD</name> <name>dwHow</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEINSTANCEW</name> <name>pdidi</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateEffect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPCDIEFFECT</name> <name>lpeff</name><operator>,</operator> <name>LPDIRECTINPUTEFFECT</name> <operator>*</operator><name>ppdeff</name><operator>,</operator> <name>LPUNKNOWN</name> <name>punkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumEffects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMEFFECTSCALLBACKW</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwEffType</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetEffectInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFECTINFOW</name> <name>pdei</name><operator>,</operator> <name>REFGUID</name> <name>rguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetForceFeedbackState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDWORD</name> <name>pdwOut</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SendForceFeedbackCommand</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumCreatedEffectObjects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIENUMCREATEDEFFECTOBJECTSCALLBACK</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>fl</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Escape</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIEFFESCAPE</name> <name>pesc</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Poll</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SendDeviceData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>cbObjectData</name><operator>,</operator> <name>LPCDIDEVICEOBJECTDATA</name> <name>rgdod</name><operator>,</operator> <name>LPDWORD</name> <name>pdwInOut</name><operator>,</operator> <name>DWORD</name> <name>fl</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumEffectsInFile</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCWSTR</name> <name>lpszFileName</name><operator>,</operator><name>LPDIENUMEFFECTSINFILECALLBACK</name> <name>pec</name><operator>,</operator><name>LPVOID</name> <name>pvRef</name><operator>,</operator><name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>WriteEffectToFile</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCWSTR</name> <name>lpszFileName</name><operator>,</operator><name>DWORD</name> <name>dwEntries</name><operator>,</operator><name>LPDIFILEEFFECT</name> <name>rgDiFileEft</name><operator>,</operator><name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>BuildActionMap</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIACTIONFORMATW</name> <name>lpdiaf</name><operator>,</operator> <name>LPCWSTR</name> <name>lpszUserName</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetActionMap</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIACTIONFORMATW</name> <name>lpdiaf</name><operator>,</operator> <name>LPCWSTR</name> <name>lpszUserName</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetImageInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDIDEVICEIMAGEINFOHEADERW</name> <name>lpdiDevImageInfoHeader</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetCapabilities</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetCapabilities(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_EnumObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumObjects(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetProperty(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetProperty(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_Acquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Acquire(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_Unacquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Unacquire(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetDeviceState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceState(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SetDataFormat</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetDataFormat(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SetEventNotification</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetEventNotification(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SetCooperativeLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetCooperativeLevel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetObjectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetObjectInfo(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetDeviceInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceInfo(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;RunControlPanel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Initialize(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_CreateEffect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateEffect(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_EnumEffects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumEffects(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetEffectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetEffectInfo(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetForceFeedbackState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetForceFeedbackState(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SendForceFeedbackCommand</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SendForceFeedbackCommand(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_EnumCreatedEffectObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumCreatedEffectObjects(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_Escape</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Escape(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_Poll</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Poll(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SendDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SendDeviceData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_EnumEffectsInFile</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumEffectsInFile(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_WriteEffectToFile</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;WriteEffectToFile(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_BuildActionMap</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;BuildActionMap(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SetActionMap</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetActionMap(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetImageInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetImageInfo(p,a)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetCapabilities</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetCapabilities(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_EnumObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumObjects(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetProperty(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SetProperty</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetProperty(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_Acquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Acquire()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_Unacquire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Unacquire()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetDeviceState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceState(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SetDataFormat</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetDataFormat(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SetEventNotification</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetEventNotification(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SetCooperativeLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetCooperativeLevel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetObjectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetObjectInfo(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetDeviceInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceInfo(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;RunControlPanel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Initialize(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_CreateEffect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateEffect(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_EnumEffects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumEffects(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetEffectInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetEffectInfo(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetForceFeedbackState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetForceFeedbackState(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SendForceFeedbackCommand</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SendForceFeedbackCommand(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_EnumCreatedEffectObjects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumCreatedEffectObjects(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_Escape</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Escape(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_Poll</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Poll()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SendDeviceData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SendDeviceData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_EnumEffectsInFile</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumEffectsInFile(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_WriteEffectToFile</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;WriteEffectToFile(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_BuildActionMap</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;BuildActionMap(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_SetActionMap</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetActionMap(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInputDevice8_GetImageInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetImageInfo(a)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><struct>struct <name>DIMOUSESTATE</name> <block>{

<decl_stmt><decl><type><name>LONG</name></type> <name>lX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lZ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>rgbButtons</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIMOUSESTATE</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0700</literal></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>DIMOUSESTATE2</name> <block>{

<decl_stmt><decl><type><name>LONG</name></type> <name>lX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lZ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>rgbButtons</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DIMOUSESTATE2</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMOFS_X</name></cpp:macro> <cpp:value>FIELD_OFFSET(DIMOUSESTATE, lX)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMOFS_Y</name></cpp:macro> <cpp:value>FIELD_OFFSET(DIMOUSESTATE, lY)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMOFS_Z</name></cpp:macro> <cpp:value>FIELD_OFFSET(DIMOUSESTATE, lZ)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMOFS_BUTTON0</name></cpp:macro> <cpp:value>(FIELD_OFFSET(DIMOUSESTATE, rgbButtons) + 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMOFS_BUTTON1</name></cpp:macro> <cpp:value>(FIELD_OFFSET(DIMOUSESTATE, rgbButtons) + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMOFS_BUTTON2</name></cpp:macro> <cpp:value>(FIELD_OFFSET(DIMOUSESTATE, rgbButtons) + 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMOFS_BUTTON3</name></cpp:macro> <cpp:value>(FIELD_OFFSET(DIMOUSESTATE, rgbButtons) + 3)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0700</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMOFS_BUTTON4</name></cpp:macro> <cpp:value>(FIELD_OFFSET(DIMOUSESTATE2, rgbButtons) + 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMOFS_BUTTON5</name></cpp:macro> <cpp:value>(FIELD_OFFSET(DIMOUSESTATE2, rgbButtons) + 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMOFS_BUTTON6</name></cpp:macro> <cpp:value>(FIELD_OFFSET(DIMOUSESTATE2, rgbButtons) + 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMOFS_BUTTON7</name></cpp:macro> <cpp:value>(FIELD_OFFSET(DIMOUSESTATE2, rgbButtons) + 7)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>DIDATAFORMAT</name></type> <name>c_dfDIMouse</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0700</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>DIDATAFORMAT</name></type> <name>c_dfDIMouse2</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>DIDATAFORMAT</name></type> <name>c_dfDIKeyboard</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0500</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>DIDATAFORMAT</name></type> <name>c_dfDIJoystick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>DIDATAFORMAT</name></type> <name>c_dfDIJoystick2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInputA</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInputA</argument>,<argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPDIRECTINPUTDEVICEA</name> <operator>*</operator><name>lplpDirectInputDevice</name><operator>,</operator> <name>LPUNKNOWN</name> <name>pUnkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumDevices</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwDevType</name><operator>,</operator> <name>LPDIENUMDEVICESCALLBACKA</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceStatus</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInputW</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInputW</argument>,<argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPDIRECTINPUTDEVICEW</name> <operator>*</operator><name>lplpDirectInputDevice</name><operator>,</operator> <name>LPUNKNOWN</name> <name>pUnkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumDevices</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwDevType</name><operator>,</operator> <name>LPDIENUMDEVICESCALLBACKW</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceStatus</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_CreateDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateDevice(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_EnumDevices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumDevices(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_GetDeviceStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceStatus(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;RunControlPanel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Initialize(p,a,b)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_CreateDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateDevice(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_EnumDevices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumDevices(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_GetDeviceStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceStatus(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;RunControlPanel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Initialize(a,b)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInput2A</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInput2A</argument>,<argument>IDirectInputA</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPDIRECTINPUTDEVICEA</name> <operator>*</operator><name>lplpDirectInputDevice</name><operator>,</operator> <name>LPUNKNOWN</name> <name>pUnkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumDevices</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwDevType</name><operator>,</operator> <name>LPDIENUMDEVICESCALLBACKA</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceStatus</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FindDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPCSTR</name> <name>pszName</name><operator>,</operator> <name>LPGUID</name> <name>pguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInput2W</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInput2W</argument>,<argument>IDirectInputW</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPDIRECTINPUTDEVICEW</name> <operator>*</operator><name>lplpDirectInputDevice</name><operator>,</operator> <name>LPUNKNOWN</name> <name>pUnkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumDevices</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwDevType</name><operator>,</operator> <name>LPDIENUMDEVICESCALLBACKW</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceStatus</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FindDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPCWSTR</name> <name>pszName</name><operator>,</operator> <name>LPGUID</name> <name>pguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_CreateDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateDevice(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_EnumDevices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumDevices(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_GetDeviceStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceStatus(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;RunControlPanel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Initialize(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_FindDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;FindDevice(p,a,b,c)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_CreateDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateDevice(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_EnumDevices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumDevices(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_GetDeviceStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceStatus(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;RunControlPanel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Initialize(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput2_FindDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;FindDevice(a,b,c)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInput7A</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInput7A</argument>,<argument>IDirectInput2A</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPDIRECTINPUTDEVICEA</name> <operator>*</operator><name>lplpDirectInputDevice</name><operator>,</operator> <name>LPUNKNOWN</name> <name>pUnkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumDevices</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwDevType</name><operator>,</operator> <name>LPDIENUMDEVICESCALLBACKA</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceStatus</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FindDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPCSTR</name> <name>pszName</name><operator>,</operator> <name>LPGUID</name> <name>pguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateDeviceEx</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>LPVOID</name> <operator>*</operator><name>pvOut</name><operator>,</operator> <name>LPUNKNOWN</name> <name>lpUnknownOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInput7W</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInput7W</argument>,<argument>IDirectInput2W</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPDIRECTINPUTDEVICEW</name> <operator>*</operator><name>lplpDirectInputDevice</name><operator>,</operator> <name>LPUNKNOWN</name> <name>pUnkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumDevices</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwDevType</name><operator>,</operator> <name>LPDIENUMDEVICESCALLBACKW</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceStatus</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FindDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPCWSTR</name> <name>pszName</name><operator>,</operator> <name>LPGUID</name> <name>pguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateDeviceEx</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>LPVOID</name> <operator>*</operator><name>pvOut</name><operator>,</operator> <name>LPUNKNOWN</name> <name>lpUnknownOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_CreateDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateDevice(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_EnumDevices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumDevices(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_GetDeviceStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceStatus(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;RunControlPanel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Initialize(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_FindDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;FindDevice(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_CreateDeviceEx</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateDeviceEx(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_CreateDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateDevice(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_EnumDevices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumDevices(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_GetDeviceStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceStatus(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;RunControlPanel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Initialize(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_FindDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;FindDevice(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput7_CreateDeviceEx</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateDeviceEx(a,b,c,d)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInput8A</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInput8A</argument>,<argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPDIRECTINPUTDEVICE8A</name> <operator>*</operator><name>lplpDirectInputDevice</name><operator>,</operator> <name>LPUNKNOWN</name> <name>pUnkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumDevices</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwDevType</name><operator>,</operator> <name>LPDIENUMDEVICESCALLBACKA</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceStatus</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FindDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPCSTR</name> <name>pszName</name><operator>,</operator> <name>LPGUID</name> <name>pguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumDevicesBySemantics</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCSTR</name> <name>ptszUserName</name><operator>,</operator> <name>LPDIACTIONFORMATA</name> <name>lpdiActionFormat</name><operator>,</operator> <name>LPDIENUMDEVICESBYSEMANTICSCBA</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>ConfigureDevices</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDICONFIGUREDEVICESCALLBACK</name> <name>lpdiCallback</name><operator>,</operator> <name>LPDICONFIGUREDEVICESPARAMSA</name> <name>lpdiCDParams</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>,</operator> <name>LPVOID</name> <name>pvRefData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirectInput8W</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirectInput8W</argument>,<argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HRESULT</argument>,<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObject</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPDIRECTINPUTDEVICE8W</name> <operator>*</operator><name>lplpDirectInputDevice</name><operator>,</operator> <name>LPUNKNOWN</name> <name>pUnkOuter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumDevices</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>dwDevType</name><operator>,</operator> <name>LPDIENUMDEVICESCALLBACKW</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceStatus</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RunControlPanel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HWND</name> <name>hwndOwner</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Initialize</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>HINSTANCE</name> <name>hinst</name><operator>,</operator> <name>DWORD</name> <name>dwVersion</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FindDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>rguid</name><operator>,</operator> <name>LPCWSTR</name> <name>pszName</name><operator>,</operator> <name>LPGUID</name> <name>pguidInstance</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumDevicesBySemantics</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPCWSTR</name> <name>ptszUserName</name><operator>,</operator> <name>LPDIACTIONFORMATW</name> <name>lpdiActionFormat</name><operator>,</operator> <name>LPDIENUMDEVICESBYSEMANTICSCBW</name> <name>lpCallback</name><operator>,</operator> <name>LPVOID</name> <name>pvRef</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>ConfigureDevices</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>LPDICONFIGUREDEVICESCALLBACK</name> <name>lpdiCallback</name><operator>,</operator> <name>LPDICONFIGUREDEVICESPARAMSW</name> <name>lpdiCDParams</name><operator>,</operator> <name>DWORD</name> <name>dwFlags</name><operator>,</operator> <name>LPVOID</name> <name>pvRefData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_CreateDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateDevice(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_EnumDevices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumDevices(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_GetDeviceStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceStatus(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;RunControlPanel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Initialize(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_FindDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;FindDevice(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_EnumDevicesBySemantics</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumDevicesBySemantics(p,a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_ConfigureDevices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;ConfigureDevices(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_CreateDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateDevice(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_EnumDevices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumDevices(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_GetDeviceStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceStatus(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_RunControlPanel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;RunControlPanel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_Initialize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Initialize(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_FindDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;FindDevice(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_EnumDevicesBySemantics</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumDevicesBySemantics(a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirectInput8_ConfigureDevices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;ConfigureDevices(a,b,c,d)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIRECTINPUT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal></expr></cpp:if>

<function_decl><type><name>HRESULT</name> <name>WINAPI</name></type> <name>DirectInput8Create</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type></decl></parameter>,<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>REFIID</name></type></decl></parameter>,<parameter><decl><type><name>LPVOID</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>LPUNKNOWN</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function_decl><type><name>HRESULT</name> <name>WINAPI</name></type> <name>DirectInputCreateA</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type></decl></parameter>,<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>LPDIRECTINPUTA</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>LPUNKNOWN</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HRESULT</name> <name>WINAPI</name></type> <name>DirectInputCreateW</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type></decl></parameter>,<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>LPDIRECTINPUTW</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>LPUNKNOWN</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DirectInputCreate</name></cpp:macro> <cpp:value>WINELIB_NAME_AW(DirectInputCreate)</cpp:value></cpp:define>

<function_decl><type><name>HRESULT</name> <name>WINAPI</name></type> <name>DirectInputCreateEx</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type></decl></parameter>,<parameter><decl><type><name>DWORD</name></type></decl></parameter>,<parameter><decl><type><name>REFIID</name></type></decl></parameter>,<parameter><decl><type><name>LPVOID</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>LPUNKNOWN</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
