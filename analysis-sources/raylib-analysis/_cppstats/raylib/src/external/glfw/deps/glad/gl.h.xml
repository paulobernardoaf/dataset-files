<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\deps\glad\gl.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__gl_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> OpenGL header already included (API: gl), remove previous include!</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__gl_h_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_GL</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_PLATFORM_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_PLATFORM_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__WIN32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_WIN32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_WIN32</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_PLATFORM_APPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_APPLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_APPLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_PLATFORM_EMSCRIPTEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__EMSCRIPTEN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_EMSCRIPTEN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_EMSCRIPTEN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_INTERNAL_HAVE_WINAPIFAMILY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_include</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_include</name><argument_list>(<argument><expr><operator>&lt;</operator><name><name>winapifamily</name><operator>.</operator><name>h</name></name><operator>&gt;</operator></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_INTERNAL_HAVE_WINAPIFAMILY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1700</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>_USING_V110_SDK71_</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_INTERNAL_HAVE_WINAPIFAMILY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_INTERNAL_HAVE_WINAPIFAMILY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winapifamily.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>WINAPI_FAMILY_PARTITION</name><argument_list>(<argument><expr><name>WINAPI_PARTITION_DESKTOP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>WINAPI_FAMILY_PARTITION</name><argument_list>(<argument><expr><name>WINAPI_PARTITION_APP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_UWP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_UWP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_GNUC_EXTENSION</name></cpp:macro> <cpp:value>__extension__</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_GNUC_EXTENSION</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_API_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_API_CALL_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GLAD_PLATFORM_WIN32</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_API_CALL_EXPORT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>__attribute__ ((dllexport)) extern</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>__declspec(dllexport) extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>__attribute__ ((dllimport)) extern</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>__declspec(dllimport) extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLAD_API_CALL_EXPORT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>__attribute__ ((visibility ("default"))) extern</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_PTR</name></cpp:macro> <cpp:value>APIENTRY</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GLAD_PLATFORM_WIN32</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_PTR</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_PTR</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>GLAD_API_CALL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAPIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPIENTRY</name></cpp:macro> <cpp:value>GLAD_API_PTR</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_MAKE_VERSION</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(major * 10000 + minor)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_VERSION_MAJOR</name><parameter_list>(<parameter><type><name>version</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(version / 10000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_VERSION_MINOR</name><parameter_list>(<parameter><type><name>version</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(version % 10000)</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GLADapiproc</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLADapiproc</name></type> (<modifier>*</modifier><name>GLADloadfunc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLADapiproc</name></type> (<modifier>*</modifier><name>GLADuserptrloadfunc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userptr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GLADprecallback</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>GLADapiproc</name></type> <name>apiproc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len_args</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GLADpostcallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>GLADapiproc</name></type> <name>apiproc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len_args</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_2D</name></cpp:macro> <cpp:value>0x0600</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_2_BYTES</name></cpp:macro> <cpp:value>0x1407</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_3D</name></cpp:macro> <cpp:value>0x0601</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_3D_COLOR</name></cpp:macro> <cpp:value>0x0602</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_3D_COLOR_TEXTURE</name></cpp:macro> <cpp:value>0x0603</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_3_BYTES</name></cpp:macro> <cpp:value>0x1408</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4D_COLOR_TEXTURE</name></cpp:macro> <cpp:value>0x0604</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4_BYTES</name></cpp:macro> <cpp:value>0x1409</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACCUM</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACCUM_ALPHA_BITS</name></cpp:macro> <cpp:value>0x0D5B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACCUM_BLUE_BITS</name></cpp:macro> <cpp:value>0x0D5A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACCUM_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACCUM_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0B80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACCUM_GREEN_BITS</name></cpp:macro> <cpp:value>0x0D59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACCUM_RED_BITS</name></cpp:macro> <cpp:value>0x0D58</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_ATTRIBUTES</name></cpp:macro> <cpp:value>0x8B89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_ATTRIBUTE_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8B8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_TEXTURE</name></cpp:macro> <cpp:value>0x84E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORMS</name></cpp:macro> <cpp:value>0x8B86</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A35</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8B87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ADD</name></cpp:macro> <cpp:value>0x0104</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ADD_SIGNED</name></cpp:macro> <cpp:value>0x8574</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALIASED_LINE_WIDTH_RANGE</name></cpp:macro> <cpp:value>0x846E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALIASED_POINT_SIZE_RANGE</name></cpp:macro> <cpp:value>0x846D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALL_ATTRIB_BITS</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA</name></cpp:macro> <cpp:value>0x1906</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA12</name></cpp:macro> <cpp:value>0x803D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16</name></cpp:macro> <cpp:value>0x803E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA4</name></cpp:macro> <cpp:value>0x803B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA8</name></cpp:macro> <cpp:value>0x803C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_BIAS</name></cpp:macro> <cpp:value>0x0D1D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_BITS</name></cpp:macro> <cpp:value>0x0D55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_INTEGER</name></cpp:macro> <cpp:value>0x8D97</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_SCALE</name></cpp:macro> <cpp:value>0x0D1C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_TEST</name></cpp:macro> <cpp:value>0x0BC0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_TEST_FUNC</name></cpp:macro> <cpp:value>0x0BC1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_TEST_REF</name></cpp:macro> <cpp:value>0x0BC2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALREADY_SIGNALED</name></cpp:macro> <cpp:value>0x911A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALWAYS</name></cpp:macro> <cpp:value>0x0207</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMBIENT</name></cpp:macro> <cpp:value>0x1200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMBIENT_AND_DIFFUSE</name></cpp:macro> <cpp:value>0x1602</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AND</name></cpp:macro> <cpp:value>0x1501</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AND_INVERTED</name></cpp:macro> <cpp:value>0x1504</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AND_REVERSE</name></cpp:macro> <cpp:value>0x1502</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANY_SAMPLES_PASSED</name></cpp:macro> <cpp:value>0x8C2F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER</name></cpp:macro> <cpp:value>0x8892</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8894</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTACHED_SHADERS</name></cpp:macro> <cpp:value>0x8B85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTRIB_STACK_DEPTH</name></cpp:macro> <cpp:value>0x0BB0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AUTO_NORMAL</name></cpp:macro> <cpp:value>0x0D80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AUX0</name></cpp:macro> <cpp:value>0x0409</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AUX1</name></cpp:macro> <cpp:value>0x040A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AUX2</name></cpp:macro> <cpp:value>0x040B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AUX3</name></cpp:macro> <cpp:value>0x040C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AUX_BUFFERS</name></cpp:macro> <cpp:value>0x0C00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK</name></cpp:macro> <cpp:value>0x0405</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK_LEFT</name></cpp:macro> <cpp:value>0x0402</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK_RIGHT</name></cpp:macro> <cpp:value>0x0403</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGR</name></cpp:macro> <cpp:value>0x80E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA</name></cpp:macro> <cpp:value>0x80E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA_INTEGER</name></cpp:macro> <cpp:value>0x8D9B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGR_INTEGER</name></cpp:macro> <cpp:value>0x8D9A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BITMAP</name></cpp:macro> <cpp:value>0x1A00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BITMAP_TOKEN</name></cpp:macro> <cpp:value>0x0704</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND</name></cpp:macro> <cpp:value>0x0BE2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_COLOR</name></cpp:macro> <cpp:value>0x8005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST</name></cpp:macro> <cpp:value>0x0BE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_ALPHA</name></cpp:macro> <cpp:value>0x80CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_RGB</name></cpp:macro> <cpp:value>0x80C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_ALPHA</name></cpp:macro> <cpp:value>0x883D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_RGB</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC</name></cpp:macro> <cpp:value>0x0BE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_ALPHA</name></cpp:macro> <cpp:value>0x80CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_RGB</name></cpp:macro> <cpp:value>0x80C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE</name></cpp:macro> <cpp:value>0x1905</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_BIAS</name></cpp:macro> <cpp:value>0x0D1B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_BITS</name></cpp:macro> <cpp:value>0x0D54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_INTEGER</name></cpp:macro> <cpp:value>0x8D96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_SCALE</name></cpp:macro> <cpp:value>0x0D1A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL</name></cpp:macro> <cpp:value>0x8B56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC2</name></cpp:macro> <cpp:value>0x8B57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC3</name></cpp:macro> <cpp:value>0x8B58</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC4</name></cpp:macro> <cpp:value>0x8B59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER</name></cpp:macro> <cpp:value>0x82E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_ACCESS</name></cpp:macro> <cpp:value>0x88BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_ACCESS_FLAGS</name></cpp:macro> <cpp:value>0x911F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAPPED</name></cpp:macro> <cpp:value>0x88BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_LENGTH</name></cpp:macro> <cpp:value>0x9120</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_OFFSET</name></cpp:macro> <cpp:value>0x9121</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_POINTER</name></cpp:macro> <cpp:value>0x88BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8764</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_USAGE</name></cpp:macro> <cpp:value>0x8765</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BYTE</name></cpp:macro> <cpp:value>0x1400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_C3F_V3F</name></cpp:macro> <cpp:value>0x2A24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_C4F_N3F_V3F</name></cpp:macro> <cpp:value>0x2A26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_C4UB_V2F</name></cpp:macro> <cpp:value>0x2A22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_C4UB_V3F</name></cpp:macro> <cpp:value>0x2A23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CCW</name></cpp:macro> <cpp:value>0x0901</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP</name></cpp:macro> <cpp:value>0x2900</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_FRAGMENT_COLOR</name></cpp:macro> <cpp:value>0x891B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_READ_COLOR</name></cpp:macro> <cpp:value>0x891C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_BORDER</name></cpp:macro> <cpp:value>0x812D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_EDGE</name></cpp:macro> <cpp:value>0x812F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_VERTEX_COLOR</name></cpp:macro> <cpp:value>0x891A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLEAR</name></cpp:macro> <cpp:value>0x1500</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIENT_ACTIVE_TEXTURE</name></cpp:macro> <cpp:value>0x84E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIENT_ALL_ATTRIB_BITS</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIENT_ATTRIB_STACK_DEPTH</name></cpp:macro> <cpp:value>0x0BB1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIENT_PIXEL_STORE_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIENT_VERTEX_ARRAY_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE0</name></cpp:macro> <cpp:value>0x3000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE1</name></cpp:macro> <cpp:value>0x3001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE2</name></cpp:macro> <cpp:value>0x3002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE3</name></cpp:macro> <cpp:value>0x3003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE4</name></cpp:macro> <cpp:value>0x3004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE5</name></cpp:macro> <cpp:value>0x3005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE6</name></cpp:macro> <cpp:value>0x3006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE7</name></cpp:macro> <cpp:value>0x3007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_PLANE0</name></cpp:macro> <cpp:value>0x3000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_PLANE1</name></cpp:macro> <cpp:value>0x3001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_PLANE2</name></cpp:macro> <cpp:value>0x3002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_PLANE3</name></cpp:macro> <cpp:value>0x3003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_PLANE4</name></cpp:macro> <cpp:value>0x3004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_PLANE5</name></cpp:macro> <cpp:value>0x3005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COEFF</name></cpp:macro> <cpp:value>0x0A00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR</name></cpp:macro> <cpp:value>0x1800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY</name></cpp:macro> <cpp:value>0x8076</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8898</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x8090</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x8081</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8083</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x8082</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT0</name></cpp:macro> <cpp:value>0x8CE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT1</name></cpp:macro> <cpp:value>0x8CE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT10</name></cpp:macro> <cpp:value>0x8CEA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT11</name></cpp:macro> <cpp:value>0x8CEB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT12</name></cpp:macro> <cpp:value>0x8CEC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT13</name></cpp:macro> <cpp:value>0x8CED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT14</name></cpp:macro> <cpp:value>0x8CEE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT15</name></cpp:macro> <cpp:value>0x8CEF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT16</name></cpp:macro> <cpp:value>0x8CF0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT17</name></cpp:macro> <cpp:value>0x8CF1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT18</name></cpp:macro> <cpp:value>0x8CF2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT19</name></cpp:macro> <cpp:value>0x8CF3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT2</name></cpp:macro> <cpp:value>0x8CE2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT20</name></cpp:macro> <cpp:value>0x8CF4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT21</name></cpp:macro> <cpp:value>0x8CF5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT22</name></cpp:macro> <cpp:value>0x8CF6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT23</name></cpp:macro> <cpp:value>0x8CF7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT24</name></cpp:macro> <cpp:value>0x8CF8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT25</name></cpp:macro> <cpp:value>0x8CF9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT26</name></cpp:macro> <cpp:value>0x8CFA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT27</name></cpp:macro> <cpp:value>0x8CFB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT28</name></cpp:macro> <cpp:value>0x8CFC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT29</name></cpp:macro> <cpp:value>0x8CFD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT3</name></cpp:macro> <cpp:value>0x8CE3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT30</name></cpp:macro> <cpp:value>0x8CFE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT31</name></cpp:macro> <cpp:value>0x8CFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT4</name></cpp:macro> <cpp:value>0x8CE4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT5</name></cpp:macro> <cpp:value>0x8CE5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT6</name></cpp:macro> <cpp:value>0x8CE6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT7</name></cpp:macro> <cpp:value>0x8CE7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT8</name></cpp:macro> <cpp:value>0x8CE8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT9</name></cpp:macro> <cpp:value>0x8CE9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0C22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEX</name></cpp:macro> <cpp:value>0x1900</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEXES</name></cpp:macro> <cpp:value>0x1603</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_LOGIC_OP</name></cpp:macro> <cpp:value>0x0BF2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_MATERIAL</name></cpp:macro> <cpp:value>0x0B57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_MATERIAL_FACE</name></cpp:macro> <cpp:value>0x0B55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_MATERIAL_PARAMETER</name></cpp:macro> <cpp:value>0x0B56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_SUM</name></cpp:macro> <cpp:value>0x8458</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_WRITEMASK</name></cpp:macro> <cpp:value>0x0C23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE</name></cpp:macro> <cpp:value>0x8570</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_ALPHA</name></cpp:macro> <cpp:value>0x8572</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_RGB</name></cpp:macro> <cpp:value>0x8571</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPARE_REF_TO_TEXTURE</name></cpp:macro> <cpp:value>0x884E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPARE_R_TO_TEXTURE</name></cpp:macro> <cpp:value>0x884E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPILE</name></cpp:macro> <cpp:value>0x1300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPILE_AND_EXECUTE</name></cpp:macro> <cpp:value>0x1301</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPILE_STATUS</name></cpp:macro> <cpp:value>0x8B81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_ALPHA</name></cpp:macro> <cpp:value>0x84E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_INTENSITY</name></cpp:macro> <cpp:value>0x84EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE</name></cpp:macro> <cpp:value>0x84EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE_ALPHA</name></cpp:macro> <cpp:value>0x84EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RED</name></cpp:macro> <cpp:value>0x8225</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RED_RGTC1</name></cpp:macro> <cpp:value>0x8DBB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RG</name></cpp:macro> <cpp:value>0x8226</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB</name></cpp:macro> <cpp:value>0x84ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA</name></cpp:macro> <cpp:value>0x84EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RG_RGTC2</name></cpp:macro> <cpp:value>0x8DBD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RED_RGTC1</name></cpp:macro> <cpp:value>0x8DBC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RG_RGTC2</name></cpp:macro> <cpp:value>0x8DBE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SLUMINANCE</name></cpp:macro> <cpp:value>0x8C4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SLUMINANCE_ALPHA</name></cpp:macro> <cpp:value>0x8C4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB</name></cpp:macro> <cpp:value>0x8C48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA</name></cpp:macro> <cpp:value>0x8C49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_TEXTURE_FORMATS</name></cpp:macro> <cpp:value>0x86A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONDITION_SATISFIED</name></cpp:macro> <cpp:value>0x911C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT</name></cpp:macro> <cpp:value>0x8576</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_ALPHA</name></cpp:macro> <cpp:value>0x8003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_ATTENUATION</name></cpp:macro> <cpp:value>0x1207</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_COLOR</name></cpp:macro> <cpp:value>0x8001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_COMPATIBILITY_PROFILE_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_CORE_PROFILE_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAGS</name></cpp:macro> <cpp:value>0x821E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_DEBUG_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_PROFILE_MASK</name></cpp:macro> <cpp:value>0x9126</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COORD_REPLACE</name></cpp:macro> <cpp:value>0x8862</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY</name></cpp:macro> <cpp:value>0x1503</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_INVERTED</name></cpp:macro> <cpp:value>0x150C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_PIXEL_TOKEN</name></cpp:macro> <cpp:value>0x0706</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_READ_BUFFER</name></cpp:macro> <cpp:value>0x8F36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_WRITE_BUFFER</name></cpp:macro> <cpp:value>0x8F37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_FACE</name></cpp:macro> <cpp:value>0x0B44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_FACE_MODE</name></cpp:macro> <cpp:value>0x0B45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_COLOR</name></cpp:macro> <cpp:value>0x0B00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_FOG_COORD</name></cpp:macro> <cpp:value>0x8453</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_FOG_COORDINATE</name></cpp:macro> <cpp:value>0x8453</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_INDEX</name></cpp:macro> <cpp:value>0x0B01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_NORMAL</name></cpp:macro> <cpp:value>0x0B02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_PROGRAM</name></cpp:macro> <cpp:value>0x8B8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_QUERY</name></cpp:macro> <cpp:value>0x8865</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_RASTER_COLOR</name></cpp:macro> <cpp:value>0x0B04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_RASTER_DISTANCE</name></cpp:macro> <cpp:value>0x0B09</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_RASTER_INDEX</name></cpp:macro> <cpp:value>0x0B05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_RASTER_POSITION</name></cpp:macro> <cpp:value>0x0B07</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_RASTER_POSITION_VALID</name></cpp:macro> <cpp:value>0x0B08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_RASTER_SECONDARY_COLOR</name></cpp:macro> <cpp:value>0x845F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_RASTER_TEXTURE_COORDS</name></cpp:macro> <cpp:value>0x0B06</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_SECONDARY_COLOR</name></cpp:macro> <cpp:value>0x8459</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_TEXTURE_COORDS</name></cpp:macro> <cpp:value>0x0B03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_ATTRIB</name></cpp:macro> <cpp:value>0x8626</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CW</name></cpp:macro> <cpp:value>0x0900</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_FUNCTION</name></cpp:macro> <cpp:value>0x8244</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_USER_PARAM</name></cpp:macro> <cpp:value>0x8245</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_GROUP_STACK_DEPTH</name></cpp:macro> <cpp:value>0x826D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_LOGGED_MESSAGES</name></cpp:macro> <cpp:value>0x9145</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH</name></cpp:macro> <cpp:value>0x8243</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_OUTPUT</name></cpp:macro> <cpp:value>0x92E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_OUTPUT_SYNCHRONOUS</name></cpp:macro> <cpp:value>0x8242</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_HIGH</name></cpp:macro> <cpp:value>0x9146</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_LOW</name></cpp:macro> <cpp:value>0x9148</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_MEDIUM</name></cpp:macro> <cpp:value>0x9147</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_NOTIFICATION</name></cpp:macro> <cpp:value>0x826B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_API</name></cpp:macro> <cpp:value>0x8246</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_APPLICATION</name></cpp:macro> <cpp:value>0x824A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_OTHER</name></cpp:macro> <cpp:value>0x824B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_SHADER_COMPILER</name></cpp:macro> <cpp:value>0x8248</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_THIRD_PARTY</name></cpp:macro> <cpp:value>0x8249</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_WINDOW_SYSTEM</name></cpp:macro> <cpp:value>0x8247</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR</name></cpp:macro> <cpp:value>0x824D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_ERROR</name></cpp:macro> <cpp:value>0x824C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_MARKER</name></cpp:macro> <cpp:value>0x8268</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_OTHER</name></cpp:macro> <cpp:value>0x8251</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PERFORMANCE</name></cpp:macro> <cpp:value>0x8250</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_POP_GROUP</name></cpp:macro> <cpp:value>0x826A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PORTABILITY</name></cpp:macro> <cpp:value>0x824F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PUSH_GROUP</name></cpp:macro> <cpp:value>0x8269</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR</name></cpp:macro> <cpp:value>0x824E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DECAL</name></cpp:macro> <cpp:value>0x2101</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DECR</name></cpp:macro> <cpp:value>0x1E03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DECR_WRAP</name></cpp:macro> <cpp:value>0x8508</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DELETE_STATUS</name></cpp:macro> <cpp:value>0x8B80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH</name></cpp:macro> <cpp:value>0x1801</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH24_STENCIL8</name></cpp:macro> <cpp:value>0x88F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH32F_STENCIL8</name></cpp:macro> <cpp:value>0x8CAD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_ATTACHMENT</name></cpp:macro> <cpp:value>0x8D00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BIAS</name></cpp:macro> <cpp:value>0x0D1F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BITS</name></cpp:macro> <cpp:value>0x0D56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_CLAMP</name></cpp:macro> <cpp:value>0x864F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0B73</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT</name></cpp:macro> <cpp:value>0x1902</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16</name></cpp:macro> <cpp:value>0x81A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT24</name></cpp:macro> <cpp:value>0x81A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32</name></cpp:macro> <cpp:value>0x81A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32F</name></cpp:macro> <cpp:value>0x8CAC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_FUNC</name></cpp:macro> <cpp:value>0x0B74</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_RANGE</name></cpp:macro> <cpp:value>0x0B70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_SCALE</name></cpp:macro> <cpp:value>0x0D1E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL</name></cpp:macro> <cpp:value>0x84F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_ATTACHMENT</name></cpp:macro> <cpp:value>0x821A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_TEST</name></cpp:macro> <cpp:value>0x0B71</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_TEXTURE_MODE</name></cpp:macro> <cpp:value>0x884B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_WRITEMASK</name></cpp:macro> <cpp:value>0x0B72</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DIFFUSE</name></cpp:macro> <cpp:value>0x1201</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISPLAY_LIST</name></cpp:macro> <cpp:value>0x82E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DITHER</name></cpp:macro> <cpp:value>0x0BD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOMAIN</name></cpp:macro> <cpp:value>0x0A02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DONT_CARE</name></cpp:macro> <cpp:value>0x1100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT3_RGB</name></cpp:macro> <cpp:value>0x86AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT3_RGBA</name></cpp:macro> <cpp:value>0x86AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE</name></cpp:macro> <cpp:value>0x140A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLEBUFFER</name></cpp:macro> <cpp:value>0x0C32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER</name></cpp:macro> <cpp:value>0x0C01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER0</name></cpp:macro> <cpp:value>0x8825</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER1</name></cpp:macro> <cpp:value>0x8826</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER10</name></cpp:macro> <cpp:value>0x882F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER11</name></cpp:macro> <cpp:value>0x8830</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER12</name></cpp:macro> <cpp:value>0x8831</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER13</name></cpp:macro> <cpp:value>0x8832</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER14</name></cpp:macro> <cpp:value>0x8833</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER15</name></cpp:macro> <cpp:value>0x8834</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER2</name></cpp:macro> <cpp:value>0x8827</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER3</name></cpp:macro> <cpp:value>0x8828</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER4</name></cpp:macro> <cpp:value>0x8829</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER5</name></cpp:macro> <cpp:value>0x882A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER6</name></cpp:macro> <cpp:value>0x882B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER7</name></cpp:macro> <cpp:value>0x882C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER8</name></cpp:macro> <cpp:value>0x882D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER9</name></cpp:macro> <cpp:value>0x882E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8CA9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_PIXEL_TOKEN</name></cpp:macro> <cpp:value>0x0705</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DST_ALPHA</name></cpp:macro> <cpp:value>0x0304</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DST_COLOR</name></cpp:macro> <cpp:value>0x0306</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_COPY</name></cpp:macro> <cpp:value>0x88EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_DRAW</name></cpp:macro> <cpp:value>0x88E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_READ</name></cpp:macro> <cpp:value>0x88E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG</name></cpp:macro> <cpp:value>0x0B43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY</name></cpp:macro> <cpp:value>0x8079</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x8093</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x808C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER</name></cpp:macro> <cpp:value>0x8893</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8895</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EMISSION</name></cpp:macro> <cpp:value>0x1600</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ENABLE_BIT</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EQUAL</name></cpp:macro> <cpp:value>0x0202</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EQUIV</name></cpp:macro> <cpp:value>0x1509</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_BIT</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXP</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXP2</name></cpp:macro> <cpp:value>0x0801</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXTENSIONS</name></cpp:macro> <cpp:value>0x1F03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_LINEAR</name></cpp:macro> <cpp:value>0x2400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_PLANE</name></cpp:macro> <cpp:value>0x2502</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FASTEST</name></cpp:macro> <cpp:value>0x1101</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FEEDBACK</name></cpp:macro> <cpp:value>0x1C01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FEEDBACK_BUFFER_POINTER</name></cpp:macro> <cpp:value>0x0DF0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FEEDBACK_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x0DF1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FEEDBACK_BUFFER_TYPE</name></cpp:macro> <cpp:value>0x0DF2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FILL</name></cpp:macro> <cpp:value>0x1B02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIRST_VERTEX_CONVENTION</name></cpp:macro> <cpp:value>0x8E4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIXED_ONLY</name></cpp:macro> <cpp:value>0x891D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLAT</name></cpp:macro> <cpp:value>0x1D00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT</name></cpp:macro> <cpp:value>0x1406</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_32_UNSIGNED_INT_24_8_REV</name></cpp:macro> <cpp:value>0x8DAD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2</name></cpp:macro> <cpp:value>0x8B5A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2x3</name></cpp:macro> <cpp:value>0x8B65</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2x4</name></cpp:macro> <cpp:value>0x8B66</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3</name></cpp:macro> <cpp:value>0x8B5B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3x2</name></cpp:macro> <cpp:value>0x8B67</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3x4</name></cpp:macro> <cpp:value>0x8B68</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4</name></cpp:macro> <cpp:value>0x8B5C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4x2</name></cpp:macro> <cpp:value>0x8B69</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4x3</name></cpp:macro> <cpp:value>0x8B6A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC2</name></cpp:macro> <cpp:value>0x8B50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC3</name></cpp:macro> <cpp:value>0x8B51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC4</name></cpp:macro> <cpp:value>0x8B52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG</name></cpp:macro> <cpp:value>0x0B60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_BIT</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COLOR</name></cpp:macro> <cpp:value>0x0B66</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD</name></cpp:macro> <cpp:value>0x8451</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE</name></cpp:macro> <cpp:value>0x8451</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY</name></cpp:macro> <cpp:value>0x8457</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x8456</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8455</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x8454</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_SOURCE</name></cpp:macro> <cpp:value>0x8450</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_ARRAY</name></cpp:macro> <cpp:value>0x8457</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x8456</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8455</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x8454</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_SRC</name></cpp:macro> <cpp:value>0x8450</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_DENSITY</name></cpp:macro> <cpp:value>0x0B62</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_END</name></cpp:macro> <cpp:value>0x0B64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_HINT</name></cpp:macro> <cpp:value>0x0C54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_INDEX</name></cpp:macro> <cpp:value>0x0B61</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_MODE</name></cpp:macro> <cpp:value>0x0B65</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_START</name></cpp:macro> <cpp:value>0x0B63</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_DEPTH</name></cpp:macro> <cpp:value>0x8452</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x8B30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_DERIVATIVE_HINT</name></cpp:macro> <cpp:value>0x8B8B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8D40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x8215</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE</name></cpp:macro> <cpp:value>0x8214</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING</name></cpp:macro> <cpp:value>0x8210</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE</name></cpp:macro> <cpp:value>0x8211</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x8216</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8213</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_LAYERED</name></cpp:macro> <cpp:value>0x8DA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</name></cpp:macro> <cpp:value>0x8CD1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</name></cpp:macro> <cpp:value>0x8CD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE</name></cpp:macro> <cpp:value>0x8212</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x8217</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE</name></cpp:macro> <cpp:value>0x8CD3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL</name></cpp:macro> <cpp:value>0x8CD2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_COMPLETE</name></cpp:macro> <cpp:value>0x8CD5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT</name></cpp:macro> <cpp:value>0x8218</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT</name></cpp:macro> <cpp:value>0x8CD6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER</name></cpp:macro> <cpp:value>0x8CDB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS</name></cpp:macro> <cpp:value>0x8DA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT</name></cpp:macro> <cpp:value>0x8CD7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE</name></cpp:macro> <cpp:value>0x8D56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER</name></cpp:macro> <cpp:value>0x8CDC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_SRGB</name></cpp:macro> <cpp:value>0x8DB9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNDEFINED</name></cpp:macro> <cpp:value>0x8219</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNSUPPORTED</name></cpp:macro> <cpp:value>0x8CDD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT</name></cpp:macro> <cpp:value>0x0404</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_AND_BACK</name></cpp:macro> <cpp:value>0x0408</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_FACE</name></cpp:macro> <cpp:value>0x0B46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_LEFT</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_RIGHT</name></cpp:macro> <cpp:value>0x0401</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_ADD</name></cpp:macro> <cpp:value>0x8006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_REVERSE_SUBTRACT</name></cpp:macro> <cpp:value>0x800B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_SUBTRACT</name></cpp:macro> <cpp:value>0x800A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GENERATE_MIPMAP</name></cpp:macro> <cpp:value>0x8191</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GENERATE_MIPMAP_HINT</name></cpp:macro> <cpp:value>0x8192</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_INPUT_TYPE</name></cpp:macro> <cpp:value>0x8917</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_OUTPUT_TYPE</name></cpp:macro> <cpp:value>0x8918</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SHADER</name></cpp:macro> <cpp:value>0x8DD9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_VERTICES_OUT</name></cpp:macro> <cpp:value>0x8916</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEQUAL</name></cpp:macro> <cpp:value>0x0206</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREATER</name></cpp:macro> <cpp:value>0x0204</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN</name></cpp:macro> <cpp:value>0x1904</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_BIAS</name></cpp:macro> <cpp:value>0x0D19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_BITS</name></cpp:macro> <cpp:value>0x0D53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_INTEGER</name></cpp:macro> <cpp:value>0x8D95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_SCALE</name></cpp:macro> <cpp:value>0x0D18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GUILTY_CONTEXT_RESET_ARB</name></cpp:macro> <cpp:value>0x8253</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_FLOAT</name></cpp:macro> <cpp:value>0x140B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HINT_BIT</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INCR</name></cpp:macro> <cpp:value>0x1E02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INCR_WRAP</name></cpp:macro> <cpp:value>0x8507</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX</name></cpp:macro> <cpp:value>0x8222</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY</name></cpp:macro> <cpp:value>0x8077</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8899</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x8091</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8086</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x8085</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_BITS</name></cpp:macro> <cpp:value>0x0D51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0C20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_LOGIC_OP</name></cpp:macro> <cpp:value>0x0BF1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_MODE</name></cpp:macro> <cpp:value>0x0C30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_OFFSET</name></cpp:macro> <cpp:value>0x0D13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_SHIFT</name></cpp:macro> <cpp:value>0x0D12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_WRITEMASK</name></cpp:macro> <cpp:value>0x0C21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INFO_LOG_LENGTH</name></cpp:macro> <cpp:value>0x8B84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INNOCENT_CONTEXT_RESET_ARB</name></cpp:macro> <cpp:value>0x8254</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT</name></cpp:macro> <cpp:value>0x1404</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY</name></cpp:macro> <cpp:value>0x8049</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY12</name></cpp:macro> <cpp:value>0x804C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY16</name></cpp:macro> <cpp:value>0x804D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY4</name></cpp:macro> <cpp:value>0x804A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY8</name></cpp:macro> <cpp:value>0x804B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLEAVED_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERPOLATE</name></cpp:macro> <cpp:value>0x8575</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_2_10_10_10_REV</name></cpp:macro> <cpp:value>0x8D9F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_1D</name></cpp:macro> <cpp:value>0x8DC9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_1D_ARRAY</name></cpp:macro> <cpp:value>0x8DCE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8DCA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DCF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9109</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x910C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_RECT</name></cpp:macro> <cpp:value>0x8DCD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8DCB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_BUFFER</name></cpp:macro> <cpp:value>0x8DD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8DCC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC2</name></cpp:macro> <cpp:value>0x8B53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC3</name></cpp:macro> <cpp:value>0x8B54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC4</name></cpp:macro> <cpp:value>0x8B55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_ENUM</name></cpp:macro> <cpp:value>0x0500</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_FRAMEBUFFER_OPERATION</name></cpp:macro> <cpp:value>0x0506</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_INDEX</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_OPERATION</name></cpp:macro> <cpp:value>0x0502</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_VALUE</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVERT</name></cpp:macro> <cpp:value>0x150A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_KEEP</name></cpp:macro> <cpp:value>0x1E00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LAST_VERTEX_CONVENTION</name></cpp:macro> <cpp:value>0x8E4E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LEFT</name></cpp:macro> <cpp:value>0x0406</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LEQUAL</name></cpp:macro> <cpp:value>0x0203</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LESS</name></cpp:macro> <cpp:value>0x0201</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT0</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT1</name></cpp:macro> <cpp:value>0x4001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT2</name></cpp:macro> <cpp:value>0x4002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT3</name></cpp:macro> <cpp:value>0x4003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT4</name></cpp:macro> <cpp:value>0x4004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT5</name></cpp:macro> <cpp:value>0x4005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT6</name></cpp:macro> <cpp:value>0x4006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT7</name></cpp:macro> <cpp:value>0x4007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHTING</name></cpp:macro> <cpp:value>0x0B50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHTING_BIT</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT_MODEL_AMBIENT</name></cpp:macro> <cpp:value>0x0B53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT_MODEL_COLOR_CONTROL</name></cpp:macro> <cpp:value>0x81F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT_MODEL_LOCAL_VIEWER</name></cpp:macro> <cpp:value>0x0B51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT_MODEL_TWO_SIDE</name></cpp:macro> <cpp:value>0x0B52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE</name></cpp:macro> <cpp:value>0x1B01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR</name></cpp:macro> <cpp:value>0x2601</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_ATTENUATION</name></cpp:macro> <cpp:value>0x1208</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_MIPMAP_LINEAR</name></cpp:macro> <cpp:value>0x2703</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_MIPMAP_NEAREST</name></cpp:macro> <cpp:value>0x2701</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINES</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINES_ADJACENCY</name></cpp:macro> <cpp:value>0x000A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_BIT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_LOOP</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_RESET_TOKEN</name></cpp:macro> <cpp:value>0x0707</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_SMOOTH</name></cpp:macro> <cpp:value>0x0B20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_SMOOTH_HINT</name></cpp:macro> <cpp:value>0x0C52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STIPPLE</name></cpp:macro> <cpp:value>0x0B24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STIPPLE_PATTERN</name></cpp:macro> <cpp:value>0x0B25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STIPPLE_REPEAT</name></cpp:macro> <cpp:value>0x0B26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STRIP</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STRIP_ADJACENCY</name></cpp:macro> <cpp:value>0x000B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_TOKEN</name></cpp:macro> <cpp:value>0x0702</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_WIDTH</name></cpp:macro> <cpp:value>0x0B21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_WIDTH_GRANULARITY</name></cpp:macro> <cpp:value>0x0B23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_WIDTH_RANGE</name></cpp:macro> <cpp:value>0x0B22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINK_STATUS</name></cpp:macro> <cpp:value>0x8B82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIST_BASE</name></cpp:macro> <cpp:value>0x0B32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIST_BIT</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIST_INDEX</name></cpp:macro> <cpp:value>0x0B33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIST_MODE</name></cpp:macro> <cpp:value>0x0B30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOAD</name></cpp:macro> <cpp:value>0x0101</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOGIC_OP</name></cpp:macro> <cpp:value>0x0BF1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOGIC_OP_MODE</name></cpp:macro> <cpp:value>0x0BF0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOSE_CONTEXT_ON_RESET_ARB</name></cpp:macro> <cpp:value>0x8252</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOWER_LEFT</name></cpp:macro> <cpp:value>0x8CA1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE</name></cpp:macro> <cpp:value>0x1909</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE12</name></cpp:macro> <cpp:value>0x8041</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE12_ALPHA12</name></cpp:macro> <cpp:value>0x8047</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE12_ALPHA4</name></cpp:macro> <cpp:value>0x8046</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16</name></cpp:macro> <cpp:value>0x8042</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16_ALPHA16</name></cpp:macro> <cpp:value>0x8048</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE4</name></cpp:macro> <cpp:value>0x803F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE4_ALPHA4</name></cpp:macro> <cpp:value>0x8043</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE6_ALPHA2</name></cpp:macro> <cpp:value>0x8044</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8</name></cpp:macro> <cpp:value>0x8040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_ALPHA8</name></cpp:macro> <cpp:value>0x8045</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA</name></cpp:macro> <cpp:value>0x190A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAJOR_VERSION</name></cpp:macro> <cpp:value>0x821B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_COLOR_4</name></cpp:macro> <cpp:value>0x0D90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_GRID_DOMAIN</name></cpp:macro> <cpp:value>0x0DD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_GRID_SEGMENTS</name></cpp:macro> <cpp:value>0x0DD1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_INDEX</name></cpp:macro> <cpp:value>0x0D91</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_NORMAL</name></cpp:macro> <cpp:value>0x0D92</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_TEXTURE_COORD_1</name></cpp:macro> <cpp:value>0x0D93</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_TEXTURE_COORD_2</name></cpp:macro> <cpp:value>0x0D94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_TEXTURE_COORD_3</name></cpp:macro> <cpp:value>0x0D95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_TEXTURE_COORD_4</name></cpp:macro> <cpp:value>0x0D96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_3</name></cpp:macro> <cpp:value>0x0D97</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_4</name></cpp:macro> <cpp:value>0x0D98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_COLOR_4</name></cpp:macro> <cpp:value>0x0DB0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_GRID_DOMAIN</name></cpp:macro> <cpp:value>0x0DD2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_GRID_SEGMENTS</name></cpp:macro> <cpp:value>0x0DD3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_INDEX</name></cpp:macro> <cpp:value>0x0DB1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_NORMAL</name></cpp:macro> <cpp:value>0x0DB2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_TEXTURE_COORD_1</name></cpp:macro> <cpp:value>0x0DB3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_TEXTURE_COORD_2</name></cpp:macro> <cpp:value>0x0DB4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_TEXTURE_COORD_3</name></cpp:macro> <cpp:value>0x0DB5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_TEXTURE_COORD_4</name></cpp:macro> <cpp:value>0x0DB6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_3</name></cpp:macro> <cpp:value>0x0DB7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_4</name></cpp:macro> <cpp:value>0x0DB8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_COLOR</name></cpp:macro> <cpp:value>0x0D10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_FLUSH_EXPLICIT_BIT</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_INVALIDATE_BUFFER_BIT</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_INVALIDATE_RANGE_BIT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_READ_BIT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_STENCIL</name></cpp:macro> <cpp:value>0x0D11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_UNSYNCHRONIZED_BIT</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_WRITE_BIT</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_MODE</name></cpp:macro> <cpp:value>0x0BA0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX</name></cpp:macro> <cpp:value>0x8008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_3D_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x8073</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ARRAY_TEXTURE_LAYERS</name></cpp:macro> <cpp:value>0x88FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ATTRIB_STACK_DEPTH</name></cpp:macro> <cpp:value>0x0D35</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CLIENT_ATTRIB_STACK_DEPTH</name></cpp:macro> <cpp:value>0x0D3B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CLIP_DISTANCES</name></cpp:macro> <cpp:value>0x0D32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CLIP_PLANES</name></cpp:macro> <cpp:value>0x0D32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_ATTACHMENTS</name></cpp:macro> <cpp:value>0x8CDF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_TEXTURE_SAMPLES</name></cpp:macro> <cpp:value>0x910E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8B4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CUBE_MAP_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x851C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_GROUP_STACK_DEPTH</name></cpp:macro> <cpp:value>0x826C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_LOGGED_MESSAGES</name></cpp:macro> <cpp:value>0x9144</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_MESSAGE_LENGTH</name></cpp:macro> <cpp:value>0x9143</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEPTH_TEXTURE_SAMPLES</name></cpp:macro> <cpp:value>0x910F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DRAW_BUFFERS</name></cpp:macro> <cpp:value>0x8824</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DUAL_SOURCE_DRAW_BUFFERS</name></cpp:macro> <cpp:value>0x88FC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_INDICES</name></cpp:macro> <cpp:value>0x80E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_VERTICES</name></cpp:macro> <cpp:value>0x80E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_EVAL_ORDER</name></cpp:macro> <cpp:value>0x0D30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_INPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9125</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8B49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_INPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9123</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9124</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_OUTPUT_VERTICES</name></cpp:macro> <cpp:value>0x8DE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8C29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x8DE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8DDF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_INTEGER_SAMPLES</name></cpp:macro> <cpp:value>0x9110</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_LABEL_LENGTH</name></cpp:macro> <cpp:value>0x82E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_LIGHTS</name></cpp:macro> <cpp:value>0x0D31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_LIST_NESTING</name></cpp:macro> <cpp:value>0x0B31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_MODELVIEW_STACK_DEPTH</name></cpp:macro> <cpp:value>0x0D36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_NAME_STACK_DEPTH</name></cpp:macro> <cpp:value>0x0D37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PIXEL_MAP_TABLE</name></cpp:macro> <cpp:value>0x0D34</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXEL_OFFSET</name></cpp:macro> <cpp:value>0x8905</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROJECTION_STACK_DEPTH</name></cpp:macro> <cpp:value>0x0D38</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RECTANGLE_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x84F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RENDERBUFFER_SIZE</name></cpp:macro> <cpp:value>0x84E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLES</name></cpp:macro> <cpp:value>0x8D57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLE_MASK_WORDS</name></cpp:macro> <cpp:value>0x8E59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SERVER_WAIT_TIMEOUT</name></cpp:macro> <cpp:value>0x9111</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8C2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_COORDS</name></cpp:macro> <cpp:value>0x8871</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8872</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_LOD_BIAS</name></cpp:macro> <cpp:value>0x84FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x0D33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_STACK_DEPTH</name></cpp:macro> <cpp:value>0x0D39</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_UNITS</name></cpp:macro> <cpp:value>0x84E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS</name></cpp:macro> <cpp:value>0x8C8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS</name></cpp:macro> <cpp:value>0x8C80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_UNIFORM_BLOCK_SIZE</name></cpp:macro> <cpp:value>0x8A30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_UNIFORM_BUFFER_BINDINGS</name></cpp:macro> <cpp:value>0x8A2F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_COMPONENTS</name></cpp:macro> <cpp:value>0x8B4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_FLOATS</name></cpp:macro> <cpp:value>0x8B4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIBS</name></cpp:macro> <cpp:value>0x8869</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9122</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8B4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8B4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VIEWPORT_DIMS</name></cpp:macro> <cpp:value>0x0D3A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN</name></cpp:macro> <cpp:value>0x8007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINOR_VERSION</name></cpp:macro> <cpp:value>0x821C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_PROGRAM_TEXEL_OFFSET</name></cpp:macro> <cpp:value>0x8904</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRRORED_REPEAT</name></cpp:macro> <cpp:value>0x8370</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW</name></cpp:macro> <cpp:value>0x1700</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW_MATRIX</name></cpp:macro> <cpp:value>0x0BA6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW_STACK_DEPTH</name></cpp:macro> <cpp:value>0x0BA3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODULATE</name></cpp:macro> <cpp:value>0x2100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULT</name></cpp:macro> <cpp:value>0x0103</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE</name></cpp:macro> <cpp:value>0x809D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_ARB</name></cpp:macro> <cpp:value>0x809D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BIT</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BIT_ARB</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_N3F_V3F</name></cpp:macro> <cpp:value>0x2A25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NAME_STACK_DEPTH</name></cpp:macro> <cpp:value>0x0D70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NAND</name></cpp:macro> <cpp:value>0x150E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST</name></cpp:macro> <cpp:value>0x2600</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST_MIPMAP_LINEAR</name></cpp:macro> <cpp:value>0x2702</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST_MIPMAP_NEAREST</name></cpp:macro> <cpp:value>0x2700</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEVER</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NICEST</name></cpp:macro> <cpp:value>0x1102</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NOOP</name></cpp:macro> <cpp:value>0x1505</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NOR</name></cpp:macro> <cpp:value>0x1508</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMALIZE</name></cpp:macro> <cpp:value>0x0BA1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY</name></cpp:macro> <cpp:value>0x8075</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8897</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x808F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x807F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x807E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_MAP</name></cpp:macro> <cpp:value>0x8511</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NOTEQUAL</name></cpp:macro> <cpp:value>0x0205</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NO_ERROR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NO_RESET_NOTIFICATION_ARB</name></cpp:macro> <cpp:value>0x8261</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_COMPRESSED_TEXTURE_FORMATS</name></cpp:macro> <cpp:value>0x86A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_EXTENSIONS</name></cpp:macro> <cpp:value>0x821D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_LINEAR</name></cpp:macro> <cpp:value>0x2401</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_PLANE</name></cpp:macro> <cpp:value>0x2501</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_TYPE</name></cpp:macro> <cpp:value>0x9112</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_ALPHA</name></cpp:macro> <cpp:value>0x8004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_COLOR</name></cpp:macro> <cpp:value>0x8002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_DST_ALPHA</name></cpp:macro> <cpp:value>0x0305</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_DST_COLOR</name></cpp:macro> <cpp:value>0x0307</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC1_ALPHA</name></cpp:macro> <cpp:value>0x88FB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC1_COLOR</name></cpp:macro> <cpp:value>0x88FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC_ALPHA</name></cpp:macro> <cpp:value>0x0303</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC_COLOR</name></cpp:macro> <cpp:value>0x0301</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND0_ALPHA</name></cpp:macro> <cpp:value>0x8598</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND0_RGB</name></cpp:macro> <cpp:value>0x8590</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND1_ALPHA</name></cpp:macro> <cpp:value>0x8599</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND1_RGB</name></cpp:macro> <cpp:value>0x8591</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND2_ALPHA</name></cpp:macro> <cpp:value>0x859A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND2_RGB</name></cpp:macro> <cpp:value>0x8592</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OR</name></cpp:macro> <cpp:value>0x1507</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ORDER</name></cpp:macro> <cpp:value>0x0A01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OR_INVERTED</name></cpp:macro> <cpp:value>0x150D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OR_REVERSE</name></cpp:macro> <cpp:value>0x150B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUT_OF_MEMORY</name></cpp:macro> <cpp:value>0x0505</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_ALIGNMENT</name></cpp:macro> <cpp:value>0x0D05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_IMAGE_HEIGHT</name></cpp:macro> <cpp:value>0x806C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_LSB_FIRST</name></cpp:macro> <cpp:value>0x0D01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_ROW_LENGTH</name></cpp:macro> <cpp:value>0x0D02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_IMAGES</name></cpp:macro> <cpp:value>0x806B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_PIXELS</name></cpp:macro> <cpp:value>0x0D04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_ROWS</name></cpp:macro> <cpp:value>0x0D03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SWAP_BYTES</name></cpp:macro> <cpp:value>0x0D00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PASS_THROUGH_TOKEN</name></cpp:macro> <cpp:value>0x0700</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERSPECTIVE_CORRECTION_HINT</name></cpp:macro> <cpp:value>0x0C50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_A_TO_A</name></cpp:macro> <cpp:value>0x0C79</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_A_TO_A_SIZE</name></cpp:macro> <cpp:value>0x0CB9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_B_TO_B</name></cpp:macro> <cpp:value>0x0C78</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_B_TO_B_SIZE</name></cpp:macro> <cpp:value>0x0CB8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_G_TO_G</name></cpp:macro> <cpp:value>0x0C77</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_G_TO_G_SIZE</name></cpp:macro> <cpp:value>0x0CB7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_I_TO_A</name></cpp:macro> <cpp:value>0x0C75</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_I_TO_A_SIZE</name></cpp:macro> <cpp:value>0x0CB5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_I_TO_B</name></cpp:macro> <cpp:value>0x0C74</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_I_TO_B_SIZE</name></cpp:macro> <cpp:value>0x0CB4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_I_TO_G</name></cpp:macro> <cpp:value>0x0C73</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_I_TO_G_SIZE</name></cpp:macro> <cpp:value>0x0CB3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_I_TO_I</name></cpp:macro> <cpp:value>0x0C70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_I_TO_I_SIZE</name></cpp:macro> <cpp:value>0x0CB0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_I_TO_R</name></cpp:macro> <cpp:value>0x0C72</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_I_TO_R_SIZE</name></cpp:macro> <cpp:value>0x0CB2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_R_TO_R</name></cpp:macro> <cpp:value>0x0C76</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_R_TO_R_SIZE</name></cpp:macro> <cpp:value>0x0CB6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_S_TO_S</name></cpp:macro> <cpp:value>0x0C71</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAP_S_TO_S_SIZE</name></cpp:macro> <cpp:value>0x0CB1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MODE_BIT</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER</name></cpp:macro> <cpp:value>0x88EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x88ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER</name></cpp:macro> <cpp:value>0x88EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x88EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT</name></cpp:macro> <cpp:value>0x1B00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINTS</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_DISTANCE_ATTENUATION</name></cpp:macro> <cpp:value>0x8129</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_FADE_THRESHOLD_SIZE</name></cpp:macro> <cpp:value>0x8128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE</name></cpp:macro> <cpp:value>0x0B11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_GRANULARITY</name></cpp:macro> <cpp:value>0x0B13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MAX</name></cpp:macro> <cpp:value>0x8127</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MIN</name></cpp:macro> <cpp:value>0x8126</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_RANGE</name></cpp:macro> <cpp:value>0x0B12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SMOOTH</name></cpp:macro> <cpp:value>0x0B10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SMOOTH_HINT</name></cpp:macro> <cpp:value>0x0C51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SPRITE</name></cpp:macro> <cpp:value>0x8861</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SPRITE_COORD_ORIGIN</name></cpp:macro> <cpp:value>0x8CA0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_TOKEN</name></cpp:macro> <cpp:value>0x0701</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON</name></cpp:macro> <cpp:value>0x0009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_BIT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_MODE</name></cpp:macro> <cpp:value>0x0B40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_FACTOR</name></cpp:macro> <cpp:value>0x8038</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_FILL</name></cpp:macro> <cpp:value>0x8037</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_LINE</name></cpp:macro> <cpp:value>0x2A02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_POINT</name></cpp:macro> <cpp:value>0x2A01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_UNITS</name></cpp:macro> <cpp:value>0x2A00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_SMOOTH</name></cpp:macro> <cpp:value>0x0B41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_SMOOTH_HINT</name></cpp:macro> <cpp:value>0x0C53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_STIPPLE</name></cpp:macro> <cpp:value>0x0B42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_STIPPLE_BIT</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_TOKEN</name></cpp:macro> <cpp:value>0x0703</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POSITION</name></cpp:macro> <cpp:value>0x1203</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PREVIOUS</name></cpp:macro> <cpp:value>0x8578</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMARY_COLOR</name></cpp:macro> <cpp:value>0x8577</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVES_GENERATED</name></cpp:macro> <cpp:value>0x8C87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART</name></cpp:macro> <cpp:value>0x8F9D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART_INDEX</name></cpp:macro> <cpp:value>0x8F9E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM</name></cpp:macro> <cpp:value>0x82E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_PIPELINE</name></cpp:macro> <cpp:value>0x82E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_POINT_SIZE</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROJECTION</name></cpp:macro> <cpp:value>0x1701</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROJECTION_MATRIX</name></cpp:macro> <cpp:value>0x0BA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROJECTION_STACK_DEPTH</name></cpp:macro> <cpp:value>0x0BA4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROVOKING_VERTEX</name></cpp:macro> <cpp:value>0x8E4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D</name></cpp:macro> <cpp:value>0x8063</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D_ARRAY</name></cpp:macro> <cpp:value>0x8C19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D</name></cpp:macro> <cpp:value>0x8064</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9101</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9103</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_3D</name></cpp:macro> <cpp:value>0x8070</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_CUBE_MAP</name></cpp:macro> <cpp:value>0x851B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_RECTANGLE</name></cpp:macro> <cpp:value>0x84F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Q</name></cpp:macro> <cpp:value>0x2003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUADRATIC_ATTENUATION</name></cpp:macro> <cpp:value>0x1209</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUADS</name></cpp:macro> <cpp:value>0x0007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION</name></cpp:macro> <cpp:value>0x8E4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_STRIP</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY</name></cpp:macro> <cpp:value>0x82E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BY_REGION_NO_WAIT</name></cpp:macro> <cpp:value>0x8E16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BY_REGION_WAIT</name></cpp:macro> <cpp:value>0x8E15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_COUNTER_BITS</name></cpp:macro> <cpp:value>0x8864</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_NO_WAIT</name></cpp:macro> <cpp:value>0x8E14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT</name></cpp:macro> <cpp:value>0x8866</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_AVAILABLE</name></cpp:macro> <cpp:value>0x8867</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_WAIT</name></cpp:macro> <cpp:value>0x8E13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R</name></cpp:macro> <cpp:value>0x2002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R11F_G11F_B10F</name></cpp:macro> <cpp:value>0x8C3A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16</name></cpp:macro> <cpp:value>0x822A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16F</name></cpp:macro> <cpp:value>0x822D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16I</name></cpp:macro> <cpp:value>0x8233</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16UI</name></cpp:macro> <cpp:value>0x8234</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16_SNORM</name></cpp:macro> <cpp:value>0x8F98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32F</name></cpp:macro> <cpp:value>0x822E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32I</name></cpp:macro> <cpp:value>0x8235</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32UI</name></cpp:macro> <cpp:value>0x8236</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R3_G3_B2</name></cpp:macro> <cpp:value>0x2A10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8</name></cpp:macro> <cpp:value>0x8229</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8I</name></cpp:macro> <cpp:value>0x8231</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8UI</name></cpp:macro> <cpp:value>0x8232</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8_SNORM</name></cpp:macro> <cpp:value>0x8F94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RASTERIZER_DISCARD</name></cpp:macro> <cpp:value>0x8C89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_BUFFER</name></cpp:macro> <cpp:value>0x0C02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8CA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CAA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_ONLY</name></cpp:macro> <cpp:value>0x88B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_WRITE</name></cpp:macro> <cpp:value>0x88BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED</name></cpp:macro> <cpp:value>0x1903</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_BIAS</name></cpp:macro> <cpp:value>0x0D15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_BITS</name></cpp:macro> <cpp:value>0x0D52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_INTEGER</name></cpp:macro> <cpp:value>0x8D94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_SCALE</name></cpp:macro> <cpp:value>0x0D14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFLECTION_MAP</name></cpp:macro> <cpp:value>0x8512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDER</name></cpp:macro> <cpp:value>0x1C00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER</name></cpp:macro> <cpp:value>0x8D41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x8D53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BLUE_SIZE</name></cpp:macro> <cpp:value>0x8D52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x8D54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8D51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_HEIGHT</name></cpp:macro> <cpp:value>0x8D43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_INTERNAL_FORMAT</name></cpp:macro> <cpp:value>0x8D44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_RED_SIZE</name></cpp:macro> <cpp:value>0x8D50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_SAMPLES</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x8D55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_WIDTH</name></cpp:macro> <cpp:value>0x8D42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERER</name></cpp:macro> <cpp:value>0x1F01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDER_MODE</name></cpp:macro> <cpp:value>0x0C40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPEAT</name></cpp:macro> <cpp:value>0x2901</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACE</name></cpp:macro> <cpp:value>0x1E01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESCALE_NORMAL</name></cpp:macro> <cpp:value>0x803A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESET_NOTIFICATION_STRATEGY_ARB</name></cpp:macro> <cpp:value>0x8256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RETURN</name></cpp:macro> <cpp:value>0x0102</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG</name></cpp:macro> <cpp:value>0x8227</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16</name></cpp:macro> <cpp:value>0x822C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16F</name></cpp:macro> <cpp:value>0x822F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16I</name></cpp:macro> <cpp:value>0x8239</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16UI</name></cpp:macro> <cpp:value>0x823A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16_SNORM</name></cpp:macro> <cpp:value>0x8F99</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32F</name></cpp:macro> <cpp:value>0x8230</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32I</name></cpp:macro> <cpp:value>0x823B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32UI</name></cpp:macro> <cpp:value>0x823C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8</name></cpp:macro> <cpp:value>0x822B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8I</name></cpp:macro> <cpp:value>0x8237</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8UI</name></cpp:macro> <cpp:value>0x8238</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8_SNORM</name></cpp:macro> <cpp:value>0x8F95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB</name></cpp:macro> <cpp:value>0x1907</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10</name></cpp:macro> <cpp:value>0x8052</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_A2</name></cpp:macro> <cpp:value>0x8059</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_A2UI</name></cpp:macro> <cpp:value>0x906F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB12</name></cpp:macro> <cpp:value>0x8053</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16</name></cpp:macro> <cpp:value>0x8054</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16F</name></cpp:macro> <cpp:value>0x881B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16I</name></cpp:macro> <cpp:value>0x8D89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16UI</name></cpp:macro> <cpp:value>0x8D77</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16_SNORM</name></cpp:macro> <cpp:value>0x8F9A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32F</name></cpp:macro> <cpp:value>0x8815</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32I</name></cpp:macro> <cpp:value>0x8D83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32UI</name></cpp:macro> <cpp:value>0x8D71</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB4</name></cpp:macro> <cpp:value>0x804F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5</name></cpp:macro> <cpp:value>0x8050</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5_A1</name></cpp:macro> <cpp:value>0x8057</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8</name></cpp:macro> <cpp:value>0x8051</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8I</name></cpp:macro> <cpp:value>0x8D8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8UI</name></cpp:macro> <cpp:value>0x8D7D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8_SNORM</name></cpp:macro> <cpp:value>0x8F96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB9_E5</name></cpp:macro> <cpp:value>0x8C3D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA</name></cpp:macro> <cpp:value>0x1908</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA12</name></cpp:macro> <cpp:value>0x805A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16</name></cpp:macro> <cpp:value>0x805B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16F</name></cpp:macro> <cpp:value>0x881A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16I</name></cpp:macro> <cpp:value>0x8D88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16UI</name></cpp:macro> <cpp:value>0x8D76</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16_SNORM</name></cpp:macro> <cpp:value>0x8F9B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA2</name></cpp:macro> <cpp:value>0x8055</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32F</name></cpp:macro> <cpp:value>0x8814</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32I</name></cpp:macro> <cpp:value>0x8D82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32UI</name></cpp:macro> <cpp:value>0x8D70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA4</name></cpp:macro> <cpp:value>0x8056</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8</name></cpp:macro> <cpp:value>0x8058</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8I</name></cpp:macro> <cpp:value>0x8D8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8UI</name></cpp:macro> <cpp:value>0x8D7C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8_SNORM</name></cpp:macro> <cpp:value>0x8F97</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_INTEGER</name></cpp:macro> <cpp:value>0x8D99</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_MODE</name></cpp:macro> <cpp:value>0x0C31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_INTEGER</name></cpp:macro> <cpp:value>0x8D98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_SCALE</name></cpp:macro> <cpp:value>0x8573</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG_INTEGER</name></cpp:macro> <cpp:value>0x8228</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RIGHT</name></cpp:macro> <cpp:value>0x0407</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_S</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER</name></cpp:macro> <cpp:value>0x82E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D</name></cpp:macro> <cpp:value>0x8B5D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY</name></cpp:macro> <cpp:value>0x8DC0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY_SHADOW</name></cpp:macro> <cpp:value>0x8DC3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_SHADOW</name></cpp:macro> <cpp:value>0x8B61</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8B5E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DC1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY_SHADOW</name></cpp:macro> <cpp:value>0x8DC4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9108</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x910B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_RECT</name></cpp:macro> <cpp:value>0x8B63</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_RECT_SHADOW</name></cpp:macro> <cpp:value>0x8B64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_SHADOW</name></cpp:macro> <cpp:value>0x8B62</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8B5F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_BINDING</name></cpp:macro> <cpp:value>0x8919</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_BUFFER</name></cpp:macro> <cpp:value>0x8DC2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8B60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_SHADOW</name></cpp:macro> <cpp:value>0x8DC5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES</name></cpp:macro> <cpp:value>0x80A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_ARB</name></cpp:macro> <cpp:value>0x80A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_PASSED</name></cpp:macro> <cpp:value>0x8914</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_COVERAGE</name></cpp:macro> <cpp:value>0x809E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_COVERAGE_ARB</name></cpp:macro> <cpp:value>0x809E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_ONE</name></cpp:macro> <cpp:value>0x809F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_ONE_ARB</name></cpp:macro> <cpp:value>0x809F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS</name></cpp:macro> <cpp:value>0x80A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS_ARB</name></cpp:macro> <cpp:value>0x80A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE</name></cpp:macro> <cpp:value>0x80A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_ARB</name></cpp:macro> <cpp:value>0x80A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_INVERT</name></cpp:macro> <cpp:value>0x80AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_INVERT_ARB</name></cpp:macro> <cpp:value>0x80AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_VALUE</name></cpp:macro> <cpp:value>0x80AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_VALUE_ARB</name></cpp:macro> <cpp:value>0x80AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK</name></cpp:macro> <cpp:value>0x8E51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_VALUE</name></cpp:macro> <cpp:value>0x8E52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_POSITION</name></cpp:macro> <cpp:value>0x8E50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCISSOR_BIT</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCISSOR_BOX</name></cpp:macro> <cpp:value>0x0C10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCISSOR_TEST</name></cpp:macro> <cpp:value>0x0C11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY</name></cpp:macro> <cpp:value>0x845E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x845D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x845A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x845C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x845B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SELECT</name></cpp:macro> <cpp:value>0x1C02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SELECTION_BUFFER_POINTER</name></cpp:macro> <cpp:value>0x0DF3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SELECTION_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x0DF4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARATE_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARATE_SPECULAR_COLOR</name></cpp:macro> <cpp:value>0x81FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SET</name></cpp:macro> <cpp:value>0x150F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER</name></cpp:macro> <cpp:value>0x82E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_SOURCE_LENGTH</name></cpp:macro> <cpp:value>0x8B88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_TYPE</name></cpp:macro> <cpp:value>0x8B4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADE_MODEL</name></cpp:macro> <cpp:value>0x0B54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADING_LANGUAGE_VERSION</name></cpp:macro> <cpp:value>0x8B8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHININESS</name></cpp:macro> <cpp:value>0x1601</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHORT</name></cpp:macro> <cpp:value>0x1402</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNALED</name></cpp:macro> <cpp:value>0x9119</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_NORMALIZED</name></cpp:macro> <cpp:value>0x8F9C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SINGLE_COLOR</name></cpp:macro> <cpp:value>0x81F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE</name></cpp:macro> <cpp:value>0x8C46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE8</name></cpp:macro> <cpp:value>0x8C47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE8_ALPHA8</name></cpp:macro> <cpp:value>0x8C45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE_ALPHA</name></cpp:macro> <cpp:value>0x8C44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH</name></cpp:macro> <cpp:value>0x1D01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_LINE_WIDTH_GRANULARITY</name></cpp:macro> <cpp:value>0x0B23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_LINE_WIDTH_RANGE</name></cpp:macro> <cpp:value>0x0B22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_POINT_SIZE_GRANULARITY</name></cpp:macro> <cpp:value>0x0B13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_POINT_SIZE_RANGE</name></cpp:macro> <cpp:value>0x0B12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE0_ALPHA</name></cpp:macro> <cpp:value>0x8588</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE0_RGB</name></cpp:macro> <cpp:value>0x8580</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE1_ALPHA</name></cpp:macro> <cpp:value>0x8589</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE1_RGB</name></cpp:macro> <cpp:value>0x8581</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE2_ALPHA</name></cpp:macro> <cpp:value>0x858A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE2_RGB</name></cpp:macro> <cpp:value>0x8582</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPECULAR</name></cpp:macro> <cpp:value>0x1202</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPHERE_MAP</name></cpp:macro> <cpp:value>0x2402</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPOT_CUTOFF</name></cpp:macro> <cpp:value>0x1206</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPOT_DIRECTION</name></cpp:macro> <cpp:value>0x1204</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPOT_EXPONENT</name></cpp:macro> <cpp:value>0x1205</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC0_ALPHA</name></cpp:macro> <cpp:value>0x8588</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC0_RGB</name></cpp:macro> <cpp:value>0x8580</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC1_ALPHA</name></cpp:macro> <cpp:value>0x8589</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC1_COLOR</name></cpp:macro> <cpp:value>0x88F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC1_RGB</name></cpp:macro> <cpp:value>0x8581</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC2_ALPHA</name></cpp:macro> <cpp:value>0x858A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC2_RGB</name></cpp:macro> <cpp:value>0x8582</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_ALPHA</name></cpp:macro> <cpp:value>0x0302</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_ALPHA_SATURATE</name></cpp:macro> <cpp:value>0x0308</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_COLOR</name></cpp:macro> <cpp:value>0x0300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB</name></cpp:macro> <cpp:value>0x8C40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8</name></cpp:macro> <cpp:value>0x8C41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8_ALPHA8</name></cpp:macro> <cpp:value>0x8C43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_ALPHA</name></cpp:macro> <cpp:value>0x8C42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STACK_OVERFLOW</name></cpp:macro> <cpp:value>0x0503</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STACK_UNDERFLOW</name></cpp:macro> <cpp:value>0x0504</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_COPY</name></cpp:macro> <cpp:value>0x88E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_DRAW</name></cpp:macro> <cpp:value>0x88E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_READ</name></cpp:macro> <cpp:value>0x88E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL</name></cpp:macro> <cpp:value>0x1802</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_ATTACHMENT</name></cpp:macro> <cpp:value>0x8D20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FAIL</name></cpp:macro> <cpp:value>0x8801</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FUNC</name></cpp:macro> <cpp:value>0x8800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_FAIL</name></cpp:macro> <cpp:value>0x8802</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_PASS</name></cpp:macro> <cpp:value>0x8803</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_REF</name></cpp:macro> <cpp:value>0x8CA3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_VALUE_MASK</name></cpp:macro> <cpp:value>0x8CA4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_WRITEMASK</name></cpp:macro> <cpp:value>0x8CA5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BITS</name></cpp:macro> <cpp:value>0x0D57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0B91</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_FAIL</name></cpp:macro> <cpp:value>0x0B94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_FUNC</name></cpp:macro> <cpp:value>0x0B92</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX</name></cpp:macro> <cpp:value>0x1901</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX1</name></cpp:macro> <cpp:value>0x8D46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX16</name></cpp:macro> <cpp:value>0x8D49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX4</name></cpp:macro> <cpp:value>0x8D47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX8</name></cpp:macro> <cpp:value>0x8D48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_PASS_DEPTH_FAIL</name></cpp:macro> <cpp:value>0x0B95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_PASS_DEPTH_PASS</name></cpp:macro> <cpp:value>0x0B96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_REF</name></cpp:macro> <cpp:value>0x0B97</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_TEST</name></cpp:macro> <cpp:value>0x0B90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_VALUE_MASK</name></cpp:macro> <cpp:value>0x0B93</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_WRITEMASK</name></cpp:macro> <cpp:value>0x0B98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STEREO</name></cpp:macro> <cpp:value>0x0C33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_COPY</name></cpp:macro> <cpp:value>0x88E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_DRAW</name></cpp:macro> <cpp:value>0x88E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_READ</name></cpp:macro> <cpp:value>0x88E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUBPIXEL_BITS</name></cpp:macro> <cpp:value>0x0D50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUBTRACT</name></cpp:macro> <cpp:value>0x84E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_CONDITION</name></cpp:macro> <cpp:value>0x9113</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FENCE</name></cpp:macro> <cpp:value>0x9116</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FLAGS</name></cpp:macro> <cpp:value>0x9115</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FLUSH_COMMANDS_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_GPU_COMMANDS_COMPLETE</name></cpp:macro> <cpp:value>0x9117</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_STATUS</name></cpp:macro> <cpp:value>0x9114</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T</name></cpp:macro> <cpp:value>0x2001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_C3F_V3F</name></cpp:macro> <cpp:value>0x2A2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_C4F_N3F_V3F</name></cpp:macro> <cpp:value>0x2A2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_C4UB_V3F</name></cpp:macro> <cpp:value>0x2A29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_N3F_V3F</name></cpp:macro> <cpp:value>0x2A2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_V3F</name></cpp:macro> <cpp:value>0x2A27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T4F_C4F_N3F_V4F</name></cpp:macro> <cpp:value>0x2A2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T4F_V4F</name></cpp:macro> <cpp:value>0x2A28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE</name></cpp:macro> <cpp:value>0x1702</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE0</name></cpp:macro> <cpp:value>0x84C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE1</name></cpp:macro> <cpp:value>0x84C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE10</name></cpp:macro> <cpp:value>0x84CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE11</name></cpp:macro> <cpp:value>0x84CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE12</name></cpp:macro> <cpp:value>0x84CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE13</name></cpp:macro> <cpp:value>0x84CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE14</name></cpp:macro> <cpp:value>0x84CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE15</name></cpp:macro> <cpp:value>0x84CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE16</name></cpp:macro> <cpp:value>0x84D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE17</name></cpp:macro> <cpp:value>0x84D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE18</name></cpp:macro> <cpp:value>0x84D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE19</name></cpp:macro> <cpp:value>0x84D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE2</name></cpp:macro> <cpp:value>0x84C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE20</name></cpp:macro> <cpp:value>0x84D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE21</name></cpp:macro> <cpp:value>0x84D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE22</name></cpp:macro> <cpp:value>0x84D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE23</name></cpp:macro> <cpp:value>0x84D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE24</name></cpp:macro> <cpp:value>0x84D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE25</name></cpp:macro> <cpp:value>0x84D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE26</name></cpp:macro> <cpp:value>0x84DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE27</name></cpp:macro> <cpp:value>0x84DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE28</name></cpp:macro> <cpp:value>0x84DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE29</name></cpp:macro> <cpp:value>0x84DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE3</name></cpp:macro> <cpp:value>0x84C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE30</name></cpp:macro> <cpp:value>0x84DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE31</name></cpp:macro> <cpp:value>0x84DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE4</name></cpp:macro> <cpp:value>0x84C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE5</name></cpp:macro> <cpp:value>0x84C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE6</name></cpp:macro> <cpp:value>0x84C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE7</name></cpp:macro> <cpp:value>0x84C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE8</name></cpp:macro> <cpp:value>0x84C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE9</name></cpp:macro> <cpp:value>0x84C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D</name></cpp:macro> <cpp:value>0x0DE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D_ARRAY</name></cpp:macro> <cpp:value>0x8C18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D</name></cpp:macro> <cpp:value>0x0DE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9102</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_3D</name></cpp:macro> <cpp:value>0x806F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x805F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ALPHA_TYPE</name></cpp:macro> <cpp:value>0x8C13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BASE_LEVEL</name></cpp:macro> <cpp:value>0x813C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_1D</name></cpp:macro> <cpp:value>0x8068</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_1D_ARRAY</name></cpp:macro> <cpp:value>0x8C1C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D</name></cpp:macro> <cpp:value>0x8069</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9104</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9105</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_3D</name></cpp:macro> <cpp:value>0x806A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_BUFFER</name></cpp:macro> <cpp:value>0x8C2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_CUBE_MAP</name></cpp:macro> <cpp:value>0x8514</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_RECTANGLE</name></cpp:macro> <cpp:value>0x84F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BIT</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BLUE_SIZE</name></cpp:macro> <cpp:value>0x805E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BLUE_TYPE</name></cpp:macro> <cpp:value>0x8C12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BORDER</name></cpp:macro> <cpp:value>0x1005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BORDER_COLOR</name></cpp:macro> <cpp:value>0x1004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER</name></cpp:macro> <cpp:value>0x8C2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_DATA_STORE_BINDING</name></cpp:macro> <cpp:value>0x8C2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_FUNC</name></cpp:macro> <cpp:value>0x884D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_MODE</name></cpp:macro> <cpp:value>0x884C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPONENTS</name></cpp:macro> <cpp:value>0x1003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED</name></cpp:macro> <cpp:value>0x86A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_IMAGE_SIZE</name></cpp:macro> <cpp:value>0x86A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSION_HINT</name></cpp:macro> <cpp:value>0x84EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY</name></cpp:macro> <cpp:value>0x8078</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x8092</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x8088</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x808A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x8089</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP</name></cpp:macro> <cpp:value>0x8513</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_X</name></cpp:macro> <cpp:value>0x8516</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</name></cpp:macro> <cpp:value>0x8518</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</name></cpp:macro> <cpp:value>0x851A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name></cpp:macro> <cpp:value>0x8515</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Y</name></cpp:macro> <cpp:value>0x8517</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Z</name></cpp:macro> <cpp:value>0x8519</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_SEAMLESS</name></cpp:macro> <cpp:value>0x884F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH</name></cpp:macro> <cpp:value>0x8071</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x884A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_TYPE</name></cpp:macro> <cpp:value>0x8C16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ENV</name></cpp:macro> <cpp:value>0x2300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ENV_COLOR</name></cpp:macro> <cpp:value>0x2201</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ENV_MODE</name></cpp:macro> <cpp:value>0x2200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FILTER_CONTROL</name></cpp:macro> <cpp:value>0x8500</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FIXED_SAMPLE_LOCATIONS</name></cpp:macro> <cpp:value>0x9107</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GEN_MODE</name></cpp:macro> <cpp:value>0x2500</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GEN_Q</name></cpp:macro> <cpp:value>0x0C63</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GEN_R</name></cpp:macro> <cpp:value>0x0C62</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GEN_S</name></cpp:macro> <cpp:value>0x0C60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GEN_T</name></cpp:macro> <cpp:value>0x0C61</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GREEN_SIZE</name></cpp:macro> <cpp:value>0x805D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GREEN_TYPE</name></cpp:macro> <cpp:value>0x8C11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_HEIGHT</name></cpp:macro> <cpp:value>0x1001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTENSITY_SIZE</name></cpp:macro> <cpp:value>0x8061</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTENSITY_TYPE</name></cpp:macro> <cpp:value>0x8C15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTERNAL_FORMAT</name></cpp:macro> <cpp:value>0x1003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LOD_BIAS</name></cpp:macro> <cpp:value>0x8501</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LUMINANCE_SIZE</name></cpp:macro> <cpp:value>0x8060</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LUMINANCE_TYPE</name></cpp:macro> <cpp:value>0x8C14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAG_FILTER</name></cpp:macro> <cpp:value>0x2800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MATRIX</name></cpp:macro> <cpp:value>0x0BA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LEVEL</name></cpp:macro> <cpp:value>0x813D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LOD</name></cpp:macro> <cpp:value>0x813B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MIN_FILTER</name></cpp:macro> <cpp:value>0x2801</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MIN_LOD</name></cpp:macro> <cpp:value>0x813A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_PRIORITY</name></cpp:macro> <cpp:value>0x8066</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RECTANGLE</name></cpp:macro> <cpp:value>0x84F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_SIZE</name></cpp:macro> <cpp:value>0x805C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_TYPE</name></cpp:macro> <cpp:value>0x8C10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RESIDENT</name></cpp:macro> <cpp:value>0x8067</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SAMPLES</name></cpp:macro> <cpp:value>0x9106</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SHARED_SIZE</name></cpp:macro> <cpp:value>0x8C3F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_STACK_DEPTH</name></cpp:macro> <cpp:value>0x0BA5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x88F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_A</name></cpp:macro> <cpp:value>0x8E45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_B</name></cpp:macro> <cpp:value>0x8E44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_G</name></cpp:macro> <cpp:value>0x8E43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_R</name></cpp:macro> <cpp:value>0x8E42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_RGBA</name></cpp:macro> <cpp:value>0x8E46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WIDTH</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_R</name></cpp:macro> <cpp:value>0x8072</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_S</name></cpp:macro> <cpp:value>0x2802</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_T</name></cpp:macro> <cpp:value>0x2803</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMEOUT_EXPIRED</name></cpp:macro> <cpp:value>0x911B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMEOUT_IGNORED</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMESTAMP</name></cpp:macro> <cpp:value>0x8E28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIME_ELAPSED</name></cpp:macro> <cpp:value>0x88BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_BIT</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER</name></cpp:macro> <cpp:value>0x8C8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8C8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_MODE</name></cpp:macro> <cpp:value>0x8C7F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8C85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_START</name></cpp:macro> <cpp:value>0x8C84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN</name></cpp:macro> <cpp:value>0x8C88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYINGS</name></cpp:macro> <cpp:value>0x8C83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8C76</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_COLOR_MATRIX</name></cpp:macro> <cpp:value>0x84E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_MODELVIEW_MATRIX</name></cpp:macro> <cpp:value>0x84E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_PROJECTION_MATRIX</name></cpp:macro> <cpp:value>0x84E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_TEXTURE_MATRIX</name></cpp:macro> <cpp:value>0x84E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLES</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLES_ADJACENCY</name></cpp:macro> <cpp:value>0x000C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_FAN</name></cpp:macro> <cpp:value>0x0006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_STRIP</name></cpp:macro> <cpp:value>0x0005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_STRIP_ADJACENCY</name></cpp:macro> <cpp:value>0x000D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8A3C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS</name></cpp:macro> <cpp:value>0x8A42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES</name></cpp:macro> <cpp:value>0x8A43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_BINDING</name></cpp:macro> <cpp:value>0x8A3F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_DATA_SIZE</name></cpp:macro> <cpp:value>0x8A40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_INDEX</name></cpp:macro> <cpp:value>0x8A3A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x8A46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER</name></cpp:macro> <cpp:value>0x8A45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x8A44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER</name></cpp:macro> <cpp:value>0x8A11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8A28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT</name></cpp:macro> <cpp:value>0x8A34</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8A2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_START</name></cpp:macro> <cpp:value>0x8A29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_IS_ROW_MAJOR</name></cpp:macro> <cpp:value>0x8A3E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_MATRIX_STRIDE</name></cpp:macro> <cpp:value>0x8A3D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A39</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_OFFSET</name></cpp:macro> <cpp:value>0x8A3B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_SIZE</name></cpp:macro> <cpp:value>0x8A38</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_TYPE</name></cpp:macro> <cpp:value>0x8A37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNKNOWN_CONTEXT_RESET_ARB</name></cpp:macro> <cpp:value>0x8255</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_ALIGNMENT</name></cpp:macro> <cpp:value>0x0CF5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_IMAGE_HEIGHT</name></cpp:macro> <cpp:value>0x806E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_LSB_FIRST</name></cpp:macro> <cpp:value>0x0CF1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_ROW_LENGTH</name></cpp:macro> <cpp:value>0x0CF2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_IMAGES</name></cpp:macro> <cpp:value>0x806D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_PIXELS</name></cpp:macro> <cpp:value>0x0CF4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_ROWS</name></cpp:macro> <cpp:value>0x0CF3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SWAP_BYTES</name></cpp:macro> <cpp:value>0x0CF0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNALED</name></cpp:macro> <cpp:value>0x9118</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE</name></cpp:macro> <cpp:value>0x1401</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE_2_3_3_REV</name></cpp:macro> <cpp:value>0x8362</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE_3_3_2</name></cpp:macro> <cpp:value>0x8032</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT</name></cpp:macro> <cpp:value>0x1405</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10F_11F_11F_REV</name></cpp:macro> <cpp:value>0x8C3B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10_10_10_2</name></cpp:macro> <cpp:value>0x8036</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_24_8</name></cpp:macro> <cpp:value>0x84FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_2_10_10_10_REV</name></cpp:macro> <cpp:value>0x8368</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_5_9_9_9_REV</name></cpp:macro> <cpp:value>0x8C3E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_8_8_8_8</name></cpp:macro> <cpp:value>0x8035</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_8_8_8_8_REV</name></cpp:macro> <cpp:value>0x8367</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_1D</name></cpp:macro> <cpp:value>0x8DD1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_1D_ARRAY</name></cpp:macro> <cpp:value>0x8DD6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8DD2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DD7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x910A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x910D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_RECT</name></cpp:macro> <cpp:value>0x8DD5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8DD3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_BUFFER</name></cpp:macro> <cpp:value>0x8DD8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8DD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC2</name></cpp:macro> <cpp:value>0x8DC6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC3</name></cpp:macro> <cpp:value>0x8DC7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC4</name></cpp:macro> <cpp:value>0x8DC8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_NORMALIZED</name></cpp:macro> <cpp:value>0x8C17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT</name></cpp:macro> <cpp:value>0x1403</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_1_5_5_5_REV</name></cpp:macro> <cpp:value>0x8366</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4</name></cpp:macro> <cpp:value>0x8033</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4_REV</name></cpp:macro> <cpp:value>0x8365</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_5_5_1</name></cpp:macro> <cpp:value>0x8034</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_6_5</name></cpp:macro> <cpp:value>0x8363</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_6_5_REV</name></cpp:macro> <cpp:value>0x8364</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UPPER_LEFT</name></cpp:macro> <cpp:value>0x8CA2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_V2F</name></cpp:macro> <cpp:value>0x2A20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_V3F</name></cpp:macro> <cpp:value>0x2A21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VALIDATE_STATUS</name></cpp:macro> <cpp:value>0x8B83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VENDOR</name></cpp:macro> <cpp:value>0x1F00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION</name></cpp:macro> <cpp:value>0x1F02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY</name></cpp:macro> <cpp:value>0x8074</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_BINDING</name></cpp:macro> <cpp:value>0x85B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8896</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x808E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x807A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x807C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x807B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_DIVISOR</name></cpp:macro> <cpp:value>0x88FE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_ENABLED</name></cpp:macro> <cpp:value>0x8622</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_INTEGER</name></cpp:macro> <cpp:value>0x88FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED</name></cpp:macro> <cpp:value>0x886A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x8645</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x8623</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8624</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x8625</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_POINT_SIZE</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_TWO_SIDE</name></cpp:macro> <cpp:value>0x8643</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x8B31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEWPORT</name></cpp:macro> <cpp:value>0x0BA2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEWPORT_BIT</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WAIT_FAILED</name></cpp:macro> <cpp:value>0x911D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_ONLY</name></cpp:macro> <cpp:value>0x88B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_XOR</name></cpp:macro> <cpp:value>0x1506</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ZERO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ZOOM_X</name></cpp:macro> <cpp:value>0x0D16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ZOOM_Y</name></cpp:macro> <cpp:value>0x0D17</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glad/khrplatform.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLenum</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>GLboolean</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLbitfield</name>;</typedef>

<typedef>typedef <type><name>void</name></type> <name>GLvoid</name>;</typedef>

<typedef>typedef <type><name>khronos_int8_t</name></type> <name>GLbyte</name>;</typedef>

<typedef>typedef <type><name>khronos_uint8_t</name></type> <name>GLubyte</name>;</typedef>

<typedef>typedef <type><name>khronos_int16_t</name></type> <name>GLshort</name>;</typedef>

<typedef>typedef <type><name>khronos_uint16_t</name></type> <name>GLushort</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>GLint</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLuint</name>;</typedef>

<typedef>typedef <type><name>khronos_int32_t</name></type> <name>GLclampx</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>GLsizei</name>;</typedef>

<typedef>typedef <type><name>khronos_float_t</name></type> <name>GLfloat</name>;</typedef>

<typedef>typedef <type><name>khronos_float_t</name></type> <name>GLclampf</name>;</typedef>

<typedef>typedef <type><name>double</name></type> <name>GLdouble</name>;</typedef>

<typedef>typedef <type><name>double</name></type> <name>GLclampd</name>;</typedef>

<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>GLeglClientBufferEXT</name>;</typedef>

<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>GLeglImageOES</name>;</typedef>

<typedef>typedef <type><name>char</name></type> <name>GLchar</name>;</typedef>

<typedef>typedef <type><name>char</name></type> <name>GLcharARB</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>GLhandleARB</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLhandleARB</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>khronos_uint16_t</name></type> <name>GLhalf</name>;</typedef>

<typedef>typedef <type><name>khronos_uint16_t</name></type> <name>GLhalfARB</name>;</typedef>

<typedef>typedef <type><name>khronos_int32_t</name></type> <name>GLfixed</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name> <operator>&gt;</operator> <literal type="number">1060</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><name>khronos_intptr_t</name></type> <name>GLintptr</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>khronos_intptr_t</name></type> <name>GLintptr</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name> <operator>&gt;</operator> <literal type="number">1060</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><name>khronos_intptr_t</name></type> <name>GLintptrARB</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>khronos_intptr_t</name></type> <name>GLintptrARB</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name> <operator>&gt;</operator> <literal type="number">1060</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><name>khronos_ssize_t</name></type> <name>GLsizeiptr</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>khronos_ssize_t</name></type> <name>GLsizeiptr</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name> <operator>&gt;</operator> <literal type="number">1060</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><name>khronos_ssize_t</name></type> <name>GLsizeiptrARB</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>khronos_ssize_t</name></type> <name>GLsizeiptrARB</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>khronos_int64_t</name></type> <name>GLint64</name>;</typedef>

<typedef>typedef <type><name>khronos_int64_t</name></type> <name>GLint64EXT</name>;</typedef>

<typedef>typedef <type><name>khronos_uint64_t</name></type> <name>GLuint64</name>;</typedef>

<typedef>typedef <type><name>khronos_uint64_t</name></type> <name>GLuint64EXT</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>__GLsync</name></name> <modifier>*</modifier></type><name>GLsync</name>;</typedef>

<struct_decl>struct <name>_cl_context</name>;</struct_decl>

<struct_decl>struct <name>_cl_event</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>void</name></type> ( <modifier>*</modifier><name>GLDEBUGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>,<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> ( <modifier>*</modifier><name>GLDEBUGPROCARB</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>,<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> ( <modifier>*</modifier><name>GLDEBUGPROCKHR</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>,<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> ( <modifier>*</modifier><name>GLDEBUGPROCAMD</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>category</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>GLhalfNV</name>;</typedef>

<typedef>typedef <type><name>GLintptr</name></type> <name>GLvdpauSurfaceNV</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> ( <modifier>*</modifier><name>GLVULKANPROCNV</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_0</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_1</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_2</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_3</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_4</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_5</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_5</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_2_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_VERSION_2_0</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_2_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_VERSION_2_1</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_VERSION_3_0</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_VERSION_3_1</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_VERSION_3_2</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_VERSION_3_3</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_ARB_multisample</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_robustness</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_ARB_robustness</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_KHR_debug</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_GL_KHR_debug</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLACCUMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLACTIVETEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLALPHAFUNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>ref</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLARETEXTURESRESIDENTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>textures</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name> <modifier>*</modifier></type> <name>residences</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLARRAYELEMENTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLATTACHSHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBEGINPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBEGINCONDITIONALRENDERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBEGINQUERYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBEGINTRANSFORMFEEDBACKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>primitiveMode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBINDATTRIBLOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBINDBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBINDBUFFERBASEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBINDBUFFERRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBINDFRAGDATALOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBINDFRAGDATALOCATIONINDEXEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>colorNumber</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBINDFRAMEBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>framebuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBINDRENDERBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>renderbuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBINDSAMPLERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBINDTEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBINDVERTEXARRAYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBITMAPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>xorig</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>yorig</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>xmove</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>ymove</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name> <modifier>*</modifier></type> <name>bitmap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBLENDCOLORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBLENDEQUATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBLENDEQUATIONSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>modeRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>modeAlpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBLENDFUNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>sfactor</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dfactor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBLENDFUNCSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>sfactorRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dfactorRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>sfactorAlpha</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dfactorAlpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBLITFRAMEBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>srcX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY1</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBUFFERDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>usage</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLBUFFERSUBDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCALLLISTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCALLLISTSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>lists</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCHECKFRAMEBUFFERSTATUSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLAMPCOLORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>clamp</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLEARPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLEARACCUMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLEARBUFFERFIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>drawbuffer</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>stencil</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLEARBUFFERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>drawbuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLEARBUFFERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>drawbuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLEARBUFFERUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>drawbuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLEARCOLORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLEARDEPTHPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLEARINDEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLEARSTENCILPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLIENTACTIVETEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLIENTWAITSYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCLIPPLANEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>equation</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3BPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3BVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3UBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLubyte</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3UBVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLubyte</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3UIVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3USPROC</name>)<parameter_list>(<parameter><decl><type><name>GLushort</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLushort</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLushort</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR3USVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLushort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4BPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4BVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4UBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLubyte</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4UBVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLubyte</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4UIVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4USPROC</name>)<parameter_list>(<parameter><decl><type><name>GLushort</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLushort</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLushort</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLushort</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLOR4USVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLushort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLORMASKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLboolean</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLORMASKIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLORMATERIALPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLORP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLORP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLORP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLORP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOLORPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOMPILESHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOMPRESSEDTEXIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOMPRESSEDTEXIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOMPRESSEDTEXIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOPYBUFFERSUBDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>readTarget</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>writeTarget</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>readOffset</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>writeOffset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOPYPIXELSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOPYTEXIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOPYTEXIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOPYTEXSUBIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOPYTEXSUBIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCOPYTEXSUBIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCREATEPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCREATESHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLCULLFACEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDEBUGMESSAGECALLBACKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLDEBUGPROC</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDEBUGMESSAGECONTROLPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>ids</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDEBUGMESSAGEINSERTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDELETEBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>buffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDELETEFRAMEBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>framebuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDELETELISTSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDELETEPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDELETEQUERIESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>ids</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDELETERENDERBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>renderbuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDELETESAMPLERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>samplers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDELETESHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDELETESYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDELETETEXTURESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>textures</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDELETEVERTEXARRAYSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>arrays</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDEPTHFUNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>func</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDEPTHMASKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLboolean</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDEPTHRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDETACHSHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDISABLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDISABLECLIENTSTATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDISABLEVERTEXATTRIBARRAYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDISABLEIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDRAWARRAYSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDRAWARRAYSINSTANCEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>instancecount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDRAWBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDRAWBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name> <modifier>*</modifier></type> <name>bufs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDRAWELEMENTSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>indices</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDRAWELEMENTSBASEVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>basevertex</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDRAWELEMENTSINSTANCEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>instancecount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>instancecount</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>basevertex</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDRAWPIXELSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDRAWRANGEELEMENTSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>indices</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>basevertex</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEDGEFLAGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLboolean</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEDGEFLAGPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEDGEFLAGVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLboolean</name> <modifier>*</modifier></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLENABLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLENABLECLIENTSTATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLENABLEVERTEXATTRIBARRAYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLENABLEIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLENDPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLENDCONDITIONALRENDERPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLENDLISTPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLENDQUERYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLENDTRANSFORMFEEDBACKPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEVALCOORD1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>u</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEVALCOORD1DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>u</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEVALCOORD1FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>u</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEVALCOORD1FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>u</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEVALCOORD2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEVALCOORD2DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>u</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEVALCOORD2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEVALCOORD2FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>u</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEVALMESH1PROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>i1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>i2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEVALMESH2PROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>i1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>i2</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>j1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>j2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEVALPOINT1PROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLEVALPOINT2PROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>j</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFEEDBACKBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLsync</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFENCESYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFINISHPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFLUSHPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFLUSHMAPPEDBUFFERRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFOGCOORDPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFOGCOORDDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>coord</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFOGCOORDDVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>coord</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFOGCOORDFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>coord</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFOGCOORDFVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>coord</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFOGFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFOGFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFOGIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFOGIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFRAMEBUFFERRENDERBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>renderbuffertarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>renderbuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFRAMEBUFFERTEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFRAMEBUFFERTEXTURE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFRAMEBUFFERTEXTURE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFRAMEBUFFERTEXTURE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFRAMEBUFFERTEXTURELAYERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>layer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFRONTFACEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLFRUSTUMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>zNear</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>zFar</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGENBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>buffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGENFRAMEBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>framebuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGENLISTSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGENQUERIESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>ids</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGENRENDERBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>renderbuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGENSAMPLERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>samplers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGENTEXTURESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>textures</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGENVERTEXARRAYSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>arrays</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGENERATEMIPMAPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETACTIVEATTRIBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETACTIVEUNIFORMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformBlockIndex</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type> <name>uniformBlockName</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETACTIVEUNIFORMBLOCKIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformBlockIndex</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETACTIVEUNIFORMNAMEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformIndex</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type> <name>uniformName</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETACTIVEUNIFORMSIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>uniformCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>uniformIndices</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETATTACHEDSHADERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>maxCount</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>shaders</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETATTRIBLOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETBOOLEANI_VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETBOOLEANVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETBUFFERPARAMETERI64VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint64</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETBUFFERPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETBUFFERPOINTERVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETBUFFERSUBDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETCLIPPLANEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name> <modifier>*</modifier></type> <name>equation</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETCOMPRESSEDTEXIMAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>img</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETDEBUGMESSAGELOGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type> <name>sources</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type> <name>types</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>ids</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type> <name>severities</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>lengths</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type> <name>messageLog</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETDOUBLEVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETERRORPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETFLOATVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETFRAGDATAINDEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETFRAGDATALOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETGRAPHICSRESETSTATUSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETINTEGER64I_VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint64</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETINTEGER64VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint64</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETINTEGERI_VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETINTEGERVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETLIGHTFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>light</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETLIGHTIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>light</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETMAPDVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETMAPFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETMAPIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETMATERIALFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETMATERIALIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETMULTISAMPLEFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETOBJECTLABELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>identifier</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETOBJECTPTRLABELPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETPIXELMAPFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETPIXELMAPUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETPIXELMAPUSVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>GLushort</name> <modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETPOINTERVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETPOLYGONSTIPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLubyte</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETPROGRAMINFOLOGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type> <name>infoLog</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETPROGRAMIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETQUERYOBJECTI64VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint64</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETQUERYOBJECTIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETQUERYOBJECTUI64VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint64</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETQUERYOBJECTUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETQUERYIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETRENDERBUFFERPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETSAMPLERPARAMETERIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETSAMPLERPARAMETERIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETSAMPLERPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETSAMPLERPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETSHADERINFOLOGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type> <name>infoLog</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETSHADERSOURCEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETSHADERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>GLubyte</name> <modifier>*</modifier></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETSTRINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>GLubyte</name> <modifier>*</modifier></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETSTRINGIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETSYNCIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETTEXENVFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETTEXENVIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETTEXGENDVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETTEXGENFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETTEXGENIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETTEXIMAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETTEXLEVELPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETTEXLEVELPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETTEXPARAMETERIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETTEXPARAMETERIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETTEXPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETTEXPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETTRANSFORMFEEDBACKVARYINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETUNIFORMBLOCKINDEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type> <name>uniformBlockName</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETUNIFORMINDICESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>uniformCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type> <name>uniformNames</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>uniformIndices</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETUNIFORMLOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETUNIFORMFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETUNIFORMIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETUNIFORMUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETVERTEXATTRIBIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETVERTEXATTRIBIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETVERTEXATTRIBPOINTERVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETVERTEXATTRIBDVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETVERTEXATTRIBFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETVERTEXATTRIBIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNCOLORTABLEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>lod</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>img</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNCONVOLUTIONFILTERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNHISTOGRAMARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>reset</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNMAPDVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNMAPFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNMAPIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNMINMAXARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>reset</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNPIXELMAPFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNPIXELMAPUIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNPIXELMAPUSVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLushort</name> <modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNPOLYGONSTIPPLEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name> <modifier>*</modifier></type> <name>pattern</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNSEPARABLEFILTERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>rowBufSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>columnBufSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>span</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNTEXIMAGEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>img</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNUNIFORMDVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNUNIFORMFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNUNIFORMIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLGETNUNIFORMUIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLHINTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINDEXMASKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINDEXPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINDEXDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINDEXDVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINDEXFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINDEXFVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINDEXIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINDEXIVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINDEXSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINDEXSVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINDEXUBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLubyte</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINDEXUBVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLubyte</name> <modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINITNAMESPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLINTERLEAVEDARRAYSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLISBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLISENABLEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLISENABLEDIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLISFRAMEBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>framebuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLISLISTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLISPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLISQUERYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLISRENDERBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>renderbuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLISSAMPLERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLISSHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLISSYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLISTEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLISVERTEXARRAYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLIGHTMODELFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLIGHTMODELFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLIGHTMODELIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLIGHTMODELIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLIGHTFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>light</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLIGHTFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>light</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLIGHTIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>light</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLIGHTIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>light</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLINESTIPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>factor</name></decl></parameter>, <parameter><decl><type><name>GLushort</name></type> <name>pattern</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLINEWIDTHPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLINKPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLISTBASEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>base</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLOADIDENTITYPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLOADMATRIXDPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLOADMATRIXFPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLOADNAMEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLOADTRANSPOSEMATRIXDPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLOADTRANSPOSEMATRIXFPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLLOGICOPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>opcode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMAP1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>u2</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>points</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMAP1FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>u2</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>points</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMAP2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>u2</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>ustride</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>uorder</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>vstride</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>vorder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>points</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMAP2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>u2</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>ustride</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>uorder</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>vstride</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>vorder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>points</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMAPBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>access</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMAPBUFFERRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>access</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMAPGRID1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>un</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>u2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMAPGRID1FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>un</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>u2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMAPGRID2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>un</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>u2</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>vn</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMAPGRID2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>un</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>u2</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>vn</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMATERIALFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMATERIALFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMATERIALIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMATERIALIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMATRIXMODEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTMATRIXDPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTMATRIXFPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTTRANSPOSEMATRIXDPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTTRANSPOSEMATRIXFPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTIDRAWARRAYSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>drawcount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTIDRAWELEMENTSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>drawcount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>drawcount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>basevertex</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD1DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD1FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD1FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD1IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD1IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD1SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD1SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD2DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD2IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD2IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD2SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD2SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD3DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD3IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD3SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD3SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD4DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>q</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD4DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD4FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>q</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD4IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>q</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD4IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD4SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>q</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORD4SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORDP1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORDP1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORDP2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORDP2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORDP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORDP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORDP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLMULTITEXCOORDP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNEWLISTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNORMAL3BPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type> <name>nx</name></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type> <name>ny</name></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type> <name>nz</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNORMAL3BVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNORMAL3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>nx</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>ny</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>nz</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNORMAL3DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNORMAL3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>nx</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>ny</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>nz</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNORMAL3FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNORMAL3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>nx</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>ny</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>nz</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNORMAL3IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNORMAL3SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>nx</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>ny</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>nz</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNORMAL3SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNORMALP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNORMALP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLNORMALPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLOBJECTLABELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>identifier</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLOBJECTPTRLABELPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLORTHOPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>zNear</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>zFar</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPASSTHROUGHPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>token</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPIXELMAPFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>mapsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPIXELMAPUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>mapsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPIXELMAPUSVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>mapsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name> <modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPIXELSTOREFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPIXELSTOREIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPIXELTRANSFERFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPIXELTRANSFERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPIXELZOOMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>xfactor</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>yfactor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPOINTPARAMETERFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPOINTPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPOINTPARAMETERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPOINTPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPOINTSIZEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPOLYGONMODEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPOLYGONOFFSETPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>factor</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>units</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPOLYGONSTIPPLEPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLubyte</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPOPATTRIBPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPOPCLIENTATTRIBPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPOPDEBUGGROUPPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPOPMATRIXPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPOPNAMEPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPRIMITIVERESTARTINDEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPRIORITIZETEXTURESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>textures</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>priorities</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPROVOKINGVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPUSHATTRIBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPUSHCLIENTATTRIBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPUSHDEBUGGROUPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPUSHMATRIXPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLPUSHNAMEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLQUERYCOUNTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS2DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS2FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS2IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS2IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS2SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS2SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS3DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS3FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS3IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS3SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS3SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS4DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS4DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS4FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS4FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS4IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS4IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS4SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRASTERPOS4SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLREADBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLREADPIXELSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLREADNPIXELSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLREADNPIXELSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRECTDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRECTDVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRECTFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRECTFVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRECTIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRECTIVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRECTSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRECTSVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRENDERMODEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRENDERBUFFERSTORAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLROTATEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>angle</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLROTATEFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>angle</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSAMPLECOVERAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>invert</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSAMPLECOVERAGEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>invert</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSAMPLEMASKIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>maskNumber</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSAMPLERPARAMETERIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSAMPLERPARAMETERIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSAMPLERPARAMETERFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSAMPLERPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSAMPLERPARAMETERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSAMPLERPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSCALEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSCALEFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSCISSORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3BPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3BVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3UBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLubyte</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3UBVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLubyte</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3UIVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3USPROC</name>)<parameter_list>(<parameter><decl><type><name>GLushort</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLushort</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLushort</name></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLOR3USVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLushort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLORP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLORP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSECONDARYCOLORPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSELECTBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSHADEMODELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSHADERSOURCEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSTENCILFUNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSTENCILFUNCSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSTENCILMASKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSTENCILMASKSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSTENCILOPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>fail</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>zfail</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>zpass</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLSTENCILOPSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>sfail</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dpfail</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dppass</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD1DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD1FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD1FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD1IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD1IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD1SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD1SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD2DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD2FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD2IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD2IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD2SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD2SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD3DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD3FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD3IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD3SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD3SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD4DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>q</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD4DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD4FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>q</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD4FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD4IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>q</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD4IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD4SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>q</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORD4SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORDP1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORDP1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORDP2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORDP2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORDP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORDP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORDP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORDP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXCOORDPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXENVFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXENVFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXENVIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXENVIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXGENDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXGENDVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXGENFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXGENFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXGENIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXGENIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXIMAGE2DMULTISAMPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>fixedsamplelocations</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXIMAGE3DMULTISAMPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>fixedsamplelocations</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXPARAMETERIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXPARAMETERIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXPARAMETERFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXPARAMETERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXSUBIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXSUBIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTEXSUBIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTRANSFORMFEEDBACKVARYINGSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type> <name>varyings</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>bufferMode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTRANSLATEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLTRANSLATEFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM1FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v0</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM1FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM1IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v0</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM1IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v0</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v1</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM2IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v1</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM2IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v1</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM3IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM4FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v3</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM4IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v3</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM4IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v3</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORM4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORMBLOCKBINDINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformBlockIndex</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformBlockBinding</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORMMATRIX2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORMMATRIX2X3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORMMATRIX2X4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORMMATRIX3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORMMATRIX3X2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORMMATRIX3X4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORMMATRIX4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORMMATRIX4X2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNIFORMMATRIX4X3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUNMAPBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLUSEPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVALIDATEPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX2DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX2FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX2IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX2IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX2SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX2SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX3DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX3FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX3IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX3SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX3SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX4DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX4DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX4FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX4FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX4IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX4IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX4SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEX4SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB1DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB1FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB1FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB1SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB1SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB2DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB2SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB2SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB3DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB3SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB3SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4NBVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4NIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4NSVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4NUBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4NUBVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4NUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4NUSVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4BVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4UBVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIB4USVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBDIVISORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>divisor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI1IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI1IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI2IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI2IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI3IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI4BVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI4IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI4IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI4SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI4UBVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBI4USVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBIPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBP1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBP1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBP2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBP2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXATTRIBPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXP2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXP2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVERTEXPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLVIEWPORTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWAITSYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS2DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS2FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS2IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS2IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS2SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS2SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS3DVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS3FVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS3IVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS3SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFNGLWINDOWPOS3SVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLACCUMPROC</name></type> <name>glad_glAccum</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAccum</name></cpp:macro> <cpp:value>glad_glAccum</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLACTIVETEXTUREPROC</name></type> <name>glad_glActiveTexture</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glActiveTexture</name></cpp:macro> <cpp:value>glad_glActiveTexture</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLALPHAFUNCPROC</name></type> <name>glad_glAlphaFunc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAlphaFunc</name></cpp:macro> <cpp:value>glad_glAlphaFunc</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLARETEXTURESRESIDENTPROC</name></type> <name>glad_glAreTexturesResident</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAreTexturesResident</name></cpp:macro> <cpp:value>glad_glAreTexturesResident</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLARRAYELEMENTPROC</name></type> <name>glad_glArrayElement</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glArrayElement</name></cpp:macro> <cpp:value>glad_glArrayElement</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLATTACHSHADERPROC</name></type> <name>glad_glAttachShader</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAttachShader</name></cpp:macro> <cpp:value>glad_glAttachShader</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBEGINPROC</name></type> <name>glad_glBegin</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBegin</name></cpp:macro> <cpp:value>glad_glBegin</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBEGINCONDITIONALRENDERPROC</name></type> <name>glad_glBeginConditionalRender</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginConditionalRender</name></cpp:macro> <cpp:value>glad_glBeginConditionalRender</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBEGINQUERYPROC</name></type> <name>glad_glBeginQuery</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginQuery</name></cpp:macro> <cpp:value>glad_glBeginQuery</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBEGINTRANSFORMFEEDBACKPROC</name></type> <name>glad_glBeginTransformFeedback</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginTransformFeedback</name></cpp:macro> <cpp:value>glad_glBeginTransformFeedback</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBINDATTRIBLOCATIONPROC</name></type> <name>glad_glBindAttribLocation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindAttribLocation</name></cpp:macro> <cpp:value>glad_glBindAttribLocation</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBINDBUFFERPROC</name></type> <name>glad_glBindBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBuffer</name></cpp:macro> <cpp:value>glad_glBindBuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBINDBUFFERBASEPROC</name></type> <name>glad_glBindBufferBase</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferBase</name></cpp:macro> <cpp:value>glad_glBindBufferBase</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBINDBUFFERRANGEPROC</name></type> <name>glad_glBindBufferRange</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferRange</name></cpp:macro> <cpp:value>glad_glBindBufferRange</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBINDFRAGDATALOCATIONPROC</name></type> <name>glad_glBindFragDataLocation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFragDataLocation</name></cpp:macro> <cpp:value>glad_glBindFragDataLocation</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBINDFRAGDATALOCATIONINDEXEDPROC</name></type> <name>glad_glBindFragDataLocationIndexed</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFragDataLocationIndexed</name></cpp:macro> <cpp:value>glad_glBindFragDataLocationIndexed</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBINDFRAMEBUFFERPROC</name></type> <name>glad_glBindFramebuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFramebuffer</name></cpp:macro> <cpp:value>glad_glBindFramebuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBINDRENDERBUFFERPROC</name></type> <name>glad_glBindRenderbuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindRenderbuffer</name></cpp:macro> <cpp:value>glad_glBindRenderbuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBINDSAMPLERPROC</name></type> <name>glad_glBindSampler</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindSampler</name></cpp:macro> <cpp:value>glad_glBindSampler</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBINDTEXTUREPROC</name></type> <name>glad_glBindTexture</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindTexture</name></cpp:macro> <cpp:value>glad_glBindTexture</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBINDVERTEXARRAYPROC</name></type> <name>glad_glBindVertexArray</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindVertexArray</name></cpp:macro> <cpp:value>glad_glBindVertexArray</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBITMAPPROC</name></type> <name>glad_glBitmap</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBitmap</name></cpp:macro> <cpp:value>glad_glBitmap</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBLENDCOLORPROC</name></type> <name>glad_glBlendColor</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendColor</name></cpp:macro> <cpp:value>glad_glBlendColor</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBLENDEQUATIONPROC</name></type> <name>glad_glBlendEquation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquation</name></cpp:macro> <cpp:value>glad_glBlendEquation</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBLENDEQUATIONSEPARATEPROC</name></type> <name>glad_glBlendEquationSeparate</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationSeparate</name></cpp:macro> <cpp:value>glad_glBlendEquationSeparate</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBLENDFUNCPROC</name></type> <name>glad_glBlendFunc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFunc</name></cpp:macro> <cpp:value>glad_glBlendFunc</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBLENDFUNCSEPARATEPROC</name></type> <name>glad_glBlendFuncSeparate</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFuncSeparate</name></cpp:macro> <cpp:value>glad_glBlendFuncSeparate</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBLITFRAMEBUFFERPROC</name></type> <name>glad_glBlitFramebuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlitFramebuffer</name></cpp:macro> <cpp:value>glad_glBlitFramebuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBUFFERDATAPROC</name></type> <name>glad_glBufferData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferData</name></cpp:macro> <cpp:value>glad_glBufferData</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLBUFFERSUBDATAPROC</name></type> <name>glad_glBufferSubData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferSubData</name></cpp:macro> <cpp:value>glad_glBufferSubData</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCALLLISTPROC</name></type> <name>glad_glCallList</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCallList</name></cpp:macro> <cpp:value>glad_glCallList</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCALLLISTSPROC</name></type> <name>glad_glCallLists</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCallLists</name></cpp:macro> <cpp:value>glad_glCallLists</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCHECKFRAMEBUFFERSTATUSPROC</name></type> <name>glad_glCheckFramebufferStatus</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCheckFramebufferStatus</name></cpp:macro> <cpp:value>glad_glCheckFramebufferStatus</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLAMPCOLORPROC</name></type> <name>glad_glClampColor</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClampColor</name></cpp:macro> <cpp:value>glad_glClampColor</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLEARPROC</name></type> <name>glad_glClear</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClear</name></cpp:macro> <cpp:value>glad_glClear</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLEARACCUMPROC</name></type> <name>glad_glClearAccum</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearAccum</name></cpp:macro> <cpp:value>glad_glClearAccum</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLEARBUFFERFIPROC</name></type> <name>glad_glClearBufferfi</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferfi</name></cpp:macro> <cpp:value>glad_glClearBufferfi</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLEARBUFFERFVPROC</name></type> <name>glad_glClearBufferfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferfv</name></cpp:macro> <cpp:value>glad_glClearBufferfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLEARBUFFERIVPROC</name></type> <name>glad_glClearBufferiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferiv</name></cpp:macro> <cpp:value>glad_glClearBufferiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLEARBUFFERUIVPROC</name></type> <name>glad_glClearBufferuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferuiv</name></cpp:macro> <cpp:value>glad_glClearBufferuiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLEARCOLORPROC</name></type> <name>glad_glClearColor</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearColor</name></cpp:macro> <cpp:value>glad_glClearColor</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLEARDEPTHPROC</name></type> <name>glad_glClearDepth</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearDepth</name></cpp:macro> <cpp:value>glad_glClearDepth</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLEARINDEXPROC</name></type> <name>glad_glClearIndex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearIndex</name></cpp:macro> <cpp:value>glad_glClearIndex</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLEARSTENCILPROC</name></type> <name>glad_glClearStencil</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearStencil</name></cpp:macro> <cpp:value>glad_glClearStencil</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLIENTACTIVETEXTUREPROC</name></type> <name>glad_glClientActiveTexture</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClientActiveTexture</name></cpp:macro> <cpp:value>glad_glClientActiveTexture</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLIENTWAITSYNCPROC</name></type> <name>glad_glClientWaitSync</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClientWaitSync</name></cpp:macro> <cpp:value>glad_glClientWaitSync</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCLIPPLANEPROC</name></type> <name>glad_glClipPlane</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClipPlane</name></cpp:macro> <cpp:value>glad_glClipPlane</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3BPROC</name></type> <name>glad_glColor3b</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3b</name></cpp:macro> <cpp:value>glad_glColor3b</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3BVPROC</name></type> <name>glad_glColor3bv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3bv</name></cpp:macro> <cpp:value>glad_glColor3bv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3DPROC</name></type> <name>glad_glColor3d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3d</name></cpp:macro> <cpp:value>glad_glColor3d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3DVPROC</name></type> <name>glad_glColor3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3dv</name></cpp:macro> <cpp:value>glad_glColor3dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3FPROC</name></type> <name>glad_glColor3f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3f</name></cpp:macro> <cpp:value>glad_glColor3f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3FVPROC</name></type> <name>glad_glColor3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3fv</name></cpp:macro> <cpp:value>glad_glColor3fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3IPROC</name></type> <name>glad_glColor3i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3i</name></cpp:macro> <cpp:value>glad_glColor3i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3IVPROC</name></type> <name>glad_glColor3iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3iv</name></cpp:macro> <cpp:value>glad_glColor3iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3SPROC</name></type> <name>glad_glColor3s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3s</name></cpp:macro> <cpp:value>glad_glColor3s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3SVPROC</name></type> <name>glad_glColor3sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3sv</name></cpp:macro> <cpp:value>glad_glColor3sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3UBPROC</name></type> <name>glad_glColor3ub</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3ub</name></cpp:macro> <cpp:value>glad_glColor3ub</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3UBVPROC</name></type> <name>glad_glColor3ubv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3ubv</name></cpp:macro> <cpp:value>glad_glColor3ubv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3UIPROC</name></type> <name>glad_glColor3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3ui</name></cpp:macro> <cpp:value>glad_glColor3ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3UIVPROC</name></type> <name>glad_glColor3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3uiv</name></cpp:macro> <cpp:value>glad_glColor3uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3USPROC</name></type> <name>glad_glColor3us</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3us</name></cpp:macro> <cpp:value>glad_glColor3us</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR3USVPROC</name></type> <name>glad_glColor3usv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3usv</name></cpp:macro> <cpp:value>glad_glColor3usv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4BPROC</name></type> <name>glad_glColor4b</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4b</name></cpp:macro> <cpp:value>glad_glColor4b</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4BVPROC</name></type> <name>glad_glColor4bv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4bv</name></cpp:macro> <cpp:value>glad_glColor4bv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4DPROC</name></type> <name>glad_glColor4d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4d</name></cpp:macro> <cpp:value>glad_glColor4d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4DVPROC</name></type> <name>glad_glColor4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4dv</name></cpp:macro> <cpp:value>glad_glColor4dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4FPROC</name></type> <name>glad_glColor4f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4f</name></cpp:macro> <cpp:value>glad_glColor4f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4FVPROC</name></type> <name>glad_glColor4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4fv</name></cpp:macro> <cpp:value>glad_glColor4fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4IPROC</name></type> <name>glad_glColor4i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4i</name></cpp:macro> <cpp:value>glad_glColor4i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4IVPROC</name></type> <name>glad_glColor4iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4iv</name></cpp:macro> <cpp:value>glad_glColor4iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4SPROC</name></type> <name>glad_glColor4s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4s</name></cpp:macro> <cpp:value>glad_glColor4s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4SVPROC</name></type> <name>glad_glColor4sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4sv</name></cpp:macro> <cpp:value>glad_glColor4sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4UBPROC</name></type> <name>glad_glColor4ub</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4ub</name></cpp:macro> <cpp:value>glad_glColor4ub</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4UBVPROC</name></type> <name>glad_glColor4ubv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4ubv</name></cpp:macro> <cpp:value>glad_glColor4ubv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4UIPROC</name></type> <name>glad_glColor4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4ui</name></cpp:macro> <cpp:value>glad_glColor4ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4UIVPROC</name></type> <name>glad_glColor4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4uiv</name></cpp:macro> <cpp:value>glad_glColor4uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4USPROC</name></type> <name>glad_glColor4us</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4us</name></cpp:macro> <cpp:value>glad_glColor4us</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLOR4USVPROC</name></type> <name>glad_glColor4usv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4usv</name></cpp:macro> <cpp:value>glad_glColor4usv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLORMASKPROC</name></type> <name>glad_glColorMask</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorMask</name></cpp:macro> <cpp:value>glad_glColorMask</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLORMASKIPROC</name></type> <name>glad_glColorMaski</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorMaski</name></cpp:macro> <cpp:value>glad_glColorMaski</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLORMATERIALPROC</name></type> <name>glad_glColorMaterial</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorMaterial</name></cpp:macro> <cpp:value>glad_glColorMaterial</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLORP3UIPROC</name></type> <name>glad_glColorP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorP3ui</name></cpp:macro> <cpp:value>glad_glColorP3ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLORP3UIVPROC</name></type> <name>glad_glColorP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorP3uiv</name></cpp:macro> <cpp:value>glad_glColorP3uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLORP4UIPROC</name></type> <name>glad_glColorP4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorP4ui</name></cpp:macro> <cpp:value>glad_glColorP4ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLORP4UIVPROC</name></type> <name>glad_glColorP4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorP4uiv</name></cpp:macro> <cpp:value>glad_glColorP4uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOLORPOINTERPROC</name></type> <name>glad_glColorPointer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorPointer</name></cpp:macro> <cpp:value>glad_glColorPointer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOMPILESHADERPROC</name></type> <name>glad_glCompileShader</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompileShader</name></cpp:macro> <cpp:value>glad_glCompileShader</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOMPRESSEDTEXIMAGE1DPROC</name></type> <name>glad_glCompressedTexImage1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage1D</name></cpp:macro> <cpp:value>glad_glCompressedTexImage1D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOMPRESSEDTEXIMAGE2DPROC</name></type> <name>glad_glCompressedTexImage2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage2D</name></cpp:macro> <cpp:value>glad_glCompressedTexImage2D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOMPRESSEDTEXIMAGE3DPROC</name></type> <name>glad_glCompressedTexImage3D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage3D</name></cpp:macro> <cpp:value>glad_glCompressedTexImage3D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC</name></type> <name>glad_glCompressedTexSubImage1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage1D</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage1D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC</name></type> <name>glad_glCompressedTexSubImage2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage2D</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage2D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC</name></type> <name>glad_glCompressedTexSubImage3D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage3D</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage3D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOPYBUFFERSUBDATAPROC</name></type> <name>glad_glCopyBufferSubData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyBufferSubData</name></cpp:macro> <cpp:value>glad_glCopyBufferSubData</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOPYPIXELSPROC</name></type> <name>glad_glCopyPixels</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyPixels</name></cpp:macro> <cpp:value>glad_glCopyPixels</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOPYTEXIMAGE1DPROC</name></type> <name>glad_glCopyTexImage1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexImage1D</name></cpp:macro> <cpp:value>glad_glCopyTexImage1D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOPYTEXIMAGE2DPROC</name></type> <name>glad_glCopyTexImage2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexImage2D</name></cpp:macro> <cpp:value>glad_glCopyTexImage2D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOPYTEXSUBIMAGE1DPROC</name></type> <name>glad_glCopyTexSubImage1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexSubImage1D</name></cpp:macro> <cpp:value>glad_glCopyTexSubImage1D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOPYTEXSUBIMAGE2DPROC</name></type> <name>glad_glCopyTexSubImage2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexSubImage2D</name></cpp:macro> <cpp:value>glad_glCopyTexSubImage2D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCOPYTEXSUBIMAGE3DPROC</name></type> <name>glad_glCopyTexSubImage3D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexSubImage3D</name></cpp:macro> <cpp:value>glad_glCopyTexSubImage3D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCREATEPROGRAMPROC</name></type> <name>glad_glCreateProgram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCreateProgram</name></cpp:macro> <cpp:value>glad_glCreateProgram</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCREATESHADERPROC</name></type> <name>glad_glCreateShader</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCreateShader</name></cpp:macro> <cpp:value>glad_glCreateShader</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLCULLFACEPROC</name></type> <name>glad_glCullFace</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCullFace</name></cpp:macro> <cpp:value>glad_glCullFace</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDEBUGMESSAGECALLBACKPROC</name></type> <name>glad_glDebugMessageCallback</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageCallback</name></cpp:macro> <cpp:value>glad_glDebugMessageCallback</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDEBUGMESSAGECONTROLPROC</name></type> <name>glad_glDebugMessageControl</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageControl</name></cpp:macro> <cpp:value>glad_glDebugMessageControl</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDEBUGMESSAGEINSERTPROC</name></type> <name>glad_glDebugMessageInsert</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageInsert</name></cpp:macro> <cpp:value>glad_glDebugMessageInsert</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDELETEBUFFERSPROC</name></type> <name>glad_glDeleteBuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteBuffers</name></cpp:macro> <cpp:value>glad_glDeleteBuffers</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDELETEFRAMEBUFFERSPROC</name></type> <name>glad_glDeleteFramebuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteFramebuffers</name></cpp:macro> <cpp:value>glad_glDeleteFramebuffers</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDELETELISTSPROC</name></type> <name>glad_glDeleteLists</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteLists</name></cpp:macro> <cpp:value>glad_glDeleteLists</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDELETEPROGRAMPROC</name></type> <name>glad_glDeleteProgram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteProgram</name></cpp:macro> <cpp:value>glad_glDeleteProgram</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDELETEQUERIESPROC</name></type> <name>glad_glDeleteQueries</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteQueries</name></cpp:macro> <cpp:value>glad_glDeleteQueries</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDELETERENDERBUFFERSPROC</name></type> <name>glad_glDeleteRenderbuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteRenderbuffers</name></cpp:macro> <cpp:value>glad_glDeleteRenderbuffers</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDELETESAMPLERSPROC</name></type> <name>glad_glDeleteSamplers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteSamplers</name></cpp:macro> <cpp:value>glad_glDeleteSamplers</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDELETESHADERPROC</name></type> <name>glad_glDeleteShader</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteShader</name></cpp:macro> <cpp:value>glad_glDeleteShader</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDELETESYNCPROC</name></type> <name>glad_glDeleteSync</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteSync</name></cpp:macro> <cpp:value>glad_glDeleteSync</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDELETETEXTURESPROC</name></type> <name>glad_glDeleteTextures</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteTextures</name></cpp:macro> <cpp:value>glad_glDeleteTextures</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDELETEVERTEXARRAYSPROC</name></type> <name>glad_glDeleteVertexArrays</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteVertexArrays</name></cpp:macro> <cpp:value>glad_glDeleteVertexArrays</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDEPTHFUNCPROC</name></type> <name>glad_glDepthFunc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthFunc</name></cpp:macro> <cpp:value>glad_glDepthFunc</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDEPTHMASKPROC</name></type> <name>glad_glDepthMask</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthMask</name></cpp:macro> <cpp:value>glad_glDepthMask</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDEPTHRANGEPROC</name></type> <name>glad_glDepthRange</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthRange</name></cpp:macro> <cpp:value>glad_glDepthRange</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDETACHSHADERPROC</name></type> <name>glad_glDetachShader</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDetachShader</name></cpp:macro> <cpp:value>glad_glDetachShader</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDISABLEPROC</name></type> <name>glad_glDisable</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisable</name></cpp:macro> <cpp:value>glad_glDisable</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDISABLECLIENTSTATEPROC</name></type> <name>glad_glDisableClientState</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableClientState</name></cpp:macro> <cpp:value>glad_glDisableClientState</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDISABLEVERTEXATTRIBARRAYPROC</name></type> <name>glad_glDisableVertexAttribArray</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableVertexAttribArray</name></cpp:macro> <cpp:value>glad_glDisableVertexAttribArray</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDISABLEIPROC</name></type> <name>glad_glDisablei</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisablei</name></cpp:macro> <cpp:value>glad_glDisablei</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDRAWARRAYSPROC</name></type> <name>glad_glDrawArrays</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawArrays</name></cpp:macro> <cpp:value>glad_glDrawArrays</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDRAWARRAYSINSTANCEDPROC</name></type> <name>glad_glDrawArraysInstanced</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawArraysInstanced</name></cpp:macro> <cpp:value>glad_glDrawArraysInstanced</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDRAWBUFFERPROC</name></type> <name>glad_glDrawBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawBuffer</name></cpp:macro> <cpp:value>glad_glDrawBuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDRAWBUFFERSPROC</name></type> <name>glad_glDrawBuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawBuffers</name></cpp:macro> <cpp:value>glad_glDrawBuffers</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDRAWELEMENTSPROC</name></type> <name>glad_glDrawElements</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElements</name></cpp:macro> <cpp:value>glad_glDrawElements</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDRAWELEMENTSBASEVERTEXPROC</name></type> <name>glad_glDrawElementsBaseVertex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsBaseVertex</name></cpp:macro> <cpp:value>glad_glDrawElementsBaseVertex</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDRAWELEMENTSINSTANCEDPROC</name></type> <name>glad_glDrawElementsInstanced</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsInstanced</name></cpp:macro> <cpp:value>glad_glDrawElementsInstanced</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC</name></type> <name>glad_glDrawElementsInstancedBaseVertex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsInstancedBaseVertex</name></cpp:macro> <cpp:value>glad_glDrawElementsInstancedBaseVertex</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDRAWPIXELSPROC</name></type> <name>glad_glDrawPixels</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawPixels</name></cpp:macro> <cpp:value>glad_glDrawPixels</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDRAWRANGEELEMENTSPROC</name></type> <name>glad_glDrawRangeElements</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawRangeElements</name></cpp:macro> <cpp:value>glad_glDrawRangeElements</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC</name></type> <name>glad_glDrawRangeElementsBaseVertex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawRangeElementsBaseVertex</name></cpp:macro> <cpp:value>glad_glDrawRangeElementsBaseVertex</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEDGEFLAGPROC</name></type> <name>glad_glEdgeFlag</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEdgeFlag</name></cpp:macro> <cpp:value>glad_glEdgeFlag</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEDGEFLAGPOINTERPROC</name></type> <name>glad_glEdgeFlagPointer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEdgeFlagPointer</name></cpp:macro> <cpp:value>glad_glEdgeFlagPointer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEDGEFLAGVPROC</name></type> <name>glad_glEdgeFlagv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEdgeFlagv</name></cpp:macro> <cpp:value>glad_glEdgeFlagv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLENABLEPROC</name></type> <name>glad_glEnable</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnable</name></cpp:macro> <cpp:value>glad_glEnable</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLENABLECLIENTSTATEPROC</name></type> <name>glad_glEnableClientState</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableClientState</name></cpp:macro> <cpp:value>glad_glEnableClientState</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLENABLEVERTEXATTRIBARRAYPROC</name></type> <name>glad_glEnableVertexAttribArray</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableVertexAttribArray</name></cpp:macro> <cpp:value>glad_glEnableVertexAttribArray</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLENABLEIPROC</name></type> <name>glad_glEnablei</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnablei</name></cpp:macro> <cpp:value>glad_glEnablei</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLENDPROC</name></type> <name>glad_glEnd</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnd</name></cpp:macro> <cpp:value>glad_glEnd</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLENDCONDITIONALRENDERPROC</name></type> <name>glad_glEndConditionalRender</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndConditionalRender</name></cpp:macro> <cpp:value>glad_glEndConditionalRender</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLENDLISTPROC</name></type> <name>glad_glEndList</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndList</name></cpp:macro> <cpp:value>glad_glEndList</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLENDQUERYPROC</name></type> <name>glad_glEndQuery</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndQuery</name></cpp:macro> <cpp:value>glad_glEndQuery</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLENDTRANSFORMFEEDBACKPROC</name></type> <name>glad_glEndTransformFeedback</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndTransformFeedback</name></cpp:macro> <cpp:value>glad_glEndTransformFeedback</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEVALCOORD1DPROC</name></type> <name>glad_glEvalCoord1d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalCoord1d</name></cpp:macro> <cpp:value>glad_glEvalCoord1d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEVALCOORD1DVPROC</name></type> <name>glad_glEvalCoord1dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalCoord1dv</name></cpp:macro> <cpp:value>glad_glEvalCoord1dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEVALCOORD1FPROC</name></type> <name>glad_glEvalCoord1f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalCoord1f</name></cpp:macro> <cpp:value>glad_glEvalCoord1f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEVALCOORD1FVPROC</name></type> <name>glad_glEvalCoord1fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalCoord1fv</name></cpp:macro> <cpp:value>glad_glEvalCoord1fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEVALCOORD2DPROC</name></type> <name>glad_glEvalCoord2d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalCoord2d</name></cpp:macro> <cpp:value>glad_glEvalCoord2d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEVALCOORD2DVPROC</name></type> <name>glad_glEvalCoord2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalCoord2dv</name></cpp:macro> <cpp:value>glad_glEvalCoord2dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEVALCOORD2FPROC</name></type> <name>glad_glEvalCoord2f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalCoord2f</name></cpp:macro> <cpp:value>glad_glEvalCoord2f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEVALCOORD2FVPROC</name></type> <name>glad_glEvalCoord2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalCoord2fv</name></cpp:macro> <cpp:value>glad_glEvalCoord2fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEVALMESH1PROC</name></type> <name>glad_glEvalMesh1</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalMesh1</name></cpp:macro> <cpp:value>glad_glEvalMesh1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEVALMESH2PROC</name></type> <name>glad_glEvalMesh2</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalMesh2</name></cpp:macro> <cpp:value>glad_glEvalMesh2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEVALPOINT1PROC</name></type> <name>glad_glEvalPoint1</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalPoint1</name></cpp:macro> <cpp:value>glad_glEvalPoint1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLEVALPOINT2PROC</name></type> <name>glad_glEvalPoint2</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalPoint2</name></cpp:macro> <cpp:value>glad_glEvalPoint2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFEEDBACKBUFFERPROC</name></type> <name>glad_glFeedbackBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFeedbackBuffer</name></cpp:macro> <cpp:value>glad_glFeedbackBuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFENCESYNCPROC</name></type> <name>glad_glFenceSync</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFenceSync</name></cpp:macro> <cpp:value>glad_glFenceSync</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFINISHPROC</name></type> <name>glad_glFinish</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFinish</name></cpp:macro> <cpp:value>glad_glFinish</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFLUSHPROC</name></type> <name>glad_glFlush</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFlush</name></cpp:macro> <cpp:value>glad_glFlush</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFLUSHMAPPEDBUFFERRANGEPROC</name></type> <name>glad_glFlushMappedBufferRange</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFlushMappedBufferRange</name></cpp:macro> <cpp:value>glad_glFlushMappedBufferRange</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFOGCOORDPOINTERPROC</name></type> <name>glad_glFogCoordPointer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoordPointer</name></cpp:macro> <cpp:value>glad_glFogCoordPointer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFOGCOORDDPROC</name></type> <name>glad_glFogCoordd</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoordd</name></cpp:macro> <cpp:value>glad_glFogCoordd</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFOGCOORDDVPROC</name></type> <name>glad_glFogCoorddv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoorddv</name></cpp:macro> <cpp:value>glad_glFogCoorddv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFOGCOORDFPROC</name></type> <name>glad_glFogCoordf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoordf</name></cpp:macro> <cpp:value>glad_glFogCoordf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFOGCOORDFVPROC</name></type> <name>glad_glFogCoordfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoordfv</name></cpp:macro> <cpp:value>glad_glFogCoordfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFOGFPROC</name></type> <name>glad_glFogf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogf</name></cpp:macro> <cpp:value>glad_glFogf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFOGFVPROC</name></type> <name>glad_glFogfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogfv</name></cpp:macro> <cpp:value>glad_glFogfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFOGIPROC</name></type> <name>glad_glFogi</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogi</name></cpp:macro> <cpp:value>glad_glFogi</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFOGIVPROC</name></type> <name>glad_glFogiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogiv</name></cpp:macro> <cpp:value>glad_glFogiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFRAMEBUFFERRENDERBUFFERPROC</name></type> <name>glad_glFramebufferRenderbuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferRenderbuffer</name></cpp:macro> <cpp:value>glad_glFramebufferRenderbuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFRAMEBUFFERTEXTUREPROC</name></type> <name>glad_glFramebufferTexture</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture</name></cpp:macro> <cpp:value>glad_glFramebufferTexture</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFRAMEBUFFERTEXTURE1DPROC</name></type> <name>glad_glFramebufferTexture1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture1D</name></cpp:macro> <cpp:value>glad_glFramebufferTexture1D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFRAMEBUFFERTEXTURE2DPROC</name></type> <name>glad_glFramebufferTexture2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture2D</name></cpp:macro> <cpp:value>glad_glFramebufferTexture2D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFRAMEBUFFERTEXTURE3DPROC</name></type> <name>glad_glFramebufferTexture3D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture3D</name></cpp:macro> <cpp:value>glad_glFramebufferTexture3D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFRAMEBUFFERTEXTURELAYERPROC</name></type> <name>glad_glFramebufferTextureLayer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTextureLayer</name></cpp:macro> <cpp:value>glad_glFramebufferTextureLayer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFRONTFACEPROC</name></type> <name>glad_glFrontFace</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFrontFace</name></cpp:macro> <cpp:value>glad_glFrontFace</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLFRUSTUMPROC</name></type> <name>glad_glFrustum</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFrustum</name></cpp:macro> <cpp:value>glad_glFrustum</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGENBUFFERSPROC</name></type> <name>glad_glGenBuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenBuffers</name></cpp:macro> <cpp:value>glad_glGenBuffers</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGENFRAMEBUFFERSPROC</name></type> <name>glad_glGenFramebuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenFramebuffers</name></cpp:macro> <cpp:value>glad_glGenFramebuffers</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGENLISTSPROC</name></type> <name>glad_glGenLists</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenLists</name></cpp:macro> <cpp:value>glad_glGenLists</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGENQUERIESPROC</name></type> <name>glad_glGenQueries</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenQueries</name></cpp:macro> <cpp:value>glad_glGenQueries</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGENRENDERBUFFERSPROC</name></type> <name>glad_glGenRenderbuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenRenderbuffers</name></cpp:macro> <cpp:value>glad_glGenRenderbuffers</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGENSAMPLERSPROC</name></type> <name>glad_glGenSamplers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenSamplers</name></cpp:macro> <cpp:value>glad_glGenSamplers</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGENTEXTURESPROC</name></type> <name>glad_glGenTextures</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenTextures</name></cpp:macro> <cpp:value>glad_glGenTextures</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGENVERTEXARRAYSPROC</name></type> <name>glad_glGenVertexArrays</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenVertexArrays</name></cpp:macro> <cpp:value>glad_glGenVertexArrays</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGENERATEMIPMAPPROC</name></type> <name>glad_glGenerateMipmap</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenerateMipmap</name></cpp:macro> <cpp:value>glad_glGenerateMipmap</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETACTIVEATTRIBPROC</name></type> <name>glad_glGetActiveAttrib</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveAttrib</name></cpp:macro> <cpp:value>glad_glGetActiveAttrib</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETACTIVEUNIFORMPROC</name></type> <name>glad_glGetActiveUniform</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniform</name></cpp:macro> <cpp:value>glad_glGetActiveUniform</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC</name></type> <name>glad_glGetActiveUniformBlockName</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniformBlockName</name></cpp:macro> <cpp:value>glad_glGetActiveUniformBlockName</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETACTIVEUNIFORMBLOCKIVPROC</name></type> <name>glad_glGetActiveUniformBlockiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniformBlockiv</name></cpp:macro> <cpp:value>glad_glGetActiveUniformBlockiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETACTIVEUNIFORMNAMEPROC</name></type> <name>glad_glGetActiveUniformName</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniformName</name></cpp:macro> <cpp:value>glad_glGetActiveUniformName</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETACTIVEUNIFORMSIVPROC</name></type> <name>glad_glGetActiveUniformsiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniformsiv</name></cpp:macro> <cpp:value>glad_glGetActiveUniformsiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETATTACHEDSHADERSPROC</name></type> <name>glad_glGetAttachedShaders</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetAttachedShaders</name></cpp:macro> <cpp:value>glad_glGetAttachedShaders</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETATTRIBLOCATIONPROC</name></type> <name>glad_glGetAttribLocation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetAttribLocation</name></cpp:macro> <cpp:value>glad_glGetAttribLocation</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETBOOLEANI_VPROC</name></type> <name>glad_glGetBooleani_v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBooleani_v</name></cpp:macro> <cpp:value>glad_glGetBooleani_v</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETBOOLEANVPROC</name></type> <name>glad_glGetBooleanv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBooleanv</name></cpp:macro> <cpp:value>glad_glGetBooleanv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETBUFFERPARAMETERI64VPROC</name></type> <name>glad_glGetBufferParameteri64v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferParameteri64v</name></cpp:macro> <cpp:value>glad_glGetBufferParameteri64v</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETBUFFERPARAMETERIVPROC</name></type> <name>glad_glGetBufferParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferParameteriv</name></cpp:macro> <cpp:value>glad_glGetBufferParameteriv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETBUFFERPOINTERVPROC</name></type> <name>glad_glGetBufferPointerv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferPointerv</name></cpp:macro> <cpp:value>glad_glGetBufferPointerv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETBUFFERSUBDATAPROC</name></type> <name>glad_glGetBufferSubData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferSubData</name></cpp:macro> <cpp:value>glad_glGetBufferSubData</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETCLIPPLANEPROC</name></type> <name>glad_glGetClipPlane</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetClipPlane</name></cpp:macro> <cpp:value>glad_glGetClipPlane</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETCOMPRESSEDTEXIMAGEPROC</name></type> <name>glad_glGetCompressedTexImage</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetCompressedTexImage</name></cpp:macro> <cpp:value>glad_glGetCompressedTexImage</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETDEBUGMESSAGELOGPROC</name></type> <name>glad_glGetDebugMessageLog</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDebugMessageLog</name></cpp:macro> <cpp:value>glad_glGetDebugMessageLog</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETDOUBLEVPROC</name></type> <name>glad_glGetDoublev</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDoublev</name></cpp:macro> <cpp:value>glad_glGetDoublev</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETERRORPROC</name></type> <name>glad_glGetError</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetError</name></cpp:macro> <cpp:value>glad_glGetError</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETFLOATVPROC</name></type> <name>glad_glGetFloatv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFloatv</name></cpp:macro> <cpp:value>glad_glGetFloatv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETFRAGDATAINDEXPROC</name></type> <name>glad_glGetFragDataIndex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFragDataIndex</name></cpp:macro> <cpp:value>glad_glGetFragDataIndex</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETFRAGDATALOCATIONPROC</name></type> <name>glad_glGetFragDataLocation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFragDataLocation</name></cpp:macro> <cpp:value>glad_glGetFragDataLocation</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</name></type> <name>glad_glGetFramebufferAttachmentParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFramebufferAttachmentParameteriv</name></cpp:macro> <cpp:value>glad_glGetFramebufferAttachmentParameteriv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETGRAPHICSRESETSTATUSARBPROC</name></type> <name>glad_glGetGraphicsResetStatusARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetGraphicsResetStatusARB</name></cpp:macro> <cpp:value>glad_glGetGraphicsResetStatusARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETINTEGER64I_VPROC</name></type> <name>glad_glGetInteger64i_v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInteger64i_v</name></cpp:macro> <cpp:value>glad_glGetInteger64i_v</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETINTEGER64VPROC</name></type> <name>glad_glGetInteger64v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInteger64v</name></cpp:macro> <cpp:value>glad_glGetInteger64v</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETINTEGERI_VPROC</name></type> <name>glad_glGetIntegeri_v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetIntegeri_v</name></cpp:macro> <cpp:value>glad_glGetIntegeri_v</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETINTEGERVPROC</name></type> <name>glad_glGetIntegerv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetIntegerv</name></cpp:macro> <cpp:value>glad_glGetIntegerv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETLIGHTFVPROC</name></type> <name>glad_glGetLightfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetLightfv</name></cpp:macro> <cpp:value>glad_glGetLightfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETLIGHTIVPROC</name></type> <name>glad_glGetLightiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetLightiv</name></cpp:macro> <cpp:value>glad_glGetLightiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETMAPDVPROC</name></type> <name>glad_glGetMapdv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMapdv</name></cpp:macro> <cpp:value>glad_glGetMapdv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETMAPFVPROC</name></type> <name>glad_glGetMapfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMapfv</name></cpp:macro> <cpp:value>glad_glGetMapfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETMAPIVPROC</name></type> <name>glad_glGetMapiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMapiv</name></cpp:macro> <cpp:value>glad_glGetMapiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETMATERIALFVPROC</name></type> <name>glad_glGetMaterialfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMaterialfv</name></cpp:macro> <cpp:value>glad_glGetMaterialfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETMATERIALIVPROC</name></type> <name>glad_glGetMaterialiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMaterialiv</name></cpp:macro> <cpp:value>glad_glGetMaterialiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETMULTISAMPLEFVPROC</name></type> <name>glad_glGetMultisamplefv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultisamplefv</name></cpp:macro> <cpp:value>glad_glGetMultisamplefv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETOBJECTLABELPROC</name></type> <name>glad_glGetObjectLabel</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectLabel</name></cpp:macro> <cpp:value>glad_glGetObjectLabel</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETOBJECTPTRLABELPROC</name></type> <name>glad_glGetObjectPtrLabel</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectPtrLabel</name></cpp:macro> <cpp:value>glad_glGetObjectPtrLabel</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETPIXELMAPFVPROC</name></type> <name>glad_glGetPixelMapfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPixelMapfv</name></cpp:macro> <cpp:value>glad_glGetPixelMapfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETPIXELMAPUIVPROC</name></type> <name>glad_glGetPixelMapuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPixelMapuiv</name></cpp:macro> <cpp:value>glad_glGetPixelMapuiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETPIXELMAPUSVPROC</name></type> <name>glad_glGetPixelMapusv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPixelMapusv</name></cpp:macro> <cpp:value>glad_glGetPixelMapusv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETPOINTERVPROC</name></type> <name>glad_glGetPointerv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPointerv</name></cpp:macro> <cpp:value>glad_glGetPointerv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETPOLYGONSTIPPLEPROC</name></type> <name>glad_glGetPolygonStipple</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPolygonStipple</name></cpp:macro> <cpp:value>glad_glGetPolygonStipple</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETPROGRAMINFOLOGPROC</name></type> <name>glad_glGetProgramInfoLog</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramInfoLog</name></cpp:macro> <cpp:value>glad_glGetProgramInfoLog</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETPROGRAMIVPROC</name></type> <name>glad_glGetProgramiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramiv</name></cpp:macro> <cpp:value>glad_glGetProgramiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETQUERYOBJECTI64VPROC</name></type> <name>glad_glGetQueryObjecti64v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjecti64v</name></cpp:macro> <cpp:value>glad_glGetQueryObjecti64v</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETQUERYOBJECTIVPROC</name></type> <name>glad_glGetQueryObjectiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjectiv</name></cpp:macro> <cpp:value>glad_glGetQueryObjectiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETQUERYOBJECTUI64VPROC</name></type> <name>glad_glGetQueryObjectui64v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjectui64v</name></cpp:macro> <cpp:value>glad_glGetQueryObjectui64v</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETQUERYOBJECTUIVPROC</name></type> <name>glad_glGetQueryObjectuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjectuiv</name></cpp:macro> <cpp:value>glad_glGetQueryObjectuiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETQUERYIVPROC</name></type> <name>glad_glGetQueryiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryiv</name></cpp:macro> <cpp:value>glad_glGetQueryiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETRENDERBUFFERPARAMETERIVPROC</name></type> <name>glad_glGetRenderbufferParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetRenderbufferParameteriv</name></cpp:macro> <cpp:value>glad_glGetRenderbufferParameteriv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETSAMPLERPARAMETERIIVPROC</name></type> <name>glad_glGetSamplerParameterIiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSamplerParameterIiv</name></cpp:macro> <cpp:value>glad_glGetSamplerParameterIiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETSAMPLERPARAMETERIUIVPROC</name></type> <name>glad_glGetSamplerParameterIuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSamplerParameterIuiv</name></cpp:macro> <cpp:value>glad_glGetSamplerParameterIuiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETSAMPLERPARAMETERFVPROC</name></type> <name>glad_glGetSamplerParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSamplerParameterfv</name></cpp:macro> <cpp:value>glad_glGetSamplerParameterfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETSAMPLERPARAMETERIVPROC</name></type> <name>glad_glGetSamplerParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSamplerParameteriv</name></cpp:macro> <cpp:value>glad_glGetSamplerParameteriv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETSHADERINFOLOGPROC</name></type> <name>glad_glGetShaderInfoLog</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetShaderInfoLog</name></cpp:macro> <cpp:value>glad_glGetShaderInfoLog</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETSHADERSOURCEPROC</name></type> <name>glad_glGetShaderSource</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetShaderSource</name></cpp:macro> <cpp:value>glad_glGetShaderSource</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETSHADERIVPROC</name></type> <name>glad_glGetShaderiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetShaderiv</name></cpp:macro> <cpp:value>glad_glGetShaderiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETSTRINGPROC</name></type> <name>glad_glGetString</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetString</name></cpp:macro> <cpp:value>glad_glGetString</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETSTRINGIPROC</name></type> <name>glad_glGetStringi</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetStringi</name></cpp:macro> <cpp:value>glad_glGetStringi</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETSYNCIVPROC</name></type> <name>glad_glGetSynciv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSynciv</name></cpp:macro> <cpp:value>glad_glGetSynciv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETTEXENVFVPROC</name></type> <name>glad_glGetTexEnvfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexEnvfv</name></cpp:macro> <cpp:value>glad_glGetTexEnvfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETTEXENVIVPROC</name></type> <name>glad_glGetTexEnviv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexEnviv</name></cpp:macro> <cpp:value>glad_glGetTexEnviv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETTEXGENDVPROC</name></type> <name>glad_glGetTexGendv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexGendv</name></cpp:macro> <cpp:value>glad_glGetTexGendv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETTEXGENFVPROC</name></type> <name>glad_glGetTexGenfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexGenfv</name></cpp:macro> <cpp:value>glad_glGetTexGenfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETTEXGENIVPROC</name></type> <name>glad_glGetTexGeniv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexGeniv</name></cpp:macro> <cpp:value>glad_glGetTexGeniv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETTEXIMAGEPROC</name></type> <name>glad_glGetTexImage</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexImage</name></cpp:macro> <cpp:value>glad_glGetTexImage</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETTEXLEVELPARAMETERFVPROC</name></type> <name>glad_glGetTexLevelParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexLevelParameterfv</name></cpp:macro> <cpp:value>glad_glGetTexLevelParameterfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETTEXLEVELPARAMETERIVPROC</name></type> <name>glad_glGetTexLevelParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexLevelParameteriv</name></cpp:macro> <cpp:value>glad_glGetTexLevelParameteriv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETTEXPARAMETERIIVPROC</name></type> <name>glad_glGetTexParameterIiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameterIiv</name></cpp:macro> <cpp:value>glad_glGetTexParameterIiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETTEXPARAMETERIUIVPROC</name></type> <name>glad_glGetTexParameterIuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameterIuiv</name></cpp:macro> <cpp:value>glad_glGetTexParameterIuiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETTEXPARAMETERFVPROC</name></type> <name>glad_glGetTexParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameterfv</name></cpp:macro> <cpp:value>glad_glGetTexParameterfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETTEXPARAMETERIVPROC</name></type> <name>glad_glGetTexParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameteriv</name></cpp:macro> <cpp:value>glad_glGetTexParameteriv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETTRANSFORMFEEDBACKVARYINGPROC</name></type> <name>glad_glGetTransformFeedbackVarying</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTransformFeedbackVarying</name></cpp:macro> <cpp:value>glad_glGetTransformFeedbackVarying</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETUNIFORMBLOCKINDEXPROC</name></type> <name>glad_glGetUniformBlockIndex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformBlockIndex</name></cpp:macro> <cpp:value>glad_glGetUniformBlockIndex</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETUNIFORMINDICESPROC</name></type> <name>glad_glGetUniformIndices</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformIndices</name></cpp:macro> <cpp:value>glad_glGetUniformIndices</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETUNIFORMLOCATIONPROC</name></type> <name>glad_glGetUniformLocation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformLocation</name></cpp:macro> <cpp:value>glad_glGetUniformLocation</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETUNIFORMFVPROC</name></type> <name>glad_glGetUniformfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformfv</name></cpp:macro> <cpp:value>glad_glGetUniformfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETUNIFORMIVPROC</name></type> <name>glad_glGetUniformiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformiv</name></cpp:macro> <cpp:value>glad_glGetUniformiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETUNIFORMUIVPROC</name></type> <name>glad_glGetUniformuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformuiv</name></cpp:macro> <cpp:value>glad_glGetUniformuiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETVERTEXATTRIBIIVPROC</name></type> <name>glad_glGetVertexAttribIiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribIiv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribIiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETVERTEXATTRIBIUIVPROC</name></type> <name>glad_glGetVertexAttribIuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribIuiv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribIuiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETVERTEXATTRIBPOINTERVPROC</name></type> <name>glad_glGetVertexAttribPointerv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribPointerv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribPointerv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETVERTEXATTRIBDVPROC</name></type> <name>glad_glGetVertexAttribdv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribdv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribdv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETVERTEXATTRIBFVPROC</name></type> <name>glad_glGetVertexAttribfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribfv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETVERTEXATTRIBIVPROC</name></type> <name>glad_glGetVertexAttribiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribiv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNCOLORTABLEARBPROC</name></type> <name>glad_glGetnColorTableARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnColorTableARB</name></cpp:macro> <cpp:value>glad_glGetnColorTableARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC</name></type> <name>glad_glGetnCompressedTexImageARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnCompressedTexImageARB</name></cpp:macro> <cpp:value>glad_glGetnCompressedTexImageARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNCONVOLUTIONFILTERARBPROC</name></type> <name>glad_glGetnConvolutionFilterARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnConvolutionFilterARB</name></cpp:macro> <cpp:value>glad_glGetnConvolutionFilterARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNHISTOGRAMARBPROC</name></type> <name>glad_glGetnHistogramARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnHistogramARB</name></cpp:macro> <cpp:value>glad_glGetnHistogramARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNMAPDVARBPROC</name></type> <name>glad_glGetnMapdvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnMapdvARB</name></cpp:macro> <cpp:value>glad_glGetnMapdvARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNMAPFVARBPROC</name></type> <name>glad_glGetnMapfvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnMapfvARB</name></cpp:macro> <cpp:value>glad_glGetnMapfvARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNMAPIVARBPROC</name></type> <name>glad_glGetnMapivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnMapivARB</name></cpp:macro> <cpp:value>glad_glGetnMapivARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNMINMAXARBPROC</name></type> <name>glad_glGetnMinmaxARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnMinmaxARB</name></cpp:macro> <cpp:value>glad_glGetnMinmaxARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNPIXELMAPFVARBPROC</name></type> <name>glad_glGetnPixelMapfvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnPixelMapfvARB</name></cpp:macro> <cpp:value>glad_glGetnPixelMapfvARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNPIXELMAPUIVARBPROC</name></type> <name>glad_glGetnPixelMapuivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnPixelMapuivARB</name></cpp:macro> <cpp:value>glad_glGetnPixelMapuivARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNPIXELMAPUSVARBPROC</name></type> <name>glad_glGetnPixelMapusvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnPixelMapusvARB</name></cpp:macro> <cpp:value>glad_glGetnPixelMapusvARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNPOLYGONSTIPPLEARBPROC</name></type> <name>glad_glGetnPolygonStippleARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnPolygonStippleARB</name></cpp:macro> <cpp:value>glad_glGetnPolygonStippleARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNSEPARABLEFILTERARBPROC</name></type> <name>glad_glGetnSeparableFilterARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnSeparableFilterARB</name></cpp:macro> <cpp:value>glad_glGetnSeparableFilterARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNTEXIMAGEARBPROC</name></type> <name>glad_glGetnTexImageARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnTexImageARB</name></cpp:macro> <cpp:value>glad_glGetnTexImageARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNUNIFORMDVARBPROC</name></type> <name>glad_glGetnUniformdvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnUniformdvARB</name></cpp:macro> <cpp:value>glad_glGetnUniformdvARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNUNIFORMFVARBPROC</name></type> <name>glad_glGetnUniformfvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnUniformfvARB</name></cpp:macro> <cpp:value>glad_glGetnUniformfvARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNUNIFORMIVARBPROC</name></type> <name>glad_glGetnUniformivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnUniformivARB</name></cpp:macro> <cpp:value>glad_glGetnUniformivARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLGETNUNIFORMUIVARBPROC</name></type> <name>glad_glGetnUniformuivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnUniformuivARB</name></cpp:macro> <cpp:value>glad_glGetnUniformuivARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLHINTPROC</name></type> <name>glad_glHint</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glHint</name></cpp:macro> <cpp:value>glad_glHint</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINDEXMASKPROC</name></type> <name>glad_glIndexMask</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexMask</name></cpp:macro> <cpp:value>glad_glIndexMask</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINDEXPOINTERPROC</name></type> <name>glad_glIndexPointer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexPointer</name></cpp:macro> <cpp:value>glad_glIndexPointer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINDEXDPROC</name></type> <name>glad_glIndexd</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexd</name></cpp:macro> <cpp:value>glad_glIndexd</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINDEXDVPROC</name></type> <name>glad_glIndexdv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexdv</name></cpp:macro> <cpp:value>glad_glIndexdv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINDEXFPROC</name></type> <name>glad_glIndexf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexf</name></cpp:macro> <cpp:value>glad_glIndexf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINDEXFVPROC</name></type> <name>glad_glIndexfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexfv</name></cpp:macro> <cpp:value>glad_glIndexfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINDEXIPROC</name></type> <name>glad_glIndexi</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexi</name></cpp:macro> <cpp:value>glad_glIndexi</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINDEXIVPROC</name></type> <name>glad_glIndexiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexiv</name></cpp:macro> <cpp:value>glad_glIndexiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINDEXSPROC</name></type> <name>glad_glIndexs</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexs</name></cpp:macro> <cpp:value>glad_glIndexs</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINDEXSVPROC</name></type> <name>glad_glIndexsv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexsv</name></cpp:macro> <cpp:value>glad_glIndexsv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINDEXUBPROC</name></type> <name>glad_glIndexub</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexub</name></cpp:macro> <cpp:value>glad_glIndexub</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINDEXUBVPROC</name></type> <name>glad_glIndexubv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexubv</name></cpp:macro> <cpp:value>glad_glIndexubv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINITNAMESPROC</name></type> <name>glad_glInitNames</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInitNames</name></cpp:macro> <cpp:value>glad_glInitNames</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLINTERLEAVEDARRAYSPROC</name></type> <name>glad_glInterleavedArrays</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInterleavedArrays</name></cpp:macro> <cpp:value>glad_glInterleavedArrays</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLISBUFFERPROC</name></type> <name>glad_glIsBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsBuffer</name></cpp:macro> <cpp:value>glad_glIsBuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLISENABLEDPROC</name></type> <name>glad_glIsEnabled</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsEnabled</name></cpp:macro> <cpp:value>glad_glIsEnabled</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLISENABLEDIPROC</name></type> <name>glad_glIsEnabledi</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsEnabledi</name></cpp:macro> <cpp:value>glad_glIsEnabledi</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLISFRAMEBUFFERPROC</name></type> <name>glad_glIsFramebuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsFramebuffer</name></cpp:macro> <cpp:value>glad_glIsFramebuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLISLISTPROC</name></type> <name>glad_glIsList</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsList</name></cpp:macro> <cpp:value>glad_glIsList</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLISPROGRAMPROC</name></type> <name>glad_glIsProgram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsProgram</name></cpp:macro> <cpp:value>glad_glIsProgram</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLISQUERYPROC</name></type> <name>glad_glIsQuery</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsQuery</name></cpp:macro> <cpp:value>glad_glIsQuery</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLISRENDERBUFFERPROC</name></type> <name>glad_glIsRenderbuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsRenderbuffer</name></cpp:macro> <cpp:value>glad_glIsRenderbuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLISSAMPLERPROC</name></type> <name>glad_glIsSampler</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsSampler</name></cpp:macro> <cpp:value>glad_glIsSampler</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLISSHADERPROC</name></type> <name>glad_glIsShader</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsShader</name></cpp:macro> <cpp:value>glad_glIsShader</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLISSYNCPROC</name></type> <name>glad_glIsSync</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsSync</name></cpp:macro> <cpp:value>glad_glIsSync</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLISTEXTUREPROC</name></type> <name>glad_glIsTexture</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsTexture</name></cpp:macro> <cpp:value>glad_glIsTexture</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLISVERTEXARRAYPROC</name></type> <name>glad_glIsVertexArray</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsVertexArray</name></cpp:macro> <cpp:value>glad_glIsVertexArray</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLIGHTMODELFPROC</name></type> <name>glad_glLightModelf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLightModelf</name></cpp:macro> <cpp:value>glad_glLightModelf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLIGHTMODELFVPROC</name></type> <name>glad_glLightModelfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLightModelfv</name></cpp:macro> <cpp:value>glad_glLightModelfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLIGHTMODELIPROC</name></type> <name>glad_glLightModeli</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLightModeli</name></cpp:macro> <cpp:value>glad_glLightModeli</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLIGHTMODELIVPROC</name></type> <name>glad_glLightModeliv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLightModeliv</name></cpp:macro> <cpp:value>glad_glLightModeliv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLIGHTFPROC</name></type> <name>glad_glLightf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLightf</name></cpp:macro> <cpp:value>glad_glLightf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLIGHTFVPROC</name></type> <name>glad_glLightfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLightfv</name></cpp:macro> <cpp:value>glad_glLightfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLIGHTIPROC</name></type> <name>glad_glLighti</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLighti</name></cpp:macro> <cpp:value>glad_glLighti</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLIGHTIVPROC</name></type> <name>glad_glLightiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLightiv</name></cpp:macro> <cpp:value>glad_glLightiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLINESTIPPLEPROC</name></type> <name>glad_glLineStipple</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLineStipple</name></cpp:macro> <cpp:value>glad_glLineStipple</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLINEWIDTHPROC</name></type> <name>glad_glLineWidth</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLineWidth</name></cpp:macro> <cpp:value>glad_glLineWidth</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLINKPROGRAMPROC</name></type> <name>glad_glLinkProgram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLinkProgram</name></cpp:macro> <cpp:value>glad_glLinkProgram</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLISTBASEPROC</name></type> <name>glad_glListBase</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glListBase</name></cpp:macro> <cpp:value>glad_glListBase</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLOADIDENTITYPROC</name></type> <name>glad_glLoadIdentity</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLoadIdentity</name></cpp:macro> <cpp:value>glad_glLoadIdentity</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLOADMATRIXDPROC</name></type> <name>glad_glLoadMatrixd</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLoadMatrixd</name></cpp:macro> <cpp:value>glad_glLoadMatrixd</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLOADMATRIXFPROC</name></type> <name>glad_glLoadMatrixf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLoadMatrixf</name></cpp:macro> <cpp:value>glad_glLoadMatrixf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLOADNAMEPROC</name></type> <name>glad_glLoadName</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLoadName</name></cpp:macro> <cpp:value>glad_glLoadName</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLOADTRANSPOSEMATRIXDPROC</name></type> <name>glad_glLoadTransposeMatrixd</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLoadTransposeMatrixd</name></cpp:macro> <cpp:value>glad_glLoadTransposeMatrixd</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLOADTRANSPOSEMATRIXFPROC</name></type> <name>glad_glLoadTransposeMatrixf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLoadTransposeMatrixf</name></cpp:macro> <cpp:value>glad_glLoadTransposeMatrixf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLLOGICOPPROC</name></type> <name>glad_glLogicOp</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLogicOp</name></cpp:macro> <cpp:value>glad_glLogicOp</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMAP1DPROC</name></type> <name>glad_glMap1d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMap1d</name></cpp:macro> <cpp:value>glad_glMap1d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMAP1FPROC</name></type> <name>glad_glMap1f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMap1f</name></cpp:macro> <cpp:value>glad_glMap1f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMAP2DPROC</name></type> <name>glad_glMap2d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMap2d</name></cpp:macro> <cpp:value>glad_glMap2d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMAP2FPROC</name></type> <name>glad_glMap2f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMap2f</name></cpp:macro> <cpp:value>glad_glMap2f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMAPBUFFERPROC</name></type> <name>glad_glMapBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapBuffer</name></cpp:macro> <cpp:value>glad_glMapBuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMAPBUFFERRANGEPROC</name></type> <name>glad_glMapBufferRange</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapBufferRange</name></cpp:macro> <cpp:value>glad_glMapBufferRange</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMAPGRID1DPROC</name></type> <name>glad_glMapGrid1d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapGrid1d</name></cpp:macro> <cpp:value>glad_glMapGrid1d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMAPGRID1FPROC</name></type> <name>glad_glMapGrid1f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapGrid1f</name></cpp:macro> <cpp:value>glad_glMapGrid1f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMAPGRID2DPROC</name></type> <name>glad_glMapGrid2d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapGrid2d</name></cpp:macro> <cpp:value>glad_glMapGrid2d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMAPGRID2FPROC</name></type> <name>glad_glMapGrid2f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapGrid2f</name></cpp:macro> <cpp:value>glad_glMapGrid2f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMATERIALFPROC</name></type> <name>glad_glMaterialf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMaterialf</name></cpp:macro> <cpp:value>glad_glMaterialf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMATERIALFVPROC</name></type> <name>glad_glMaterialfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMaterialfv</name></cpp:macro> <cpp:value>glad_glMaterialfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMATERIALIPROC</name></type> <name>glad_glMateriali</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMateriali</name></cpp:macro> <cpp:value>glad_glMateriali</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMATERIALIVPROC</name></type> <name>glad_glMaterialiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMaterialiv</name></cpp:macro> <cpp:value>glad_glMaterialiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMATRIXMODEPROC</name></type> <name>glad_glMatrixMode</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixMode</name></cpp:macro> <cpp:value>glad_glMatrixMode</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTMATRIXDPROC</name></type> <name>glad_glMultMatrixd</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultMatrixd</name></cpp:macro> <cpp:value>glad_glMultMatrixd</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTMATRIXFPROC</name></type> <name>glad_glMultMatrixf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultMatrixf</name></cpp:macro> <cpp:value>glad_glMultMatrixf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTTRANSPOSEMATRIXDPROC</name></type> <name>glad_glMultTransposeMatrixd</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultTransposeMatrixd</name></cpp:macro> <cpp:value>glad_glMultTransposeMatrixd</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTTRANSPOSEMATRIXFPROC</name></type> <name>glad_glMultTransposeMatrixf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultTransposeMatrixf</name></cpp:macro> <cpp:value>glad_glMultTransposeMatrixf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTIDRAWARRAYSPROC</name></type> <name>glad_glMultiDrawArrays</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawArrays</name></cpp:macro> <cpp:value>glad_glMultiDrawArrays</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTIDRAWELEMENTSPROC</name></type> <name>glad_glMultiDrawElements</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawElements</name></cpp:macro> <cpp:value>glad_glMultiDrawElements</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC</name></type> <name>glad_glMultiDrawElementsBaseVertex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawElementsBaseVertex</name></cpp:macro> <cpp:value>glad_glMultiDrawElementsBaseVertex</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD1DPROC</name></type> <name>glad_glMultiTexCoord1d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1d</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD1DVPROC</name></type> <name>glad_glMultiTexCoord1dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1dv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD1FPROC</name></type> <name>glad_glMultiTexCoord1f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1f</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD1FVPROC</name></type> <name>glad_glMultiTexCoord1fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1fv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD1IPROC</name></type> <name>glad_glMultiTexCoord1i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1i</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD1IVPROC</name></type> <name>glad_glMultiTexCoord1iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1iv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD1SPROC</name></type> <name>glad_glMultiTexCoord1s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1s</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD1SVPROC</name></type> <name>glad_glMultiTexCoord1sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1sv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD2DPROC</name></type> <name>glad_glMultiTexCoord2d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2d</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD2DVPROC</name></type> <name>glad_glMultiTexCoord2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2dv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD2FPROC</name></type> <name>glad_glMultiTexCoord2f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2f</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD2FVPROC</name></type> <name>glad_glMultiTexCoord2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2fv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD2IPROC</name></type> <name>glad_glMultiTexCoord2i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2i</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD2IVPROC</name></type> <name>glad_glMultiTexCoord2iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2iv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD2SPROC</name></type> <name>glad_glMultiTexCoord2s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2s</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD2SVPROC</name></type> <name>glad_glMultiTexCoord2sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2sv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD3DPROC</name></type> <name>glad_glMultiTexCoord3d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3d</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD3DVPROC</name></type> <name>glad_glMultiTexCoord3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3dv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD3FPROC</name></type> <name>glad_glMultiTexCoord3f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3f</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD3FVPROC</name></type> <name>glad_glMultiTexCoord3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3fv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD3IPROC</name></type> <name>glad_glMultiTexCoord3i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3i</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD3IVPROC</name></type> <name>glad_glMultiTexCoord3iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3iv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD3SPROC</name></type> <name>glad_glMultiTexCoord3s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3s</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD3SVPROC</name></type> <name>glad_glMultiTexCoord3sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3sv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD4DPROC</name></type> <name>glad_glMultiTexCoord4d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4d</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD4DVPROC</name></type> <name>glad_glMultiTexCoord4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4dv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD4FPROC</name></type> <name>glad_glMultiTexCoord4f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4f</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD4FVPROC</name></type> <name>glad_glMultiTexCoord4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4fv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD4IPROC</name></type> <name>glad_glMultiTexCoord4i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4i</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD4IVPROC</name></type> <name>glad_glMultiTexCoord4iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4iv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD4SPROC</name></type> <name>glad_glMultiTexCoord4s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4s</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORD4SVPROC</name></type> <name>glad_glMultiTexCoord4sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4sv</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORDP1UIPROC</name></type> <name>glad_glMultiTexCoordP1ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP1ui</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP1ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORDP1UIVPROC</name></type> <name>glad_glMultiTexCoordP1uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP1uiv</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP1uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORDP2UIPROC</name></type> <name>glad_glMultiTexCoordP2ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP2ui</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP2ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORDP2UIVPROC</name></type> <name>glad_glMultiTexCoordP2uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP2uiv</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP2uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORDP3UIPROC</name></type> <name>glad_glMultiTexCoordP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP3ui</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP3ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORDP3UIVPROC</name></type> <name>glad_glMultiTexCoordP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP3uiv</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP3uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORDP4UIPROC</name></type> <name>glad_glMultiTexCoordP4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP4ui</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP4ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLMULTITEXCOORDP4UIVPROC</name></type> <name>glad_glMultiTexCoordP4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP4uiv</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP4uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNEWLISTPROC</name></type> <name>glad_glNewList</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNewList</name></cpp:macro> <cpp:value>glad_glNewList</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNORMAL3BPROC</name></type> <name>glad_glNormal3b</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3b</name></cpp:macro> <cpp:value>glad_glNormal3b</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNORMAL3BVPROC</name></type> <name>glad_glNormal3bv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3bv</name></cpp:macro> <cpp:value>glad_glNormal3bv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNORMAL3DPROC</name></type> <name>glad_glNormal3d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3d</name></cpp:macro> <cpp:value>glad_glNormal3d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNORMAL3DVPROC</name></type> <name>glad_glNormal3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3dv</name></cpp:macro> <cpp:value>glad_glNormal3dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNORMAL3FPROC</name></type> <name>glad_glNormal3f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3f</name></cpp:macro> <cpp:value>glad_glNormal3f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNORMAL3FVPROC</name></type> <name>glad_glNormal3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3fv</name></cpp:macro> <cpp:value>glad_glNormal3fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNORMAL3IPROC</name></type> <name>glad_glNormal3i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3i</name></cpp:macro> <cpp:value>glad_glNormal3i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNORMAL3IVPROC</name></type> <name>glad_glNormal3iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3iv</name></cpp:macro> <cpp:value>glad_glNormal3iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNORMAL3SPROC</name></type> <name>glad_glNormal3s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3s</name></cpp:macro> <cpp:value>glad_glNormal3s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNORMAL3SVPROC</name></type> <name>glad_glNormal3sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3sv</name></cpp:macro> <cpp:value>glad_glNormal3sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNORMALP3UIPROC</name></type> <name>glad_glNormalP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalP3ui</name></cpp:macro> <cpp:value>glad_glNormalP3ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNORMALP3UIVPROC</name></type> <name>glad_glNormalP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalP3uiv</name></cpp:macro> <cpp:value>glad_glNormalP3uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLNORMALPOINTERPROC</name></type> <name>glad_glNormalPointer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalPointer</name></cpp:macro> <cpp:value>glad_glNormalPointer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLOBJECTLABELPROC</name></type> <name>glad_glObjectLabel</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glObjectLabel</name></cpp:macro> <cpp:value>glad_glObjectLabel</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLOBJECTPTRLABELPROC</name></type> <name>glad_glObjectPtrLabel</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glObjectPtrLabel</name></cpp:macro> <cpp:value>glad_glObjectPtrLabel</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLORTHOPROC</name></type> <name>glad_glOrtho</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glOrtho</name></cpp:macro> <cpp:value>glad_glOrtho</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPASSTHROUGHPROC</name></type> <name>glad_glPassThrough</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPassThrough</name></cpp:macro> <cpp:value>glad_glPassThrough</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPIXELMAPFVPROC</name></type> <name>glad_glPixelMapfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelMapfv</name></cpp:macro> <cpp:value>glad_glPixelMapfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPIXELMAPUIVPROC</name></type> <name>glad_glPixelMapuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelMapuiv</name></cpp:macro> <cpp:value>glad_glPixelMapuiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPIXELMAPUSVPROC</name></type> <name>glad_glPixelMapusv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelMapusv</name></cpp:macro> <cpp:value>glad_glPixelMapusv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPIXELSTOREFPROC</name></type> <name>glad_glPixelStoref</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelStoref</name></cpp:macro> <cpp:value>glad_glPixelStoref</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPIXELSTOREIPROC</name></type> <name>glad_glPixelStorei</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelStorei</name></cpp:macro> <cpp:value>glad_glPixelStorei</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPIXELTRANSFERFPROC</name></type> <name>glad_glPixelTransferf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelTransferf</name></cpp:macro> <cpp:value>glad_glPixelTransferf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPIXELTRANSFERIPROC</name></type> <name>glad_glPixelTransferi</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelTransferi</name></cpp:macro> <cpp:value>glad_glPixelTransferi</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPIXELZOOMPROC</name></type> <name>glad_glPixelZoom</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelZoom</name></cpp:macro> <cpp:value>glad_glPixelZoom</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPOINTPARAMETERFPROC</name></type> <name>glad_glPointParameterf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterf</name></cpp:macro> <cpp:value>glad_glPointParameterf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPOINTPARAMETERFVPROC</name></type> <name>glad_glPointParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterfv</name></cpp:macro> <cpp:value>glad_glPointParameterfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPOINTPARAMETERIPROC</name></type> <name>glad_glPointParameteri</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameteri</name></cpp:macro> <cpp:value>glad_glPointParameteri</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPOINTPARAMETERIVPROC</name></type> <name>glad_glPointParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameteriv</name></cpp:macro> <cpp:value>glad_glPointParameteriv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPOINTSIZEPROC</name></type> <name>glad_glPointSize</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointSize</name></cpp:macro> <cpp:value>glad_glPointSize</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPOLYGONMODEPROC</name></type> <name>glad_glPolygonMode</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPolygonMode</name></cpp:macro> <cpp:value>glad_glPolygonMode</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPOLYGONOFFSETPROC</name></type> <name>glad_glPolygonOffset</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPolygonOffset</name></cpp:macro> <cpp:value>glad_glPolygonOffset</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPOLYGONSTIPPLEPROC</name></type> <name>glad_glPolygonStipple</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPolygonStipple</name></cpp:macro> <cpp:value>glad_glPolygonStipple</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPOPATTRIBPROC</name></type> <name>glad_glPopAttrib</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPopAttrib</name></cpp:macro> <cpp:value>glad_glPopAttrib</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPOPCLIENTATTRIBPROC</name></type> <name>glad_glPopClientAttrib</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPopClientAttrib</name></cpp:macro> <cpp:value>glad_glPopClientAttrib</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPOPDEBUGGROUPPROC</name></type> <name>glad_glPopDebugGroup</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPopDebugGroup</name></cpp:macro> <cpp:value>glad_glPopDebugGroup</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPOPMATRIXPROC</name></type> <name>glad_glPopMatrix</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPopMatrix</name></cpp:macro> <cpp:value>glad_glPopMatrix</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPOPNAMEPROC</name></type> <name>glad_glPopName</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPopName</name></cpp:macro> <cpp:value>glad_glPopName</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPRIMITIVERESTARTINDEXPROC</name></type> <name>glad_glPrimitiveRestartIndex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPrimitiveRestartIndex</name></cpp:macro> <cpp:value>glad_glPrimitiveRestartIndex</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPRIORITIZETEXTURESPROC</name></type> <name>glad_glPrioritizeTextures</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPrioritizeTextures</name></cpp:macro> <cpp:value>glad_glPrioritizeTextures</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPROVOKINGVERTEXPROC</name></type> <name>glad_glProvokingVertex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProvokingVertex</name></cpp:macro> <cpp:value>glad_glProvokingVertex</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPUSHATTRIBPROC</name></type> <name>glad_glPushAttrib</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPushAttrib</name></cpp:macro> <cpp:value>glad_glPushAttrib</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPUSHCLIENTATTRIBPROC</name></type> <name>glad_glPushClientAttrib</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPushClientAttrib</name></cpp:macro> <cpp:value>glad_glPushClientAttrib</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPUSHDEBUGGROUPPROC</name></type> <name>glad_glPushDebugGroup</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPushDebugGroup</name></cpp:macro> <cpp:value>glad_glPushDebugGroup</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPUSHMATRIXPROC</name></type> <name>glad_glPushMatrix</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPushMatrix</name></cpp:macro> <cpp:value>glad_glPushMatrix</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLPUSHNAMEPROC</name></type> <name>glad_glPushName</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPushName</name></cpp:macro> <cpp:value>glad_glPushName</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLQUERYCOUNTERPROC</name></type> <name>glad_glQueryCounter</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glQueryCounter</name></cpp:macro> <cpp:value>glad_glQueryCounter</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS2DPROC</name></type> <name>glad_glRasterPos2d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos2d</name></cpp:macro> <cpp:value>glad_glRasterPos2d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS2DVPROC</name></type> <name>glad_glRasterPos2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos2dv</name></cpp:macro> <cpp:value>glad_glRasterPos2dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS2FPROC</name></type> <name>glad_glRasterPos2f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos2f</name></cpp:macro> <cpp:value>glad_glRasterPos2f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS2FVPROC</name></type> <name>glad_glRasterPos2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos2fv</name></cpp:macro> <cpp:value>glad_glRasterPos2fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS2IPROC</name></type> <name>glad_glRasterPos2i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos2i</name></cpp:macro> <cpp:value>glad_glRasterPos2i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS2IVPROC</name></type> <name>glad_glRasterPos2iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos2iv</name></cpp:macro> <cpp:value>glad_glRasterPos2iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS2SPROC</name></type> <name>glad_glRasterPos2s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos2s</name></cpp:macro> <cpp:value>glad_glRasterPos2s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS2SVPROC</name></type> <name>glad_glRasterPos2sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos2sv</name></cpp:macro> <cpp:value>glad_glRasterPos2sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS3DPROC</name></type> <name>glad_glRasterPos3d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos3d</name></cpp:macro> <cpp:value>glad_glRasterPos3d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS3DVPROC</name></type> <name>glad_glRasterPos3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos3dv</name></cpp:macro> <cpp:value>glad_glRasterPos3dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS3FPROC</name></type> <name>glad_glRasterPos3f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos3f</name></cpp:macro> <cpp:value>glad_glRasterPos3f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS3FVPROC</name></type> <name>glad_glRasterPos3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos3fv</name></cpp:macro> <cpp:value>glad_glRasterPos3fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS3IPROC</name></type> <name>glad_glRasterPos3i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos3i</name></cpp:macro> <cpp:value>glad_glRasterPos3i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS3IVPROC</name></type> <name>glad_glRasterPos3iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos3iv</name></cpp:macro> <cpp:value>glad_glRasterPos3iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS3SPROC</name></type> <name>glad_glRasterPos3s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos3s</name></cpp:macro> <cpp:value>glad_glRasterPos3s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS3SVPROC</name></type> <name>glad_glRasterPos3sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos3sv</name></cpp:macro> <cpp:value>glad_glRasterPos3sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS4DPROC</name></type> <name>glad_glRasterPos4d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos4d</name></cpp:macro> <cpp:value>glad_glRasterPos4d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS4DVPROC</name></type> <name>glad_glRasterPos4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos4dv</name></cpp:macro> <cpp:value>glad_glRasterPos4dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS4FPROC</name></type> <name>glad_glRasterPos4f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos4f</name></cpp:macro> <cpp:value>glad_glRasterPos4f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS4FVPROC</name></type> <name>glad_glRasterPos4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos4fv</name></cpp:macro> <cpp:value>glad_glRasterPos4fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS4IPROC</name></type> <name>glad_glRasterPos4i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos4i</name></cpp:macro> <cpp:value>glad_glRasterPos4i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS4IVPROC</name></type> <name>glad_glRasterPos4iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos4iv</name></cpp:macro> <cpp:value>glad_glRasterPos4iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS4SPROC</name></type> <name>glad_glRasterPos4s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos4s</name></cpp:macro> <cpp:value>glad_glRasterPos4s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRASTERPOS4SVPROC</name></type> <name>glad_glRasterPos4sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos4sv</name></cpp:macro> <cpp:value>glad_glRasterPos4sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLREADBUFFERPROC</name></type> <name>glad_glReadBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReadBuffer</name></cpp:macro> <cpp:value>glad_glReadBuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLREADPIXELSPROC</name></type> <name>glad_glReadPixels</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReadPixels</name></cpp:macro> <cpp:value>glad_glReadPixels</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLREADNPIXELSPROC</name></type> <name>glad_glReadnPixels</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReadnPixels</name></cpp:macro> <cpp:value>glad_glReadnPixels</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLREADNPIXELSARBPROC</name></type> <name>glad_glReadnPixelsARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReadnPixelsARB</name></cpp:macro> <cpp:value>glad_glReadnPixelsARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRECTDPROC</name></type> <name>glad_glRectd</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRectd</name></cpp:macro> <cpp:value>glad_glRectd</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRECTDVPROC</name></type> <name>glad_glRectdv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRectdv</name></cpp:macro> <cpp:value>glad_glRectdv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRECTFPROC</name></type> <name>glad_glRectf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRectf</name></cpp:macro> <cpp:value>glad_glRectf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRECTFVPROC</name></type> <name>glad_glRectfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRectfv</name></cpp:macro> <cpp:value>glad_glRectfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRECTIPROC</name></type> <name>glad_glRecti</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRecti</name></cpp:macro> <cpp:value>glad_glRecti</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRECTIVPROC</name></type> <name>glad_glRectiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRectiv</name></cpp:macro> <cpp:value>glad_glRectiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRECTSPROC</name></type> <name>glad_glRects</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRects</name></cpp:macro> <cpp:value>glad_glRects</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRECTSVPROC</name></type> <name>glad_glRectsv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRectsv</name></cpp:macro> <cpp:value>glad_glRectsv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRENDERMODEPROC</name></type> <name>glad_glRenderMode</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRenderMode</name></cpp:macro> <cpp:value>glad_glRenderMode</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRENDERBUFFERSTORAGEPROC</name></type> <name>glad_glRenderbufferStorage</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRenderbufferStorage</name></cpp:macro> <cpp:value>glad_glRenderbufferStorage</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC</name></type> <name>glad_glRenderbufferStorageMultisample</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRenderbufferStorageMultisample</name></cpp:macro> <cpp:value>glad_glRenderbufferStorageMultisample</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLROTATEDPROC</name></type> <name>glad_glRotated</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRotated</name></cpp:macro> <cpp:value>glad_glRotated</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLROTATEFPROC</name></type> <name>glad_glRotatef</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRotatef</name></cpp:macro> <cpp:value>glad_glRotatef</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSAMPLECOVERAGEPROC</name></type> <name>glad_glSampleCoverage</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleCoverage</name></cpp:macro> <cpp:value>glad_glSampleCoverage</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSAMPLECOVERAGEARBPROC</name></type> <name>glad_glSampleCoverageARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleCoverageARB</name></cpp:macro> <cpp:value>glad_glSampleCoverageARB</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSAMPLEMASKIPROC</name></type> <name>glad_glSampleMaski</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleMaski</name></cpp:macro> <cpp:value>glad_glSampleMaski</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSAMPLERPARAMETERIIVPROC</name></type> <name>glad_glSamplerParameterIiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameterIiv</name></cpp:macro> <cpp:value>glad_glSamplerParameterIiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSAMPLERPARAMETERIUIVPROC</name></type> <name>glad_glSamplerParameterIuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameterIuiv</name></cpp:macro> <cpp:value>glad_glSamplerParameterIuiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSAMPLERPARAMETERFPROC</name></type> <name>glad_glSamplerParameterf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameterf</name></cpp:macro> <cpp:value>glad_glSamplerParameterf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSAMPLERPARAMETERFVPROC</name></type> <name>glad_glSamplerParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameterfv</name></cpp:macro> <cpp:value>glad_glSamplerParameterfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSAMPLERPARAMETERIPROC</name></type> <name>glad_glSamplerParameteri</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameteri</name></cpp:macro> <cpp:value>glad_glSamplerParameteri</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSAMPLERPARAMETERIVPROC</name></type> <name>glad_glSamplerParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameteriv</name></cpp:macro> <cpp:value>glad_glSamplerParameteriv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSCALEDPROC</name></type> <name>glad_glScaled</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glScaled</name></cpp:macro> <cpp:value>glad_glScaled</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSCALEFPROC</name></type> <name>glad_glScalef</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glScalef</name></cpp:macro> <cpp:value>glad_glScalef</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSCISSORPROC</name></type> <name>glad_glScissor</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glScissor</name></cpp:macro> <cpp:value>glad_glScissor</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3BPROC</name></type> <name>glad_glSecondaryColor3b</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3b</name></cpp:macro> <cpp:value>glad_glSecondaryColor3b</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3BVPROC</name></type> <name>glad_glSecondaryColor3bv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3bv</name></cpp:macro> <cpp:value>glad_glSecondaryColor3bv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3DPROC</name></type> <name>glad_glSecondaryColor3d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3d</name></cpp:macro> <cpp:value>glad_glSecondaryColor3d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3DVPROC</name></type> <name>glad_glSecondaryColor3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3dv</name></cpp:macro> <cpp:value>glad_glSecondaryColor3dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3FPROC</name></type> <name>glad_glSecondaryColor3f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3f</name></cpp:macro> <cpp:value>glad_glSecondaryColor3f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3FVPROC</name></type> <name>glad_glSecondaryColor3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3fv</name></cpp:macro> <cpp:value>glad_glSecondaryColor3fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3IPROC</name></type> <name>glad_glSecondaryColor3i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3i</name></cpp:macro> <cpp:value>glad_glSecondaryColor3i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3IVPROC</name></type> <name>glad_glSecondaryColor3iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3iv</name></cpp:macro> <cpp:value>glad_glSecondaryColor3iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3SPROC</name></type> <name>glad_glSecondaryColor3s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3s</name></cpp:macro> <cpp:value>glad_glSecondaryColor3s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3SVPROC</name></type> <name>glad_glSecondaryColor3sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3sv</name></cpp:macro> <cpp:value>glad_glSecondaryColor3sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3UBPROC</name></type> <name>glad_glSecondaryColor3ub</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3ub</name></cpp:macro> <cpp:value>glad_glSecondaryColor3ub</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3UBVPROC</name></type> <name>glad_glSecondaryColor3ubv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3ubv</name></cpp:macro> <cpp:value>glad_glSecondaryColor3ubv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3UIPROC</name></type> <name>glad_glSecondaryColor3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3ui</name></cpp:macro> <cpp:value>glad_glSecondaryColor3ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3UIVPROC</name></type> <name>glad_glSecondaryColor3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3uiv</name></cpp:macro> <cpp:value>glad_glSecondaryColor3uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3USPROC</name></type> <name>glad_glSecondaryColor3us</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3us</name></cpp:macro> <cpp:value>glad_glSecondaryColor3us</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLOR3USVPROC</name></type> <name>glad_glSecondaryColor3usv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3usv</name></cpp:macro> <cpp:value>glad_glSecondaryColor3usv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLORP3UIPROC</name></type> <name>glad_glSecondaryColorP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColorP3ui</name></cpp:macro> <cpp:value>glad_glSecondaryColorP3ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLORP3UIVPROC</name></type> <name>glad_glSecondaryColorP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColorP3uiv</name></cpp:macro> <cpp:value>glad_glSecondaryColorP3uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSECONDARYCOLORPOINTERPROC</name></type> <name>glad_glSecondaryColorPointer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColorPointer</name></cpp:macro> <cpp:value>glad_glSecondaryColorPointer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSELECTBUFFERPROC</name></type> <name>glad_glSelectBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSelectBuffer</name></cpp:macro> <cpp:value>glad_glSelectBuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSHADEMODELPROC</name></type> <name>glad_glShadeModel</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShadeModel</name></cpp:macro> <cpp:value>glad_glShadeModel</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSHADERSOURCEPROC</name></type> <name>glad_glShaderSource</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShaderSource</name></cpp:macro> <cpp:value>glad_glShaderSource</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSTENCILFUNCPROC</name></type> <name>glad_glStencilFunc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilFunc</name></cpp:macro> <cpp:value>glad_glStencilFunc</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSTENCILFUNCSEPARATEPROC</name></type> <name>glad_glStencilFuncSeparate</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilFuncSeparate</name></cpp:macro> <cpp:value>glad_glStencilFuncSeparate</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSTENCILMASKPROC</name></type> <name>glad_glStencilMask</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilMask</name></cpp:macro> <cpp:value>glad_glStencilMask</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSTENCILMASKSEPARATEPROC</name></type> <name>glad_glStencilMaskSeparate</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilMaskSeparate</name></cpp:macro> <cpp:value>glad_glStencilMaskSeparate</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSTENCILOPPROC</name></type> <name>glad_glStencilOp</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilOp</name></cpp:macro> <cpp:value>glad_glStencilOp</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLSTENCILOPSEPARATEPROC</name></type> <name>glad_glStencilOpSeparate</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilOpSeparate</name></cpp:macro> <cpp:value>glad_glStencilOpSeparate</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXBUFFERPROC</name></type> <name>glad_glTexBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexBuffer</name></cpp:macro> <cpp:value>glad_glTexBuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD1DPROC</name></type> <name>glad_glTexCoord1d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1d</name></cpp:macro> <cpp:value>glad_glTexCoord1d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD1DVPROC</name></type> <name>glad_glTexCoord1dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1dv</name></cpp:macro> <cpp:value>glad_glTexCoord1dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD1FPROC</name></type> <name>glad_glTexCoord1f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1f</name></cpp:macro> <cpp:value>glad_glTexCoord1f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD1FVPROC</name></type> <name>glad_glTexCoord1fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1fv</name></cpp:macro> <cpp:value>glad_glTexCoord1fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD1IPROC</name></type> <name>glad_glTexCoord1i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1i</name></cpp:macro> <cpp:value>glad_glTexCoord1i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD1IVPROC</name></type> <name>glad_glTexCoord1iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1iv</name></cpp:macro> <cpp:value>glad_glTexCoord1iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD1SPROC</name></type> <name>glad_glTexCoord1s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1s</name></cpp:macro> <cpp:value>glad_glTexCoord1s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD1SVPROC</name></type> <name>glad_glTexCoord1sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1sv</name></cpp:macro> <cpp:value>glad_glTexCoord1sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD2DPROC</name></type> <name>glad_glTexCoord2d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2d</name></cpp:macro> <cpp:value>glad_glTexCoord2d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD2DVPROC</name></type> <name>glad_glTexCoord2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2dv</name></cpp:macro> <cpp:value>glad_glTexCoord2dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD2FPROC</name></type> <name>glad_glTexCoord2f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2f</name></cpp:macro> <cpp:value>glad_glTexCoord2f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD2FVPROC</name></type> <name>glad_glTexCoord2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2fv</name></cpp:macro> <cpp:value>glad_glTexCoord2fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD2IPROC</name></type> <name>glad_glTexCoord2i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2i</name></cpp:macro> <cpp:value>glad_glTexCoord2i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD2IVPROC</name></type> <name>glad_glTexCoord2iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2iv</name></cpp:macro> <cpp:value>glad_glTexCoord2iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD2SPROC</name></type> <name>glad_glTexCoord2s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2s</name></cpp:macro> <cpp:value>glad_glTexCoord2s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD2SVPROC</name></type> <name>glad_glTexCoord2sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2sv</name></cpp:macro> <cpp:value>glad_glTexCoord2sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD3DPROC</name></type> <name>glad_glTexCoord3d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3d</name></cpp:macro> <cpp:value>glad_glTexCoord3d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD3DVPROC</name></type> <name>glad_glTexCoord3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3dv</name></cpp:macro> <cpp:value>glad_glTexCoord3dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD3FPROC</name></type> <name>glad_glTexCoord3f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3f</name></cpp:macro> <cpp:value>glad_glTexCoord3f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD3FVPROC</name></type> <name>glad_glTexCoord3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3fv</name></cpp:macro> <cpp:value>glad_glTexCoord3fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD3IPROC</name></type> <name>glad_glTexCoord3i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3i</name></cpp:macro> <cpp:value>glad_glTexCoord3i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD3IVPROC</name></type> <name>glad_glTexCoord3iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3iv</name></cpp:macro> <cpp:value>glad_glTexCoord3iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD3SPROC</name></type> <name>glad_glTexCoord3s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3s</name></cpp:macro> <cpp:value>glad_glTexCoord3s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD3SVPROC</name></type> <name>glad_glTexCoord3sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3sv</name></cpp:macro> <cpp:value>glad_glTexCoord3sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD4DPROC</name></type> <name>glad_glTexCoord4d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4d</name></cpp:macro> <cpp:value>glad_glTexCoord4d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD4DVPROC</name></type> <name>glad_glTexCoord4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4dv</name></cpp:macro> <cpp:value>glad_glTexCoord4dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD4FPROC</name></type> <name>glad_glTexCoord4f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4f</name></cpp:macro> <cpp:value>glad_glTexCoord4f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD4FVPROC</name></type> <name>glad_glTexCoord4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4fv</name></cpp:macro> <cpp:value>glad_glTexCoord4fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD4IPROC</name></type> <name>glad_glTexCoord4i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4i</name></cpp:macro> <cpp:value>glad_glTexCoord4i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD4IVPROC</name></type> <name>glad_glTexCoord4iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4iv</name></cpp:macro> <cpp:value>glad_glTexCoord4iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD4SPROC</name></type> <name>glad_glTexCoord4s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4s</name></cpp:macro> <cpp:value>glad_glTexCoord4s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORD4SVPROC</name></type> <name>glad_glTexCoord4sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4sv</name></cpp:macro> <cpp:value>glad_glTexCoord4sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORDP1UIPROC</name></type> <name>glad_glTexCoordP1ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP1ui</name></cpp:macro> <cpp:value>glad_glTexCoordP1ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORDP1UIVPROC</name></type> <name>glad_glTexCoordP1uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP1uiv</name></cpp:macro> <cpp:value>glad_glTexCoordP1uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORDP2UIPROC</name></type> <name>glad_glTexCoordP2ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP2ui</name></cpp:macro> <cpp:value>glad_glTexCoordP2ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORDP2UIVPROC</name></type> <name>glad_glTexCoordP2uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP2uiv</name></cpp:macro> <cpp:value>glad_glTexCoordP2uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORDP3UIPROC</name></type> <name>glad_glTexCoordP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP3ui</name></cpp:macro> <cpp:value>glad_glTexCoordP3ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORDP3UIVPROC</name></type> <name>glad_glTexCoordP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP3uiv</name></cpp:macro> <cpp:value>glad_glTexCoordP3uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORDP4UIPROC</name></type> <name>glad_glTexCoordP4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP4ui</name></cpp:macro> <cpp:value>glad_glTexCoordP4ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORDP4UIVPROC</name></type> <name>glad_glTexCoordP4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP4uiv</name></cpp:macro> <cpp:value>glad_glTexCoordP4uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXCOORDPOINTERPROC</name></type> <name>glad_glTexCoordPointer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordPointer</name></cpp:macro> <cpp:value>glad_glTexCoordPointer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXENVFPROC</name></type> <name>glad_glTexEnvf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexEnvf</name></cpp:macro> <cpp:value>glad_glTexEnvf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXENVFVPROC</name></type> <name>glad_glTexEnvfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexEnvfv</name></cpp:macro> <cpp:value>glad_glTexEnvfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXENVIPROC</name></type> <name>glad_glTexEnvi</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexEnvi</name></cpp:macro> <cpp:value>glad_glTexEnvi</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXENVIVPROC</name></type> <name>glad_glTexEnviv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexEnviv</name></cpp:macro> <cpp:value>glad_glTexEnviv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXGENDPROC</name></type> <name>glad_glTexGend</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexGend</name></cpp:macro> <cpp:value>glad_glTexGend</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXGENDVPROC</name></type> <name>glad_glTexGendv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexGendv</name></cpp:macro> <cpp:value>glad_glTexGendv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXGENFPROC</name></type> <name>glad_glTexGenf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexGenf</name></cpp:macro> <cpp:value>glad_glTexGenf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXGENFVPROC</name></type> <name>glad_glTexGenfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexGenfv</name></cpp:macro> <cpp:value>glad_glTexGenfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXGENIPROC</name></type> <name>glad_glTexGeni</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexGeni</name></cpp:macro> <cpp:value>glad_glTexGeni</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXGENIVPROC</name></type> <name>glad_glTexGeniv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexGeniv</name></cpp:macro> <cpp:value>glad_glTexGeniv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXIMAGE1DPROC</name></type> <name>glad_glTexImage1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage1D</name></cpp:macro> <cpp:value>glad_glTexImage1D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXIMAGE2DPROC</name></type> <name>glad_glTexImage2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage2D</name></cpp:macro> <cpp:value>glad_glTexImage2D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXIMAGE2DMULTISAMPLEPROC</name></type> <name>glad_glTexImage2DMultisample</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage2DMultisample</name></cpp:macro> <cpp:value>glad_glTexImage2DMultisample</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXIMAGE3DPROC</name></type> <name>glad_glTexImage3D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage3D</name></cpp:macro> <cpp:value>glad_glTexImage3D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXIMAGE3DMULTISAMPLEPROC</name></type> <name>glad_glTexImage3DMultisample</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage3DMultisample</name></cpp:macro> <cpp:value>glad_glTexImage3DMultisample</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXPARAMETERIIVPROC</name></type> <name>glad_glTexParameterIiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterIiv</name></cpp:macro> <cpp:value>glad_glTexParameterIiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXPARAMETERIUIVPROC</name></type> <name>glad_glTexParameterIuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterIuiv</name></cpp:macro> <cpp:value>glad_glTexParameterIuiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXPARAMETERFPROC</name></type> <name>glad_glTexParameterf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterf</name></cpp:macro> <cpp:value>glad_glTexParameterf</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXPARAMETERFVPROC</name></type> <name>glad_glTexParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterfv</name></cpp:macro> <cpp:value>glad_glTexParameterfv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXPARAMETERIPROC</name></type> <name>glad_glTexParameteri</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameteri</name></cpp:macro> <cpp:value>glad_glTexParameteri</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXPARAMETERIVPROC</name></type> <name>glad_glTexParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameteriv</name></cpp:macro> <cpp:value>glad_glTexParameteriv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXSUBIMAGE1DPROC</name></type> <name>glad_glTexSubImage1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexSubImage1D</name></cpp:macro> <cpp:value>glad_glTexSubImage1D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXSUBIMAGE2DPROC</name></type> <name>glad_glTexSubImage2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexSubImage2D</name></cpp:macro> <cpp:value>glad_glTexSubImage2D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTEXSUBIMAGE3DPROC</name></type> <name>glad_glTexSubImage3D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexSubImage3D</name></cpp:macro> <cpp:value>glad_glTexSubImage3D</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTRANSFORMFEEDBACKVARYINGSPROC</name></type> <name>glad_glTransformFeedbackVaryings</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTransformFeedbackVaryings</name></cpp:macro> <cpp:value>glad_glTransformFeedbackVaryings</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTRANSLATEDPROC</name></type> <name>glad_glTranslated</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTranslated</name></cpp:macro> <cpp:value>glad_glTranslated</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLTRANSLATEFPROC</name></type> <name>glad_glTranslatef</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTranslatef</name></cpp:macro> <cpp:value>glad_glTranslatef</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM1FPROC</name></type> <name>glad_glUniform1f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1f</name></cpp:macro> <cpp:value>glad_glUniform1f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM1FVPROC</name></type> <name>glad_glUniform1fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1fv</name></cpp:macro> <cpp:value>glad_glUniform1fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM1IPROC</name></type> <name>glad_glUniform1i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1i</name></cpp:macro> <cpp:value>glad_glUniform1i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM1IVPROC</name></type> <name>glad_glUniform1iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1iv</name></cpp:macro> <cpp:value>glad_glUniform1iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM1UIPROC</name></type> <name>glad_glUniform1ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1ui</name></cpp:macro> <cpp:value>glad_glUniform1ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM1UIVPROC</name></type> <name>glad_glUniform1uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1uiv</name></cpp:macro> <cpp:value>glad_glUniform1uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM2FPROC</name></type> <name>glad_glUniform2f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2f</name></cpp:macro> <cpp:value>glad_glUniform2f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM2FVPROC</name></type> <name>glad_glUniform2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2fv</name></cpp:macro> <cpp:value>glad_glUniform2fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM2IPROC</name></type> <name>glad_glUniform2i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2i</name></cpp:macro> <cpp:value>glad_glUniform2i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM2IVPROC</name></type> <name>glad_glUniform2iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2iv</name></cpp:macro> <cpp:value>glad_glUniform2iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM2UIPROC</name></type> <name>glad_glUniform2ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2ui</name></cpp:macro> <cpp:value>glad_glUniform2ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM2UIVPROC</name></type> <name>glad_glUniform2uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2uiv</name></cpp:macro> <cpp:value>glad_glUniform2uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM3FPROC</name></type> <name>glad_glUniform3f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3f</name></cpp:macro> <cpp:value>glad_glUniform3f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM3FVPROC</name></type> <name>glad_glUniform3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3fv</name></cpp:macro> <cpp:value>glad_glUniform3fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM3IPROC</name></type> <name>glad_glUniform3i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3i</name></cpp:macro> <cpp:value>glad_glUniform3i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM3IVPROC</name></type> <name>glad_glUniform3iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3iv</name></cpp:macro> <cpp:value>glad_glUniform3iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM3UIPROC</name></type> <name>glad_glUniform3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3ui</name></cpp:macro> <cpp:value>glad_glUniform3ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM3UIVPROC</name></type> <name>glad_glUniform3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3uiv</name></cpp:macro> <cpp:value>glad_glUniform3uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM4FPROC</name></type> <name>glad_glUniform4f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4f</name></cpp:macro> <cpp:value>glad_glUniform4f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM4FVPROC</name></type> <name>glad_glUniform4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4fv</name></cpp:macro> <cpp:value>glad_glUniform4fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM4IPROC</name></type> <name>glad_glUniform4i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4i</name></cpp:macro> <cpp:value>glad_glUniform4i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM4IVPROC</name></type> <name>glad_glUniform4iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4iv</name></cpp:macro> <cpp:value>glad_glUniform4iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM4UIPROC</name></type> <name>glad_glUniform4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4ui</name></cpp:macro> <cpp:value>glad_glUniform4ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORM4UIVPROC</name></type> <name>glad_glUniform4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4uiv</name></cpp:macro> <cpp:value>glad_glUniform4uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORMBLOCKBINDINGPROC</name></type> <name>glad_glUniformBlockBinding</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformBlockBinding</name></cpp:macro> <cpp:value>glad_glUniformBlockBinding</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORMMATRIX2FVPROC</name></type> <name>glad_glUniformMatrix2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix2fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix2fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORMMATRIX2X3FVPROC</name></type> <name>glad_glUniformMatrix2x3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix2x3fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix2x3fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORMMATRIX2X4FVPROC</name></type> <name>glad_glUniformMatrix2x4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix2x4fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix2x4fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORMMATRIX3FVPROC</name></type> <name>glad_glUniformMatrix3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix3fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix3fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORMMATRIX3X2FVPROC</name></type> <name>glad_glUniformMatrix3x2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix3x2fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix3x2fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORMMATRIX3X4FVPROC</name></type> <name>glad_glUniformMatrix3x4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix3x4fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix3x4fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORMMATRIX4FVPROC</name></type> <name>glad_glUniformMatrix4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix4fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix4fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORMMATRIX4X2FVPROC</name></type> <name>glad_glUniformMatrix4x2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix4x2fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix4x2fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNIFORMMATRIX4X3FVPROC</name></type> <name>glad_glUniformMatrix4x3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix4x3fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix4x3fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUNMAPBUFFERPROC</name></type> <name>glad_glUnmapBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUnmapBuffer</name></cpp:macro> <cpp:value>glad_glUnmapBuffer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLUSEPROGRAMPROC</name></type> <name>glad_glUseProgram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUseProgram</name></cpp:macro> <cpp:value>glad_glUseProgram</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVALIDATEPROGRAMPROC</name></type> <name>glad_glValidateProgram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glValidateProgram</name></cpp:macro> <cpp:value>glad_glValidateProgram</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX2DPROC</name></type> <name>glad_glVertex2d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2d</name></cpp:macro> <cpp:value>glad_glVertex2d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX2DVPROC</name></type> <name>glad_glVertex2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2dv</name></cpp:macro> <cpp:value>glad_glVertex2dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX2FPROC</name></type> <name>glad_glVertex2f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2f</name></cpp:macro> <cpp:value>glad_glVertex2f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX2FVPROC</name></type> <name>glad_glVertex2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2fv</name></cpp:macro> <cpp:value>glad_glVertex2fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX2IPROC</name></type> <name>glad_glVertex2i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2i</name></cpp:macro> <cpp:value>glad_glVertex2i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX2IVPROC</name></type> <name>glad_glVertex2iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2iv</name></cpp:macro> <cpp:value>glad_glVertex2iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX2SPROC</name></type> <name>glad_glVertex2s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2s</name></cpp:macro> <cpp:value>glad_glVertex2s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX2SVPROC</name></type> <name>glad_glVertex2sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2sv</name></cpp:macro> <cpp:value>glad_glVertex2sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX3DPROC</name></type> <name>glad_glVertex3d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3d</name></cpp:macro> <cpp:value>glad_glVertex3d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX3DVPROC</name></type> <name>glad_glVertex3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3dv</name></cpp:macro> <cpp:value>glad_glVertex3dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX3FPROC</name></type> <name>glad_glVertex3f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3f</name></cpp:macro> <cpp:value>glad_glVertex3f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX3FVPROC</name></type> <name>glad_glVertex3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3fv</name></cpp:macro> <cpp:value>glad_glVertex3fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX3IPROC</name></type> <name>glad_glVertex3i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3i</name></cpp:macro> <cpp:value>glad_glVertex3i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX3IVPROC</name></type> <name>glad_glVertex3iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3iv</name></cpp:macro> <cpp:value>glad_glVertex3iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX3SPROC</name></type> <name>glad_glVertex3s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3s</name></cpp:macro> <cpp:value>glad_glVertex3s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX3SVPROC</name></type> <name>glad_glVertex3sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3sv</name></cpp:macro> <cpp:value>glad_glVertex3sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX4DPROC</name></type> <name>glad_glVertex4d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4d</name></cpp:macro> <cpp:value>glad_glVertex4d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX4DVPROC</name></type> <name>glad_glVertex4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4dv</name></cpp:macro> <cpp:value>glad_glVertex4dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX4FPROC</name></type> <name>glad_glVertex4f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4f</name></cpp:macro> <cpp:value>glad_glVertex4f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX4FVPROC</name></type> <name>glad_glVertex4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4fv</name></cpp:macro> <cpp:value>glad_glVertex4fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX4IPROC</name></type> <name>glad_glVertex4i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4i</name></cpp:macro> <cpp:value>glad_glVertex4i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX4IVPROC</name></type> <name>glad_glVertex4iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4iv</name></cpp:macro> <cpp:value>glad_glVertex4iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX4SPROC</name></type> <name>glad_glVertex4s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4s</name></cpp:macro> <cpp:value>glad_glVertex4s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEX4SVPROC</name></type> <name>glad_glVertex4sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4sv</name></cpp:macro> <cpp:value>glad_glVertex4sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB1DPROC</name></type> <name>glad_glVertexAttrib1d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1d</name></cpp:macro> <cpp:value>glad_glVertexAttrib1d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB1DVPROC</name></type> <name>glad_glVertexAttrib1dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1dv</name></cpp:macro> <cpp:value>glad_glVertexAttrib1dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB1FPROC</name></type> <name>glad_glVertexAttrib1f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1f</name></cpp:macro> <cpp:value>glad_glVertexAttrib1f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB1FVPROC</name></type> <name>glad_glVertexAttrib1fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1fv</name></cpp:macro> <cpp:value>glad_glVertexAttrib1fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB1SPROC</name></type> <name>glad_glVertexAttrib1s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1s</name></cpp:macro> <cpp:value>glad_glVertexAttrib1s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB1SVPROC</name></type> <name>glad_glVertexAttrib1sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1sv</name></cpp:macro> <cpp:value>glad_glVertexAttrib1sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB2DPROC</name></type> <name>glad_glVertexAttrib2d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2d</name></cpp:macro> <cpp:value>glad_glVertexAttrib2d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB2DVPROC</name></type> <name>glad_glVertexAttrib2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2dv</name></cpp:macro> <cpp:value>glad_glVertexAttrib2dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB2FPROC</name></type> <name>glad_glVertexAttrib2f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2f</name></cpp:macro> <cpp:value>glad_glVertexAttrib2f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB2FVPROC</name></type> <name>glad_glVertexAttrib2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2fv</name></cpp:macro> <cpp:value>glad_glVertexAttrib2fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB2SPROC</name></type> <name>glad_glVertexAttrib2s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2s</name></cpp:macro> <cpp:value>glad_glVertexAttrib2s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB2SVPROC</name></type> <name>glad_glVertexAttrib2sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2sv</name></cpp:macro> <cpp:value>glad_glVertexAttrib2sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB3DPROC</name></type> <name>glad_glVertexAttrib3d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3d</name></cpp:macro> <cpp:value>glad_glVertexAttrib3d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB3DVPROC</name></type> <name>glad_glVertexAttrib3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3dv</name></cpp:macro> <cpp:value>glad_glVertexAttrib3dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB3FPROC</name></type> <name>glad_glVertexAttrib3f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3f</name></cpp:macro> <cpp:value>glad_glVertexAttrib3f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB3FVPROC</name></type> <name>glad_glVertexAttrib3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3fv</name></cpp:macro> <cpp:value>glad_glVertexAttrib3fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB3SPROC</name></type> <name>glad_glVertexAttrib3s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3s</name></cpp:macro> <cpp:value>glad_glVertexAttrib3s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB3SVPROC</name></type> <name>glad_glVertexAttrib3sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3sv</name></cpp:macro> <cpp:value>glad_glVertexAttrib3sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4NBVPROC</name></type> <name>glad_glVertexAttrib4Nbv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nbv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nbv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4NIVPROC</name></type> <name>glad_glVertexAttrib4Niv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Niv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Niv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4NSVPROC</name></type> <name>glad_glVertexAttrib4Nsv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nsv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nsv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4NUBPROC</name></type> <name>glad_glVertexAttrib4Nub</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nub</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nub</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4NUBVPROC</name></type> <name>glad_glVertexAttrib4Nubv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nubv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nubv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4NUIVPROC</name></type> <name>glad_glVertexAttrib4Nuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nuiv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nuiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4NUSVPROC</name></type> <name>glad_glVertexAttrib4Nusv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nusv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nusv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4BVPROC</name></type> <name>glad_glVertexAttrib4bv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4bv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4bv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4DPROC</name></type> <name>glad_glVertexAttrib4d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4d</name></cpp:macro> <cpp:value>glad_glVertexAttrib4d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4DVPROC</name></type> <name>glad_glVertexAttrib4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4dv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4FPROC</name></type> <name>glad_glVertexAttrib4f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4f</name></cpp:macro> <cpp:value>glad_glVertexAttrib4f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4FVPROC</name></type> <name>glad_glVertexAttrib4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4fv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4IVPROC</name></type> <name>glad_glVertexAttrib4iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4iv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4SPROC</name></type> <name>glad_glVertexAttrib4s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4s</name></cpp:macro> <cpp:value>glad_glVertexAttrib4s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4SVPROC</name></type> <name>glad_glVertexAttrib4sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4sv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4UBVPROC</name></type> <name>glad_glVertexAttrib4ubv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4ubv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4ubv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4UIVPROC</name></type> <name>glad_glVertexAttrib4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4uiv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIB4USVPROC</name></type> <name>glad_glVertexAttrib4usv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4usv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4usv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBDIVISORPROC</name></type> <name>glad_glVertexAttribDivisor</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribDivisor</name></cpp:macro> <cpp:value>glad_glVertexAttribDivisor</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI1IPROC</name></type> <name>glad_glVertexAttribI1i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1i</name></cpp:macro> <cpp:value>glad_glVertexAttribI1i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI1IVPROC</name></type> <name>glad_glVertexAttribI1iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1iv</name></cpp:macro> <cpp:value>glad_glVertexAttribI1iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI1UIPROC</name></type> <name>glad_glVertexAttribI1ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1ui</name></cpp:macro> <cpp:value>glad_glVertexAttribI1ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI1UIVPROC</name></type> <name>glad_glVertexAttribI1uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribI1uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI2IPROC</name></type> <name>glad_glVertexAttribI2i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2i</name></cpp:macro> <cpp:value>glad_glVertexAttribI2i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI2IVPROC</name></type> <name>glad_glVertexAttribI2iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2iv</name></cpp:macro> <cpp:value>glad_glVertexAttribI2iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI2UIPROC</name></type> <name>glad_glVertexAttribI2ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2ui</name></cpp:macro> <cpp:value>glad_glVertexAttribI2ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI2UIVPROC</name></type> <name>glad_glVertexAttribI2uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribI2uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI3IPROC</name></type> <name>glad_glVertexAttribI3i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3i</name></cpp:macro> <cpp:value>glad_glVertexAttribI3i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI3IVPROC</name></type> <name>glad_glVertexAttribI3iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3iv</name></cpp:macro> <cpp:value>glad_glVertexAttribI3iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI3UIPROC</name></type> <name>glad_glVertexAttribI3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3ui</name></cpp:macro> <cpp:value>glad_glVertexAttribI3ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI3UIVPROC</name></type> <name>glad_glVertexAttribI3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribI3uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI4BVPROC</name></type> <name>glad_glVertexAttribI4bv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4bv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4bv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI4IPROC</name></type> <name>glad_glVertexAttribI4i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4i</name></cpp:macro> <cpp:value>glad_glVertexAttribI4i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI4IVPROC</name></type> <name>glad_glVertexAttribI4iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4iv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI4SVPROC</name></type> <name>glad_glVertexAttribI4sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4sv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI4UBVPROC</name></type> <name>glad_glVertexAttribI4ubv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4ubv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4ubv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI4UIPROC</name></type> <name>glad_glVertexAttribI4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4ui</name></cpp:macro> <cpp:value>glad_glVertexAttribI4ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI4UIVPROC</name></type> <name>glad_glVertexAttribI4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBI4USVPROC</name></type> <name>glad_glVertexAttribI4usv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4usv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4usv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBIPOINTERPROC</name></type> <name>glad_glVertexAttribIPointer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribIPointer</name></cpp:macro> <cpp:value>glad_glVertexAttribIPointer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBP1UIPROC</name></type> <name>glad_glVertexAttribP1ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP1ui</name></cpp:macro> <cpp:value>glad_glVertexAttribP1ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBP1UIVPROC</name></type> <name>glad_glVertexAttribP1uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP1uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribP1uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBP2UIPROC</name></type> <name>glad_glVertexAttribP2ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP2ui</name></cpp:macro> <cpp:value>glad_glVertexAttribP2ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBP2UIVPROC</name></type> <name>glad_glVertexAttribP2uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP2uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribP2uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBP3UIPROC</name></type> <name>glad_glVertexAttribP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP3ui</name></cpp:macro> <cpp:value>glad_glVertexAttribP3ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBP3UIVPROC</name></type> <name>glad_glVertexAttribP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP3uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribP3uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBP4UIPROC</name></type> <name>glad_glVertexAttribP4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP4ui</name></cpp:macro> <cpp:value>glad_glVertexAttribP4ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBP4UIVPROC</name></type> <name>glad_glVertexAttribP4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP4uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribP4uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXATTRIBPOINTERPROC</name></type> <name>glad_glVertexAttribPointer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribPointer</name></cpp:macro> <cpp:value>glad_glVertexAttribPointer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXP2UIPROC</name></type> <name>glad_glVertexP2ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP2ui</name></cpp:macro> <cpp:value>glad_glVertexP2ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXP2UIVPROC</name></type> <name>glad_glVertexP2uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP2uiv</name></cpp:macro> <cpp:value>glad_glVertexP2uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXP3UIPROC</name></type> <name>glad_glVertexP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP3ui</name></cpp:macro> <cpp:value>glad_glVertexP3ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXP3UIVPROC</name></type> <name>glad_glVertexP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP3uiv</name></cpp:macro> <cpp:value>glad_glVertexP3uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXP4UIPROC</name></type> <name>glad_glVertexP4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP4ui</name></cpp:macro> <cpp:value>glad_glVertexP4ui</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXP4UIVPROC</name></type> <name>glad_glVertexP4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP4uiv</name></cpp:macro> <cpp:value>glad_glVertexP4uiv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVERTEXPOINTERPROC</name></type> <name>glad_glVertexPointer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexPointer</name></cpp:macro> <cpp:value>glad_glVertexPointer</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLVIEWPORTPROC</name></type> <name>glad_glViewport</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glViewport</name></cpp:macro> <cpp:value>glad_glViewport</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWAITSYNCPROC</name></type> <name>glad_glWaitSync</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWaitSync</name></cpp:macro> <cpp:value>glad_glWaitSync</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS2DPROC</name></type> <name>glad_glWindowPos2d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2d</name></cpp:macro> <cpp:value>glad_glWindowPos2d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS2DVPROC</name></type> <name>glad_glWindowPos2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2dv</name></cpp:macro> <cpp:value>glad_glWindowPos2dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS2FPROC</name></type> <name>glad_glWindowPos2f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2f</name></cpp:macro> <cpp:value>glad_glWindowPos2f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS2FVPROC</name></type> <name>glad_glWindowPos2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2fv</name></cpp:macro> <cpp:value>glad_glWindowPos2fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS2IPROC</name></type> <name>glad_glWindowPos2i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2i</name></cpp:macro> <cpp:value>glad_glWindowPos2i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS2IVPROC</name></type> <name>glad_glWindowPos2iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2iv</name></cpp:macro> <cpp:value>glad_glWindowPos2iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS2SPROC</name></type> <name>glad_glWindowPos2s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2s</name></cpp:macro> <cpp:value>glad_glWindowPos2s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS2SVPROC</name></type> <name>glad_glWindowPos2sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2sv</name></cpp:macro> <cpp:value>glad_glWindowPos2sv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS3DPROC</name></type> <name>glad_glWindowPos3d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3d</name></cpp:macro> <cpp:value>glad_glWindowPos3d</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS3DVPROC</name></type> <name>glad_glWindowPos3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3dv</name></cpp:macro> <cpp:value>glad_glWindowPos3dv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS3FPROC</name></type> <name>glad_glWindowPos3f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3f</name></cpp:macro> <cpp:value>glad_glWindowPos3f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS3FVPROC</name></type> <name>glad_glWindowPos3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3fv</name></cpp:macro> <cpp:value>glad_glWindowPos3fv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS3IPROC</name></type> <name>glad_glWindowPos3i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3i</name></cpp:macro> <cpp:value>glad_glWindowPos3i</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS3IVPROC</name></type> <name>glad_glWindowPos3iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3iv</name></cpp:macro> <cpp:value>glad_glWindowPos3iv</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS3SPROC</name></type> <name>glad_glWindowPos3s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3s</name></cpp:macro> <cpp:value>glad_glWindowPos3s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFNGLWINDOWPOS3SVPROC</name></type> <name>glad_glWindowPos3sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3sv</name></cpp:macro> <cpp:value>glad_glWindowPos3sv</cpp:value></cpp:define>

<function_decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>gladLoadGLUserPtr</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>gladLoadGL</name><parameter_list>( <parameter><decl><type><name>GLADloadfunc</name></type> <name>load</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
