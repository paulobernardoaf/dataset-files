<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\deps\glad_gl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glad/gl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_IMPL_UTIL_C_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_IMPL_UTIL_C_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_IMPL_UTIL_SSCANF</name></cpp:macro> <cpp:value>sscanf_s</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_IMPL_UTIL_SSCANF</name></cpp:macro> <cpp:value>sscanf</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_1_0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_1_1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_1_2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_1_3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_1_4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_1_5</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_2_0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_2_1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_3_0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_3_1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_3_2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_3_3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_multisample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_robustness</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_KHR_debug</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLACCUMPROC</name></type> <name>glad_glAccum</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLACTIVETEXTUREPROC</name></type> <name>glad_glActiveTexture</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLALPHAFUNCPROC</name></type> <name>glad_glAlphaFunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLARETEXTURESRESIDENTPROC</name></type> <name>glad_glAreTexturesResident</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLARRAYELEMENTPROC</name></type> <name>glad_glArrayElement</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLATTACHSHADERPROC</name></type> <name>glad_glAttachShader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBEGINPROC</name></type> <name>glad_glBegin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBEGINCONDITIONALRENDERPROC</name></type> <name>glad_glBeginConditionalRender</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBEGINQUERYPROC</name></type> <name>glad_glBeginQuery</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBEGINTRANSFORMFEEDBACKPROC</name></type> <name>glad_glBeginTransformFeedback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBINDATTRIBLOCATIONPROC</name></type> <name>glad_glBindAttribLocation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBINDBUFFERPROC</name></type> <name>glad_glBindBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBINDBUFFERBASEPROC</name></type> <name>glad_glBindBufferBase</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBINDBUFFERRANGEPROC</name></type> <name>glad_glBindBufferRange</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBINDFRAGDATALOCATIONPROC</name></type> <name>glad_glBindFragDataLocation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBINDFRAGDATALOCATIONINDEXEDPROC</name></type> <name>glad_glBindFragDataLocationIndexed</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBINDFRAMEBUFFERPROC</name></type> <name>glad_glBindFramebuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBINDRENDERBUFFERPROC</name></type> <name>glad_glBindRenderbuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBINDSAMPLERPROC</name></type> <name>glad_glBindSampler</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBINDTEXTUREPROC</name></type> <name>glad_glBindTexture</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBINDVERTEXARRAYPROC</name></type> <name>glad_glBindVertexArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBITMAPPROC</name></type> <name>glad_glBitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBLENDCOLORPROC</name></type> <name>glad_glBlendColor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBLENDEQUATIONPROC</name></type> <name>glad_glBlendEquation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBLENDEQUATIONSEPARATEPROC</name></type> <name>glad_glBlendEquationSeparate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBLENDFUNCPROC</name></type> <name>glad_glBlendFunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBLENDFUNCSEPARATEPROC</name></type> <name>glad_glBlendFuncSeparate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBLITFRAMEBUFFERPROC</name></type> <name>glad_glBlitFramebuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBUFFERDATAPROC</name></type> <name>glad_glBufferData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLBUFFERSUBDATAPROC</name></type> <name>glad_glBufferSubData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCALLLISTPROC</name></type> <name>glad_glCallList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCALLLISTSPROC</name></type> <name>glad_glCallLists</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCHECKFRAMEBUFFERSTATUSPROC</name></type> <name>glad_glCheckFramebufferStatus</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLAMPCOLORPROC</name></type> <name>glad_glClampColor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLEARPROC</name></type> <name>glad_glClear</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLEARACCUMPROC</name></type> <name>glad_glClearAccum</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLEARBUFFERFIPROC</name></type> <name>glad_glClearBufferfi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLEARBUFFERFVPROC</name></type> <name>glad_glClearBufferfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLEARBUFFERIVPROC</name></type> <name>glad_glClearBufferiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLEARBUFFERUIVPROC</name></type> <name>glad_glClearBufferuiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLEARCOLORPROC</name></type> <name>glad_glClearColor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLEARDEPTHPROC</name></type> <name>glad_glClearDepth</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLEARINDEXPROC</name></type> <name>glad_glClearIndex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLEARSTENCILPROC</name></type> <name>glad_glClearStencil</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLIENTACTIVETEXTUREPROC</name></type> <name>glad_glClientActiveTexture</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLIENTWAITSYNCPROC</name></type> <name>glad_glClientWaitSync</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCLIPPLANEPROC</name></type> <name>glad_glClipPlane</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3BPROC</name></type> <name>glad_glColor3b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3BVPROC</name></type> <name>glad_glColor3bv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3DPROC</name></type> <name>glad_glColor3d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3DVPROC</name></type> <name>glad_glColor3dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3FPROC</name></type> <name>glad_glColor3f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3FVPROC</name></type> <name>glad_glColor3fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3IPROC</name></type> <name>glad_glColor3i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3IVPROC</name></type> <name>glad_glColor3iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3SPROC</name></type> <name>glad_glColor3s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3SVPROC</name></type> <name>glad_glColor3sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3UBPROC</name></type> <name>glad_glColor3ub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3UBVPROC</name></type> <name>glad_glColor3ubv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3UIPROC</name></type> <name>glad_glColor3ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3UIVPROC</name></type> <name>glad_glColor3uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3USPROC</name></type> <name>glad_glColor3us</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR3USVPROC</name></type> <name>glad_glColor3usv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4BPROC</name></type> <name>glad_glColor4b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4BVPROC</name></type> <name>glad_glColor4bv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4DPROC</name></type> <name>glad_glColor4d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4DVPROC</name></type> <name>glad_glColor4dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4FPROC</name></type> <name>glad_glColor4f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4FVPROC</name></type> <name>glad_glColor4fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4IPROC</name></type> <name>glad_glColor4i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4IVPROC</name></type> <name>glad_glColor4iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4SPROC</name></type> <name>glad_glColor4s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4SVPROC</name></type> <name>glad_glColor4sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4UBPROC</name></type> <name>glad_glColor4ub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4UBVPROC</name></type> <name>glad_glColor4ubv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4UIPROC</name></type> <name>glad_glColor4ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4UIVPROC</name></type> <name>glad_glColor4uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4USPROC</name></type> <name>glad_glColor4us</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLOR4USVPROC</name></type> <name>glad_glColor4usv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLORMASKPROC</name></type> <name>glad_glColorMask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLORMASKIPROC</name></type> <name>glad_glColorMaski</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLORMATERIALPROC</name></type> <name>glad_glColorMaterial</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLORP3UIPROC</name></type> <name>glad_glColorP3ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLORP3UIVPROC</name></type> <name>glad_glColorP3uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLORP4UIPROC</name></type> <name>glad_glColorP4ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLORP4UIVPROC</name></type> <name>glad_glColorP4uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOLORPOINTERPROC</name></type> <name>glad_glColorPointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOMPILESHADERPROC</name></type> <name>glad_glCompileShader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXIMAGE1DPROC</name></type> <name>glad_glCompressedTexImage1D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXIMAGE2DPROC</name></type> <name>glad_glCompressedTexImage2D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXIMAGE3DPROC</name></type> <name>glad_glCompressedTexImage3D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC</name></type> <name>glad_glCompressedTexSubImage1D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC</name></type> <name>glad_glCompressedTexSubImage2D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC</name></type> <name>glad_glCompressedTexSubImage3D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOPYBUFFERSUBDATAPROC</name></type> <name>glad_glCopyBufferSubData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOPYPIXELSPROC</name></type> <name>glad_glCopyPixels</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOPYTEXIMAGE1DPROC</name></type> <name>glad_glCopyTexImage1D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOPYTEXIMAGE2DPROC</name></type> <name>glad_glCopyTexImage2D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOPYTEXSUBIMAGE1DPROC</name></type> <name>glad_glCopyTexSubImage1D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOPYTEXSUBIMAGE2DPROC</name></type> <name>glad_glCopyTexSubImage2D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCOPYTEXSUBIMAGE3DPROC</name></type> <name>glad_glCopyTexSubImage3D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCREATEPROGRAMPROC</name></type> <name>glad_glCreateProgram</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCREATESHADERPROC</name></type> <name>glad_glCreateShader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLCULLFACEPROC</name></type> <name>glad_glCullFace</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDEBUGMESSAGECALLBACKPROC</name></type> <name>glad_glDebugMessageCallback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDEBUGMESSAGECONTROLPROC</name></type> <name>glad_glDebugMessageControl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDEBUGMESSAGEINSERTPROC</name></type> <name>glad_glDebugMessageInsert</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDELETEBUFFERSPROC</name></type> <name>glad_glDeleteBuffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDELETEFRAMEBUFFERSPROC</name></type> <name>glad_glDeleteFramebuffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDELETELISTSPROC</name></type> <name>glad_glDeleteLists</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDELETEPROGRAMPROC</name></type> <name>glad_glDeleteProgram</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDELETEQUERIESPROC</name></type> <name>glad_glDeleteQueries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDELETERENDERBUFFERSPROC</name></type> <name>glad_glDeleteRenderbuffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDELETESAMPLERSPROC</name></type> <name>glad_glDeleteSamplers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDELETESHADERPROC</name></type> <name>glad_glDeleteShader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDELETESYNCPROC</name></type> <name>glad_glDeleteSync</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDELETETEXTURESPROC</name></type> <name>glad_glDeleteTextures</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDELETEVERTEXARRAYSPROC</name></type> <name>glad_glDeleteVertexArrays</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDEPTHFUNCPROC</name></type> <name>glad_glDepthFunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDEPTHMASKPROC</name></type> <name>glad_glDepthMask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDEPTHRANGEPROC</name></type> <name>glad_glDepthRange</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDETACHSHADERPROC</name></type> <name>glad_glDetachShader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDISABLEPROC</name></type> <name>glad_glDisable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDISABLECLIENTSTATEPROC</name></type> <name>glad_glDisableClientState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDISABLEVERTEXATTRIBARRAYPROC</name></type> <name>glad_glDisableVertexAttribArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDISABLEIPROC</name></type> <name>glad_glDisablei</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDRAWARRAYSPROC</name></type> <name>glad_glDrawArrays</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDRAWARRAYSINSTANCEDPROC</name></type> <name>glad_glDrawArraysInstanced</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDRAWBUFFERPROC</name></type> <name>glad_glDrawBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDRAWBUFFERSPROC</name></type> <name>glad_glDrawBuffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDRAWELEMENTSPROC</name></type> <name>glad_glDrawElements</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDRAWELEMENTSBASEVERTEXPROC</name></type> <name>glad_glDrawElementsBaseVertex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDRAWELEMENTSINSTANCEDPROC</name></type> <name>glad_glDrawElementsInstanced</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC</name></type> <name>glad_glDrawElementsInstancedBaseVertex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDRAWPIXELSPROC</name></type> <name>glad_glDrawPixels</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDRAWRANGEELEMENTSPROC</name></type> <name>glad_glDrawRangeElements</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC</name></type> <name>glad_glDrawRangeElementsBaseVertex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEDGEFLAGPROC</name></type> <name>glad_glEdgeFlag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEDGEFLAGPOINTERPROC</name></type> <name>glad_glEdgeFlagPointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEDGEFLAGVPROC</name></type> <name>glad_glEdgeFlagv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLENABLEPROC</name></type> <name>glad_glEnable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLENABLECLIENTSTATEPROC</name></type> <name>glad_glEnableClientState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLENABLEVERTEXATTRIBARRAYPROC</name></type> <name>glad_glEnableVertexAttribArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLENABLEIPROC</name></type> <name>glad_glEnablei</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLENDPROC</name></type> <name>glad_glEnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLENDCONDITIONALRENDERPROC</name></type> <name>glad_glEndConditionalRender</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLENDLISTPROC</name></type> <name>glad_glEndList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLENDQUERYPROC</name></type> <name>glad_glEndQuery</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLENDTRANSFORMFEEDBACKPROC</name></type> <name>glad_glEndTransformFeedback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEVALCOORD1DPROC</name></type> <name>glad_glEvalCoord1d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEVALCOORD1DVPROC</name></type> <name>glad_glEvalCoord1dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEVALCOORD1FPROC</name></type> <name>glad_glEvalCoord1f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEVALCOORD1FVPROC</name></type> <name>glad_glEvalCoord1fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEVALCOORD2DPROC</name></type> <name>glad_glEvalCoord2d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEVALCOORD2DVPROC</name></type> <name>glad_glEvalCoord2dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEVALCOORD2FPROC</name></type> <name>glad_glEvalCoord2f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEVALCOORD2FVPROC</name></type> <name>glad_glEvalCoord2fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEVALMESH1PROC</name></type> <name>glad_glEvalMesh1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEVALMESH2PROC</name></type> <name>glad_glEvalMesh2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEVALPOINT1PROC</name></type> <name>glad_glEvalPoint1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLEVALPOINT2PROC</name></type> <name>glad_glEvalPoint2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFEEDBACKBUFFERPROC</name></type> <name>glad_glFeedbackBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFENCESYNCPROC</name></type> <name>glad_glFenceSync</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFINISHPROC</name></type> <name>glad_glFinish</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFLUSHPROC</name></type> <name>glad_glFlush</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFLUSHMAPPEDBUFFERRANGEPROC</name></type> <name>glad_glFlushMappedBufferRange</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFOGCOORDPOINTERPROC</name></type> <name>glad_glFogCoordPointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFOGCOORDDPROC</name></type> <name>glad_glFogCoordd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFOGCOORDDVPROC</name></type> <name>glad_glFogCoorddv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFOGCOORDFPROC</name></type> <name>glad_glFogCoordf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFOGCOORDFVPROC</name></type> <name>glad_glFogCoordfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFOGFPROC</name></type> <name>glad_glFogf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFOGFVPROC</name></type> <name>glad_glFogfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFOGIPROC</name></type> <name>glad_glFogi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFOGIVPROC</name></type> <name>glad_glFogiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERRENDERBUFFERPROC</name></type> <name>glad_glFramebufferRenderbuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERTEXTUREPROC</name></type> <name>glad_glFramebufferTexture</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERTEXTURE1DPROC</name></type> <name>glad_glFramebufferTexture1D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERTEXTURE2DPROC</name></type> <name>glad_glFramebufferTexture2D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERTEXTURE3DPROC</name></type> <name>glad_glFramebufferTexture3D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERTEXTURELAYERPROC</name></type> <name>glad_glFramebufferTextureLayer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFRONTFACEPROC</name></type> <name>glad_glFrontFace</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLFRUSTUMPROC</name></type> <name>glad_glFrustum</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGENBUFFERSPROC</name></type> <name>glad_glGenBuffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGENFRAMEBUFFERSPROC</name></type> <name>glad_glGenFramebuffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGENLISTSPROC</name></type> <name>glad_glGenLists</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGENQUERIESPROC</name></type> <name>glad_glGenQueries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGENRENDERBUFFERSPROC</name></type> <name>glad_glGenRenderbuffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGENSAMPLERSPROC</name></type> <name>glad_glGenSamplers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGENTEXTURESPROC</name></type> <name>glad_glGenTextures</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGENVERTEXARRAYSPROC</name></type> <name>glad_glGenVertexArrays</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGENERATEMIPMAPPROC</name></type> <name>glad_glGenerateMipmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETACTIVEATTRIBPROC</name></type> <name>glad_glGetActiveAttrib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETACTIVEUNIFORMPROC</name></type> <name>glad_glGetActiveUniform</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC</name></type> <name>glad_glGetActiveUniformBlockName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETACTIVEUNIFORMBLOCKIVPROC</name></type> <name>glad_glGetActiveUniformBlockiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETACTIVEUNIFORMNAMEPROC</name></type> <name>glad_glGetActiveUniformName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETACTIVEUNIFORMSIVPROC</name></type> <name>glad_glGetActiveUniformsiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETATTACHEDSHADERSPROC</name></type> <name>glad_glGetAttachedShaders</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETATTRIBLOCATIONPROC</name></type> <name>glad_glGetAttribLocation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETBOOLEANI_VPROC</name></type> <name>glad_glGetBooleani_v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETBOOLEANVPROC</name></type> <name>glad_glGetBooleanv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETBUFFERPARAMETERI64VPROC</name></type> <name>glad_glGetBufferParameteri64v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETBUFFERPARAMETERIVPROC</name></type> <name>glad_glGetBufferParameteriv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETBUFFERPOINTERVPROC</name></type> <name>glad_glGetBufferPointerv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETBUFFERSUBDATAPROC</name></type> <name>glad_glGetBufferSubData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETCLIPPLANEPROC</name></type> <name>glad_glGetClipPlane</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETCOMPRESSEDTEXIMAGEPROC</name></type> <name>glad_glGetCompressedTexImage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETDEBUGMESSAGELOGPROC</name></type> <name>glad_glGetDebugMessageLog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETDOUBLEVPROC</name></type> <name>glad_glGetDoublev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETERRORPROC</name></type> <name>glad_glGetError</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETFLOATVPROC</name></type> <name>glad_glGetFloatv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETFRAGDATAINDEXPROC</name></type> <name>glad_glGetFragDataIndex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETFRAGDATALOCATIONPROC</name></type> <name>glad_glGetFragDataLocation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</name></type> <name>glad_glGetFramebufferAttachmentParameteriv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETGRAPHICSRESETSTATUSARBPROC</name></type> <name>glad_glGetGraphicsResetStatusARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETINTEGER64I_VPROC</name></type> <name>glad_glGetInteger64i_v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETINTEGER64VPROC</name></type> <name>glad_glGetInteger64v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETINTEGERI_VPROC</name></type> <name>glad_glGetIntegeri_v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETINTEGERVPROC</name></type> <name>glad_glGetIntegerv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETLIGHTFVPROC</name></type> <name>glad_glGetLightfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETLIGHTIVPROC</name></type> <name>glad_glGetLightiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETMAPDVPROC</name></type> <name>glad_glGetMapdv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETMAPFVPROC</name></type> <name>glad_glGetMapfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETMAPIVPROC</name></type> <name>glad_glGetMapiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETMATERIALFVPROC</name></type> <name>glad_glGetMaterialfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETMATERIALIVPROC</name></type> <name>glad_glGetMaterialiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETMULTISAMPLEFVPROC</name></type> <name>glad_glGetMultisamplefv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETOBJECTLABELPROC</name></type> <name>glad_glGetObjectLabel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETOBJECTPTRLABELPROC</name></type> <name>glad_glGetObjectPtrLabel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETPIXELMAPFVPROC</name></type> <name>glad_glGetPixelMapfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETPIXELMAPUIVPROC</name></type> <name>glad_glGetPixelMapuiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETPIXELMAPUSVPROC</name></type> <name>glad_glGetPixelMapusv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETPOINTERVPROC</name></type> <name>glad_glGetPointerv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETPOLYGONSTIPPLEPROC</name></type> <name>glad_glGetPolygonStipple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETPROGRAMINFOLOGPROC</name></type> <name>glad_glGetProgramInfoLog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETPROGRAMIVPROC</name></type> <name>glad_glGetProgramiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETQUERYOBJECTI64VPROC</name></type> <name>glad_glGetQueryObjecti64v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETQUERYOBJECTIVPROC</name></type> <name>glad_glGetQueryObjectiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETQUERYOBJECTUI64VPROC</name></type> <name>glad_glGetQueryObjectui64v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETQUERYOBJECTUIVPROC</name></type> <name>glad_glGetQueryObjectuiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETQUERYIVPROC</name></type> <name>glad_glGetQueryiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETRENDERBUFFERPARAMETERIVPROC</name></type> <name>glad_glGetRenderbufferParameteriv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETSAMPLERPARAMETERIIVPROC</name></type> <name>glad_glGetSamplerParameterIiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETSAMPLERPARAMETERIUIVPROC</name></type> <name>glad_glGetSamplerParameterIuiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETSAMPLERPARAMETERFVPROC</name></type> <name>glad_glGetSamplerParameterfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETSAMPLERPARAMETERIVPROC</name></type> <name>glad_glGetSamplerParameteriv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETSHADERINFOLOGPROC</name></type> <name>glad_glGetShaderInfoLog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETSHADERSOURCEPROC</name></type> <name>glad_glGetShaderSource</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETSHADERIVPROC</name></type> <name>glad_glGetShaderiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETSTRINGPROC</name></type> <name>glad_glGetString</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETSTRINGIPROC</name></type> <name>glad_glGetStringi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETSYNCIVPROC</name></type> <name>glad_glGetSynciv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETTEXENVFVPROC</name></type> <name>glad_glGetTexEnvfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETTEXENVIVPROC</name></type> <name>glad_glGetTexEnviv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETTEXGENDVPROC</name></type> <name>glad_glGetTexGendv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETTEXGENFVPROC</name></type> <name>glad_glGetTexGenfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETTEXGENIVPROC</name></type> <name>glad_glGetTexGeniv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETTEXIMAGEPROC</name></type> <name>glad_glGetTexImage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETTEXLEVELPARAMETERFVPROC</name></type> <name>glad_glGetTexLevelParameterfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETTEXLEVELPARAMETERIVPROC</name></type> <name>glad_glGetTexLevelParameteriv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETTEXPARAMETERIIVPROC</name></type> <name>glad_glGetTexParameterIiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETTEXPARAMETERIUIVPROC</name></type> <name>glad_glGetTexParameterIuiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETTEXPARAMETERFVPROC</name></type> <name>glad_glGetTexParameterfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETTEXPARAMETERIVPROC</name></type> <name>glad_glGetTexParameteriv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETTRANSFORMFEEDBACKVARYINGPROC</name></type> <name>glad_glGetTransformFeedbackVarying</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETUNIFORMBLOCKINDEXPROC</name></type> <name>glad_glGetUniformBlockIndex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETUNIFORMINDICESPROC</name></type> <name>glad_glGetUniformIndices</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETUNIFORMLOCATIONPROC</name></type> <name>glad_glGetUniformLocation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETUNIFORMFVPROC</name></type> <name>glad_glGetUniformfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETUNIFORMIVPROC</name></type> <name>glad_glGetUniformiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETUNIFORMUIVPROC</name></type> <name>glad_glGetUniformuiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBIIVPROC</name></type> <name>glad_glGetVertexAttribIiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBIUIVPROC</name></type> <name>glad_glGetVertexAttribIuiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBPOINTERVPROC</name></type> <name>glad_glGetVertexAttribPointerv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBDVPROC</name></type> <name>glad_glGetVertexAttribdv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBFVPROC</name></type> <name>glad_glGetVertexAttribfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBIVPROC</name></type> <name>glad_glGetVertexAttribiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNCOLORTABLEARBPROC</name></type> <name>glad_glGetnColorTableARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC</name></type> <name>glad_glGetnCompressedTexImageARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNCONVOLUTIONFILTERARBPROC</name></type> <name>glad_glGetnConvolutionFilterARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNHISTOGRAMARBPROC</name></type> <name>glad_glGetnHistogramARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNMAPDVARBPROC</name></type> <name>glad_glGetnMapdvARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNMAPFVARBPROC</name></type> <name>glad_glGetnMapfvARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNMAPIVARBPROC</name></type> <name>glad_glGetnMapivARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNMINMAXARBPROC</name></type> <name>glad_glGetnMinmaxARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNPIXELMAPFVARBPROC</name></type> <name>glad_glGetnPixelMapfvARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNPIXELMAPUIVARBPROC</name></type> <name>glad_glGetnPixelMapuivARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNPIXELMAPUSVARBPROC</name></type> <name>glad_glGetnPixelMapusvARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNPOLYGONSTIPPLEARBPROC</name></type> <name>glad_glGetnPolygonStippleARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNSEPARABLEFILTERARBPROC</name></type> <name>glad_glGetnSeparableFilterARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNTEXIMAGEARBPROC</name></type> <name>glad_glGetnTexImageARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNUNIFORMDVARBPROC</name></type> <name>glad_glGetnUniformdvARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNUNIFORMFVARBPROC</name></type> <name>glad_glGetnUniformfvARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNUNIFORMIVARBPROC</name></type> <name>glad_glGetnUniformivARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETNUNIFORMUIVARBPROC</name></type> <name>glad_glGetnUniformuivARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLHINTPROC</name></type> <name>glad_glHint</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINDEXMASKPROC</name></type> <name>glad_glIndexMask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINDEXPOINTERPROC</name></type> <name>glad_glIndexPointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINDEXDPROC</name></type> <name>glad_glIndexd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINDEXDVPROC</name></type> <name>glad_glIndexdv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINDEXFPROC</name></type> <name>glad_glIndexf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINDEXFVPROC</name></type> <name>glad_glIndexfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINDEXIPROC</name></type> <name>glad_glIndexi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINDEXIVPROC</name></type> <name>glad_glIndexiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINDEXSPROC</name></type> <name>glad_glIndexs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINDEXSVPROC</name></type> <name>glad_glIndexsv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINDEXUBPROC</name></type> <name>glad_glIndexub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINDEXUBVPROC</name></type> <name>glad_glIndexubv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINITNAMESPROC</name></type> <name>glad_glInitNames</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLINTERLEAVEDARRAYSPROC</name></type> <name>glad_glInterleavedArrays</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLISBUFFERPROC</name></type> <name>glad_glIsBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLISENABLEDPROC</name></type> <name>glad_glIsEnabled</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLISENABLEDIPROC</name></type> <name>glad_glIsEnabledi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLISFRAMEBUFFERPROC</name></type> <name>glad_glIsFramebuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLISLISTPROC</name></type> <name>glad_glIsList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLISPROGRAMPROC</name></type> <name>glad_glIsProgram</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLISQUERYPROC</name></type> <name>glad_glIsQuery</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLISRENDERBUFFERPROC</name></type> <name>glad_glIsRenderbuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLISSAMPLERPROC</name></type> <name>glad_glIsSampler</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLISSHADERPROC</name></type> <name>glad_glIsShader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLISSYNCPROC</name></type> <name>glad_glIsSync</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLISTEXTUREPROC</name></type> <name>glad_glIsTexture</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLISVERTEXARRAYPROC</name></type> <name>glad_glIsVertexArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLIGHTMODELFPROC</name></type> <name>glad_glLightModelf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLIGHTMODELFVPROC</name></type> <name>glad_glLightModelfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLIGHTMODELIPROC</name></type> <name>glad_glLightModeli</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLIGHTMODELIVPROC</name></type> <name>glad_glLightModeliv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLIGHTFPROC</name></type> <name>glad_glLightf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLIGHTFVPROC</name></type> <name>glad_glLightfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLIGHTIPROC</name></type> <name>glad_glLighti</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLIGHTIVPROC</name></type> <name>glad_glLightiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLINESTIPPLEPROC</name></type> <name>glad_glLineStipple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLINEWIDTHPROC</name></type> <name>glad_glLineWidth</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLINKPROGRAMPROC</name></type> <name>glad_glLinkProgram</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLISTBASEPROC</name></type> <name>glad_glListBase</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLOADIDENTITYPROC</name></type> <name>glad_glLoadIdentity</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLOADMATRIXDPROC</name></type> <name>glad_glLoadMatrixd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLOADMATRIXFPROC</name></type> <name>glad_glLoadMatrixf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLOADNAMEPROC</name></type> <name>glad_glLoadName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLOADTRANSPOSEMATRIXDPROC</name></type> <name>glad_glLoadTransposeMatrixd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLOADTRANSPOSEMATRIXFPROC</name></type> <name>glad_glLoadTransposeMatrixf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLLOGICOPPROC</name></type> <name>glad_glLogicOp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMAP1DPROC</name></type> <name>glad_glMap1d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMAP1FPROC</name></type> <name>glad_glMap1f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMAP2DPROC</name></type> <name>glad_glMap2d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMAP2FPROC</name></type> <name>glad_glMap2f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMAPBUFFERPROC</name></type> <name>glad_glMapBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMAPBUFFERRANGEPROC</name></type> <name>glad_glMapBufferRange</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMAPGRID1DPROC</name></type> <name>glad_glMapGrid1d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMAPGRID1FPROC</name></type> <name>glad_glMapGrid1f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMAPGRID2DPROC</name></type> <name>glad_glMapGrid2d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMAPGRID2FPROC</name></type> <name>glad_glMapGrid2f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMATERIALFPROC</name></type> <name>glad_glMaterialf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMATERIALFVPROC</name></type> <name>glad_glMaterialfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMATERIALIPROC</name></type> <name>glad_glMateriali</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMATERIALIVPROC</name></type> <name>glad_glMaterialiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMATRIXMODEPROC</name></type> <name>glad_glMatrixMode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTMATRIXDPROC</name></type> <name>glad_glMultMatrixd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTMATRIXFPROC</name></type> <name>glad_glMultMatrixf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTTRANSPOSEMATRIXDPROC</name></type> <name>glad_glMultTransposeMatrixd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTTRANSPOSEMATRIXFPROC</name></type> <name>glad_glMultTransposeMatrixf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTIDRAWARRAYSPROC</name></type> <name>glad_glMultiDrawArrays</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTIDRAWELEMENTSPROC</name></type> <name>glad_glMultiDrawElements</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC</name></type> <name>glad_glMultiDrawElementsBaseVertex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD1DPROC</name></type> <name>glad_glMultiTexCoord1d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD1DVPROC</name></type> <name>glad_glMultiTexCoord1dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD1FPROC</name></type> <name>glad_glMultiTexCoord1f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD1FVPROC</name></type> <name>glad_glMultiTexCoord1fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD1IPROC</name></type> <name>glad_glMultiTexCoord1i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD1IVPROC</name></type> <name>glad_glMultiTexCoord1iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD1SPROC</name></type> <name>glad_glMultiTexCoord1s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD1SVPROC</name></type> <name>glad_glMultiTexCoord1sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD2DPROC</name></type> <name>glad_glMultiTexCoord2d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD2DVPROC</name></type> <name>glad_glMultiTexCoord2dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD2FPROC</name></type> <name>glad_glMultiTexCoord2f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD2FVPROC</name></type> <name>glad_glMultiTexCoord2fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD2IPROC</name></type> <name>glad_glMultiTexCoord2i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD2IVPROC</name></type> <name>glad_glMultiTexCoord2iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD2SPROC</name></type> <name>glad_glMultiTexCoord2s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD2SVPROC</name></type> <name>glad_glMultiTexCoord2sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD3DPROC</name></type> <name>glad_glMultiTexCoord3d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD3DVPROC</name></type> <name>glad_glMultiTexCoord3dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD3FPROC</name></type> <name>glad_glMultiTexCoord3f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD3FVPROC</name></type> <name>glad_glMultiTexCoord3fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD3IPROC</name></type> <name>glad_glMultiTexCoord3i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD3IVPROC</name></type> <name>glad_glMultiTexCoord3iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD3SPROC</name></type> <name>glad_glMultiTexCoord3s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD3SVPROC</name></type> <name>glad_glMultiTexCoord3sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD4DPROC</name></type> <name>glad_glMultiTexCoord4d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD4DVPROC</name></type> <name>glad_glMultiTexCoord4dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD4FPROC</name></type> <name>glad_glMultiTexCoord4f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD4FVPROC</name></type> <name>glad_glMultiTexCoord4fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD4IPROC</name></type> <name>glad_glMultiTexCoord4i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD4IVPROC</name></type> <name>glad_glMultiTexCoord4iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD4SPROC</name></type> <name>glad_glMultiTexCoord4s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORD4SVPROC</name></type> <name>glad_glMultiTexCoord4sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP1UIPROC</name></type> <name>glad_glMultiTexCoordP1ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP1UIVPROC</name></type> <name>glad_glMultiTexCoordP1uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP2UIPROC</name></type> <name>glad_glMultiTexCoordP2ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP2UIVPROC</name></type> <name>glad_glMultiTexCoordP2uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP3UIPROC</name></type> <name>glad_glMultiTexCoordP3ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP3UIVPROC</name></type> <name>glad_glMultiTexCoordP3uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP4UIPROC</name></type> <name>glad_glMultiTexCoordP4ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP4UIVPROC</name></type> <name>glad_glMultiTexCoordP4uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNEWLISTPROC</name></type> <name>glad_glNewList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNORMAL3BPROC</name></type> <name>glad_glNormal3b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNORMAL3BVPROC</name></type> <name>glad_glNormal3bv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNORMAL3DPROC</name></type> <name>glad_glNormal3d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNORMAL3DVPROC</name></type> <name>glad_glNormal3dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNORMAL3FPROC</name></type> <name>glad_glNormal3f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNORMAL3FVPROC</name></type> <name>glad_glNormal3fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNORMAL3IPROC</name></type> <name>glad_glNormal3i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNORMAL3IVPROC</name></type> <name>glad_glNormal3iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNORMAL3SPROC</name></type> <name>glad_glNormal3s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNORMAL3SVPROC</name></type> <name>glad_glNormal3sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNORMALP3UIPROC</name></type> <name>glad_glNormalP3ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNORMALP3UIVPROC</name></type> <name>glad_glNormalP3uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLNORMALPOINTERPROC</name></type> <name>glad_glNormalPointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLOBJECTLABELPROC</name></type> <name>glad_glObjectLabel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLOBJECTPTRLABELPROC</name></type> <name>glad_glObjectPtrLabel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLORTHOPROC</name></type> <name>glad_glOrtho</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPASSTHROUGHPROC</name></type> <name>glad_glPassThrough</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPIXELMAPFVPROC</name></type> <name>glad_glPixelMapfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPIXELMAPUIVPROC</name></type> <name>glad_glPixelMapuiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPIXELMAPUSVPROC</name></type> <name>glad_glPixelMapusv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPIXELSTOREFPROC</name></type> <name>glad_glPixelStoref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPIXELSTOREIPROC</name></type> <name>glad_glPixelStorei</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPIXELTRANSFERFPROC</name></type> <name>glad_glPixelTransferf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPIXELTRANSFERIPROC</name></type> <name>glad_glPixelTransferi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPIXELZOOMPROC</name></type> <name>glad_glPixelZoom</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPOINTPARAMETERFPROC</name></type> <name>glad_glPointParameterf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPOINTPARAMETERFVPROC</name></type> <name>glad_glPointParameterfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPOINTPARAMETERIPROC</name></type> <name>glad_glPointParameteri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPOINTPARAMETERIVPROC</name></type> <name>glad_glPointParameteriv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPOINTSIZEPROC</name></type> <name>glad_glPointSize</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPOLYGONMODEPROC</name></type> <name>glad_glPolygonMode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPOLYGONOFFSETPROC</name></type> <name>glad_glPolygonOffset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPOLYGONSTIPPLEPROC</name></type> <name>glad_glPolygonStipple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPOPATTRIBPROC</name></type> <name>glad_glPopAttrib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPOPCLIENTATTRIBPROC</name></type> <name>glad_glPopClientAttrib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPOPDEBUGGROUPPROC</name></type> <name>glad_glPopDebugGroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPOPMATRIXPROC</name></type> <name>glad_glPopMatrix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPOPNAMEPROC</name></type> <name>glad_glPopName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPRIMITIVERESTARTINDEXPROC</name></type> <name>glad_glPrimitiveRestartIndex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPRIORITIZETEXTURESPROC</name></type> <name>glad_glPrioritizeTextures</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPROVOKINGVERTEXPROC</name></type> <name>glad_glProvokingVertex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPUSHATTRIBPROC</name></type> <name>glad_glPushAttrib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPUSHCLIENTATTRIBPROC</name></type> <name>glad_glPushClientAttrib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPUSHDEBUGGROUPPROC</name></type> <name>glad_glPushDebugGroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPUSHMATRIXPROC</name></type> <name>glad_glPushMatrix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLPUSHNAMEPROC</name></type> <name>glad_glPushName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLQUERYCOUNTERPROC</name></type> <name>glad_glQueryCounter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS2DPROC</name></type> <name>glad_glRasterPos2d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS2DVPROC</name></type> <name>glad_glRasterPos2dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS2FPROC</name></type> <name>glad_glRasterPos2f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS2FVPROC</name></type> <name>glad_glRasterPos2fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS2IPROC</name></type> <name>glad_glRasterPos2i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS2IVPROC</name></type> <name>glad_glRasterPos2iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS2SPROC</name></type> <name>glad_glRasterPos2s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS2SVPROC</name></type> <name>glad_glRasterPos2sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS3DPROC</name></type> <name>glad_glRasterPos3d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS3DVPROC</name></type> <name>glad_glRasterPos3dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS3FPROC</name></type> <name>glad_glRasterPos3f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS3FVPROC</name></type> <name>glad_glRasterPos3fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS3IPROC</name></type> <name>glad_glRasterPos3i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS3IVPROC</name></type> <name>glad_glRasterPos3iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS3SPROC</name></type> <name>glad_glRasterPos3s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS3SVPROC</name></type> <name>glad_glRasterPos3sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS4DPROC</name></type> <name>glad_glRasterPos4d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS4DVPROC</name></type> <name>glad_glRasterPos4dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS4FPROC</name></type> <name>glad_glRasterPos4f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS4FVPROC</name></type> <name>glad_glRasterPos4fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS4IPROC</name></type> <name>glad_glRasterPos4i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS4IVPROC</name></type> <name>glad_glRasterPos4iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS4SPROC</name></type> <name>glad_glRasterPos4s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRASTERPOS4SVPROC</name></type> <name>glad_glRasterPos4sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLREADBUFFERPROC</name></type> <name>glad_glReadBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLREADPIXELSPROC</name></type> <name>glad_glReadPixels</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLREADNPIXELSPROC</name></type> <name>glad_glReadnPixels</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLREADNPIXELSARBPROC</name></type> <name>glad_glReadnPixelsARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRECTDPROC</name></type> <name>glad_glRectd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRECTDVPROC</name></type> <name>glad_glRectdv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRECTFPROC</name></type> <name>glad_glRectf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRECTFVPROC</name></type> <name>glad_glRectfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRECTIPROC</name></type> <name>glad_glRecti</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRECTIVPROC</name></type> <name>glad_glRectiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRECTSPROC</name></type> <name>glad_glRects</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRECTSVPROC</name></type> <name>glad_glRectsv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRENDERMODEPROC</name></type> <name>glad_glRenderMode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRENDERBUFFERSTORAGEPROC</name></type> <name>glad_glRenderbufferStorage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC</name></type> <name>glad_glRenderbufferStorageMultisample</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLROTATEDPROC</name></type> <name>glad_glRotated</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLROTATEFPROC</name></type> <name>glad_glRotatef</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSAMPLECOVERAGEPROC</name></type> <name>glad_glSampleCoverage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSAMPLECOVERAGEARBPROC</name></type> <name>glad_glSampleCoverageARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSAMPLEMASKIPROC</name></type> <name>glad_glSampleMaski</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSAMPLERPARAMETERIIVPROC</name></type> <name>glad_glSamplerParameterIiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSAMPLERPARAMETERIUIVPROC</name></type> <name>glad_glSamplerParameterIuiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSAMPLERPARAMETERFPROC</name></type> <name>glad_glSamplerParameterf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSAMPLERPARAMETERFVPROC</name></type> <name>glad_glSamplerParameterfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSAMPLERPARAMETERIPROC</name></type> <name>glad_glSamplerParameteri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSAMPLERPARAMETERIVPROC</name></type> <name>glad_glSamplerParameteriv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSCALEDPROC</name></type> <name>glad_glScaled</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSCALEFPROC</name></type> <name>glad_glScalef</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSCISSORPROC</name></type> <name>glad_glScissor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3BPROC</name></type> <name>glad_glSecondaryColor3b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3BVPROC</name></type> <name>glad_glSecondaryColor3bv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3DPROC</name></type> <name>glad_glSecondaryColor3d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3DVPROC</name></type> <name>glad_glSecondaryColor3dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3FPROC</name></type> <name>glad_glSecondaryColor3f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3FVPROC</name></type> <name>glad_glSecondaryColor3fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3IPROC</name></type> <name>glad_glSecondaryColor3i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3IVPROC</name></type> <name>glad_glSecondaryColor3iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3SPROC</name></type> <name>glad_glSecondaryColor3s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3SVPROC</name></type> <name>glad_glSecondaryColor3sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3UBPROC</name></type> <name>glad_glSecondaryColor3ub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3UBVPROC</name></type> <name>glad_glSecondaryColor3ubv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3UIPROC</name></type> <name>glad_glSecondaryColor3ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3UIVPROC</name></type> <name>glad_glSecondaryColor3uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3USPROC</name></type> <name>glad_glSecondaryColor3us</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLOR3USVPROC</name></type> <name>glad_glSecondaryColor3usv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLORP3UIPROC</name></type> <name>glad_glSecondaryColorP3ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLORP3UIVPROC</name></type> <name>glad_glSecondaryColorP3uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSECONDARYCOLORPOINTERPROC</name></type> <name>glad_glSecondaryColorPointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSELECTBUFFERPROC</name></type> <name>glad_glSelectBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSHADEMODELPROC</name></type> <name>glad_glShadeModel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSHADERSOURCEPROC</name></type> <name>glad_glShaderSource</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSTENCILFUNCPROC</name></type> <name>glad_glStencilFunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSTENCILFUNCSEPARATEPROC</name></type> <name>glad_glStencilFuncSeparate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSTENCILMASKPROC</name></type> <name>glad_glStencilMask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSTENCILMASKSEPARATEPROC</name></type> <name>glad_glStencilMaskSeparate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSTENCILOPPROC</name></type> <name>glad_glStencilOp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLSTENCILOPSEPARATEPROC</name></type> <name>glad_glStencilOpSeparate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXBUFFERPROC</name></type> <name>glad_glTexBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD1DPROC</name></type> <name>glad_glTexCoord1d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD1DVPROC</name></type> <name>glad_glTexCoord1dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD1FPROC</name></type> <name>glad_glTexCoord1f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD1FVPROC</name></type> <name>glad_glTexCoord1fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD1IPROC</name></type> <name>glad_glTexCoord1i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD1IVPROC</name></type> <name>glad_glTexCoord1iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD1SPROC</name></type> <name>glad_glTexCoord1s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD1SVPROC</name></type> <name>glad_glTexCoord1sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD2DPROC</name></type> <name>glad_glTexCoord2d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD2DVPROC</name></type> <name>glad_glTexCoord2dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD2FPROC</name></type> <name>glad_glTexCoord2f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD2FVPROC</name></type> <name>glad_glTexCoord2fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD2IPROC</name></type> <name>glad_glTexCoord2i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD2IVPROC</name></type> <name>glad_glTexCoord2iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD2SPROC</name></type> <name>glad_glTexCoord2s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD2SVPROC</name></type> <name>glad_glTexCoord2sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD3DPROC</name></type> <name>glad_glTexCoord3d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD3DVPROC</name></type> <name>glad_glTexCoord3dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD3FPROC</name></type> <name>glad_glTexCoord3f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD3FVPROC</name></type> <name>glad_glTexCoord3fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD3IPROC</name></type> <name>glad_glTexCoord3i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD3IVPROC</name></type> <name>glad_glTexCoord3iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD3SPROC</name></type> <name>glad_glTexCoord3s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD3SVPROC</name></type> <name>glad_glTexCoord3sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD4DPROC</name></type> <name>glad_glTexCoord4d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD4DVPROC</name></type> <name>glad_glTexCoord4dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD4FPROC</name></type> <name>glad_glTexCoord4f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD4FVPROC</name></type> <name>glad_glTexCoord4fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD4IPROC</name></type> <name>glad_glTexCoord4i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD4IVPROC</name></type> <name>glad_glTexCoord4iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD4SPROC</name></type> <name>glad_glTexCoord4s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORD4SVPROC</name></type> <name>glad_glTexCoord4sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORDP1UIPROC</name></type> <name>glad_glTexCoordP1ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORDP1UIVPROC</name></type> <name>glad_glTexCoordP1uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORDP2UIPROC</name></type> <name>glad_glTexCoordP2ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORDP2UIVPROC</name></type> <name>glad_glTexCoordP2uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORDP3UIPROC</name></type> <name>glad_glTexCoordP3ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORDP3UIVPROC</name></type> <name>glad_glTexCoordP3uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORDP4UIPROC</name></type> <name>glad_glTexCoordP4ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORDP4UIVPROC</name></type> <name>glad_glTexCoordP4uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXCOORDPOINTERPROC</name></type> <name>glad_glTexCoordPointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXENVFPROC</name></type> <name>glad_glTexEnvf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXENVFVPROC</name></type> <name>glad_glTexEnvfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXENVIPROC</name></type> <name>glad_glTexEnvi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXENVIVPROC</name></type> <name>glad_glTexEnviv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXGENDPROC</name></type> <name>glad_glTexGend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXGENDVPROC</name></type> <name>glad_glTexGendv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXGENFPROC</name></type> <name>glad_glTexGenf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXGENFVPROC</name></type> <name>glad_glTexGenfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXGENIPROC</name></type> <name>glad_glTexGeni</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXGENIVPROC</name></type> <name>glad_glTexGeniv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXIMAGE1DPROC</name></type> <name>glad_glTexImage1D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXIMAGE2DPROC</name></type> <name>glad_glTexImage2D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXIMAGE2DMULTISAMPLEPROC</name></type> <name>glad_glTexImage2DMultisample</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXIMAGE3DPROC</name></type> <name>glad_glTexImage3D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXIMAGE3DMULTISAMPLEPROC</name></type> <name>glad_glTexImage3DMultisample</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXPARAMETERIIVPROC</name></type> <name>glad_glTexParameterIiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXPARAMETERIUIVPROC</name></type> <name>glad_glTexParameterIuiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXPARAMETERFPROC</name></type> <name>glad_glTexParameterf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXPARAMETERFVPROC</name></type> <name>glad_glTexParameterfv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXPARAMETERIPROC</name></type> <name>glad_glTexParameteri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXPARAMETERIVPROC</name></type> <name>glad_glTexParameteriv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXSUBIMAGE1DPROC</name></type> <name>glad_glTexSubImage1D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXSUBIMAGE2DPROC</name></type> <name>glad_glTexSubImage2D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTEXSUBIMAGE3DPROC</name></type> <name>glad_glTexSubImage3D</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTRANSFORMFEEDBACKVARYINGSPROC</name></type> <name>glad_glTransformFeedbackVaryings</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTRANSLATEDPROC</name></type> <name>glad_glTranslated</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLTRANSLATEFPROC</name></type> <name>glad_glTranslatef</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM1FPROC</name></type> <name>glad_glUniform1f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM1FVPROC</name></type> <name>glad_glUniform1fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM1IPROC</name></type> <name>glad_glUniform1i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM1IVPROC</name></type> <name>glad_glUniform1iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM1UIPROC</name></type> <name>glad_glUniform1ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM1UIVPROC</name></type> <name>glad_glUniform1uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM2FPROC</name></type> <name>glad_glUniform2f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM2FVPROC</name></type> <name>glad_glUniform2fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM2IPROC</name></type> <name>glad_glUniform2i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM2IVPROC</name></type> <name>glad_glUniform2iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM2UIPROC</name></type> <name>glad_glUniform2ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM2UIVPROC</name></type> <name>glad_glUniform2uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM3FPROC</name></type> <name>glad_glUniform3f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM3FVPROC</name></type> <name>glad_glUniform3fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM3IPROC</name></type> <name>glad_glUniform3i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM3IVPROC</name></type> <name>glad_glUniform3iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM3UIPROC</name></type> <name>glad_glUniform3ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM3UIVPROC</name></type> <name>glad_glUniform3uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM4FPROC</name></type> <name>glad_glUniform4f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM4FVPROC</name></type> <name>glad_glUniform4fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM4IPROC</name></type> <name>glad_glUniform4i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM4IVPROC</name></type> <name>glad_glUniform4iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM4UIPROC</name></type> <name>glad_glUniform4ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORM4UIVPROC</name></type> <name>glad_glUniform4uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORMBLOCKBINDINGPROC</name></type> <name>glad_glUniformBlockBinding</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX2FVPROC</name></type> <name>glad_glUniformMatrix2fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX2X3FVPROC</name></type> <name>glad_glUniformMatrix2x3fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX2X4FVPROC</name></type> <name>glad_glUniformMatrix2x4fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX3FVPROC</name></type> <name>glad_glUniformMatrix3fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX3X2FVPROC</name></type> <name>glad_glUniformMatrix3x2fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX3X4FVPROC</name></type> <name>glad_glUniformMatrix3x4fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX4FVPROC</name></type> <name>glad_glUniformMatrix4fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX4X2FVPROC</name></type> <name>glad_glUniformMatrix4x2fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX4X3FVPROC</name></type> <name>glad_glUniformMatrix4x3fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUNMAPBUFFERPROC</name></type> <name>glad_glUnmapBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLUSEPROGRAMPROC</name></type> <name>glad_glUseProgram</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVALIDATEPROGRAMPROC</name></type> <name>glad_glValidateProgram</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX2DPROC</name></type> <name>glad_glVertex2d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX2DVPROC</name></type> <name>glad_glVertex2dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX2FPROC</name></type> <name>glad_glVertex2f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX2FVPROC</name></type> <name>glad_glVertex2fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX2IPROC</name></type> <name>glad_glVertex2i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX2IVPROC</name></type> <name>glad_glVertex2iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX2SPROC</name></type> <name>glad_glVertex2s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX2SVPROC</name></type> <name>glad_glVertex2sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX3DPROC</name></type> <name>glad_glVertex3d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX3DVPROC</name></type> <name>glad_glVertex3dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX3FPROC</name></type> <name>glad_glVertex3f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX3FVPROC</name></type> <name>glad_glVertex3fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX3IPROC</name></type> <name>glad_glVertex3i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX3IVPROC</name></type> <name>glad_glVertex3iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX3SPROC</name></type> <name>glad_glVertex3s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX3SVPROC</name></type> <name>glad_glVertex3sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX4DPROC</name></type> <name>glad_glVertex4d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX4DVPROC</name></type> <name>glad_glVertex4dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX4FPROC</name></type> <name>glad_glVertex4f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX4FVPROC</name></type> <name>glad_glVertex4fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX4IPROC</name></type> <name>glad_glVertex4i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX4IVPROC</name></type> <name>glad_glVertex4iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX4SPROC</name></type> <name>glad_glVertex4s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEX4SVPROC</name></type> <name>glad_glVertex4sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1DPROC</name></type> <name>glad_glVertexAttrib1d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1DVPROC</name></type> <name>glad_glVertexAttrib1dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1FPROC</name></type> <name>glad_glVertexAttrib1f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1FVPROC</name></type> <name>glad_glVertexAttrib1fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1SPROC</name></type> <name>glad_glVertexAttrib1s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1SVPROC</name></type> <name>glad_glVertexAttrib1sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2DPROC</name></type> <name>glad_glVertexAttrib2d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2DVPROC</name></type> <name>glad_glVertexAttrib2dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2FPROC</name></type> <name>glad_glVertexAttrib2f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2FVPROC</name></type> <name>glad_glVertexAttrib2fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2SPROC</name></type> <name>glad_glVertexAttrib2s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2SVPROC</name></type> <name>glad_glVertexAttrib2sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3DPROC</name></type> <name>glad_glVertexAttrib3d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3DVPROC</name></type> <name>glad_glVertexAttrib3dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3FPROC</name></type> <name>glad_glVertexAttrib3f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3FVPROC</name></type> <name>glad_glVertexAttrib3fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3SPROC</name></type> <name>glad_glVertexAttrib3s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3SVPROC</name></type> <name>glad_glVertexAttrib3sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NBVPROC</name></type> <name>glad_glVertexAttrib4Nbv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NIVPROC</name></type> <name>glad_glVertexAttrib4Niv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NSVPROC</name></type> <name>glad_glVertexAttrib4Nsv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NUBPROC</name></type> <name>glad_glVertexAttrib4Nub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NUBVPROC</name></type> <name>glad_glVertexAttrib4Nubv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NUIVPROC</name></type> <name>glad_glVertexAttrib4Nuiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NUSVPROC</name></type> <name>glad_glVertexAttrib4Nusv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4BVPROC</name></type> <name>glad_glVertexAttrib4bv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4DPROC</name></type> <name>glad_glVertexAttrib4d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4DVPROC</name></type> <name>glad_glVertexAttrib4dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4FPROC</name></type> <name>glad_glVertexAttrib4f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4FVPROC</name></type> <name>glad_glVertexAttrib4fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4IVPROC</name></type> <name>glad_glVertexAttrib4iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4SPROC</name></type> <name>glad_glVertexAttrib4s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4SVPROC</name></type> <name>glad_glVertexAttrib4sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4UBVPROC</name></type> <name>glad_glVertexAttrib4ubv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4UIVPROC</name></type> <name>glad_glVertexAttrib4uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4USVPROC</name></type> <name>glad_glVertexAttrib4usv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBDIVISORPROC</name></type> <name>glad_glVertexAttribDivisor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI1IPROC</name></type> <name>glad_glVertexAttribI1i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI1IVPROC</name></type> <name>glad_glVertexAttribI1iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI1UIPROC</name></type> <name>glad_glVertexAttribI1ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI1UIVPROC</name></type> <name>glad_glVertexAttribI1uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI2IPROC</name></type> <name>glad_glVertexAttribI2i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI2IVPROC</name></type> <name>glad_glVertexAttribI2iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI2UIPROC</name></type> <name>glad_glVertexAttribI2ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI2UIVPROC</name></type> <name>glad_glVertexAttribI2uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI3IPROC</name></type> <name>glad_glVertexAttribI3i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI3IVPROC</name></type> <name>glad_glVertexAttribI3iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI3UIPROC</name></type> <name>glad_glVertexAttribI3ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI3UIVPROC</name></type> <name>glad_glVertexAttribI3uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4BVPROC</name></type> <name>glad_glVertexAttribI4bv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4IPROC</name></type> <name>glad_glVertexAttribI4i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4IVPROC</name></type> <name>glad_glVertexAttribI4iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4SVPROC</name></type> <name>glad_glVertexAttribI4sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4UBVPROC</name></type> <name>glad_glVertexAttribI4ubv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4UIPROC</name></type> <name>glad_glVertexAttribI4ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4UIVPROC</name></type> <name>glad_glVertexAttribI4uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4USVPROC</name></type> <name>glad_glVertexAttribI4usv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBIPOINTERPROC</name></type> <name>glad_glVertexAttribIPointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP1UIPROC</name></type> <name>glad_glVertexAttribP1ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP1UIVPROC</name></type> <name>glad_glVertexAttribP1uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP2UIPROC</name></type> <name>glad_glVertexAttribP2ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP2UIVPROC</name></type> <name>glad_glVertexAttribP2uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP3UIPROC</name></type> <name>glad_glVertexAttribP3ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP3UIVPROC</name></type> <name>glad_glVertexAttribP3uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP4UIPROC</name></type> <name>glad_glVertexAttribP4ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP4UIVPROC</name></type> <name>glad_glVertexAttribP4uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBPOINTERPROC</name></type> <name>glad_glVertexAttribPointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXP2UIPROC</name></type> <name>glad_glVertexP2ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXP2UIVPROC</name></type> <name>glad_glVertexP2uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXP3UIPROC</name></type> <name>glad_glVertexP3ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXP3UIVPROC</name></type> <name>glad_glVertexP3uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXP4UIPROC</name></type> <name>glad_glVertexP4ui</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXP4UIVPROC</name></type> <name>glad_glVertexP4uiv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVERTEXPOINTERPROC</name></type> <name>glad_glVertexPointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLVIEWPORTPROC</name></type> <name>glad_glViewport</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWAITSYNCPROC</name></type> <name>glad_glWaitSync</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS2DPROC</name></type> <name>glad_glWindowPos2d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS2DVPROC</name></type> <name>glad_glWindowPos2dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS2FPROC</name></type> <name>glad_glWindowPos2f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS2FVPROC</name></type> <name>glad_glWindowPos2fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS2IPROC</name></type> <name>glad_glWindowPos2i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS2IVPROC</name></type> <name>glad_glWindowPos2iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS2SPROC</name></type> <name>glad_glWindowPos2s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS2SVPROC</name></type> <name>glad_glWindowPos2sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS3DPROC</name></type> <name>glad_glWindowPos3d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS3DVPROC</name></type> <name>glad_glWindowPos3dv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS3FPROC</name></type> <name>glad_glWindowPos3f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS3FVPROC</name></type> <name>glad_glWindowPos3fv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS3IPROC</name></type> <name>glad_glWindowPos3i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS3IVPROC</name></type> <name>glad_glWindowPos3iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS3SPROC</name></type> <name>glad_glWindowPos3s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLWINDOWPOS3SVPROC</name></type> <name>glad_glWindowPos3sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_VERSION_1_0</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_1_0</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glAccum</name> <operator>=</operator> <operator>(</operator><name>PFNGLACCUMPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glAccum"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glAlphaFunc</name> <operator>=</operator> <operator>(</operator><name>PFNGLALPHAFUNCPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glAlphaFunc"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBegin</name> <operator>=</operator> <operator>(</operator><name>PFNGLBEGINPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBegin"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBitmap</name> <operator>=</operator> <operator>(</operator><name>PFNGLBITMAPPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBitmap"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBlendFunc</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDFUNCPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendFunc"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCallList</name> <operator>=</operator> <operator>(</operator><name>PFNGLCALLLISTPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCallList"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCallLists</name> <operator>=</operator> <operator>(</operator><name>PFNGLCALLLISTSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCallLists"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glClear</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClear"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glClearAccum</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARACCUMPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearAccum"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glClearColor</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARCOLORPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearColor"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glClearDepth</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARDEPTHPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearDepth"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glClearIndex</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARINDEXPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearIndex"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glClearStencil</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARSTENCILPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearStencil"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glClipPlane</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLIPPLANEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClipPlane"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3b</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3BPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3b"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3bv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3BVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3bv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3d</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3f</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3i</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3s</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3ub</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3UBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3ub"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3ubv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3UBVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3ubv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3us</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3USPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3us"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor3usv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR3USVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor3usv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4b</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4BPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4b"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4bv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4BVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4bv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4d</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4f</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4i</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4s</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4ub</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4UBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4ub"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4ubv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4UBVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4ubv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4us</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4USPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4us"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColor4usv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLOR4USVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColor4usv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColorMask</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORMASKPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorMask"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColorMaterial</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORMATERIALPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorMaterial"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCopyPixels</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOPYPIXELSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCopyPixels"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCullFace</name> <operator>=</operator> <operator>(</operator><name>PFNGLCULLFACEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCullFace"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDeleteLists</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETELISTSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteLists"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDepthFunc</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEPTHFUNCPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDepthFunc"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDepthMask</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEPTHMASKPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDepthMask"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDepthRange</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEPTHRANGEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDepthRange"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDisable</name> <operator>=</operator> <operator>(</operator><name>PFNGLDISABLEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDisable"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDrawBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDrawPixels</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWPIXELSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawPixels"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEdgeFlag</name> <operator>=</operator> <operator>(</operator><name>PFNGLEDGEFLAGPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEdgeFlag"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEdgeFlagv</name> <operator>=</operator> <operator>(</operator><name>PFNGLEDGEFLAGVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEdgeFlagv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEnable</name> <operator>=</operator> <operator>(</operator><name>PFNGLENABLEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEnable"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEnd</name> <operator>=</operator> <operator>(</operator><name>PFNGLENDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEnd"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEndList</name> <operator>=</operator> <operator>(</operator><name>PFNGLENDLISTPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEndList"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEvalCoord1d</name> <operator>=</operator> <operator>(</operator><name>PFNGLEVALCOORD1DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEvalCoord1d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEvalCoord1dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLEVALCOORD1DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEvalCoord1dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEvalCoord1f</name> <operator>=</operator> <operator>(</operator><name>PFNGLEVALCOORD1FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEvalCoord1f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEvalCoord1fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLEVALCOORD1FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEvalCoord1fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEvalCoord2d</name> <operator>=</operator> <operator>(</operator><name>PFNGLEVALCOORD2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEvalCoord2d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEvalCoord2dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLEVALCOORD2DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEvalCoord2dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEvalCoord2f</name> <operator>=</operator> <operator>(</operator><name>PFNGLEVALCOORD2FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEvalCoord2f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEvalCoord2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLEVALCOORD2FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEvalCoord2fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEvalMesh1</name> <operator>=</operator> <operator>(</operator><name>PFNGLEVALMESH1PROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEvalMesh1"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEvalMesh2</name> <operator>=</operator> <operator>(</operator><name>PFNGLEVALMESH2PROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEvalMesh2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEvalPoint1</name> <operator>=</operator> <operator>(</operator><name>PFNGLEVALPOINT1PROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEvalPoint1"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEvalPoint2</name> <operator>=</operator> <operator>(</operator><name>PFNGLEVALPOINT2PROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEvalPoint2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFeedbackBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLFEEDBACKBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFeedbackBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFinish</name> <operator>=</operator> <operator>(</operator><name>PFNGLFINISHPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFinish"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFlush</name> <operator>=</operator> <operator>(</operator><name>PFNGLFLUSHPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFlush"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFogf</name> <operator>=</operator> <operator>(</operator><name>PFNGLFOGFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFogf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFogfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLFOGFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFogfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFogi</name> <operator>=</operator> <operator>(</operator><name>PFNGLFOGIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFogi"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFogiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLFOGIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFogiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFrontFace</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRONTFACEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFrontFace"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFrustum</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRUSTUMPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFrustum"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGenLists</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENLISTSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenLists"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetBooleanv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBOOLEANVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBooleanv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetClipPlane</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETCLIPPLANEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetClipPlane"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetDoublev</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETDOUBLEVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetDoublev"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetError</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETERRORPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetError"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetFloatv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETFLOATVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetFloatv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetIntegerv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINTEGERVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetIntegerv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetLightfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETLIGHTFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetLightfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetLightiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETLIGHTIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetLightiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetMapdv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETMAPDVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetMapdv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetMapfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETMAPFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetMapfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetMapiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETMAPIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetMapiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetMaterialfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETMATERIALFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetMaterialfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetMaterialiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETMATERIALIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetMaterialiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetPixelMapfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPIXELMAPFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetPixelMapfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetPixelMapuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPIXELMAPUIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetPixelMapuiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetPixelMapusv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPIXELMAPUSVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetPixelMapusv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetPolygonStipple</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPOLYGONSTIPPLEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetPolygonStipple"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetString</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSTRINGPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetString"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetTexEnvfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXENVFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexEnvfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetTexEnviv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXENVIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexEnviv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetTexGendv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXGENDVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexGendv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetTexGenfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXGENFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexGenfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetTexGeniv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXGENIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexGeniv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetTexImage</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXIMAGEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexImage"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetTexLevelParameterfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXLEVELPARAMETERFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexLevelParameterfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetTexLevelParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXLEVELPARAMETERIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexLevelParameteriv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetTexParameterfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXPARAMETERFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexParameterfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetTexParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXPARAMETERIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexParameteriv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glHint</name> <operator>=</operator> <operator>(</operator><name>PFNGLHINTPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glHint"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIndexMask</name> <operator>=</operator> <operator>(</operator><name>PFNGLINDEXMASKPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIndexMask"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIndexd</name> <operator>=</operator> <operator>(</operator><name>PFNGLINDEXDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIndexd"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIndexdv</name> <operator>=</operator> <operator>(</operator><name>PFNGLINDEXDVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIndexdv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIndexf</name> <operator>=</operator> <operator>(</operator><name>PFNGLINDEXFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIndexf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIndexfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLINDEXFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIndexfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIndexi</name> <operator>=</operator> <operator>(</operator><name>PFNGLINDEXIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIndexi"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIndexiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLINDEXIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIndexiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIndexs</name> <operator>=</operator> <operator>(</operator><name>PFNGLINDEXSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIndexs"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIndexsv</name> <operator>=</operator> <operator>(</operator><name>PFNGLINDEXSVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIndexsv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glInitNames</name> <operator>=</operator> <operator>(</operator><name>PFNGLINITNAMESPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glInitNames"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIsEnabled</name> <operator>=</operator> <operator>(</operator><name>PFNGLISENABLEDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsEnabled"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIsList</name> <operator>=</operator> <operator>(</operator><name>PFNGLISLISTPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsList"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLightModelf</name> <operator>=</operator> <operator>(</operator><name>PFNGLLIGHTMODELFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLightModelf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLightModelfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLLIGHTMODELFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLightModelfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLightModeli</name> <operator>=</operator> <operator>(</operator><name>PFNGLLIGHTMODELIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLightModeli"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLightModeliv</name> <operator>=</operator> <operator>(</operator><name>PFNGLLIGHTMODELIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLightModeliv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLightf</name> <operator>=</operator> <operator>(</operator><name>PFNGLLIGHTFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLightf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLightfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLLIGHTFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLightfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLighti</name> <operator>=</operator> <operator>(</operator><name>PFNGLLIGHTIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLighti"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLightiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLLIGHTIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLightiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLineStipple</name> <operator>=</operator> <operator>(</operator><name>PFNGLLINESTIPPLEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLineStipple"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLineWidth</name> <operator>=</operator> <operator>(</operator><name>PFNGLLINEWIDTHPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLineWidth"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glListBase</name> <operator>=</operator> <operator>(</operator><name>PFNGLLISTBASEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glListBase"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLoadIdentity</name> <operator>=</operator> <operator>(</operator><name>PFNGLLOADIDENTITYPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLoadIdentity"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLoadMatrixd</name> <operator>=</operator> <operator>(</operator><name>PFNGLLOADMATRIXDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLoadMatrixd"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLoadMatrixf</name> <operator>=</operator> <operator>(</operator><name>PFNGLLOADMATRIXFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLoadMatrixf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLoadName</name> <operator>=</operator> <operator>(</operator><name>PFNGLLOADNAMEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLoadName"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLogicOp</name> <operator>=</operator> <operator>(</operator><name>PFNGLLOGICOPPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLogicOp"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMap1d</name> <operator>=</operator> <operator>(</operator><name>PFNGLMAP1DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMap1d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMap1f</name> <operator>=</operator> <operator>(</operator><name>PFNGLMAP1FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMap1f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMap2d</name> <operator>=</operator> <operator>(</operator><name>PFNGLMAP2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMap2d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMap2f</name> <operator>=</operator> <operator>(</operator><name>PFNGLMAP2FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMap2f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMapGrid1d</name> <operator>=</operator> <operator>(</operator><name>PFNGLMAPGRID1DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMapGrid1d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMapGrid1f</name> <operator>=</operator> <operator>(</operator><name>PFNGLMAPGRID1FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMapGrid1f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMapGrid2d</name> <operator>=</operator> <operator>(</operator><name>PFNGLMAPGRID2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMapGrid2d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMapGrid2f</name> <operator>=</operator> <operator>(</operator><name>PFNGLMAPGRID2FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMapGrid2f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMaterialf</name> <operator>=</operator> <operator>(</operator><name>PFNGLMATERIALFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMaterialf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMaterialfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMATERIALFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMaterialfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMateriali</name> <operator>=</operator> <operator>(</operator><name>PFNGLMATERIALIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMateriali"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMaterialiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMATERIALIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMaterialiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMatrixMode</name> <operator>=</operator> <operator>(</operator><name>PFNGLMATRIXMODEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMatrixMode"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultMatrixd</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTMATRIXDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultMatrixd"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultMatrixf</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTMATRIXFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultMatrixf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNewList</name> <operator>=</operator> <operator>(</operator><name>PFNGLNEWLISTPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNewList"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNormal3b</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMAL3BPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormal3b"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNormal3bv</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMAL3BVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormal3bv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNormal3d</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMAL3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormal3d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNormal3dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMAL3DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormal3dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNormal3f</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMAL3FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormal3f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNormal3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMAL3FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormal3fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNormal3i</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMAL3IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormal3i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNormal3iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMAL3IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormal3iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNormal3s</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMAL3SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormal3s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNormal3sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMAL3SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormal3sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glOrtho</name> <operator>=</operator> <operator>(</operator><name>PFNGLORTHOPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glOrtho"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPassThrough</name> <operator>=</operator> <operator>(</operator><name>PFNGLPASSTHROUGHPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPassThrough"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPixelMapfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLPIXELMAPFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPixelMapfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPixelMapuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLPIXELMAPUIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPixelMapuiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPixelMapusv</name> <operator>=</operator> <operator>(</operator><name>PFNGLPIXELMAPUSVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPixelMapusv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPixelStoref</name> <operator>=</operator> <operator>(</operator><name>PFNGLPIXELSTOREFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPixelStoref"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPixelStorei</name> <operator>=</operator> <operator>(</operator><name>PFNGLPIXELSTOREIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPixelStorei"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPixelTransferf</name> <operator>=</operator> <operator>(</operator><name>PFNGLPIXELTRANSFERFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPixelTransferf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPixelTransferi</name> <operator>=</operator> <operator>(</operator><name>PFNGLPIXELTRANSFERIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPixelTransferi"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPixelZoom</name> <operator>=</operator> <operator>(</operator><name>PFNGLPIXELZOOMPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPixelZoom"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPointSize</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOINTSIZEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPointSize"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPolygonMode</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOLYGONMODEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPolygonMode"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPolygonStipple</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOLYGONSTIPPLEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPolygonStipple"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPopAttrib</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOPATTRIBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPopAttrib"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPopMatrix</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOPMATRIXPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPopMatrix"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPopName</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOPNAMEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPopName"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPushAttrib</name> <operator>=</operator> <operator>(</operator><name>PFNGLPUSHATTRIBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPushAttrib"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPushMatrix</name> <operator>=</operator> <operator>(</operator><name>PFNGLPUSHMATRIXPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPushMatrix"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPushName</name> <operator>=</operator> <operator>(</operator><name>PFNGLPUSHNAMEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPushName"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos2d</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos2d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos2dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS2DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos2dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos2f</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS2FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos2f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS2FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos2fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos2i</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS2IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos2i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos2iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS2IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos2iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos2s</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS2SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos2s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos2sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS2SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos2sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos3d</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos3d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos3dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS3DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos3dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos3f</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS3FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos3f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS3FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos3fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos3i</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS3IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos3i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos3iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS3IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos3iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos3s</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS3SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos3s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos3sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS3SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos3sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos4d</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS4DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos4d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos4dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS4DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos4dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos4f</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS4FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos4f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS4FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos4fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos4i</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS4IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos4i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos4iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS4IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos4iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos4s</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS4SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos4s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRasterPos4sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRASTERPOS4SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRasterPos4sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glReadBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLREADBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glReadBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glReadPixels</name> <operator>=</operator> <operator>(</operator><name>PFNGLREADPIXELSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glReadPixels"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRectd</name> <operator>=</operator> <operator>(</operator><name>PFNGLRECTDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRectd"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRectdv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRECTDVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRectdv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRectf</name> <operator>=</operator> <operator>(</operator><name>PFNGLRECTFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRectf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRectfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRECTFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRectfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRecti</name> <operator>=</operator> <operator>(</operator><name>PFNGLRECTIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRecti"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRectiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRECTIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRectiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRects</name> <operator>=</operator> <operator>(</operator><name>PFNGLRECTSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRects"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRectsv</name> <operator>=</operator> <operator>(</operator><name>PFNGLRECTSVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRectsv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRenderMode</name> <operator>=</operator> <operator>(</operator><name>PFNGLRENDERMODEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRenderMode"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRotated</name> <operator>=</operator> <operator>(</operator><name>PFNGLROTATEDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRotated"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRotatef</name> <operator>=</operator> <operator>(</operator><name>PFNGLROTATEFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRotatef"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glScaled</name> <operator>=</operator> <operator>(</operator><name>PFNGLSCALEDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glScaled"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glScalef</name> <operator>=</operator> <operator>(</operator><name>PFNGLSCALEFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glScalef"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glScissor</name> <operator>=</operator> <operator>(</operator><name>PFNGLSCISSORPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glScissor"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSelectBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLSELECTBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSelectBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glShadeModel</name> <operator>=</operator> <operator>(</operator><name>PFNGLSHADEMODELPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glShadeModel"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glStencilFunc</name> <operator>=</operator> <operator>(</operator><name>PFNGLSTENCILFUNCPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glStencilFunc"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glStencilMask</name> <operator>=</operator> <operator>(</operator><name>PFNGLSTENCILMASKPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glStencilMask"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glStencilOp</name> <operator>=</operator> <operator>(</operator><name>PFNGLSTENCILOPPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glStencilOp"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord1d</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD1DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord1d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord1dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD1DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord1dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord1f</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD1FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord1f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord1fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD1FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord1fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord1i</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD1IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord1i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord1iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD1IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord1iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord1s</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD1SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord1s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord1sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD1SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord1sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord2d</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord2d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord2dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD2DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord2dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord2f</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD2FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord2f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD2FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord2fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord2i</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD2IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord2i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord2iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD2IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord2iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord2s</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD2SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord2s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord2sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD2SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord2sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord3d</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord3d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord3dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD3DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord3dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord3f</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD3FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord3f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD3FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord3fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord3i</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD3IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord3i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord3iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD3IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord3iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord3s</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD3SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord3s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord3sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD3SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord3sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord4d</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD4DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord4d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord4dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD4DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord4dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord4f</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD4FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord4f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD4FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord4fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord4i</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD4IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord4i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord4iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD4IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord4iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord4s</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD4SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord4s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoord4sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORD4SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoord4sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexEnvf</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXENVFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexEnvf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexEnvfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXENVFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexEnvfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexEnvi</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXENVIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexEnvi"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexEnviv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXENVIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexEnviv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexGend</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXGENDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexGend"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexGendv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXGENDVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexGendv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexGenf</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXGENFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexGenf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexGenfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXGENFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexGenfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexGeni</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXGENIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexGeni"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexGeniv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXGENIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexGeniv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexImage1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXIMAGE1DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexImage1D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexImage2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXIMAGE2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexImage2D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexParameterf</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXPARAMETERFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexParameterf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexParameterfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXPARAMETERFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexParameterfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexParameteri</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXPARAMETERIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexParameteri"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXPARAMETERIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexParameteriv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTranslated</name> <operator>=</operator> <operator>(</operator><name>PFNGLTRANSLATEDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTranslated"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTranslatef</name> <operator>=</operator> <operator>(</operator><name>PFNGLTRANSLATEFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTranslatef"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex2d</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex2d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex2dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX2DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex2dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex2f</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX2FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex2f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX2FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex2fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex2i</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX2IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex2i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex2iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX2IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex2iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex2s</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX2SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex2s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex2sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX2SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex2sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex3d</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex3d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex3dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX3DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex3dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex3f</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX3FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex3f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX3FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex3fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex3i</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX3IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex3i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex3iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX3IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex3iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex3s</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX3SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex3s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex3sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX3SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex3sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex4d</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX4DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex4d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex4dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX4DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex4dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex4f</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX4FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex4f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX4FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex4fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex4i</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX4IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex4i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex4iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX4IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex4iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex4s</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX4SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex4s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertex4sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEX4SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertex4sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glViewport</name> <operator>=</operator> <operator>(</operator><name>PFNGLVIEWPORTPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glViewport"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_VERSION_1_1</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_1_1</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glAreTexturesResident</name> <operator>=</operator> <operator>(</operator><name>PFNGLARETEXTURESRESIDENTPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glAreTexturesResident"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glArrayElement</name> <operator>=</operator> <operator>(</operator><name>PFNGLARRAYELEMENTPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glArrayElement"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBindTexture</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDTEXTUREPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindTexture"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColorPointer</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORPOINTERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorPointer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCopyTexImage1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOPYTEXIMAGE1DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCopyTexImage1D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCopyTexImage2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOPYTEXIMAGE2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCopyTexImage2D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCopyTexSubImage1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOPYTEXSUBIMAGE1DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCopyTexSubImage1D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCopyTexSubImage2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOPYTEXSUBIMAGE2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCopyTexSubImage2D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDeleteTextures</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETETEXTURESPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteTextures"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDisableClientState</name> <operator>=</operator> <operator>(</operator><name>PFNGLDISABLECLIENTSTATEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDisableClientState"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDrawArrays</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWARRAYSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawArrays"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDrawElements</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWELEMENTSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawElements"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEdgeFlagPointer</name> <operator>=</operator> <operator>(</operator><name>PFNGLEDGEFLAGPOINTERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEdgeFlagPointer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEnableClientState</name> <operator>=</operator> <operator>(</operator><name>PFNGLENABLECLIENTSTATEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEnableClientState"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGenTextures</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENTEXTURESPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenTextures"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetPointerv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPOINTERVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetPointerv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIndexPointer</name> <operator>=</operator> <operator>(</operator><name>PFNGLINDEXPOINTERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIndexPointer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIndexub</name> <operator>=</operator> <operator>(</operator><name>PFNGLINDEXUBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIndexub"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIndexubv</name> <operator>=</operator> <operator>(</operator><name>PFNGLINDEXUBVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIndexubv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glInterleavedArrays</name> <operator>=</operator> <operator>(</operator><name>PFNGLINTERLEAVEDARRAYSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glInterleavedArrays"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIsTexture</name> <operator>=</operator> <operator>(</operator><name>PFNGLISTEXTUREPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsTexture"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNormalPointer</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMALPOINTERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormalPointer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPolygonOffset</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOLYGONOFFSETPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPolygonOffset"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPopClientAttrib</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOPCLIENTATTRIBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPopClientAttrib"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPrioritizeTextures</name> <operator>=</operator> <operator>(</operator><name>PFNGLPRIORITIZETEXTURESPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPrioritizeTextures"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPushClientAttrib</name> <operator>=</operator> <operator>(</operator><name>PFNGLPUSHCLIENTATTRIBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPushClientAttrib"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoordPointer</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDPOINTERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordPointer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexSubImage1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXSUBIMAGE1DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexSubImage1D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexSubImage2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXSUBIMAGE2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexSubImage2D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexPointer</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXPOINTERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexPointer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_VERSION_1_2</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_1_2</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glCopyTexSubImage3D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOPYTEXSUBIMAGE3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCopyTexSubImage3D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDrawRangeElements</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWRANGEELEMENTSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawRangeElements"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexImage3D</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXIMAGE3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexImage3D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexSubImage3D</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXSUBIMAGE3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexSubImage3D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_VERSION_1_3</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_1_3</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glActiveTexture</name> <operator>=</operator> <operator>(</operator><name>PFNGLACTIVETEXTUREPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glActiveTexture"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glClientActiveTexture</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLIENTACTIVETEXTUREPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClientActiveTexture"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCompressedTexImage1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXIMAGE1DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexImage1D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCompressedTexImage2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXIMAGE2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexImage2D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCompressedTexImage3D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXIMAGE3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexImage3D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCompressedTexSubImage1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexSubImage1D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCompressedTexSubImage2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexSubImage2D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCompressedTexSubImage3D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexSubImage3D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetCompressedTexImage</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETCOMPRESSEDTEXIMAGEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetCompressedTexImage"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLoadTransposeMatrixd</name> <operator>=</operator> <operator>(</operator><name>PFNGLLOADTRANSPOSEMATRIXDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLoadTransposeMatrixd"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLoadTransposeMatrixf</name> <operator>=</operator> <operator>(</operator><name>PFNGLLOADTRANSPOSEMATRIXFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLoadTransposeMatrixf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultTransposeMatrixd</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTTRANSPOSEMATRIXDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultTransposeMatrixd"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultTransposeMatrixf</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTTRANSPOSEMATRIXFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultTransposeMatrixf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord1d</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD1DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord1d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord1dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD1DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord1dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord1f</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD1FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord1f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord1fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD1FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord1fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord1i</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD1IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord1i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord1iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD1IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord1iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord1s</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD1SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord1s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord1sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD1SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord1sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord2d</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord2d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord2dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD2DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord2dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord2f</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD2FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord2f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD2FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord2fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord2i</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD2IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord2i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord2iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD2IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord2iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord2s</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD2SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord2s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord2sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD2SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord2sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord3d</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord3d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord3dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD3DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord3dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord3f</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD3FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord3f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD3FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord3fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord3i</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD3IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord3i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord3iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD3IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord3iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord3s</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD3SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord3s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord3sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD3SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord3sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord4d</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD4DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord4d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord4dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD4DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord4dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord4f</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD4FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord4f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD4FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord4fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord4i</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD4IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord4i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord4iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD4IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord4iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord4s</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD4SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord4s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoord4sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORD4SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoord4sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSampleCoverage</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLECOVERAGEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSampleCoverage"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_VERSION_1_4</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_1_4</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glBlendColor</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDCOLORPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendColor"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBlendEquation</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDEQUATIONPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendEquation"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBlendFuncSeparate</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDFUNCSEPARATEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendFuncSeparate"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFogCoordPointer</name> <operator>=</operator> <operator>(</operator><name>PFNGLFOGCOORDPOINTERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFogCoordPointer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFogCoordd</name> <operator>=</operator> <operator>(</operator><name>PFNGLFOGCOORDDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFogCoordd"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFogCoorddv</name> <operator>=</operator> <operator>(</operator><name>PFNGLFOGCOORDDVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFogCoorddv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFogCoordf</name> <operator>=</operator> <operator>(</operator><name>PFNGLFOGCOORDFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFogCoordf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFogCoordfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLFOGCOORDFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFogCoordfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiDrawArrays</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTIDRAWARRAYSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiDrawArrays"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiDrawElements</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTIDRAWELEMENTSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiDrawElements"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPointParameterf</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOINTPARAMETERFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPointParameterf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPointParameterfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOINTPARAMETERFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPointParameterfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPointParameteri</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOINTPARAMETERIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPointParameteri"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPointParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOINTPARAMETERIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPointParameteriv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3b</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3BPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3b"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3bv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3BVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3bv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3d</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3f</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3i</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3s</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3ub</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3UBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3ub"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3ubv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3UBVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3ubv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3us</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3USPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3us"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColor3usv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLOR3USVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColor3usv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColorPointer</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLORPOINTERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColorPointer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos2d</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos2d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos2dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS2DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos2dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos2f</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS2FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos2f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS2FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos2fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos2i</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS2IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos2i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos2iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS2IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos2iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos2s</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS2SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos2s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos2sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS2SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos2sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos3d</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos3d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos3dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS3DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos3dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos3f</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS3FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos3f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS3FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos3fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos3i</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS3IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos3i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos3iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS3IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos3iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos3s</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS3SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos3s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWindowPos3sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLWINDOWPOS3SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWindowPos3sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_VERSION_1_5</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_1_5</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glBeginQuery</name> <operator>=</operator> <operator>(</operator><name>PFNGLBEGINQUERYPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBeginQuery"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBindBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBufferData</name> <operator>=</operator> <operator>(</operator><name>PFNGLBUFFERDATAPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBufferData"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBufferSubData</name> <operator>=</operator> <operator>(</operator><name>PFNGLBUFFERSUBDATAPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBufferSubData"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDeleteBuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEBUFFERSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteBuffers"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDeleteQueries</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEQUERIESPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteQueries"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEndQuery</name> <operator>=</operator> <operator>(</operator><name>PFNGLENDQUERYPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEndQuery"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGenBuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENBUFFERSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenBuffers"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGenQueries</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENQUERIESPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenQueries"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetBufferParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBUFFERPARAMETERIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBufferParameteriv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetBufferPointerv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBUFFERPOINTERVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBufferPointerv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetBufferSubData</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBUFFERSUBDATAPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBufferSubData"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetQueryObjectiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETQUERYOBJECTIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetQueryObjectiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetQueryObjectuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETQUERYOBJECTUIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetQueryObjectuiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetQueryiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETQUERYIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetQueryiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIsBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLISBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIsQuery</name> <operator>=</operator> <operator>(</operator><name>PFNGLISQUERYPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsQuery"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMapBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLMAPBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMapBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUnmapBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNMAPBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUnmapBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_VERSION_2_0</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_2_0</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glAttachShader</name> <operator>=</operator> <operator>(</operator><name>PFNGLATTACHSHADERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glAttachShader"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBindAttribLocation</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDATTRIBLOCATIONPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindAttribLocation"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBlendEquationSeparate</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDEQUATIONSEPARATEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendEquationSeparate"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCompileShader</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPILESHADERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompileShader"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCreateProgram</name> <operator>=</operator> <operator>(</operator><name>PFNGLCREATEPROGRAMPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCreateProgram"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCreateShader</name> <operator>=</operator> <operator>(</operator><name>PFNGLCREATESHADERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCreateShader"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDeleteProgram</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEPROGRAMPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteProgram"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDeleteShader</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETESHADERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteShader"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDetachShader</name> <operator>=</operator> <operator>(</operator><name>PFNGLDETACHSHADERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDetachShader"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDisableVertexAttribArray</name> <operator>=</operator> <operator>(</operator><name>PFNGLDISABLEVERTEXATTRIBARRAYPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDisableVertexAttribArray"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDrawBuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWBUFFERSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawBuffers"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEnableVertexAttribArray</name> <operator>=</operator> <operator>(</operator><name>PFNGLENABLEVERTEXATTRIBARRAYPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEnableVertexAttribArray"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetActiveAttrib</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEATTRIBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveAttrib"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetActiveUniform</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniform"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetAttachedShaders</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETATTACHEDSHADERSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetAttachedShaders"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetAttribLocation</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETATTRIBLOCATIONPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetAttribLocation"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetProgramInfoLog</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMINFOLOGPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramInfoLog"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetProgramiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetShaderInfoLog</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSHADERINFOLOGPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetShaderInfoLog"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetShaderSource</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSHADERSOURCEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetShaderSource"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetShaderiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSHADERIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetShaderiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetUniformLocation</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMLOCATIONPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformLocation"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetUniformfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetUniformiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetVertexAttribPointerv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBPOINTERVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribPointerv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetVertexAttribdv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBDVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribdv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetVertexAttribfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetVertexAttribiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIsProgram</name> <operator>=</operator> <operator>(</operator><name>PFNGLISPROGRAMPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsProgram"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIsShader</name> <operator>=</operator> <operator>(</operator><name>PFNGLISSHADERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsShader"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glLinkProgram</name> <operator>=</operator> <operator>(</operator><name>PFNGLLINKPROGRAMPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLinkProgram"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glShaderSource</name> <operator>=</operator> <operator>(</operator><name>PFNGLSHADERSOURCEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glShaderSource"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glStencilFuncSeparate</name> <operator>=</operator> <operator>(</operator><name>PFNGLSTENCILFUNCSEPARATEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glStencilFuncSeparate"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glStencilMaskSeparate</name> <operator>=</operator> <operator>(</operator><name>PFNGLSTENCILMASKSEPARATEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glStencilMaskSeparate"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glStencilOpSeparate</name> <operator>=</operator> <operator>(</operator><name>PFNGLSTENCILOPSEPARATEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glStencilOpSeparate"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform1f</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM1FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform1f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform1fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM1FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform1fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform1i</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM1IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform1i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform1iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM1IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform1iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform2f</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM2FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform2f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM2FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform2fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform2i</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM2IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform2i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform2iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM2IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform2iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform3f</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM3FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform3f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM3FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform3fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform3i</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM3IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform3i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform3iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM3IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform3iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform4f</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM4FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform4f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM4FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform4fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform4i</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM4IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform4i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform4iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM4IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform4iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniformMatrix2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX2FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix2fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniformMatrix3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX3FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix3fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniformMatrix4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX4FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix4fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUseProgram</name> <operator>=</operator> <operator>(</operator><name>PFNGLUSEPROGRAMPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUseProgram"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glValidateProgram</name> <operator>=</operator> <operator>(</operator><name>PFNGLVALIDATEPROGRAMPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glValidateProgram"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib1d</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib1dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib1f</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib1fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib1s</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib1sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib2d</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib2dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib2f</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib2s</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib2sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib3d</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib3dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib3f</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib3s</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib3sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4Nbv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NBVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Nbv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4Niv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Niv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4Nsv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NSVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Nsv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4Nub</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Nub"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4Nubv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUBVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Nubv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4Nuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Nuiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4Nusv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUSVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Nusv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4bv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4BVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4bv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4d</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4d"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4DVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4dv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4f</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4FPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4f"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4s</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4SPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4s"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4ubv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4UBVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4ubv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttrib4usv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4USVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4usv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribPointer</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBPOINTERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribPointer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_VERSION_2_1</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_2_1</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glUniformMatrix2x3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX2X3FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix2x3fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniformMatrix2x4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX2X4FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix2x4fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniformMatrix3x2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX3X2FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix3x2fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniformMatrix3x4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX3X4FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix3x4fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniformMatrix4x2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX4X2FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix4x2fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniformMatrix4x3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX4X3FVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix4x3fv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_VERSION_3_0</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_3_0</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glBeginConditionalRender</name> <operator>=</operator> <operator>(</operator><name>PFNGLBEGINCONDITIONALRENDERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBeginConditionalRender"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBeginTransformFeedback</name> <operator>=</operator> <operator>(</operator><name>PFNGLBEGINTRANSFORMFEEDBACKPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBeginTransformFeedback"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBindBufferBase</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDBUFFERBASEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindBufferBase"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBindBufferRange</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDBUFFERRANGEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindBufferRange"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBindFragDataLocation</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDFRAGDATALOCATIONPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindFragDataLocation"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBindFramebuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDFRAMEBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindFramebuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBindRenderbuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDRENDERBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindRenderbuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBindVertexArray</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDVERTEXARRAYPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindVertexArray"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBlitFramebuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLITFRAMEBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlitFramebuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCheckFramebufferStatus</name> <operator>=</operator> <operator>(</operator><name>PFNGLCHECKFRAMEBUFFERSTATUSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCheckFramebufferStatus"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glClampColor</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLAMPCOLORPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClampColor"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glClearBufferfi</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARBUFFERFIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearBufferfi"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glClearBufferfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARBUFFERFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearBufferfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glClearBufferiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARBUFFERIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearBufferiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glClearBufferuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARBUFFERUIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearBufferuiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColorMaski</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORMASKIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorMaski"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDeleteFramebuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEFRAMEBUFFERSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteFramebuffers"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDeleteRenderbuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETERENDERBUFFERSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteRenderbuffers"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDeleteVertexArrays</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEVERTEXARRAYSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteVertexArrays"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDisablei</name> <operator>=</operator> <operator>(</operator><name>PFNGLDISABLEIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDisablei"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEnablei</name> <operator>=</operator> <operator>(</operator><name>PFNGLENABLEIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEnablei"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEndConditionalRender</name> <operator>=</operator> <operator>(</operator><name>PFNGLENDCONDITIONALRENDERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEndConditionalRender"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glEndTransformFeedback</name> <operator>=</operator> <operator>(</operator><name>PFNGLENDTRANSFORMFEEDBACKPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEndTransformFeedback"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFlushMappedBufferRange</name> <operator>=</operator> <operator>(</operator><name>PFNGLFLUSHMAPPEDBUFFERRANGEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFlushMappedBufferRange"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFramebufferRenderbuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERRENDERBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferRenderbuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFramebufferTexture1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURE1DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture1D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFramebufferTexture2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURE2DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture2D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFramebufferTexture3D</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURE3DPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture3D"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFramebufferTextureLayer</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURELAYERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTextureLayer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGenFramebuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENFRAMEBUFFERSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenFramebuffers"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGenRenderbuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENRENDERBUFFERSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenRenderbuffers"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGenVertexArrays</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENVERTEXARRAYSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenVertexArrays"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGenerateMipmap</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENERATEMIPMAPPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenerateMipmap"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetBooleani_v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBOOLEANI_VPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBooleani_v"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetFragDataLocation</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETFRAGDATALOCATIONPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetFragDataLocation"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetFramebufferAttachmentParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetFramebufferAttachmentParameteriv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetIntegeri_v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINTEGERI_VPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetIntegeri_v"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetRenderbufferParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETRENDERBUFFERPARAMETERIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetRenderbufferParameteriv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetStringi</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSTRINGIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetStringi"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetTexParameterIiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXPARAMETERIIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexParameterIiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetTexParameterIuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXPARAMETERIUIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexParameterIuiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetTransformFeedbackVarying</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTRANSFORMFEEDBACKVARYINGPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTransformFeedbackVarying"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetUniformuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMUIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformuiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetVertexAttribIiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBIIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribIiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetVertexAttribIuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBIUIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribIuiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIsEnabledi</name> <operator>=</operator> <operator>(</operator><name>PFNGLISENABLEDIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsEnabledi"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIsFramebuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLISFRAMEBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsFramebuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIsRenderbuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLISRENDERBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsRenderbuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIsVertexArray</name> <operator>=</operator> <operator>(</operator><name>PFNGLISVERTEXARRAYPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsVertexArray"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMapBufferRange</name> <operator>=</operator> <operator>(</operator><name>PFNGLMAPBUFFERRANGEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMapBufferRange"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRenderbufferStorage</name> <operator>=</operator> <operator>(</operator><name>PFNGLRENDERBUFFERSTORAGEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRenderbufferStorage"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glRenderbufferStorageMultisample</name> <operator>=</operator> <operator>(</operator><name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRenderbufferStorageMultisample"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexParameterIiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXPARAMETERIIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexParameterIiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexParameterIuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXPARAMETERIUIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexParameterIuiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTransformFeedbackVaryings</name> <operator>=</operator> <operator>(</operator><name>PFNGLTRANSFORMFEEDBACKVARYINGSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTransformFeedbackVaryings"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform1ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM1UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform1ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform1uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM1UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform1uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform2ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM2UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform2ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform2uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM2UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform2uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM3UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform3ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM3UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform3uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM4UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform4ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniform4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM4UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform4uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI1i</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI1IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI1i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI1iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI1IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI1iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI1ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI1UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI1ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI1uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI1UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI1uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI2i</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI2IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI2i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI2iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI2IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI2iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI2ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI2UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI2ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI2uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI2UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI2uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI3i</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI3IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI3i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI3iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI3IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI3iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI3UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI3ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI3UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI3uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI4bv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4BVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4bv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI4i</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4IPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4i"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI4iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4IVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4iv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI4sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4SVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4sv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI4ubv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4UBVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4ubv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribI4usv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4USVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4usv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribIPointer</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBIPOINTERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribIPointer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_VERSION_3_1</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_3_1</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glBindBufferBase</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDBUFFERBASEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindBufferBase"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBindBufferRange</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDBUFFERRANGEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindBufferRange"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glCopyBufferSubData</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOPYBUFFERSUBDATAPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCopyBufferSubData"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDrawArraysInstanced</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWARRAYSINSTANCEDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawArraysInstanced"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDrawElementsInstanced</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWELEMENTSINSTANCEDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawElementsInstanced"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetActiveUniformBlockName</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniformBlockName"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetActiveUniformBlockiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMBLOCKIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniformBlockiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetActiveUniformName</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMNAMEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniformName"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetActiveUniformsiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMSIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniformsiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetIntegeri_v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINTEGERI_VPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetIntegeri_v"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetUniformBlockIndex</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMBLOCKINDEXPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformBlockIndex"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetUniformIndices</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMINDICESPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformIndices"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPrimitiveRestartIndex</name> <operator>=</operator> <operator>(</operator><name>PFNGLPRIMITIVERESTARTINDEXPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPrimitiveRestartIndex"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXBUFFERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glUniformBlockBinding</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMBLOCKBINDINGPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformBlockBinding"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_VERSION_3_2</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_3_2</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glClientWaitSync</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLIENTWAITSYNCPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClientWaitSync"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDeleteSync</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETESYNCPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteSync"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDrawElementsBaseVertex</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWELEMENTSBASEVERTEXPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawElementsBaseVertex"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDrawElementsInstancedBaseVertex</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawElementsInstancedBaseVertex"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDrawRangeElementsBaseVertex</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawRangeElementsBaseVertex"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFenceSync</name> <operator>=</operator> <operator>(</operator><name>PFNGLFENCESYNCPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFenceSync"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glFramebufferTexture</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTUREPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetBufferParameteri64v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBUFFERPARAMETERI64VPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBufferParameteri64v"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetInteger64i_v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINTEGER64I_VPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetInteger64i_v"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetInteger64v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINTEGER64VPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetInteger64v"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetMultisamplefv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETMULTISAMPLEFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetMultisamplefv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetSynciv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSYNCIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetSynciv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIsSync</name> <operator>=</operator> <operator>(</operator><name>PFNGLISSYNCPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsSync"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiDrawElementsBaseVertex</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiDrawElementsBaseVertex"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glProvokingVertex</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROVOKINGVERTEXPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProvokingVertex"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSampleMaski</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLEMASKIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSampleMaski"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexImage2DMultisample</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXIMAGE2DMULTISAMPLEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexImage2DMultisample"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexImage3DMultisample</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXIMAGE3DMULTISAMPLEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexImage3DMultisample"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glWaitSync</name> <operator>=</operator> <operator>(</operator><name>PFNGLWAITSYNCPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWaitSync"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_VERSION_3_3</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_3_3</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glBindFragDataLocationIndexed</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDFRAGDATALOCATIONINDEXEDPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindFragDataLocationIndexed"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glBindSampler</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDSAMPLERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindSampler"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColorP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORP3UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorP3ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColorP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORP3UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorP3uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColorP4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORP4UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorP4ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glColorP4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORP4UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorP4uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDeleteSamplers</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETESAMPLERSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteSamplers"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGenSamplers</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENSAMPLERSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenSamplers"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetFragDataIndex</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETFRAGDATAINDEXPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetFragDataIndex"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetQueryObjecti64v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETQUERYOBJECTI64VPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetQueryObjecti64v"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetQueryObjectui64v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETQUERYOBJECTUI64VPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetQueryObjectui64v"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetSamplerParameterIiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSAMPLERPARAMETERIIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetSamplerParameterIiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetSamplerParameterIuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSAMPLERPARAMETERIUIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetSamplerParameterIuiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetSamplerParameterfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSAMPLERPARAMETERFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetSamplerParameterfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetSamplerParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSAMPLERPARAMETERIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetSamplerParameteriv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glIsSampler</name> <operator>=</operator> <operator>(</operator><name>PFNGLISSAMPLERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsSampler"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoordP1ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP1UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP1ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoordP1uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP1UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP1uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoordP2ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP2UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP2ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoordP2uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP2UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP2uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoordP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP3UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP3ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoordP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP3UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP3uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoordP4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP4UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP4ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glMultiTexCoordP4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP4UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP4uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNormalP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMALP3UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormalP3ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glNormalP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMALP3UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormalP3uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glQueryCounter</name> <operator>=</operator> <operator>(</operator><name>PFNGLQUERYCOUNTERPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glQueryCounter"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSamplerParameterIiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLERPARAMETERIIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSamplerParameterIiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSamplerParameterIuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLERPARAMETERIUIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSamplerParameterIuiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSamplerParameterf</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLERPARAMETERFPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSamplerParameterf"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSamplerParameterfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLERPARAMETERFVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSamplerParameterfv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSamplerParameteri</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLERPARAMETERIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSamplerParameteri"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSamplerParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLERPARAMETERIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSamplerParameteriv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColorP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLORP3UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColorP3ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSecondaryColorP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLORP3UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColorP3uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoordP1ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP1UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP1ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoordP1uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP1UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP1uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoordP2ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP2UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP2ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoordP2uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP2UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP2uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoordP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP3UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP3ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoordP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP3UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP3uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoordP4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP4UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP4ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glTexCoordP4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP4UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP4uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribDivisor</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBDIVISORPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribDivisor"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribP1ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP1UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP1ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribP1uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP1UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP1uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribP2ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP2UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP2ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribP2uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP2UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP2uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP3UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP3ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP3UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP3uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribP4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP4UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP4ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexAttribP4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP4UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP4uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexP2ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXP2UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexP2ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexP2uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXP2UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexP2uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXP3UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexP3ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXP3UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexP3uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexP4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXP4UIPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexP4ui"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glVertexP4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXP4UIVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexP4uiv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_ARB_multisample</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_multisample</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glSampleCoverage</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLECOVERAGEPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSampleCoverage"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glSampleCoverageARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLECOVERAGEARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSampleCoverageARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_ARB_robustness</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_robustness</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glGetGraphicsResetStatusARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETGRAPHICSRESETSTATUSARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetGraphicsResetStatusARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnColorTableARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNCOLORTABLEARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnColorTableARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnCompressedTexImageARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnCompressedTexImageARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnConvolutionFilterARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNCONVOLUTIONFILTERARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnConvolutionFilterARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnHistogramARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNHISTOGRAMARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnHistogramARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnMapdvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNMAPDVARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnMapdvARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnMapfvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNMAPFVARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnMapfvARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnMapivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNMAPIVARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnMapivARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnMinmaxARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNMINMAXARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnMinmaxARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnPixelMapfvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNPIXELMAPFVARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnPixelMapfvARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnPixelMapuivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNPIXELMAPUIVARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnPixelMapuivARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnPixelMapusvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNPIXELMAPUSVARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnPixelMapusvARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnPolygonStippleARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNPOLYGONSTIPPLEARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnPolygonStippleARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnSeparableFilterARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNSEPARABLEFILTERARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnSeparableFilterARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnTexImageARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNTEXIMAGEARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnTexImageARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnUniformdvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNUNIFORMDVARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnUniformdvARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnUniformfvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNUNIFORMFVARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnUniformfvARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnUniformivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNUNIFORMIVARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnUniformivARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetnUniformuivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETNUNIFORMUIVARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetnUniformuivARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glReadnPixels</name> <operator>=</operator> <operator>(</operator><name>PFNGLREADNPIXELSPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glReadnPixels"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glReadnPixelsARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLREADNPIXELSARBPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glReadnPixelsARB"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_load_GL_KHR_debug</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_KHR_debug</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glDebugMessageCallback</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEBUGMESSAGECALLBACKPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDebugMessageCallback"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDebugMessageControl</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEBUGMESSAGECONTROLPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDebugMessageControl"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glDebugMessageInsert</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEBUGMESSAGEINSERTPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDebugMessageInsert"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetDebugMessageLog</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETDEBUGMESSAGELOGPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetDebugMessageLog"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetObjectLabel</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETOBJECTLABELPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetObjectLabel"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetObjectPtrLabel</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETOBJECTPTRLABELPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetObjectPtrLabel"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glGetPointerv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPOINTERVPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetPointerv"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glObjectLabel</name> <operator>=</operator> <operator>(</operator><name>PFNGLOBJECTLABELPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glObjectLabel"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glObjectPtrLabel</name> <operator>=</operator> <operator>(</operator><name>PFNGLOBJECTPTRLABELPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glObjectPtrLabel"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPopDebugGroup</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOPDEBUGGROUPPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPopDebugGroup"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>glPushDebugGroup</name> <operator>=</operator> <operator>(</operator><name>PFNGLPUSHDEBUGGROUPPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPushDebugGroup"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_ES_VERSION_3_0</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_0</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_GL_IS_SOME_NEW_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_GL_IS_SOME_NEW_VERSION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>glad_gl_get_extensions</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_exts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>out_num_exts_i</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>out_exts_i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GLAD_GL_IS_SOME_NEW_VERSION</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>GLAD_VERSION_MAJOR</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>version</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>out_num_exts_i</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>out_exts_i</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>glGetString</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out_exts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GLAD_GL_IS_SOME_NEW_VERSION</name></expr></cpp:if>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_exts_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>exts_i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>glGetStringi</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>glGetIntegerv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_NUM_EXTENSIONS</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>num_exts_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_exts_i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>exts_i</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>num_exts_i</name> <operator>*</operator> <operator>(</operator><sizeof>sizeof <name/></sizeof>*<name>exts_i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exts_i</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>num_exts_i</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gl_str_tmp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <call><name>glGetStringi</name><argument_list>(<argument><expr><name>GL_EXTENSIONS</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>gl_str_tmp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>local_str</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>local_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>local_str</name></expr></argument>, <argument><expr><name>gl_str_tmp</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>exts_i</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>local_str</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>out_num_exts_i</name> <operator>=</operator> <name>num_exts_i</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_exts_i</name> <operator>=</operator> <name>exts_i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_gl_free_extensions</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>exts_i</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num_exts_i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exts_i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>num_exts_i</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>exts_i</name><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exts_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exts_i</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>glad_gl_has_extension</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num_exts_i</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>exts_i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>GLAD_VERSION_MAJOR</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><name>GLAD_GL_IS_SOME_NEW_VERSION</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extensions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>loc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>terminator</name></decl>;</decl_stmt>

<expr_stmt><expr><name>extensions</name> <operator>=</operator> <name>exts</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>extensions</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>extensions</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>loc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>terminator</name> <operator>=</operator> <name>loc</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>loc</name> <operator>==</operator> <name>extensions</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>loc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>*</operator><name>terminator</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>terminator</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>extensions</name> <operator>=</operator> <name>terminator</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>num_exts_i</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>exts_i</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLADapiproc</name></type> <name>glad_gl_get_proc_from_userptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><macro><name>GLAD_GNUC_EXTENSION</name> <argument_list>(<argument>GLADapiproc (*)(const char *name)</argument>)</argument_list></macro> <name>userptr</name><operator>)</operator><operator>(</operator><name>name</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>glad_gl_find_extensions_gl</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_exts_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>exts_i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glad_gl_get_extensions</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_exts_i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exts_i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>GLAD_GL_ARB_multisample</name> <operator>=</operator> <call><name>glad_gl_has_extension</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>exts</name></expr></argument>, <argument><expr><name>num_exts_i</name></expr></argument>, <argument><expr><name>exts_i</name></expr></argument>, <argument><expr><literal type="string">"GL_ARB_multisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_ARB_robustness</name> <operator>=</operator> <call><name>glad_gl_has_extension</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>exts</name></expr></argument>, <argument><expr><name>num_exts_i</name></expr></argument>, <argument><expr><name>exts_i</name></expr></argument>, <argument><expr><literal type="string">"GL_ARB_robustness"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_KHR_debug</name> <operator>=</operator> <call><name>glad_gl_has_extension</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>exts</name></expr></argument>, <argument><expr><name>num_exts_i</name></expr></argument>, <argument><expr><name>exts_i</name></expr></argument>, <argument><expr><literal type="string">"GL_KHR_debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_free_extensions</name><argument_list>(<argument><expr><name>exts_i</name></expr></argument>, <argument><expr><name>num_exts_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>glad_gl_find_core_gl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>prefixes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"OpenGL ES-CM "</literal></expr>,

<expr><literal type="string">"OpenGL ES-CL "</literal></expr>,

<expr><literal type="string">"OpenGL ES "</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <call><name>glGetString</name><argument_list>(<argument><expr><name>GL_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>version</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>prefixes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>prefixes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>prefixes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>version</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>GLAD_IMPL_UTIL_SSCANF</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_VERSION_1_0</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_VERSION_1_1</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_VERSION_1_2</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_VERSION_1_3</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_VERSION_1_4</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_VERSION_1_5</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_VERSION_2_0</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_VERSION_2_1</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_VERSION_3_0</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_VERSION_3_1</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_VERSION_3_2</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>GLAD_GL_VERSION_3_3</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><call><name>GLAD_MAKE_VERSION</name><argument_list>(<argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>gladLoadGLUserPtr</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<expr_stmt><expr><name>glGetString</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSTRINGPROC</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetString"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>glGetString</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_VERSION</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>glad_gl_find_core_gl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_VERSION_1_0</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_VERSION_1_1</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_VERSION_1_2</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_VERSION_1_3</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_VERSION_1_4</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_VERSION_1_5</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_VERSION_2_0</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_VERSION_2_1</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_VERSION_3_0</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_VERSION_3_1</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_VERSION_3_2</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_VERSION_3_3</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glad_gl_find_extensions_gl</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_ARB_multisample</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_ARB_robustness</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_gl_load_GL_KHR_debug</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>version</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>gladLoadGL</name><parameter_list>( <parameter><decl><type><name>GLADloadfunc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>gladLoadGLUserPtr</name><argument_list>( <argument><expr><name>glad_gl_get_proc_from_userptr</name></expr></argument>, <argument><expr><macro><name>GLAD_GNUC_EXTENSION</name> <argument_list>(<argument>void*</argument>)</argument_list></macro> <name>load</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
