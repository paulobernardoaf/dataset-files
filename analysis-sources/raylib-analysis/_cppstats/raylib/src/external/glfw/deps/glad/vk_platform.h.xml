<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\glfw\deps\glad\vk_platform.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>

<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKAPI_ATTR</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKAPI_CALL</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKAPI_PTR</name></cpp:macro> <cpp:value>VKAPI_CALL</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__ARM_ARCH</name> <operator>&lt;</operator> <literal type="number">7</literal></expr></cpp:elif>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Vulkan isn't supported for the 'armeabi' NDK ABI"</cpp:literal></cpp:error>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__ARM_ARCH</name> <operator>&gt;=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_32BIT_STATE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKAPI_ATTR</name></cpp:macro> <cpp:value>__attribute__((pcs("aapcs-vfp")))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKAPI_CALL</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKAPI_PTR</name></cpp:macro> <cpp:value>VKAPI_ATTR</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKAPI_ATTR</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKAPI_CALL</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKAPI_PTR</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VK_NO_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1600</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><name>signed</name> <name>__int8</name></type> <name>int8_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int8</name></type> <name>uint8_t</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>__int16</name></type> <name>int16_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int16</name></type> <name>uint16_t</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>__int32</name></type> <name>int32_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int32</name></type> <name>uint32_t</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>__int64</name></type> <name>int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>uint64_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
