<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\stb_rect_pack.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_RECT_PACK_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBRP_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBRP_DEF</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBRP_DEF</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>stbrp_context</name></name></type> <name>stbrp_context</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>stbrp_node</name></name></type> <name>stbrp_node</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>stbrp_rect</name></name></type> <name>stbrp_rect</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBRP_LARGE_RECTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>stbrp_coord</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>stbrp_coord</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>STBRP_DEF</name> <name>int</name></type> <name>stbrp_pack_rects</name> <parameter_list>(<parameter><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>stbrp_rect</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rects</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>stbrp_rect</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbrp_coord</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbrp_coord</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>was_packed</name></decl>;</decl_stmt> 

}</block>;</struct> 

<function_decl><type><name>STBRP_DEF</name> <name>void</name></type> <name>stbrp_init_target</name> <parameter_list>(<parameter><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>stbrp_node</name> <modifier>*</modifier></type><name>nodes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_nodes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBRP_DEF</name> <name>void</name></type> <name>stbrp_setup_allow_out_of_mem</name> <parameter_list>(<parameter><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_out_of_mem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBRP_DEF</name> <name>void</name></type> <name>stbrp_setup_heuristic</name> <parameter_list>(<parameter><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heuristic</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum

<block>{

<decl><name>STBRP_HEURISTIC_Skyline_default</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>STBRP_HEURISTIC_Skyline_BL_sortHeight</name> <init>= <expr><name>STBRP_HEURISTIC_Skyline_default</name></expr></init></decl>,

<decl><name>STBRP_HEURISTIC_Skyline_BF_sortHeight</name></decl>

}</block>;</enum>

<struct>struct <name>stbrp_node</name>

<block>{

<decl_stmt><decl><type><name>stbrp_coord</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbrp_node</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>stbrp_context</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>init_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>heuristic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_nodes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbrp_node</name> <modifier>*</modifier></type><name>active_head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbrp_node</name> <modifier>*</modifier></type><name>free_head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbrp_node</name></type> <name><name>extra</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_RECT_PACK_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBRP_SORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBRP_SORT</name></cpp:macro> <cpp:value>qsort</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBRP_ASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBRP_ASSERT</name></cpp:macro> <cpp:value>assert</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBRP__NOTUSED</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(v)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBRP__NOTUSED</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)sizeof(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum

<block>{

<decl><name>STBRP__INIT_skyline</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>

}</block>;</enum>

<function><type><name>STBRP_DEF</name> <name>void</name></type> <name>stbrp_setup_heuristic</name><parameter_list>(<parameter><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heuristic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>init_mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>STBRP__INIT_skyline</name></expr>:</case>

<expr_stmt><expr><call><name>STBRP_ASSERT</name><argument_list>(<argument><expr><name>heuristic</name> <operator>==</operator> <name>STBRP_HEURISTIC_Skyline_BL_sortHeight</name> <operator>||</operator> <name>heuristic</name> <operator>==</operator> <name>STBRP_HEURISTIC_Skyline_BF_sortHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>heuristic</name></name> <operator>=</operator> <name>heuristic</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>STBRP_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>STBRP_DEF</name> <name>void</name></type> <name>stbrp_setup_allow_out_of_mem</name><parameter_list>(<parameter><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_out_of_mem</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>allow_out_of_mem</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>context</name><operator>-&gt;</operator><name>num_nodes</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>context</name><operator>-&gt;</operator><name>num_nodes</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>STBRP_DEF</name> <name>void</name></type> <name>stbrp_init_target</name><parameter_list>(<parameter><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>stbrp_node</name> <modifier>*</modifier></type><name>nodes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_nodes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBRP_LARGE_RECTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>STBRP_ASSERT</name><argument_list>(<argument><expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal> <operator>&amp;&amp;</operator> <name>height</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_nodes</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <operator>&amp;</operator><name><name>nodes</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>init_mode</name></name> <operator>=</operator> <name>STBRP__INIT_skyline</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>heuristic</name></name> <operator>=</operator> <name>STBRP_HEURISTIC_Skyline_default</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>free_head</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>active_head</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>num_nodes</name></name> <operator>=</operator> <name>num_nodes</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbrp_setup_allow_out_of_mem</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>stbrp_coord</name><operator>)</operator> <name>width</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBRP_LARGE_RECTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbrp__skyline_find_min_y</name><parameter_list>(<parameter><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>stbrp_node</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pwaste</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbrp_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>first</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><name>x0</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_y</name></decl>, <decl><type ref="prev"/><name>visited_width</name></decl>, <decl><type ref="prev"/><name>waste_area</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBRP__NOTUSED</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBRP_ASSERT</name><argument_list>(<argument><expr><name><name>first</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;=</operator> <name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

while (node-&gt;next-&gt;x &lt;= x0)

++node;

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>STBRP_ASSERT</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>STBRP_ASSERT</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;=</operator> <name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>waste_area</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>visited_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name>x1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;</operator> <name>min_y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>waste_area</name> <operator>+=</operator> <name>visited_width</name> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name>min_y</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>min_y</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name>x0</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>visited_width</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name>x0</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>visited_width</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>under_width</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>under_width</name> <operator>+</operator> <name>visited_width</name> <operator>&gt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>under_width</name> <operator>=</operator> <name>width</name> <operator>-</operator> <name>visited_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>waste_area</name> <operator>+=</operator> <name>under_width</name> <operator>*</operator> <operator>(</operator><name>min_y</name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>y</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>visited_width</name> <operator>+=</operator> <name>under_width</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>pwaste</name> <operator>=</operator> <name>waste_area</name></expr>;</expr_stmt>

<return>return <expr><name>min_y</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<name>y</name>;</decl_stmt>

<decl_stmt><decl><type><name>stbrp_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_link</name></decl>;</decl_stmt>

}</block></struct></type> <name>stbrp__findresult</name>;</typedef>

<function><type><specifier>static</specifier> <name>stbrp__findresult</name></type> <name>stbrp__skyline_find_best_pos</name><parameter_list>(<parameter><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>best_waste</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>best_x</name></decl>, <decl><type ref="prev"/><name>best_y</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbrp__findresult</name></type> <name>fr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbrp_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tail</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>best</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>align</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>-=</operator> <name>width</name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>align</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBRP_ASSERT</name><argument_list>(<argument><expr><name>width</name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>align</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>height</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fr</name><operator>.</operator><name>prev_link</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fr</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>fr</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>fr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>active_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>active_head</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name>width</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>,<decl><type ref="prev"/><name>waste</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>stbrp__skyline_find_min_y</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>waste</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>heuristic</name></name> <operator>==</operator> <name>STBRP_HEURISTIC_Skyline_BL_sortHeight</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>best_y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <name>height</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>best_y</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>==</operator> <name>best_y</name> <operator>&amp;&amp;</operator> <name>waste</name> <operator>&lt;</operator> <name>best_waste</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_waste</name> <operator>=</operator> <name>waste</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>best_x</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>best</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><operator>(</operator><operator>*</operator><name>best</name><operator>)</operator><operator>-&gt;</operator><name>x</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>heuristic</name></name> <operator>==</operator> <name>STBRP_HEURISTIC_Skyline_BF_sortHeight</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>active_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>active_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>active_head</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>tail</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>tail</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>tail</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xpos</name> <init>= <expr><name><name>tail</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>,<decl><type ref="prev"/><name>waste</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBRP_ASSERT</name><argument_list>(<argument><expr><name>xpos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;=</operator> <name>xpos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>STBRP_ASSERT</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <name>xpos</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;=</operator> <name>xpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>stbrp__skyline_find_min_y</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>waste</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <name>height</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;=</operator> <name>best_y</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>best_y</name> <operator>||</operator> <name>waste</name> <operator>&lt;</operator> <name>best_waste</name> <operator>||</operator> <operator>(</operator><name>waste</name><operator>==</operator><name>best_waste</name> <operator>&amp;&amp;</operator> <name>xpos</name> <operator>&lt;</operator> <name>best_x</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_x</name> <operator>=</operator> <name>xpos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBRP_ASSERT</name><argument_list>(<argument><expr><name>y</name> <operator>&lt;=</operator> <name>best_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>best_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_waste</name> <operator>=</operator> <name>waste</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>tail</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fr</name><operator>.</operator><name>prev_link</name></name> <operator>=</operator> <name>best</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fr</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>best_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fr</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>best_y</name></expr>;</expr_stmt>

<return>return <expr><name>fr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbrp__findresult</name></type> <name>stbrp__skyline_pack_rectangle</name><parameter_list>(<parameter><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stbrp__findresult</name></type> <name>res</name> <init>= <expr><call><name>stbrp__skyline_find_best_pos</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbrp_node</name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>prev_link</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>res</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>height</name> <operator>&gt;</operator> <name><name>context</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>free_head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>prev_link</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>free_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>stbrp_coord</name><operator>)</operator> <name><name>res</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>stbrp_coord</name><operator>)</operator> <operator>(</operator><name><name>res</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>height</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>free_head</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>*</operator><name><name>res</name><operator>.</operator><name>prev_link</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name><name>res</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbrp_node</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>res</name><operator>.</operator><name>prev_link</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;=</operator> <name><name>res</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbrp_node</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>free_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>free_head</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name><name>res</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>stbrp_coord</name><operator>)</operator> <operator>(</operator><name><name>res</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>width</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>active_head</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name><name>context</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STBRP_ASSERT</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>STBRP_ASSERT</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>active_head</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>free_head</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>STBRP_ASSERT</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <name><name>context</name><operator>-&gt;</operator><name>num_nodes</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rect_height_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>stbrp_rect</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>stbrp_rect</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>stbrp_rect</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>stbrp_rect</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;</operator> <name><name>q</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;</operator> <name><name>q</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rect_original_order</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>stbrp_rect</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>stbrp_rect</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>stbrp_rect</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>stbrp_rect</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>was_packed</name></name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>was_packed</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>was_packed</name></name> <operator>&gt;</operator> <name><name>q</name><operator>-&gt;</operator><name>was_packed</name></name><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBRP_LARGE_RECTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBRP__MAXVAL</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBRP__MAXVAL</name></cpp:macro> <cpp:value>0xffff</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>STBRP_DEF</name> <name>int</name></type> <name>stbrp_pack_rects</name><parameter_list>(<parameter><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>stbrp_rect</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rects</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>all_rects_packed</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rects</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>was_packed</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>STBRP_SORT</name><argument_list>(<argument><expr><name>rects</name></expr></argument>, <argument><expr><name>num_rects</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rect_height_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rects</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>stbrp__findresult</name></type> <name>fr</name> <init>= <expr><call><name>stbrp__skyline_pack_rectangle</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></argument>, <argument><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>.</operator><name>prev_link</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>stbrp_coord</name><operator>)</operator> <name><name>fr</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>stbrp_coord</name><operator>)</operator> <name><name>fr</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>STBRP__MAXVAL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>STBRP_SORT</name><argument_list>(<argument><expr><name>rects</name></expr></argument>, <argument><expr><name>num_rects</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rect_original_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rects</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>was_packed</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>==</operator> <name>STBRP__MAXVAL</name> <operator>&amp;&amp;</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>==</operator> <name>STBRP__MAXVAL</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>was_packed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>all_rects_packed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>all_rects_packed</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
