<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\dr_mp3.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1600</literal></expr></cpp:if>

<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>drmp3_int8</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>drmp3_uint8</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>short</name></type> <name>drmp3_int16</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>drmp3_uint16</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>int</name></type> <name>drmp3_int32</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>drmp3_uint32</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>__int64</name></type> <name>drmp3_int64</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>drmp3_uint64</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>int8_t</name></type> <name>drmp3_int8</name>;</typedef>

<typedef>typedef <type><name>uint8_t</name></type> <name>drmp3_uint8</name>;</typedef>

<typedef>typedef <type><name>int16_t</name></type> <name>drmp3_int16</name>;</typedef>

<typedef>typedef <type><name>uint16_t</name></type> <name>drmp3_uint16</name>;</typedef>

<typedef>typedef <type><name>int32_t</name></type> <name>drmp3_int32</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>drmp3_uint32</name>;</typedef>

<typedef>typedef <type><name>int64_t</name></type> <name>drmp3_int64</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>drmp3_uint64</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>drmp3_uint8</name></type> <name>drmp3_bool8</name>;</typedef>

<typedef>typedef <type><name>drmp3_uint32</name></type> <name>drmp3_bool32</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MAX_PCM_FRAMES_PER_MP3_FRAME</name></cpp:macro> <cpp:value>1152</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MAX_SAMPLES_PER_FRAME</name></cpp:macro> <cpp:value>(DRMP3_MAX_PCM_FRAMES_PER_MP3_FRAME*2)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_INLINE</name></cpp:macro> <cpp:value>__forceinline</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_INLINE</name></cpp:macro> <cpp:value>__inline__ __attribute__((always_inline))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_INLINE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>frame_bytes</name></decl>, <name>channels</name>, <name>hz</name>, <name>layer</name>, <name>bitrate_kbps</name>;</decl_stmt>

}</block></struct></type> <name>drmp3dec_frame_info</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>float</name></type> <name><name>mdct_overlap</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">9</literal><operator>*</operator><literal type="number">32</literal></expr>]</index></name></decl>, <name><name>qmf_state</name><index>[<expr><literal type="number">15</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">32</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reserv</name></decl>, <name>free_format_bytes</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <name><name>reserv_buf</name><index>[<expr><literal type="number">511</literal></expr>]</index></name>;</decl_stmt>

}</block></struct></type> <name>drmp3dec</name>;</typedef>

<function_decl><type><name>void</name></type> <name>drmp3dec_init</name><parameter_list>(<parameter><decl><type><name>drmp3dec</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>drmp3dec_decode_frame</name><parameter_list>(<parameter><decl><type><name>drmp3dec</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mp3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mp3_bytes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>, <parameter><decl><type><name>drmp3dec_frame_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drmp3dec_f32_to_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>drmp3_int16</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_samples</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_DEFAULT_CHANNELS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_MP3_DEFAULT_CHANNELS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_DEFAULT_SAMPLE_RATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_MP3_DEFAULT_SAMPLE_RATE</name></cpp:macro> <cpp:value>44100</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>drmp3_src</name></name></type> <name>drmp3_src</name>;</typedef>

<typedef>typedef <function_decl><type><name>drmp3_uint64</name></type> (<modifier>*</modifier> <name>drmp3_src_read_proc</name>)<parameter_list>(<parameter><decl><type><name>drmp3_src</name><modifier>*</modifier></type> <name>pSRC</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pFramesOut</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl></typedef> 

<typedef>typedef <type><enum>enum

<block>{

<decl><name>drmp3_src_algorithm_none</name></decl>,

<decl><name>drmp3_src_algorithm_linear</name></decl>

}</block></enum></type> <name>drmp3_src_algorithm</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_SRC_CACHE_SIZE_IN_FRAMES</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drmp3_src</name><modifier>*</modifier></type> <name>pSRC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>pCachedFrames</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>DRMP3_SRC_CACHE_SIZE_IN_FRAMES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>cachedFrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>iNextFrame</name></decl>;</decl_stmt>

}</block></struct></type> <name>drmp3_src_cache</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>sampleRateIn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>sampleRateOut</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_src_algorithm</name></type> <name>algorithm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>cacheSizeInFrames</name></decl>;</decl_stmt> 

}</block></struct></type> <name>drmp3_src_config</name>;</typedef>

<struct>struct <name>drmp3_src</name>

<block>{

<decl_stmt><decl><type><name>drmp3_src_config</name></type> <name>config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_src_read_proc</name></type> <name>onRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>bin</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_src_cache</name></type> <name>cache</name></decl>;</decl_stmt> 

<union>union

<block>{

<struct>struct

<block>{

<decl_stmt><decl><type><name>double</name></type> <name>alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_bool32</name></type> <name>isPrevFramesLoaded</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_bool32</name></type> <name>isNextFramesLoaded</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block> <decl><name>linear</name></decl>;</struct>

}</block> <decl><name>algo</name></decl>;</union>

}</block>;</struct>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>drmp3_seek_origin_start</name></decl>,

<decl><name>drmp3_seek_origin_current</name></decl>

}</block></enum></type> <name>drmp3_seek_origin</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>seekPosInBytes</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>pcmFrameIndex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drmp3_uint16</name></type> <name>mp3FramesToDiscard</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drmp3_uint16</name></type> <name>pcmFramesToDiscard</name></decl>;</decl_stmt> 

}</block></struct></type> <name>drmp3_seek_point</name>;</typedef>

<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier> <name>drmp3_read_proc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>drmp3_bool32</name></type> (<modifier>*</modifier> <name>drmp3_seek_proc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>outputChannels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>outputSampleRate</name></decl>;</decl_stmt>

}</block></struct></type> <name>drmp3_config</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drmp3dec</name></type> <name>decoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3dec_frame_info</name></type> <name>frameInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_read_proc</name></type> <name>onRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_seek_proc</name></type> <name>onSeek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>mp3FrameChannels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>mp3FrameSampleRate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>pcmFramesConsumedInMP3Frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>pcmFramesRemainingInMP3Frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint8</name></type> <name><name>pcmFrames</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>DRMP3_MAX_SAMPLES_PER_FRAME</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>currentPCMFrame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>streamCursor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drmp3_src</name></type> <name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_seek_point</name><modifier>*</modifier></type> <name>pSeekPoints</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>seekPointCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>dataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dataCapacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint8</name><modifier>*</modifier></type> <name>pData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_bool32</name></type> <name>atEnd</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>drmp3_uint8</name><modifier>*</modifier></type> <name>pData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>currentReadPos</name></decl>;</decl_stmt>

}</block> <decl><name>memory</name></decl>;</struct> 

}</block></struct></type> <name>drmp3</name>;</typedef>

<function_decl><type><name>drmp3_bool32</name></type> <name>drmp3_init</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drmp3_bool32</name></type> <name>drmp3_init_memory</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>drmp3_bool32</name></type> <name>drmp3_init_file</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filePath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>drmp3_uninit</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drmp3_uint64</name></type> <name>drmp3_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drmp3_uint64</name></type> <name>drmp3_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>drmp3_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drmp3_bool32</name></type> <name>drmp3_seek_to_pcm_frame</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameIndex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drmp3_uint64</name></type> <name>drmp3_get_pcm_frame_count</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drmp3_uint64</name></type> <name>drmp3_get_mp3_frame_count</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drmp3_bool32</name></type> <name>drmp3_get_mp3_and_pcm_frame_count</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pMP3FrameCount</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pPCMFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drmp3_bool32</name></type> <name>drmp3_calculate_seek_points</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint32</name><modifier>*</modifier></type> <name>pSeekPointCount</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_point</name><modifier>*</modifier></type> <name>pSeekPoints</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drmp3_bool32</name></type> <name>drmp3_bind_seek_table</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint32</name></type> <name>seekPointCount</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_point</name><modifier>*</modifier></type> <name>pSeekPoints</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float</name><modifier>*</modifier></type> <name>drmp3_open_and_read_f32</name><parameter_list>(<parameter><decl><type><name>drmp3_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drmp3_int16</name><modifier>*</modifier></type> <name>drmp3_open_and_read_s16</name><parameter_list>(<parameter><decl><type><name>drmp3_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float</name><modifier>*</modifier></type> <name>drmp3_open_memory_and_read_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drmp3_int16</name><modifier>*</modifier></type> <name>drmp3_open_memory_and_read_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>float</name><modifier>*</modifier></type> <name>drmp3_open_file_and_read_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filePath</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drmp3_int16</name><modifier>*</modifier></type> <name>drmp3_open_file_and_read_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filePath</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>drmp3_free</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TINYC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_MP3_NO_SIMD</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_OFFSET_PTR</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void*)((drmp3_uint8*)(p) + (offset)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MAX_FREE_FORMAT_FRAME_SIZE</name></cpp:macro> <cpp:value>2304</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRMP3_MAX_FRAME_SYNC_MATCHES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MAX_FRAME_SYNC_MATCHES</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MAX_L3_FRAME_PAYLOAD_BYTES</name></cpp:macro> <cpp:value>DRMP3_MAX_FREE_FORMAT_FRAME_SIZE</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MAX_BITRESERVOIR_BYTES</name></cpp:macro> <cpp:value>511</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_SHORT_BLOCK_TYPE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_STOP_BLOCK_TYPE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MODE_MONO</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MODE_JOINT_STEREO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_IS_MONO</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((h[3]) &amp; 0xC0) == 0xC0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_IS_MS_STEREO</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((h[3]) &amp; 0xE0) == 0x60)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_IS_FREE_FORMAT</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((h[2]) &amp; 0xF0) == 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_IS_CRC</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!((h[1]) &amp; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_TEST_PADDING</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h[2]) &amp; 0x2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_TEST_MPEG1</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h[1]) &amp; 0x8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_TEST_NOT_MPEG25</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h[1]) &amp; 0x10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_TEST_I_STEREO</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h[3]) &amp; 0x10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_TEST_MS_STEREO</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h[3]) &amp; 0x20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_GET_STEREO_MODE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((h[3]) &gt;&gt; 6) &amp; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_GET_STEREO_MODE_EXT</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((h[3]) &gt;&gt; 4) &amp; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_GET_LAYER</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((h[1]) &gt;&gt; 1) &amp; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_GET_BITRATE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h[2]) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_GET_SAMPLE_RATE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((h[2]) &gt;&gt; 2) &amp; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_GET_MY_SAMPLE_RATE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DRMP3_HDR_GET_SAMPLE_RATE(h) + (((h[1] &gt;&gt; 3) &amp; 1) + ((h[1] &gt;&gt; 4) &amp; 1))*3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_IS_FRAME_576</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h[1] &amp; 14) == 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HDR_IS_LAYER_1</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h[1] &amp; 6) == 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_BITS_DEQUANTIZER_OUT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MAX_SCF</name></cpp:macro> <cpp:value>(255 + DRMP3_BITS_DEQUANTIZER_OUT*4 - 210)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MAX_SCFI</name></cpp:macro> <cpp:value>((DRMP3_MAX_SCF + 3) &amp; ~3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (b) : (a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (b) : (a))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_NO_SIMD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_ONLY_SIMD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_MP3_ONLY_SIMD</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SSE2__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emmintrin.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HAVE_SSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HAVE_SIMD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VSTORE</name></cpp:macro> <cpp:value>_mm_storeu_ps</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VLD</name></cpp:macro> <cpp:value>_mm_loadu_ps</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VSET</name></cpp:macro> <cpp:value>_mm_set1_ps</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VADD</name></cpp:macro> <cpp:value>_mm_add_ps</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VSUB</name></cpp:macro> <cpp:value>_mm_sub_ps</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VMUL</name></cpp:macro> <cpp:value>_mm_mul_ps</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VMAC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_add_ps(a, _mm_mul_ps(x, y))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VMSB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_sub_ps(a, _mm_mul_ps(x, y))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VMUL_S</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_mul_ps(x, _mm_set1_ps(s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VREV</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_shuffle_ps(x, x, _MM_SHUFFLE(0, 1, 2, 3))</cpp:value></cpp:define>

<typedef>typedef <type><name>__m128</name></type> <name>drmp3_f4</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_ONLY_SIMD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drmp3_cpuid</name></cpp:macro> <cpp:value>__cpuid</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>always_inline</name><operator>)</operator></expr></argument>)</argument_list> <name>void</name> <name>drmp3_cpuid</name><argument_list>(<argument><expr><name>int</name> <name><name>CPUInfo</name><index>[]</index></name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>InfoType</name></expr></argument>)</argument_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PIC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<asm>__asm__ <specifier>__volatile__</specifier>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

"push %%rbx\n"

"cpuid\n"

"xchgl %%ebx, %1\n"

"pop %%rbx\n"

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

"xchgl %%ebx, %1\n"

"cpuid\n"

"xchgl %%ebx, %1\n"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

: "=a" (CPUInfo[0]), "=r" (CPUInfo[1]), "=c" (CPUInfo[2]), "=d" (CPUInfo[3])

: "a" (InfoType));</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<asm>__asm__ <specifier>__volatile__</specifier>(

"cpuid"

: "=a" (CPUInfo[0]), "=b" (CPUInfo[1]), "=c" (CPUInfo[2]), "=d" (CPUInfo[3])

: "a" (InfoType));</asm>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>drmp3_have_simd</name><parameter_list>()</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_ONLY_SIMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_have_simd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>CPUInfo</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MINIMP3_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_counter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>g_counter</name><operator>++</operator> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>g_have_simd</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_cpuid</name><argument_list>(<argument><expr><name>CPUInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CPUInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_cpuid</name><argument_list>(<argument><expr><name>CPUInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_have_simd</name> <operator>=</operator> <operator>(</operator><name><name>CPUInfo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<return>return <expr><name>g_have_simd</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>

<return>return <expr><name>g_have_simd</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_NEON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arm_neon.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HAVE_SIMD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VSTORE</name></cpp:macro> <cpp:value>vst1q_f32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VLD</name></cpp:macro> <cpp:value>vld1q_f32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VSET</name></cpp:macro> <cpp:value>vmovq_n_f32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VADD</name></cpp:macro> <cpp:value>vaddq_f32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VSUB</name></cpp:macro> <cpp:value>vsubq_f32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VMUL</name></cpp:macro> <cpp:value>vmulq_f32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VMAC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vmlaq_f32(a, x, y)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VMSB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vmlsq_f32(a, x, y)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VMUL_S</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vmulq_f32(x, vmovq_n_f32(s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VREV</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vcombine_f32(vget_high_f32(vrev64q_f32(x)), vget_low_f32(vrev64q_f32(x)))</cpp:value></cpp:define>

<typedef>typedef <type><name>float32x4_t</name></type> <name>drmp3_f4</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>drmp3_have_simd</name><parameter_list>()</parameter_list>

<block>{<block_content> 

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HAVE_SIMD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_ONLY_SIMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> DR_MP3_ONLY_SIMD used, but SSE/NEON not enabled</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_HAVE_SIMD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <name>limit</name>;</decl_stmt>

}</block></struct></type> <name>drmp3_bs</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>float</name></type> <name><name>scf</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint8</name></type> <name>total_bands</name></decl>, <name>stereo_bands</name>, <name><name>bitalloc</name><index>[<expr><literal type="number">64</literal></expr>]</index></name>, <name><name>scfcod</name><index>[<expr><literal type="number">64</literal></expr>]</index></name>;</decl_stmt>

}</block></struct></type> <name>drmp3_L12_scale_info</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drmp3_uint8</name></type> <name>tab_offset</name></decl>, <name>code_tab_width</name>, <name>band_count</name>;</decl_stmt>

}</block></struct></type> <name>drmp3_L12_subband_alloc</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>sfbtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint16</name></type> <name>part_23_length</name></decl>, <name>big_values</name>, <name>scalefac_compress</name>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint8</name></type> <name>global_gain</name></decl>, <name>block_type</name>, <name>mixed_block_flag</name>, <name>n_long_sfb</name>, <name>n_short_sfb</name>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint8</name></type> <name><name>table_select</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <name><name>region_count</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>, <name><name>subblock_gain</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint8</name></type> <name>preflag</name></decl>, <name>scalefac_scale</name>, <name>count1_table</name>, <name>scfsi</name>;</decl_stmt>

}</block></struct></type> <name>drmp3_L3_gr_info</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drmp3_bs</name></type> <name>bs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint8</name></type> <name><name>maindata</name><index>[<expr><name>DRMP3_MAX_BITRESERVOIR_BYTES</name> <operator>+</operator> <name>DRMP3_MAX_L3_FRAME_PAYLOAD_BYTES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_L3_gr_info</name></type> <name><name>gr_info</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>grbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">576</literal></expr>]</index></name></decl>, <name><name>scf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name>, <name><name>syn</name><index>[<expr><literal type="number">18</literal> <operator>+</operator> <literal type="number">15</literal></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">32</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint8</name></type> <name><name>ist_pos</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">39</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>drmp3dec_scratch</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_bs_init</name><parameter_list>(<parameter><decl><type><name>drmp3_bs</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>bytes</name><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drmp3_uint32</name></type> <name>drmp3_bs_get_bits</name><parameter_list>(<parameter><decl><type><name>drmp3_bs</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>next</name></decl>, <decl><type ref="prev"/><name>cache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>pos</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shl</name> <init>= <expr><name>n</name> <operator>+</operator> <name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>n</name><operator>)</operator> <operator>&gt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>&amp;</operator> <operator>(</operator><literal type="number">255</literal> <operator>&gt;&gt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>shl</name> <operator>-=</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cache</name> <operator>|=</operator> <name>next</name> <operator>&lt;&lt;</operator> <name>shl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>cache</name> <operator>|</operator> <operator>(</operator><name>next</name> <operator>&gt;&gt;</operator> <operator>-</operator><name>shl</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>drmp3_hdr_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf0</literal> <operator>||</operator> <operator>(</operator><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFE</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe2</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>DRMP3_HDR_GET_LAYER</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>DRMP3_HDR_GET_BITRATE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>DRMP3_HDR_GET_SAMPLE_RATE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>drmp3_hdr_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>h1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>h2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drmp3_hdr_valid</name><argument_list>(<argument><expr><name>h2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>h1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>h2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFE</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>h1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>h2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0C</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><call><name>DRMP3_HDR_IS_FREE_FORMAT</name><argument_list>(<argument><expr><name>h1</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>DRMP3_HDR_IS_FREE_FORMAT</name><argument_list>(<argument><expr><name>h2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>drmp3_hdr_bitrate_kbps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_uint8</name></type> <name><name>halfrate</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">64</literal></expr>,<expr><literal type="number">72</literal></expr>,<expr><literal type="number">80</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">64</literal></expr>,<expr><literal type="number">72</literal></expr>,<expr><literal type="number">80</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">64</literal></expr>,<expr><literal type="number">72</literal></expr>,<expr><literal type="number">80</literal></expr>,<expr><literal type="number">88</literal></expr>,<expr><literal type="number">96</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">128</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">64</literal></expr>,<expr><literal type="number">80</literal></expr>,<expr><literal type="number">96</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">160</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">64</literal></expr>,<expr><literal type="number">80</literal></expr>,<expr><literal type="number">96</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">160</literal></expr>,<expr><literal type="number">192</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">64</literal></expr>,<expr><literal type="number">80</literal></expr>,<expr><literal type="number">96</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">160</literal></expr>,<expr><literal type="number">176</literal></expr>,<expr><literal type="number">192</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><literal type="number">224</literal></expr> }</block></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><literal type="number">2</literal><operator>*</operator><name><name>halfrate</name><index>[<expr><operator>!</operator><operator>!</operator><call><name>DRMP3_HDR_TEST_MPEG1</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><call><name>DRMP3_HDR_GET_LAYER</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><call><name>DRMP3_HDR_GET_BITRATE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>drmp3_hdr_sample_rate_hz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>g_hz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">32000</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>g_hz</name><index>[<expr><call><name>DRMP3_HDR_GET_SAMPLE_RATE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>!</operator><call><name>DRMP3_HDR_TEST_MPEG1</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>!</operator><call><name>DRMP3_HDR_TEST_NOT_MPEG25</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>drmp3_hdr_frame_samples</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>DRMP3_HDR_IS_LAYER_1</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">384</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">1152</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>DRMP3_HDR_IS_FRAME_576</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>drmp3_hdr_frame_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>free_format_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>frame_bytes</name> <init>= <expr><call><name>drmp3_hdr_frame_samples</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>*</operator><call><name>drmp3_hdr_bitrate_kbps</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">125</literal><operator>/</operator><call><name>drmp3_hdr_sample_rate_hz</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DRMP3_HDR_IS_LAYER_1</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>frame_bytes</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>frame_bytes</name></expr> ?</condition><then> <expr><name>frame_bytes</name></expr> </then><else>: <expr><name>free_format_size</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>drmp3_hdr_padding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>DRMP3_HDR_TEST_PADDING</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><call><name>DRMP3_HDR_IS_LAYER_1</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_ONLY_MP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_L12_subband_alloc</name> <modifier>*</modifier></type><name>drmp3_L12_subband_alloc_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>drmp3_L12_scale_info</name> <modifier>*</modifier></type><name>sci</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>drmp3_L12_subband_alloc</name> <modifier>*</modifier></type><name>alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name>DRMP3_HDR_GET_STEREO_MODE</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nbands</name></decl>, <decl><type ref="prev"/><name>stereo_bands</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>mode</name> <operator>==</operator> <name>DRMP3_MODE_MONO</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>mode</name> <operator>==</operator> <name>DRMP3_MODE_JOINT_STEREO</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><call><name>DRMP3_HDR_GET_STEREO_MODE_EXT</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DRMP3_HDR_IS_LAYER_1</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_L12_subband_alloc</name></type> <name><name>g_alloc_L1</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">76</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <name>g_alloc_L1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nbands</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>DRMP3_HDR_TEST_MPEG1</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_L12_subband_alloc</name></type> <name><name>g_alloc_L2M2</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <name>g_alloc_L2M2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nbands</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_L12_subband_alloc</name></type> <name><name>g_alloc_L2M1</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate_idx</name> <init>= <expr><call><name>DRMP3_HDR_GET_SAMPLE_RATE</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>kbps</name> <init>= <expr><call><name>drmp3_hdr_bitrate_kbps</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>mode</name> <operator>!=</operator> <name>DRMP3_MODE_MONO</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kbps</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>kbps</name> <operator>=</operator> <literal type="number">192</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <name>g_alloc_L2M1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nbands</name> <operator>=</operator> <literal type="number">27</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kbps</name> <operator>&lt;</operator> <literal type="number">56</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_L12_subband_alloc</name></type> <name><name>g_alloc_L2M1_lowrate</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <name>g_alloc_L2M1_lowrate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nbands</name> <operator>=</operator> <ternary><condition><expr><name>sample_rate_idx</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>kbps</name> <operator>&gt;=</operator> <literal type="number">96</literal> <operator>&amp;&amp;</operator> <name>sample_rate_idx</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nbands</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sci</name><operator>-&gt;</operator><name>total_bands</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><name>nbands</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sci</name><operator>-&gt;</operator><name>stereo_bands</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><call><name>DRMP3_MIN</name><argument_list>(<argument><expr><name>stereo_bands</name></expr></argument>, <argument><expr><name>nbands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>alloc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L12_read_scalefactors</name><parameter_list>(<parameter><decl><type><name>drmp3_bs</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint8</name> <modifier>*</modifier></type><name>pba</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint8</name> <modifier>*</modifier></type><name>scfcod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bands</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>scf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g_deq_L12</name><index>[<expr><literal type="number">18</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_DQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>9.53674316e-07f/x, 7.56931807e-07f/x, 6.00777173e-07f/x</cpp:value></cpp:define>

<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">511</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">1023</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">2047</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">4095</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">8191</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">16383</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>DRMP3_DQ</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>,<macro><name>DRMP3_DQ</name><argument_list>(<argument><literal type="number">9</literal></argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ba</name> <init>= <expr><operator>*</operator><name>pba</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><ternary><condition><expr><name>ba</name></expr> ?</condition><then> <expr><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">19</literal> <operator>&gt;&gt;</operator> <name><name>scfcod</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>m</name></expr>;</condition> <incr><expr><name>m</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>m</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>g_deq_L12</name><index>[<expr><name>ba</name><operator>*</operator><literal type="number">3</literal> <operator>-</operator> <literal type="number">6</literal> <operator>+</operator> <name>b</name> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal> <operator>&gt;&gt;</operator> <name>b</name><operator>/</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>scf</name><operator>++</operator> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L12_read_scale_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>drmp3_bs</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>drmp3_L12_scale_info</name> <modifier>*</modifier></type><name>sci</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_uint8</name></type> <name><name>g_bitalloc_code_tab</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">17</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">16</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">16</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">16</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drmp3_L12_subband_alloc</name> <modifier>*</modifier></type><name>subband_alloc</name> <init>= <expr><call><name>drmp3_L12_subband_alloc_table</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>sci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ba_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>ba_code_tab</name> <init>= <expr><name>g_bitalloc_code_tab</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sci</name><operator>-&gt;</operator><name>total_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint8</name></type> <name>ba</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>k</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <name><name>subband_alloc</name><operator>-&gt;</operator><name>band_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ba_bits</name> <operator>=</operator> <name><name>subband_alloc</name><operator>-&gt;</operator><name>code_tab_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ba_code_tab</name> <operator>=</operator> <name>g_bitalloc_code_tab</name> <operator>+</operator> <name><name>subband_alloc</name><operator>-&gt;</operator><name>tab_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>subband_alloc</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ba</name> <operator>=</operator> <name><name>ba_code_tab</name><index>[<expr><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>ba_bits</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sci</name><operator>-&gt;</operator><name>bitalloc</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>ba</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>sci</name><operator>-&gt;</operator><name>stereo_bands</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ba</name> <operator>=</operator> <name><name>ba_code_tab</name><index>[<expr><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>ba_bits</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sci</name><operator>-&gt;</operator><name>bitalloc</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>sci</name><operator>-&gt;</operator><name>stereo_bands</name></name></expr> ?</condition><then> <expr><name>ba</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name><name>sci</name><operator>-&gt;</operator><name>total_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>sci</name><operator>-&gt;</operator><name>scfcod</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name><name>sci</name><operator>-&gt;</operator><name>bitalloc</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><ternary><condition><expr><call><name>DRMP3_HDR_IS_LAYER_1</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>drmp3_L12_read_scalefactors</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>sci</name><operator>-&gt;</operator><name>bitalloc</name></name></expr></argument>, <argument><expr><name><name>sci</name><operator>-&gt;</operator><name>scfcod</name></name></expr></argument>, <argument><expr><name><name>sci</name><operator>-&gt;</operator><name>total_bands</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>sci</name><operator>-&gt;</operator><name>scf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>sci</name><operator>-&gt;</operator><name>stereo_bands</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sci</name><operator>-&gt;</operator><name>total_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>sci</name><operator>-&gt;</operator><name>bitalloc</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>drmp3_L12_dequantize_granule</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>grbuf</name></decl></parameter>, <parameter><decl><type><name>drmp3_bs</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>drmp3_L12_scale_info</name> <modifier>*</modifier></type><name>sci</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>choff</name> <init>= <expr><literal type="number">576</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>grbuf</name> <operator>+</operator> <name>group_size</name><operator>*</operator><name>j</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name><name>sci</name><operator>-&gt;</operator><name>total_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ba</name> <init>= <expr><name><name>sci</name><operator>-&gt;</operator><name>bitalloc</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ba</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ba</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>half</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>ba</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>group_size</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>ba</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>half</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mod</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>ba</name> <operator>-</operator> <literal type="number">17</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>code</name> <init>= <expr><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>mod</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>mod</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>group_size</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr><operator>,</operator> <expr><name>code</name> <operator>/=</operator> <name>mod</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>code</name> <operator>%</operator> <name>mod</name> <operator>-</operator> <name>mod</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>choff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>choff</name> <operator>=</operator> <literal type="number">18</literal> <operator>-</operator> <name>choff</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>group_size</name><operator>*</operator><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L12_apply_scf_384</name><parameter_list>(<parameter><decl><type><name>drmp3_L12_scale_info</name> <modifier>*</modifier></type><name>sci</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">576</literal> <operator>+</operator> <name><name>sci</name><operator>-&gt;</operator><name>stereo_bands</name></name><operator>*</operator><literal type="number">18</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name><name>sci</name><operator>-&gt;</operator><name>stereo_bands</name></name><operator>*</operator><literal type="number">18</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>sci</name><operator>-&gt;</operator><name>total_bands</name></name> <operator>-</operator> <name><name>sci</name><operator>-&gt;</operator><name>stereo_bands</name></name><operator>)</operator><operator>*</operator><literal type="number">18</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sci</name><operator>-&gt;</operator><name>total_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <literal type="number">18</literal></expr><operator>,</operator> <expr><name>scf</name> <operator>+=</operator> <literal type="number">6</literal></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name><name>scf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">576</literal></expr>]</index></name> <operator>*=</operator> <name><name>scf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>drmp3_L3_read_side_info</name><parameter_list>(<parameter><decl><type><name>drmp3_bs</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>drmp3_L3_gr_info</name> <modifier>*</modifier></type><name>gr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_uint8</name></type> <name><name>g_scf_long</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">23</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">38</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">52</literal></expr>,<expr><literal type="number">60</literal></expr>,<expr><literal type="number">68</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">64</literal></expr>,<expr><literal type="number">76</literal></expr>,<expr><literal type="number">90</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">38</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">52</literal></expr>,<expr><literal type="number">60</literal></expr>,<expr><literal type="number">68</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">38</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">62</literal></expr>,<expr><literal type="number">70</literal></expr>,<expr><literal type="number">76</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">38</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">52</literal></expr>,<expr><literal type="number">60</literal></expr>,<expr><literal type="number">68</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">50</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">76</literal></expr>,<expr><literal type="number">158</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">192</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">38</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">68</literal></expr>,<expr><literal type="number">84</literal></expr>,<expr><literal type="number">102</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_uint8</name></type> <name><name>g_scf_short</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">66</literal></expr>,<expr><literal type="number">66</literal></expr>,<expr><literal type="number">66</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_uint8</name></type> <name><name>g_scf_mixed</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">66</literal></expr>,<expr><literal type="number">66</literal></expr>,<expr><literal type="number">66</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>tables</name></decl>, <decl><type ref="prev"/><name>scfsi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>main_data_begin</name></decl>, <decl><type ref="prev"/><name>part_23_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gr_count</name> <init>= <expr><ternary><condition><expr><call><name>DRMP3_HDR_IS_MONO</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sr_idx</name> <init>= <expr><call><name>DRMP3_HDR_GET_MY_SAMPLE_RATE</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>sr_idx</name> <operator>-=</operator> <operator>(</operator><name>sr_idx</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DRMP3_HDR_TEST_MPEG1</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>gr_count</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>main_data_begin</name> <operator>=</operator> <call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scfsi</name> <operator>=</operator> <call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>+</operator> <name>gr_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<expr_stmt><expr><name>main_data_begin</name> <operator>=</operator> <call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <name>gr_count</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>gr_count</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>DRMP3_HDR_IS_MONO</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>scfsi</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>part_23_length</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint16</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>part_23_sum</name> <operator>+=</operator> <name><name>gr</name><operator>-&gt;</operator><name>part_23_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>big_values</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint16</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gr</name><operator>-&gt;</operator><name>big_values</name></name> <operator>&gt;</operator> <literal type="number">288</literal></expr>)</condition>

<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>global_gain</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>scalefac_compress</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint16</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>DRMP3_HDR_TEST_MPEG1</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">9</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>sfbtab</name></name> <operator>=</operator> <name><name>g_scf_long</name><index>[<expr><name>sr_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>n_long_sfb</name></name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>n_short_sfb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>block_type</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gr</name><operator>-&gt;</operator><name>block_type</name></name></expr>)</condition>

<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>mixed_block_flag</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>region_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>region_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gr</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <name>DRMP3_SHORT_BLOCK_TYPE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>scfsi</name> <operator>&amp;=</operator> <literal type="number">0x0F0F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gr</name><operator>-&gt;</operator><name>mixed_block_flag</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>region_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>sfbtab</name></name> <operator>=</operator> <name><name>g_scf_short</name><index>[<expr><name>sr_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>n_long_sfb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>n_short_sfb</name></name> <operator>=</operator> <literal type="number">39</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>sfbtab</name></name> <operator>=</operator> <name><name>g_scf_mixed</name><index>[<expr><name>sr_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>n_long_sfb</name></name> <operator>=</operator> <ternary><condition><expr><call><name>DRMP3_HDR_TEST_MPEG1</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>n_short_sfb</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tables</name> <operator>=</operator> <call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tables</name> <operator>&lt;&lt;=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>subblock_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>subblock_gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>subblock_gain</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>block_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>mixed_block_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tables</name> <operator>=</operator> <call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>region_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>region_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>region_count</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>table_select</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><operator>(</operator><name>tables</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>table_select</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tables</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>table_select</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tables</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>preflag</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>DRMP3_HDR_TEST_MPEG1</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name><name>gr</name><operator>-&gt;</operator><name>scalefac_compress</name></name> <operator>&gt;=</operator> <literal type="number">500</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>scalefac_scale</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>count1_table</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>-&gt;</operator><name>scfsi</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>scfsi</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>scfsi</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><operator>--</operator><name>gr_count</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>part_23_sum</name> <operator>+</operator> <name><name>bs</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>limit</name></name> <operator>+</operator> <name>main_data_begin</name><operator>*</operator><literal type="number">8</literal></expr>)</condition>

<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>main_data_begin</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_read_scalefactors</name><parameter_list>(<parameter><decl><type><name>drmp3_uint8</name> <modifier>*</modifier></type><name>scf</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint8</name> <modifier>*</modifier></type><name>ist_pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>scf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>scf_count</name></decl></parameter>, <parameter><decl><type><name>drmp3_bs</name> <modifier>*</modifier></type><name>bitbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scfsi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>scf_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>scfsi</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name><name>scf_count</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scfsi</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>scf</name></expr></argument>, <argument><expr><name>ist_pos</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>scf_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bits</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>scf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ist_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_scf</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>scfsi</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ist_pos</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>s</name> <operator>==</operator> <name>max_scf</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>s</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ist_pos</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scf</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>scf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>scf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>scf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>drmp3_L3_ldexp_q2</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exp_q2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g_expfrac</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">9.31322575e-10f</literal></expr>,<expr><literal type="number">7.83145814e-10f</literal></expr>,<expr><literal type="number">6.58544508e-10f</literal></expr>,<expr><literal type="number">5.53767716e-10f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>DRMP3_MIN</name><argument_list>(<argument><expr><literal type="number">30</literal><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>exp_q2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>*=</operator> <name><name>g_expfrac</name><index>[<expr><name>e</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>(</operator><name>exp_q2</name> <operator>-=</operator> <name>e</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_decode_scalefactors</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint8</name> <modifier>*</modifier></type><name>ist_pos</name></decl></parameter>, <parameter><decl><type><name>drmp3_bs</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_L3_gr_info</name> <modifier>*</modifier></type><name>gr</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>scf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_uint8</name></type> <name><name>g_scf_partitions</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">28</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>scf_partition</name> <init>= <expr><name><name>g_scf_partitions</name><index>[<expr><operator>!</operator><operator>!</operator><name><name>gr</name><operator>-&gt;</operator><name>n_short_sfb</name></name> <operator>+</operator> <operator>!</operator><name><name>gr</name><operator>-&gt;</operator><name>n_long_sfb</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint8</name></type> <name><name>scf_size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>iscf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>scf_shift</name> <init>= <expr><name><name>gr</name><operator>-&gt;</operator><name>scalefac_scale</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>gain_exp</name></decl>, <decl><type ref="prev"/><name>scfsi</name> <init>= <expr><name><name>gr</name><operator>-&gt;</operator><name>scfsi</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>gain</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DRMP3_HDR_TEST_MPEG1</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_uint8</name></type> <name><name>g_scfc_decode</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>part</name> <init>= <expr><name><name>g_scfc_decode</name><index>[<expr><name><name>gr</name><operator>-&gt;</operator><name>scalefac_compress</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>scf_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>scf_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><operator>(</operator><name>part</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scf_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>scf_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><operator>(</operator><name>part</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_uint8</name></type> <name><name>g_mod</name><index>[<expr><literal type="number">6</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>modprod</name></decl>, <decl><type ref="prev"/><name>sfc</name></decl>, <decl><type ref="prev"/><name>ist</name> <init>= <expr><call><name>DRMP3_HDR_TEST_I_STEREO</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ch</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sfc</name> <operator>=</operator> <name><name>gr</name><operator>-&gt;</operator><name>scalefac_compress</name></name> <operator>&gt;&gt;</operator> <name>ist</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>ist</name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>sfc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>sfc</name> <operator>-=</operator> <name>modprod</name></expr><operator>,</operator> <expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><expr><name>modprod</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>scf_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><operator>(</operator><name>sfc</name> <operator>/</operator> <name>modprod</name> <operator>%</operator> <name><name>g_mod</name><index>[<expr><name>k</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>modprod</name> <operator>*=</operator> <name><name>g_mod</name><index>[<expr><name>k</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>scf_partition</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scfsi</name> <operator>=</operator> <operator>-</operator><literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>drmp3_L3_read_scalefactors</name><argument_list>(<argument><expr><name>iscf</name></expr></argument>, <argument><expr><name>ist_pos</name></expr></argument>, <argument><expr><name>scf_size</name></expr></argument>, <argument><expr><name>scf_partition</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>scfsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gr</name><operator>-&gt;</operator><name>n_short_sfb</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><literal type="number">3</literal> <operator>-</operator> <name>scf_shift</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gr</name><operator>-&gt;</operator><name>n_short_sfb</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>iscf</name><index>[<expr><name><name>gr</name><operator>-&gt;</operator><name>n_long_sfb</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>gr</name><operator>-&gt;</operator><name>subblock_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>sh</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iscf</name><index>[<expr><name><name>gr</name><operator>-&gt;</operator><name>n_long_sfb</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>gr</name><operator>-&gt;</operator><name>subblock_gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>sh</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iscf</name><index>[<expr><name><name>gr</name><operator>-&gt;</operator><name>n_long_sfb</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>gr</name><operator>-&gt;</operator><name>subblock_gain</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>sh</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>gr</name><operator>-&gt;</operator><name>preflag</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_uint8</name></type> <name><name>g_preamp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>iscf</name><index>[<expr><literal type="number">11</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>g_preamp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gain_exp</name> <operator>=</operator> <name><name>gr</name><operator>-&gt;</operator><name>global_gain</name></name> <operator>+</operator> <name>DRMP3_BITS_DEQUANTIZER_OUT</name><operator>*</operator><literal type="number">4</literal> <operator>-</operator> <literal type="number">210</literal> <operator>-</operator> <operator>(</operator><ternary><condition><expr><call><name>DRMP3_HDR_IS_MS_STEREO</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>drmp3_L3_ldexp_q2</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DRMP3_MAX_SCFI</name><operator>/</operator><literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name>DRMP3_MAX_SCFI</name> <operator>-</operator> <name>gain_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>gr</name><operator>-&gt;</operator><name>n_long_sfb</name></name> <operator>+</operator> <name><name>gr</name><operator>-&gt;</operator><name>n_short_sfb</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>scf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>drmp3_L3_ldexp_q2</name><argument_list>(<argument><expr><name>gain</name></expr></argument>, <argument><expr><name><name>iscf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scf_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g_drmp3_pow43</name><index>[<expr><literal type="number">129</literal> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">2.519842f</literal></expr>,<expr><operator>-</operator><literal type="number">4.326749f</literal></expr>,<expr><operator>-</operator><literal type="number">6.349604f</literal></expr>,<expr><operator>-</operator><literal type="number">8.549880f</literal></expr>,<expr><operator>-</operator><literal type="number">10.902724f</literal></expr>,<expr><operator>-</operator><literal type="number">13.390518f</literal></expr>,<expr><operator>-</operator><literal type="number">16.000000f</literal></expr>,<expr><operator>-</operator><literal type="number">18.720754f</literal></expr>,<expr><operator>-</operator><literal type="number">21.544347f</literal></expr>,<expr><operator>-</operator><literal type="number">24.463781f</literal></expr>,<expr><operator>-</operator><literal type="number">27.473142f</literal></expr>,<expr><operator>-</operator><literal type="number">30.567351f</literal></expr>,<expr><operator>-</operator><literal type="number">33.741992f</literal></expr>,<expr><operator>-</operator><literal type="number">36.993181f</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2.519842f</literal></expr>,<expr><literal type="number">4.326749f</literal></expr>,<expr><literal type="number">6.349604f</literal></expr>,<expr><literal type="number">8.549880f</literal></expr>,<expr><literal type="number">10.902724f</literal></expr>,<expr><literal type="number">13.390518f</literal></expr>,<expr><literal type="number">16.000000f</literal></expr>,<expr><literal type="number">18.720754f</literal></expr>,<expr><literal type="number">21.544347f</literal></expr>,<expr><literal type="number">24.463781f</literal></expr>,<expr><literal type="number">27.473142f</literal></expr>,<expr><literal type="number">30.567351f</literal></expr>,<expr><literal type="number">33.741992f</literal></expr>,<expr><literal type="number">36.993181f</literal></expr>,<expr><literal type="number">40.317474f</literal></expr>,<expr><literal type="number">43.711787f</literal></expr>,<expr><literal type="number">47.173345f</literal></expr>,<expr><literal type="number">50.699631f</literal></expr>,<expr><literal type="number">54.288352f</literal></expr>,<expr><literal type="number">57.937408f</literal></expr>,<expr><literal type="number">61.644865f</literal></expr>,<expr><literal type="number">65.408941f</literal></expr>,<expr><literal type="number">69.227979f</literal></expr>,<expr><literal type="number">73.100443f</literal></expr>,<expr><literal type="number">77.024898f</literal></expr>,<expr><literal type="number">81.000000f</literal></expr>,<expr><literal type="number">85.024491f</literal></expr>,<expr><literal type="number">89.097188f</literal></expr>,<expr><literal type="number">93.216975f</literal></expr>,<expr><literal type="number">97.382800f</literal></expr>,<expr><literal type="number">101.593667f</literal></expr>,<expr><literal type="number">105.848633f</literal></expr>,<expr><literal type="number">110.146801f</literal></expr>,<expr><literal type="number">114.487321f</literal></expr>,<expr><literal type="number">118.869381f</literal></expr>,<expr><literal type="number">123.292209f</literal></expr>,<expr><literal type="number">127.755065f</literal></expr>,<expr><literal type="number">132.257246f</literal></expr>,<expr><literal type="number">136.798076f</literal></expr>,<expr><literal type="number">141.376907f</literal></expr>,<expr><literal type="number">145.993119f</literal></expr>,<expr><literal type="number">150.646117f</literal></expr>,<expr><literal type="number">155.335327f</literal></expr>,<expr><literal type="number">160.060199f</literal></expr>,<expr><literal type="number">164.820202f</literal></expr>,<expr><literal type="number">169.614826f</literal></expr>,<expr><literal type="number">174.443577f</literal></expr>,<expr><literal type="number">179.305980f</literal></expr>,<expr><literal type="number">184.201575f</literal></expr>,<expr><literal type="number">189.129918f</literal></expr>,<expr><literal type="number">194.090580f</literal></expr>,<expr><literal type="number">199.083145f</literal></expr>,<expr><literal type="number">204.107210f</literal></expr>,<expr><literal type="number">209.162385f</literal></expr>,<expr><literal type="number">214.248292f</literal></expr>,<expr><literal type="number">219.364564f</literal></expr>,<expr><literal type="number">224.510845f</literal></expr>,<expr><literal type="number">229.686789f</literal></expr>,<expr><literal type="number">234.892058f</literal></expr>,<expr><literal type="number">240.126328f</literal></expr>,<expr><literal type="number">245.389280f</literal></expr>,<expr><literal type="number">250.680604f</literal></expr>,<expr><literal type="number">256.000000f</literal></expr>,<expr><literal type="number">261.347174f</literal></expr>,<expr><literal type="number">266.721841f</literal></expr>,<expr><literal type="number">272.123723f</literal></expr>,<expr><literal type="number">277.552547f</literal></expr>,<expr><literal type="number">283.008049f</literal></expr>,<expr><literal type="number">288.489971f</literal></expr>,<expr><literal type="number">293.998060f</literal></expr>,<expr><literal type="number">299.532071f</literal></expr>,<expr><literal type="number">305.091761f</literal></expr>,<expr><literal type="number">310.676898f</literal></expr>,<expr><literal type="number">316.287249f</literal></expr>,<expr><literal type="number">321.922592f</literal></expr>,<expr><literal type="number">327.582707f</literal></expr>,<expr><literal type="number">333.267377f</literal></expr>,<expr><literal type="number">338.976394f</literal></expr>,<expr><literal type="number">344.709550f</literal></expr>,<expr><literal type="number">350.466646f</literal></expr>,<expr><literal type="number">356.247482f</literal></expr>,<expr><literal type="number">362.051866f</literal></expr>,<expr><literal type="number">367.879608f</literal></expr>,<expr><literal type="number">373.730522f</literal></expr>,<expr><literal type="number">379.604427f</literal></expr>,<expr><literal type="number">385.501143f</literal></expr>,<expr><literal type="number">391.420496f</literal></expr>,<expr><literal type="number">397.362314f</literal></expr>,<expr><literal type="number">403.326427f</literal></expr>,<expr><literal type="number">409.312672f</literal></expr>,<expr><literal type="number">415.320884f</literal></expr>,<expr><literal type="number">421.350905f</literal></expr>,<expr><literal type="number">427.402579f</literal></expr>,<expr><literal type="number">433.475750f</literal></expr>,<expr><literal type="number">439.570269f</literal></expr>,<expr><literal type="number">445.685987f</literal></expr>,<expr><literal type="number">451.822757f</literal></expr>,<expr><literal type="number">457.980436f</literal></expr>,<expr><literal type="number">464.158883f</literal></expr>,<expr><literal type="number">470.357960f</literal></expr>,<expr><literal type="number">476.577530f</literal></expr>,<expr><literal type="number">482.817459f</literal></expr>,<expr><literal type="number">489.077615f</literal></expr>,<expr><literal type="number">495.357868f</literal></expr>,<expr><literal type="number">501.658090f</literal></expr>,<expr><literal type="number">507.978156f</literal></expr>,<expr><literal type="number">514.317941f</literal></expr>,<expr><literal type="number">520.677324f</literal></expr>,<expr><literal type="number">527.056184f</literal></expr>,<expr><literal type="number">533.454404f</literal></expr>,<expr><literal type="number">539.871867f</literal></expr>,<expr><literal type="number">546.308458f</literal></expr>,<expr><literal type="number">552.764065f</literal></expr>,<expr><literal type="number">559.238575f</literal></expr>,<expr><literal type="number">565.731879f</literal></expr>,<expr><literal type="number">572.243870f</literal></expr>,<expr><literal type="number">578.774440f</literal></expr>,<expr><literal type="number">585.323483f</literal></expr>,<expr><literal type="number">591.890898f</literal></expr>,<expr><literal type="number">598.476581f</literal></expr>,<expr><literal type="number">605.080431f</literal></expr>,<expr><literal type="number">611.702349f</literal></expr>,<expr><literal type="number">618.342238f</literal></expr>,<expr><literal type="number">625.000000f</literal></expr>,<expr><literal type="number">631.675540f</literal></expr>,<expr><literal type="number">638.368763f</literal></expr>,<expr><literal type="number">645.079578f</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>float</name></type> <name>drmp3_L3_pow_43</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>frac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>mult</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">129</literal></expr>)</condition>

<block>{<block_content>

<return>return <expr><name><name>g_drmp3_pow43</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>mult</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>frac</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">63</literal><operator>)</operator> <operator>-</operator> <name>sign</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">63</literal><operator>)</operator> <operator>+</operator> <name>sign</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name><name>g_drmp3_pow43</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <name>sign</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>]</index></name><operator>*</operator><operator>(</operator><literal type="number">1.f</literal> <operator>+</operator> <name>frac</name><operator>*</operator><operator>(</operator><operator>(</operator><literal type="number">4.f</literal><operator>/</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>frac</name><operator>*</operator><operator>(</operator><literal type="number">2.f</literal><operator>/</operator><literal type="number">9</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>*</operator><name>mult</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_huffman</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>drmp3_bs</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_L3_gr_info</name> <modifier>*</modifier></type><name>gr_info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>layer3gr_limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_int16</name></type> <name><name>tabs</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">513</literal></expr>,<expr><literal type="number">513</literal></expr>,<expr><literal type="number">513</literal></expr>,<expr><literal type="number">513</literal></expr>,<expr><literal type="number">513</literal></expr>,<expr><literal type="number">513</literal></expr>,<expr><literal type="number">513</literal></expr>,<expr><literal type="number">513</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,

<expr><operator>-</operator><literal type="number">255</literal></expr>,<expr><literal type="number">1313</literal></expr>,<expr><literal type="number">1298</literal></expr>,<expr><literal type="number">1282</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">290</literal></expr>,<expr><literal type="number">288</literal></expr>,

<expr><operator>-</operator><literal type="number">255</literal></expr>,<expr><literal type="number">1313</literal></expr>,<expr><literal type="number">1298</literal></expr>,<expr><literal type="number">1282</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">528</literal></expr>,<expr><literal type="number">528</literal></expr>,<expr><literal type="number">528</literal></expr>,<expr><literal type="number">528</literal></expr>,<expr><literal type="number">528</literal></expr>,<expr><literal type="number">528</literal></expr>,<expr><literal type="number">528</literal></expr>,<expr><literal type="number">528</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">290</literal></expr>,<expr><literal type="number">288</literal></expr>,

<expr><operator>-</operator><literal type="number">253</literal></expr>,<expr><operator>-</operator><literal type="number">318</literal></expr>,<expr><operator>-</operator><literal type="number">351</literal></expr>,<expr><operator>-</operator><literal type="number">367</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">819</literal></expr>,<expr><literal type="number">818</literal></expr>,<expr><literal type="number">547</literal></expr>,<expr><literal type="number">547</literal></expr>,<expr><literal type="number">275</literal></expr>,<expr><literal type="number">275</literal></expr>,<expr><literal type="number">275</literal></expr>,<expr><literal type="number">275</literal></expr>,<expr><literal type="number">561</literal></expr>,<expr><literal type="number">560</literal></expr>,<expr><literal type="number">515</literal></expr>,<expr><literal type="number">546</literal></expr>,<expr><literal type="number">289</literal></expr>,<expr><literal type="number">274</literal></expr>,<expr><literal type="number">288</literal></expr>,<expr><literal type="number">258</literal></expr>,

<expr><operator>-</operator><literal type="number">254</literal></expr>,<expr><operator>-</operator><literal type="number">287</literal></expr>,<expr><literal type="number">1329</literal></expr>,<expr><literal type="number">1299</literal></expr>,<expr><literal type="number">1314</literal></expr>,<expr><literal type="number">1312</literal></expr>,<expr><literal type="number">1057</literal></expr>,<expr><literal type="number">1057</literal></expr>,<expr><literal type="number">1042</literal></expr>,<expr><literal type="number">1042</literal></expr>,<expr><literal type="number">1026</literal></expr>,<expr><literal type="number">1026</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">768</literal></expr>,<expr><literal type="number">768</literal></expr>,<expr><literal type="number">768</literal></expr>,<expr><literal type="number">768</literal></expr>,<expr><literal type="number">563</literal></expr>,<expr><literal type="number">560</literal></expr>,<expr><literal type="number">306</literal></expr>,<expr><literal type="number">306</literal></expr>,<expr><literal type="number">291</literal></expr>,<expr><literal type="number">259</literal></expr>,

<expr><operator>-</operator><literal type="number">252</literal></expr>,<expr><operator>-</operator><literal type="number">413</literal></expr>,<expr><operator>-</operator><literal type="number">477</literal></expr>,<expr><operator>-</operator><literal type="number">542</literal></expr>,<expr><literal type="number">1298</literal></expr>,<expr><operator>-</operator><literal type="number">575</literal></expr>,<expr><literal type="number">1041</literal></expr>,<expr><literal type="number">1041</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><operator>-</operator><literal type="number">383</literal></expr>,<expr><operator>-</operator><literal type="number">399</literal></expr>,<expr><literal type="number">1107</literal></expr>,<expr><literal type="number">1092</literal></expr>,<expr><literal type="number">1106</literal></expr>,<expr><literal type="number">1061</literal></expr>,<expr><literal type="number">849</literal></expr>,<expr><literal type="number">849</literal></expr>,<expr><literal type="number">789</literal></expr>,<expr><literal type="number">789</literal></expr>,<expr><literal type="number">1104</literal></expr>,<expr><literal type="number">1091</literal></expr>,<expr><literal type="number">773</literal></expr>,<expr><literal type="number">773</literal></expr>,<expr><literal type="number">1076</literal></expr>,<expr><literal type="number">1075</literal></expr>,<expr><literal type="number">341</literal></expr>,<expr><literal type="number">340</literal></expr>,<expr><literal type="number">325</literal></expr>,<expr><literal type="number">309</literal></expr>,<expr><literal type="number">834</literal></expr>,<expr><literal type="number">804</literal></expr>,<expr><literal type="number">577</literal></expr>,<expr><literal type="number">577</literal></expr>,<expr><literal type="number">532</literal></expr>,<expr><literal type="number">532</literal></expr>,<expr><literal type="number">516</literal></expr>,<expr><literal type="number">516</literal></expr>,<expr><literal type="number">832</literal></expr>,<expr><literal type="number">818</literal></expr>,<expr><literal type="number">803</literal></expr>,<expr><literal type="number">816</literal></expr>,<expr><literal type="number">561</literal></expr>,<expr><literal type="number">561</literal></expr>,<expr><literal type="number">531</literal></expr>,<expr><literal type="number">531</literal></expr>,<expr><literal type="number">515</literal></expr>,<expr><literal type="number">546</literal></expr>,<expr><literal type="number">289</literal></expr>,<expr><literal type="number">289</literal></expr>,<expr><literal type="number">288</literal></expr>,<expr><literal type="number">258</literal></expr>,

<expr><operator>-</operator><literal type="number">252</literal></expr>,<expr><operator>-</operator><literal type="number">429</literal></expr>,<expr><operator>-</operator><literal type="number">493</literal></expr>,<expr><operator>-</operator><literal type="number">559</literal></expr>,<expr><literal type="number">1057</literal></expr>,<expr><literal type="number">1057</literal></expr>,<expr><literal type="number">1042</literal></expr>,<expr><literal type="number">1042</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">529</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><operator>-</operator><literal type="number">382</literal></expr>,<expr><literal type="number">1077</literal></expr>,<expr><operator>-</operator><literal type="number">415</literal></expr>,<expr><literal type="number">1106</literal></expr>,<expr><literal type="number">1061</literal></expr>,<expr><literal type="number">1104</literal></expr>,<expr><literal type="number">849</literal></expr>,<expr><literal type="number">849</literal></expr>,<expr><literal type="number">789</literal></expr>,<expr><literal type="number">789</literal></expr>,<expr><literal type="number">1091</literal></expr>,<expr><literal type="number">1076</literal></expr>,<expr><literal type="number">1029</literal></expr>,<expr><literal type="number">1075</literal></expr>,<expr><literal type="number">834</literal></expr>,<expr><literal type="number">834</literal></expr>,<expr><literal type="number">597</literal></expr>,<expr><literal type="number">581</literal></expr>,<expr><literal type="number">340</literal></expr>,<expr><literal type="number">340</literal></expr>,<expr><literal type="number">339</literal></expr>,<expr><literal type="number">324</literal></expr>,<expr><literal type="number">804</literal></expr>,<expr><literal type="number">833</literal></expr>,<expr><literal type="number">532</literal></expr>,<expr><literal type="number">532</literal></expr>,<expr><literal type="number">832</literal></expr>,<expr><literal type="number">772</literal></expr>,<expr><literal type="number">818</literal></expr>,<expr><literal type="number">803</literal></expr>,<expr><literal type="number">817</literal></expr>,<expr><literal type="number">787</literal></expr>,<expr><literal type="number">816</literal></expr>,<expr><literal type="number">771</literal></expr>,<expr><literal type="number">290</literal></expr>,<expr><literal type="number">290</literal></expr>,<expr><literal type="number">290</literal></expr>,<expr><literal type="number">290</literal></expr>,<expr><literal type="number">288</literal></expr>,<expr><literal type="number">258</literal></expr>,

<expr><operator>-</operator><literal type="number">253</literal></expr>,<expr><operator>-</operator><literal type="number">349</literal></expr>,<expr><operator>-</operator><literal type="number">414</literal></expr>,<expr><operator>-</operator><literal type="number">447</literal></expr>,<expr><operator>-</operator><literal type="number">463</literal></expr>,<expr><literal type="number">1329</literal></expr>,<expr><literal type="number">1299</literal></expr>,<expr><operator>-</operator><literal type="number">479</literal></expr>,<expr><literal type="number">1314</literal></expr>,<expr><literal type="number">1312</literal></expr>,<expr><literal type="number">1057</literal></expr>,<expr><literal type="number">1057</literal></expr>,<expr><literal type="number">1042</literal></expr>,<expr><literal type="number">1042</literal></expr>,<expr><literal type="number">1026</literal></expr>,<expr><literal type="number">1026</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">768</literal></expr>,<expr><literal type="number">768</literal></expr>,<expr><literal type="number">768</literal></expr>,<expr><literal type="number">768</literal></expr>,<expr><operator>-</operator><literal type="number">319</literal></expr>,<expr><literal type="number">851</literal></expr>,<expr><literal type="number">821</literal></expr>,<expr><operator>-</operator><literal type="number">335</literal></expr>,<expr><literal type="number">836</literal></expr>,<expr><literal type="number">850</literal></expr>,<expr><literal type="number">805</literal></expr>,<expr><literal type="number">849</literal></expr>,<expr><literal type="number">341</literal></expr>,<expr><literal type="number">340</literal></expr>,<expr><literal type="number">325</literal></expr>,<expr><literal type="number">336</literal></expr>,<expr><literal type="number">533</literal></expr>,<expr><literal type="number">533</literal></expr>,<expr><literal type="number">579</literal></expr>,<expr><literal type="number">579</literal></expr>,<expr><literal type="number">564</literal></expr>,<expr><literal type="number">564</literal></expr>,<expr><literal type="number">773</literal></expr>,<expr><literal type="number">832</literal></expr>,<expr><literal type="number">578</literal></expr>,<expr><literal type="number">548</literal></expr>,<expr><literal type="number">563</literal></expr>,<expr><literal type="number">516</literal></expr>,<expr><literal type="number">321</literal></expr>,<expr><literal type="number">276</literal></expr>,<expr><literal type="number">306</literal></expr>,<expr><literal type="number">291</literal></expr>,<expr><literal type="number">304</literal></expr>,<expr><literal type="number">259</literal></expr>,

<expr><operator>-</operator><literal type="number">251</literal></expr>,<expr><operator>-</operator><literal type="number">572</literal></expr>,<expr><operator>-</operator><literal type="number">733</literal></expr>,<expr><operator>-</operator><literal type="number">830</literal></expr>,<expr><operator>-</operator><literal type="number">863</literal></expr>,<expr><operator>-</operator><literal type="number">879</literal></expr>,<expr><literal type="number">1041</literal></expr>,<expr><literal type="number">1041</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><operator>-</operator><literal type="number">511</literal></expr>,<expr><operator>-</operator><literal type="number">527</literal></expr>,<expr><operator>-</operator><literal type="number">543</literal></expr>,<expr><literal type="number">1396</literal></expr>,<expr><literal type="number">1351</literal></expr>,<expr><literal type="number">1381</literal></expr>,<expr><literal type="number">1366</literal></expr>,<expr><literal type="number">1395</literal></expr>,<expr><literal type="number">1335</literal></expr>,<expr><literal type="number">1380</literal></expr>,<expr><operator>-</operator><literal type="number">559</literal></expr>,<expr><literal type="number">1334</literal></expr>,<expr><literal type="number">1138</literal></expr>,<expr><literal type="number">1138</literal></expr>,<expr><literal type="number">1063</literal></expr>,<expr><literal type="number">1063</literal></expr>,<expr><literal type="number">1350</literal></expr>,<expr><literal type="number">1392</literal></expr>,<expr><literal type="number">1031</literal></expr>,<expr><literal type="number">1031</literal></expr>,<expr><literal type="number">1062</literal></expr>,<expr><literal type="number">1062</literal></expr>,<expr><literal type="number">1364</literal></expr>,<expr><literal type="number">1363</literal></expr>,<expr><literal type="number">1120</literal></expr>,<expr><literal type="number">1120</literal></expr>,<expr><literal type="number">1333</literal></expr>,<expr><literal type="number">1348</literal></expr>,<expr><literal type="number">881</literal></expr>,<expr><literal type="number">881</literal></expr>,<expr><literal type="number">881</literal></expr>,<expr><literal type="number">881</literal></expr>,<expr><literal type="number">375</literal></expr>,<expr><literal type="number">374</literal></expr>,<expr><literal type="number">359</literal></expr>,<expr><literal type="number">373</literal></expr>,<expr><literal type="number">343</literal></expr>,<expr><literal type="number">358</literal></expr>,<expr><literal type="number">341</literal></expr>,<expr><literal type="number">325</literal></expr>,<expr><literal type="number">791</literal></expr>,<expr><literal type="number">791</literal></expr>,<expr><literal type="number">1123</literal></expr>,<expr><literal type="number">1122</literal></expr>,<expr><operator>-</operator><literal type="number">703</literal></expr>,<expr><literal type="number">1105</literal></expr>,<expr><literal type="number">1045</literal></expr>,<expr><operator>-</operator><literal type="number">719</literal></expr>,<expr><literal type="number">865</literal></expr>,<expr><literal type="number">865</literal></expr>,<expr><literal type="number">790</literal></expr>,<expr><literal type="number">790</literal></expr>,<expr><literal type="number">774</literal></expr>,<expr><literal type="number">774</literal></expr>,<expr><literal type="number">1104</literal></expr>,<expr><literal type="number">1029</literal></expr>,<expr><literal type="number">338</literal></expr>,<expr><literal type="number">293</literal></expr>,<expr><literal type="number">323</literal></expr>,<expr><literal type="number">308</literal></expr>,<expr><operator>-</operator><literal type="number">799</literal></expr>,<expr><operator>-</operator><literal type="number">815</literal></expr>,<expr><literal type="number">833</literal></expr>,<expr><literal type="number">788</literal></expr>,<expr><literal type="number">772</literal></expr>,<expr><literal type="number">818</literal></expr>,<expr><literal type="number">803</literal></expr>,<expr><literal type="number">816</literal></expr>,<expr><literal type="number">322</literal></expr>,<expr><literal type="number">292</literal></expr>,<expr><literal type="number">307</literal></expr>,<expr><literal type="number">320</literal></expr>,<expr><literal type="number">561</literal></expr>,<expr><literal type="number">531</literal></expr>,<expr><literal type="number">515</literal></expr>,<expr><literal type="number">546</literal></expr>,<expr><literal type="number">289</literal></expr>,<expr><literal type="number">274</literal></expr>,<expr><literal type="number">288</literal></expr>,<expr><literal type="number">258</literal></expr>,

<expr><operator>-</operator><literal type="number">251</literal></expr>,<expr><operator>-</operator><literal type="number">525</literal></expr>,<expr><operator>-</operator><literal type="number">605</literal></expr>,<expr><operator>-</operator><literal type="number">685</literal></expr>,<expr><operator>-</operator><literal type="number">765</literal></expr>,<expr><operator>-</operator><literal type="number">831</literal></expr>,<expr><operator>-</operator><literal type="number">846</literal></expr>,<expr><literal type="number">1298</literal></expr>,<expr><literal type="number">1057</literal></expr>,<expr><literal type="number">1057</literal></expr>,<expr><literal type="number">1312</literal></expr>,<expr><literal type="number">1282</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">512</literal></expr>,<expr><literal type="number">1399</literal></expr>,<expr><literal type="number">1398</literal></expr>,<expr><literal type="number">1383</literal></expr>,<expr><literal type="number">1367</literal></expr>,<expr><literal type="number">1382</literal></expr>,<expr><literal type="number">1396</literal></expr>,<expr><literal type="number">1351</literal></expr>,<expr><operator>-</operator><literal type="number">511</literal></expr>,<expr><literal type="number">1381</literal></expr>,<expr><literal type="number">1366</literal></expr>,<expr><literal type="number">1139</literal></expr>,<expr><literal type="number">1139</literal></expr>,<expr><literal type="number">1079</literal></expr>,<expr><literal type="number">1079</literal></expr>,<expr><literal type="number">1124</literal></expr>,<expr><literal type="number">1124</literal></expr>,<expr><literal type="number">1364</literal></expr>,<expr><literal type="number">1349</literal></expr>,<expr><literal type="number">1363</literal></expr>,<expr><literal type="number">1333</literal></expr>,<expr><literal type="number">882</literal></expr>,<expr><literal type="number">882</literal></expr>,<expr><literal type="number">882</literal></expr>,<expr><literal type="number">882</literal></expr>,<expr><literal type="number">807</literal></expr>,<expr><literal type="number">807</literal></expr>,<expr><literal type="number">807</literal></expr>,<expr><literal type="number">807</literal></expr>,<expr><literal type="number">1094</literal></expr>,<expr><literal type="number">1094</literal></expr>,<expr><literal type="number">1136</literal></expr>,<expr><literal type="number">1136</literal></expr>,<expr><literal type="number">373</literal></expr>,<expr><literal type="number">341</literal></expr>,<expr><literal type="number">535</literal></expr>,<expr><literal type="number">535</literal></expr>,<expr><literal type="number">881</literal></expr>,<expr><literal type="number">775</literal></expr>,<expr><literal type="number">867</literal></expr>,<expr><literal type="number">822</literal></expr>,<expr><literal type="number">774</literal></expr>,<expr><operator>-</operator><literal type="number">591</literal></expr>,<expr><literal type="number">324</literal></expr>,<expr><literal type="number">338</literal></expr>,<expr><operator>-</operator><literal type="number">671</literal></expr>,<expr><literal type="number">849</literal></expr>,<expr><literal type="number">550</literal></expr>,<expr><literal type="number">550</literal></expr>,<expr><literal type="number">866</literal></expr>,<expr><literal type="number">864</literal></expr>,<expr><literal type="number">609</literal></expr>,<expr><literal type="number">609</literal></expr>,<expr><literal type="number">293</literal></expr>,<expr><literal type="number">336</literal></expr>,<expr><literal type="number">534</literal></expr>,<expr><literal type="number">534</literal></expr>,<expr><literal type="number">789</literal></expr>,<expr><literal type="number">835</literal></expr>,<expr><literal type="number">773</literal></expr>,<expr><operator>-</operator><literal type="number">751</literal></expr>,<expr><literal type="number">834</literal></expr>,<expr><literal type="number">804</literal></expr>,<expr><literal type="number">308</literal></expr>,<expr><literal type="number">307</literal></expr>,<expr><literal type="number">833</literal></expr>,<expr><literal type="number">788</literal></expr>,<expr><literal type="number">832</literal></expr>,<expr><literal type="number">772</literal></expr>,<expr><literal type="number">562</literal></expr>,<expr><literal type="number">562</literal></expr>,<expr><literal type="number">547</literal></expr>,<expr><literal type="number">547</literal></expr>,<expr><literal type="number">305</literal></expr>,<expr><literal type="number">275</literal></expr>,<expr><literal type="number">560</literal></expr>,<expr><literal type="number">515</literal></expr>,<expr><literal type="number">290</literal></expr>,<expr><literal type="number">290</literal></expr>,

<expr><operator>-</operator><literal type="number">252</literal></expr>,<expr><operator>-</operator><literal type="number">397</literal></expr>,<expr><operator>-</operator><literal type="number">477</literal></expr>,<expr><operator>-</operator><literal type="number">557</literal></expr>,<expr><operator>-</operator><literal type="number">622</literal></expr>,<expr><operator>-</operator><literal type="number">653</literal></expr>,<expr><operator>-</operator><literal type="number">719</literal></expr>,<expr><operator>-</operator><literal type="number">735</literal></expr>,<expr><operator>-</operator><literal type="number">750</literal></expr>,<expr><literal type="number">1329</literal></expr>,<expr><literal type="number">1299</literal></expr>,<expr><literal type="number">1314</literal></expr>,<expr><literal type="number">1057</literal></expr>,<expr><literal type="number">1057</literal></expr>,<expr><literal type="number">1042</literal></expr>,<expr><literal type="number">1042</literal></expr>,<expr><literal type="number">1312</literal></expr>,<expr><literal type="number">1282</literal></expr>,<expr><literal type="number">1024</literal></expr>,<expr><literal type="number">1024</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">784</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><operator>-</operator><literal type="number">383</literal></expr>,<expr><literal type="number">1127</literal></expr>,<expr><literal type="number">1141</literal></expr>,<expr><literal type="number">1111</literal></expr>,<expr><literal type="number">1126</literal></expr>,<expr><literal type="number">1140</literal></expr>,<expr><literal type="number">1095</literal></expr>,<expr><literal type="number">1110</literal></expr>,<expr><literal type="number">869</literal></expr>,<expr><literal type="number">869</literal></expr>,<expr><literal type="number">883</literal></expr>,<expr><literal type="number">883</literal></expr>,<expr><literal type="number">1079</literal></expr>,<expr><literal type="number">1109</literal></expr>,<expr><literal type="number">882</literal></expr>,<expr><literal type="number">882</literal></expr>,<expr><literal type="number">375</literal></expr>,<expr><literal type="number">374</literal></expr>,<expr><literal type="number">807</literal></expr>,<expr><literal type="number">868</literal></expr>,<expr><literal type="number">838</literal></expr>,<expr><literal type="number">881</literal></expr>,<expr><literal type="number">791</literal></expr>,<expr><operator>-</operator><literal type="number">463</literal></expr>,<expr><literal type="number">867</literal></expr>,<expr><literal type="number">822</literal></expr>,<expr><literal type="number">368</literal></expr>,<expr><literal type="number">263</literal></expr>,<expr><literal type="number">852</literal></expr>,<expr><literal type="number">837</literal></expr>,<expr><literal type="number">836</literal></expr>,<expr><operator>-</operator><literal type="number">543</literal></expr>,<expr><literal type="number">610</literal></expr>,<expr><literal type="number">610</literal></expr>,<expr><literal type="number">550</literal></expr>,<expr><literal type="number">550</literal></expr>,<expr><literal type="number">352</literal></expr>,<expr><literal type="number">336</literal></expr>,<expr><literal type="number">534</literal></expr>,<expr><literal type="number">534</literal></expr>,<expr><literal type="number">865</literal></expr>,<expr><literal type="number">774</literal></expr>,<expr><literal type="number">851</literal></expr>,<expr><literal type="number">821</literal></expr>,<expr><literal type="number">850</literal></expr>,<expr><literal type="number">805</literal></expr>,<expr><literal type="number">593</literal></expr>,<expr><literal type="number">533</literal></expr>,<expr><literal type="number">579</literal></expr>,<expr><literal type="number">564</literal></expr>,<expr><literal type="number">773</literal></expr>,<expr><literal type="number">832</literal></expr>,<expr><literal type="number">578</literal></expr>,<expr><literal type="number">578</literal></expr>,<expr><literal type="number">548</literal></expr>,<expr><literal type="number">548</literal></expr>,<expr><literal type="number">577</literal></expr>,<expr><literal type="number">577</literal></expr>,<expr><literal type="number">307</literal></expr>,<expr><literal type="number">276</literal></expr>,<expr><literal type="number">306</literal></expr>,<expr><literal type="number">291</literal></expr>,<expr><literal type="number">516</literal></expr>,<expr><literal type="number">560</literal></expr>,<expr><literal type="number">259</literal></expr>,<expr><literal type="number">259</literal></expr>,

<expr><operator>-</operator><literal type="number">250</literal></expr>,<expr><operator>-</operator><literal type="number">2107</literal></expr>,<expr><operator>-</operator><literal type="number">2507</literal></expr>,<expr><operator>-</operator><literal type="number">2764</literal></expr>,<expr><operator>-</operator><literal type="number">2909</literal></expr>,<expr><operator>-</operator><literal type="number">2974</literal></expr>,<expr><operator>-</operator><literal type="number">3007</literal></expr>,<expr><operator>-</operator><literal type="number">3023</literal></expr>,<expr><literal type="number">1041</literal></expr>,<expr><literal type="number">1041</literal></expr>,<expr><literal type="number">1040</literal></expr>,<expr><literal type="number">1040</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><operator>-</operator><literal type="number">767</literal></expr>,<expr><operator>-</operator><literal type="number">1052</literal></expr>,<expr><operator>-</operator><literal type="number">1213</literal></expr>,<expr><operator>-</operator><literal type="number">1277</literal></expr>,<expr><operator>-</operator><literal type="number">1358</literal></expr>,<expr><operator>-</operator><literal type="number">1405</literal></expr>,<expr><operator>-</operator><literal type="number">1469</literal></expr>,<expr><operator>-</operator><literal type="number">1535</literal></expr>,<expr><operator>-</operator><literal type="number">1550</literal></expr>,<expr><operator>-</operator><literal type="number">1582</literal></expr>,<expr><operator>-</operator><literal type="number">1614</literal></expr>,<expr><operator>-</operator><literal type="number">1647</literal></expr>,<expr><operator>-</operator><literal type="number">1662</literal></expr>,<expr><operator>-</operator><literal type="number">1694</literal></expr>,<expr><operator>-</operator><literal type="number">1726</literal></expr>,<expr><operator>-</operator><literal type="number">1759</literal></expr>,<expr><operator>-</operator><literal type="number">1774</literal></expr>,<expr><operator>-</operator><literal type="number">1807</literal></expr>,<expr><operator>-</operator><literal type="number">1822</literal></expr>,<expr><operator>-</operator><literal type="number">1854</literal></expr>,<expr><operator>-</operator><literal type="number">1886</literal></expr>,<expr><literal type="number">1565</literal></expr>,<expr><operator>-</operator><literal type="number">1919</literal></expr>,<expr><operator>-</operator><literal type="number">1935</literal></expr>,<expr><operator>-</operator><literal type="number">1951</literal></expr>,<expr><operator>-</operator><literal type="number">1967</literal></expr>,<expr><literal type="number">1731</literal></expr>,<expr><literal type="number">1730</literal></expr>,<expr><literal type="number">1580</literal></expr>,<expr><literal type="number">1717</literal></expr>,<expr><operator>-</operator><literal type="number">1983</literal></expr>,<expr><literal type="number">1729</literal></expr>,<expr><literal type="number">1564</literal></expr>,<expr><operator>-</operator><literal type="number">1999</literal></expr>,<expr><literal type="number">1548</literal></expr>,<expr><operator>-</operator><literal type="number">2015</literal></expr>,<expr><operator>-</operator><literal type="number">2031</literal></expr>,<expr><literal type="number">1715</literal></expr>,<expr><literal type="number">1595</literal></expr>,<expr><operator>-</operator><literal type="number">2047</literal></expr>,<expr><literal type="number">1714</literal></expr>,<expr><operator>-</operator><literal type="number">2063</literal></expr>,<expr><literal type="number">1610</literal></expr>,<expr><operator>-</operator><literal type="number">2079</literal></expr>,<expr><literal type="number">1609</literal></expr>,<expr><operator>-</operator><literal type="number">2095</literal></expr>,<expr><literal type="number">1323</literal></expr>,<expr><literal type="number">1323</literal></expr>,<expr><literal type="number">1457</literal></expr>,<expr><literal type="number">1457</literal></expr>,<expr><literal type="number">1307</literal></expr>,<expr><literal type="number">1307</literal></expr>,<expr><literal type="number">1712</literal></expr>,<expr><literal type="number">1547</literal></expr>,<expr><literal type="number">1641</literal></expr>,<expr><literal type="number">1700</literal></expr>,<expr><literal type="number">1699</literal></expr>,<expr><literal type="number">1594</literal></expr>,<expr><literal type="number">1685</literal></expr>,<expr><literal type="number">1625</literal></expr>,<expr><literal type="number">1442</literal></expr>,<expr><literal type="number">1442</literal></expr>,<expr><literal type="number">1322</literal></expr>,<expr><literal type="number">1322</literal></expr>,<expr><operator>-</operator><literal type="number">780</literal></expr>,<expr><operator>-</operator><literal type="number">973</literal></expr>,<expr><operator>-</operator><literal type="number">910</literal></expr>,<expr><literal type="number">1279</literal></expr>,<expr><literal type="number">1278</literal></expr>,<expr><literal type="number">1277</literal></expr>,<expr><literal type="number">1262</literal></expr>,<expr><literal type="number">1276</literal></expr>,<expr><literal type="number">1261</literal></expr>,<expr><literal type="number">1275</literal></expr>,<expr><literal type="number">1215</literal></expr>,<expr><literal type="number">1260</literal></expr>,<expr><literal type="number">1229</literal></expr>,<expr><operator>-</operator><literal type="number">959</literal></expr>,<expr><literal type="number">974</literal></expr>,<expr><literal type="number">974</literal></expr>,<expr><literal type="number">989</literal></expr>,<expr><literal type="number">989</literal></expr>,<expr><operator>-</operator><literal type="number">943</literal></expr>,<expr><literal type="number">735</literal></expr>,<expr><literal type="number">478</literal></expr>,<expr><literal type="number">478</literal></expr>,<expr><literal type="number">495</literal></expr>,<expr><literal type="number">463</literal></expr>,<expr><literal type="number">506</literal></expr>,<expr><literal type="number">414</literal></expr>,<expr><operator>-</operator><literal type="number">1039</literal></expr>,<expr><literal type="number">1003</literal></expr>,<expr><literal type="number">958</literal></expr>,<expr><literal type="number">1017</literal></expr>,<expr><literal type="number">927</literal></expr>,<expr><literal type="number">942</literal></expr>,<expr><literal type="number">987</literal></expr>,<expr><literal type="number">957</literal></expr>,<expr><literal type="number">431</literal></expr>,<expr><literal type="number">476</literal></expr>,<expr><literal type="number">1272</literal></expr>,<expr><literal type="number">1167</literal></expr>,<expr><literal type="number">1228</literal></expr>,<expr><operator>-</operator><literal type="number">1183</literal></expr>,<expr><literal type="number">1256</literal></expr>,<expr><operator>-</operator><literal type="number">1199</literal></expr>,<expr><literal type="number">895</literal></expr>,<expr><literal type="number">895</literal></expr>,<expr><literal type="number">941</literal></expr>,<expr><literal type="number">941</literal></expr>,<expr><literal type="number">1242</literal></expr>,<expr><literal type="number">1227</literal></expr>,<expr><literal type="number">1212</literal></expr>,<expr><literal type="number">1135</literal></expr>,<expr><literal type="number">1014</literal></expr>,<expr><literal type="number">1014</literal></expr>,<expr><literal type="number">490</literal></expr>,<expr><literal type="number">489</literal></expr>,<expr><literal type="number">503</literal></expr>,<expr><literal type="number">487</literal></expr>,<expr><literal type="number">910</literal></expr>,<expr><literal type="number">1013</literal></expr>,<expr><literal type="number">985</literal></expr>,<expr><literal type="number">925</literal></expr>,<expr><literal type="number">863</literal></expr>,<expr><literal type="number">894</literal></expr>,<expr><literal type="number">970</literal></expr>,<expr><literal type="number">955</literal></expr>,<expr><literal type="number">1012</literal></expr>,<expr><literal type="number">847</literal></expr>,<expr><operator>-</operator><literal type="number">1343</literal></expr>,<expr><literal type="number">831</literal></expr>,<expr><literal type="number">755</literal></expr>,<expr><literal type="number">755</literal></expr>,<expr><literal type="number">984</literal></expr>,<expr><literal type="number">909</literal></expr>,<expr><literal type="number">428</literal></expr>,<expr><literal type="number">366</literal></expr>,<expr><literal type="number">754</literal></expr>,<expr><literal type="number">559</literal></expr>,<expr><operator>-</operator><literal type="number">1391</literal></expr>,<expr><literal type="number">752</literal></expr>,<expr><literal type="number">486</literal></expr>,<expr><literal type="number">457</literal></expr>,<expr><literal type="number">924</literal></expr>,<expr><literal type="number">997</literal></expr>,<expr><literal type="number">698</literal></expr>,<expr><literal type="number">698</literal></expr>,<expr><literal type="number">983</literal></expr>,<expr><literal type="number">893</literal></expr>,<expr><literal type="number">740</literal></expr>,<expr><literal type="number">740</literal></expr>,<expr><literal type="number">908</literal></expr>,<expr><literal type="number">877</literal></expr>,<expr><literal type="number">739</literal></expr>,<expr><literal type="number">739</literal></expr>,<expr><literal type="number">667</literal></expr>,<expr><literal type="number">667</literal></expr>,<expr><literal type="number">953</literal></expr>,<expr><literal type="number">938</literal></expr>,<expr><literal type="number">497</literal></expr>,<expr><literal type="number">287</literal></expr>,<expr><literal type="number">271</literal></expr>,<expr><literal type="number">271</literal></expr>,<expr><literal type="number">683</literal></expr>,<expr><literal type="number">606</literal></expr>,<expr><literal type="number">590</literal></expr>,<expr><literal type="number">712</literal></expr>,<expr><literal type="number">726</literal></expr>,<expr><literal type="number">574</literal></expr>,<expr><literal type="number">302</literal></expr>,<expr><literal type="number">302</literal></expr>,<expr><literal type="number">738</literal></expr>,<expr><literal type="number">736</literal></expr>,<expr><literal type="number">481</literal></expr>,<expr><literal type="number">286</literal></expr>,<expr><literal type="number">526</literal></expr>,<expr><literal type="number">725</literal></expr>,<expr><literal type="number">605</literal></expr>,<expr><literal type="number">711</literal></expr>,<expr><literal type="number">636</literal></expr>,<expr><literal type="number">724</literal></expr>,<expr><literal type="number">696</literal></expr>,<expr><literal type="number">651</literal></expr>,<expr><literal type="number">589</literal></expr>,<expr><literal type="number">681</literal></expr>,<expr><literal type="number">666</literal></expr>,<expr><literal type="number">710</literal></expr>,<expr><literal type="number">364</literal></expr>,<expr><literal type="number">467</literal></expr>,<expr><literal type="number">573</literal></expr>,<expr><literal type="number">695</literal></expr>,<expr><literal type="number">466</literal></expr>,<expr><literal type="number">466</literal></expr>,<expr><literal type="number">301</literal></expr>,<expr><literal type="number">465</literal></expr>,<expr><literal type="number">379</literal></expr>,<expr><literal type="number">379</literal></expr>,<expr><literal type="number">709</literal></expr>,<expr><literal type="number">604</literal></expr>,<expr><literal type="number">665</literal></expr>,<expr><literal type="number">679</literal></expr>,<expr><literal type="number">316</literal></expr>,<expr><literal type="number">316</literal></expr>,<expr><literal type="number">634</literal></expr>,<expr><literal type="number">633</literal></expr>,<expr><literal type="number">436</literal></expr>,<expr><literal type="number">436</literal></expr>,<expr><literal type="number">464</literal></expr>,<expr><literal type="number">269</literal></expr>,<expr><literal type="number">424</literal></expr>,<expr><literal type="number">394</literal></expr>,<expr><literal type="number">452</literal></expr>,<expr><literal type="number">332</literal></expr>,<expr><literal type="number">438</literal></expr>,<expr><literal type="number">363</literal></expr>,<expr><literal type="number">347</literal></expr>,<expr><literal type="number">408</literal></expr>,<expr><literal type="number">393</literal></expr>,<expr><literal type="number">448</literal></expr>,<expr><literal type="number">331</literal></expr>,<expr><literal type="number">422</literal></expr>,<expr><literal type="number">362</literal></expr>,<expr><literal type="number">407</literal></expr>,<expr><literal type="number">392</literal></expr>,<expr><literal type="number">421</literal></expr>,<expr><literal type="number">346</literal></expr>,<expr><literal type="number">406</literal></expr>,<expr><literal type="number">391</literal></expr>,<expr><literal type="number">376</literal></expr>,<expr><literal type="number">375</literal></expr>,<expr><literal type="number">359</literal></expr>,<expr><literal type="number">1441</literal></expr>,<expr><literal type="number">1306</literal></expr>,<expr><operator>-</operator><literal type="number">2367</literal></expr>,<expr><literal type="number">1290</literal></expr>,<expr><operator>-</operator><literal type="number">2383</literal></expr>,<expr><literal type="number">1337</literal></expr>,<expr><operator>-</operator><literal type="number">2399</literal></expr>,<expr><operator>-</operator><literal type="number">2415</literal></expr>,<expr><literal type="number">1426</literal></expr>,<expr><literal type="number">1321</literal></expr>,<expr><operator>-</operator><literal type="number">2431</literal></expr>,<expr><literal type="number">1411</literal></expr>,<expr><literal type="number">1336</literal></expr>,<expr><operator>-</operator><literal type="number">2447</literal></expr>,<expr><operator>-</operator><literal type="number">2463</literal></expr>,<expr><operator>-</operator><literal type="number">2479</literal></expr>,<expr><literal type="number">1169</literal></expr>,<expr><literal type="number">1169</literal></expr>,<expr><literal type="number">1049</literal></expr>,<expr><literal type="number">1049</literal></expr>,<expr><literal type="number">1424</literal></expr>,<expr><literal type="number">1289</literal></expr>,<expr><literal type="number">1412</literal></expr>,<expr><literal type="number">1352</literal></expr>,<expr><literal type="number">1319</literal></expr>,<expr><operator>-</operator><literal type="number">2495</literal></expr>,<expr><literal type="number">1154</literal></expr>,<expr><literal type="number">1154</literal></expr>,<expr><literal type="number">1064</literal></expr>,<expr><literal type="number">1064</literal></expr>,<expr><literal type="number">1153</literal></expr>,<expr><literal type="number">1153</literal></expr>,<expr><literal type="number">416</literal></expr>,<expr><literal type="number">390</literal></expr>,<expr><literal type="number">360</literal></expr>,<expr><literal type="number">404</literal></expr>,<expr><literal type="number">403</literal></expr>,<expr><literal type="number">389</literal></expr>,<expr><literal type="number">344</literal></expr>,<expr><literal type="number">374</literal></expr>,<expr><literal type="number">373</literal></expr>,<expr><literal type="number">343</literal></expr>,<expr><literal type="number">358</literal></expr>,<expr><literal type="number">372</literal></expr>,<expr><literal type="number">327</literal></expr>,<expr><literal type="number">357</literal></expr>,<expr><literal type="number">342</literal></expr>,<expr><literal type="number">311</literal></expr>,<expr><literal type="number">356</literal></expr>,<expr><literal type="number">326</literal></expr>,<expr><literal type="number">1395</literal></expr>,<expr><literal type="number">1394</literal></expr>,<expr><literal type="number">1137</literal></expr>,<expr><literal type="number">1137</literal></expr>,<expr><literal type="number">1047</literal></expr>,<expr><literal type="number">1047</literal></expr>,<expr><literal type="number">1365</literal></expr>,<expr><literal type="number">1392</literal></expr>,<expr><literal type="number">1287</literal></expr>,<expr><literal type="number">1379</literal></expr>,<expr><literal type="number">1334</literal></expr>,<expr><literal type="number">1364</literal></expr>,<expr><literal type="number">1349</literal></expr>,<expr><literal type="number">1378</literal></expr>,<expr><literal type="number">1318</literal></expr>,<expr><literal type="number">1363</literal></expr>,<expr><literal type="number">792</literal></expr>,<expr><literal type="number">792</literal></expr>,<expr><literal type="number">792</literal></expr>,<expr><literal type="number">792</literal></expr>,<expr><literal type="number">1152</literal></expr>,<expr><literal type="number">1152</literal></expr>,<expr><literal type="number">1032</literal></expr>,<expr><literal type="number">1032</literal></expr>,<expr><literal type="number">1121</literal></expr>,<expr><literal type="number">1121</literal></expr>,<expr><literal type="number">1046</literal></expr>,<expr><literal type="number">1046</literal></expr>,<expr><literal type="number">1120</literal></expr>,<expr><literal type="number">1120</literal></expr>,<expr><literal type="number">1030</literal></expr>,<expr><literal type="number">1030</literal></expr>,<expr><operator>-</operator><literal type="number">2895</literal></expr>,<expr><literal type="number">1106</literal></expr>,<expr><literal type="number">1061</literal></expr>,<expr><literal type="number">1104</literal></expr>,<expr><literal type="number">849</literal></expr>,<expr><literal type="number">849</literal></expr>,<expr><literal type="number">789</literal></expr>,<expr><literal type="number">789</literal></expr>,<expr><literal type="number">1091</literal></expr>,<expr><literal type="number">1076</literal></expr>,<expr><literal type="number">1029</literal></expr>,<expr><literal type="number">1090</literal></expr>,<expr><literal type="number">1060</literal></expr>,<expr><literal type="number">1075</literal></expr>,<expr><literal type="number">833</literal></expr>,<expr><literal type="number">833</literal></expr>,<expr><literal type="number">309</literal></expr>,<expr><literal type="number">324</literal></expr>,<expr><literal type="number">532</literal></expr>,<expr><literal type="number">532</literal></expr>,<expr><literal type="number">832</literal></expr>,<expr><literal type="number">772</literal></expr>,<expr><literal type="number">818</literal></expr>,<expr><literal type="number">803</literal></expr>,<expr><literal type="number">561</literal></expr>,<expr><literal type="number">561</literal></expr>,<expr><literal type="number">531</literal></expr>,<expr><literal type="number">560</literal></expr>,<expr><literal type="number">515</literal></expr>,<expr><literal type="number">546</literal></expr>,<expr><literal type="number">289</literal></expr>,<expr><literal type="number">274</literal></expr>,<expr><literal type="number">288</literal></expr>,<expr><literal type="number">258</literal></expr>,

<expr><operator>-</operator><literal type="number">250</literal></expr>,<expr><operator>-</operator><literal type="number">1179</literal></expr>,<expr><operator>-</operator><literal type="number">1579</literal></expr>,<expr><operator>-</operator><literal type="number">1836</literal></expr>,<expr><operator>-</operator><literal type="number">1996</literal></expr>,<expr><operator>-</operator><literal type="number">2124</literal></expr>,<expr><operator>-</operator><literal type="number">2253</literal></expr>,<expr><operator>-</operator><literal type="number">2333</literal></expr>,<expr><operator>-</operator><literal type="number">2413</literal></expr>,<expr><operator>-</operator><literal type="number">2477</literal></expr>,<expr><operator>-</operator><literal type="number">2542</literal></expr>,<expr><operator>-</operator><literal type="number">2574</literal></expr>,<expr><operator>-</operator><literal type="number">2607</literal></expr>,<expr><operator>-</operator><literal type="number">2622</literal></expr>,<expr><operator>-</operator><literal type="number">2655</literal></expr>,<expr><literal type="number">1314</literal></expr>,<expr><literal type="number">1313</literal></expr>,<expr><literal type="number">1298</literal></expr>,<expr><literal type="number">1312</literal></expr>,<expr><literal type="number">1282</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">785</literal></expr>,<expr><literal type="number">1040</literal></expr>,<expr><literal type="number">1040</literal></expr>,<expr><literal type="number">1025</literal></expr>,<expr><literal type="number">1025</literal></expr>,<expr><literal type="number">768</literal></expr>,<expr><literal type="number">768</literal></expr>,<expr><literal type="number">768</literal></expr>,<expr><literal type="number">768</literal></expr>,<expr><operator>-</operator><literal type="number">766</literal></expr>,<expr><operator>-</operator><literal type="number">798</literal></expr>,<expr><operator>-</operator><literal type="number">830</literal></expr>,<expr><operator>-</operator><literal type="number">862</literal></expr>,<expr><operator>-</operator><literal type="number">895</literal></expr>,<expr><operator>-</operator><literal type="number">911</literal></expr>,<expr><operator>-</operator><literal type="number">927</literal></expr>,<expr><operator>-</operator><literal type="number">943</literal></expr>,<expr><operator>-</operator><literal type="number">959</literal></expr>,<expr><operator>-</operator><literal type="number">975</literal></expr>,<expr><operator>-</operator><literal type="number">991</literal></expr>,<expr><operator>-</operator><literal type="number">1007</literal></expr>,<expr><operator>-</operator><literal type="number">1023</literal></expr>,<expr><operator>-</operator><literal type="number">1039</literal></expr>,<expr><operator>-</operator><literal type="number">1055</literal></expr>,<expr><operator>-</operator><literal type="number">1070</literal></expr>,<expr><literal type="number">1724</literal></expr>,<expr><literal type="number">1647</literal></expr>,<expr><operator>-</operator><literal type="number">1103</literal></expr>,<expr><operator>-</operator><literal type="number">1119</literal></expr>,<expr><literal type="number">1631</literal></expr>,<expr><literal type="number">1767</literal></expr>,<expr><literal type="number">1662</literal></expr>,<expr><literal type="number">1738</literal></expr>,<expr><literal type="number">1708</literal></expr>,<expr><literal type="number">1723</literal></expr>,<expr><operator>-</operator><literal type="number">1135</literal></expr>,<expr><literal type="number">1780</literal></expr>,<expr><literal type="number">1615</literal></expr>,<expr><literal type="number">1779</literal></expr>,<expr><literal type="number">1599</literal></expr>,<expr><literal type="number">1677</literal></expr>,<expr><literal type="number">1646</literal></expr>,<expr><literal type="number">1778</literal></expr>,<expr><literal type="number">1583</literal></expr>,<expr><operator>-</operator><literal type="number">1151</literal></expr>,<expr><literal type="number">1777</literal></expr>,<expr><literal type="number">1567</literal></expr>,<expr><literal type="number">1737</literal></expr>,<expr><literal type="number">1692</literal></expr>,<expr><literal type="number">1765</literal></expr>,<expr><literal type="number">1722</literal></expr>,<expr><literal type="number">1707</literal></expr>,<expr><literal type="number">1630</literal></expr>,<expr><literal type="number">1751</literal></expr>,<expr><literal type="number">1661</literal></expr>,<expr><literal type="number">1764</literal></expr>,<expr><literal type="number">1614</literal></expr>,<expr><literal type="number">1736</literal></expr>,<expr><literal type="number">1676</literal></expr>,<expr><literal type="number">1763</literal></expr>,<expr><literal type="number">1750</literal></expr>,<expr><literal type="number">1645</literal></expr>,<expr><literal type="number">1598</literal></expr>,<expr><literal type="number">1721</literal></expr>,<expr><literal type="number">1691</literal></expr>,<expr><literal type="number">1762</literal></expr>,<expr><literal type="number">1706</literal></expr>,<expr><literal type="number">1582</literal></expr>,<expr><literal type="number">1761</literal></expr>,<expr><literal type="number">1566</literal></expr>,<expr><operator>-</operator><literal type="number">1167</literal></expr>,<expr><literal type="number">1749</literal></expr>,<expr><literal type="number">1629</literal></expr>,<expr><literal type="number">767</literal></expr>,<expr><literal type="number">766</literal></expr>,<expr><literal type="number">751</literal></expr>,<expr><literal type="number">765</literal></expr>,<expr><literal type="number">494</literal></expr>,<expr><literal type="number">494</literal></expr>,<expr><literal type="number">735</literal></expr>,<expr><literal type="number">764</literal></expr>,<expr><literal type="number">719</literal></expr>,<expr><literal type="number">749</literal></expr>,<expr><literal type="number">734</literal></expr>,<expr><literal type="number">763</literal></expr>,<expr><literal type="number">447</literal></expr>,<expr><literal type="number">447</literal></expr>,<expr><literal type="number">748</literal></expr>,<expr><literal type="number">718</literal></expr>,<expr><literal type="number">477</literal></expr>,<expr><literal type="number">506</literal></expr>,<expr><literal type="number">431</literal></expr>,<expr><literal type="number">491</literal></expr>,<expr><literal type="number">446</literal></expr>,<expr><literal type="number">476</literal></expr>,<expr><literal type="number">461</literal></expr>,<expr><literal type="number">505</literal></expr>,<expr><literal type="number">415</literal></expr>,<expr><literal type="number">430</literal></expr>,<expr><literal type="number">475</literal></expr>,<expr><literal type="number">445</literal></expr>,<expr><literal type="number">504</literal></expr>,<expr><literal type="number">399</literal></expr>,<expr><literal type="number">460</literal></expr>,<expr><literal type="number">489</literal></expr>,<expr><literal type="number">414</literal></expr>,<expr><literal type="number">503</literal></expr>,<expr><literal type="number">383</literal></expr>,<expr><literal type="number">474</literal></expr>,<expr><literal type="number">429</literal></expr>,<expr><literal type="number">459</literal></expr>,<expr><literal type="number">502</literal></expr>,<expr><literal type="number">502</literal></expr>,<expr><literal type="number">746</literal></expr>,<expr><literal type="number">752</literal></expr>,<expr><literal type="number">488</literal></expr>,<expr><literal type="number">398</literal></expr>,<expr><literal type="number">501</literal></expr>,<expr><literal type="number">473</literal></expr>,<expr><literal type="number">413</literal></expr>,<expr><literal type="number">472</literal></expr>,<expr><literal type="number">486</literal></expr>,<expr><literal type="number">271</literal></expr>,<expr><literal type="number">480</literal></expr>,<expr><literal type="number">270</literal></expr>,<expr><operator>-</operator><literal type="number">1439</literal></expr>,<expr><operator>-</operator><literal type="number">1455</literal></expr>,<expr><literal type="number">1357</literal></expr>,<expr><operator>-</operator><literal type="number">1471</literal></expr>,<expr><operator>-</operator><literal type="number">1487</literal></expr>,<expr><operator>-</operator><literal type="number">1503</literal></expr>,<expr><literal type="number">1341</literal></expr>,<expr><literal type="number">1325</literal></expr>,<expr><operator>-</operator><literal type="number">1519</literal></expr>,<expr><literal type="number">1489</literal></expr>,<expr><literal type="number">1463</literal></expr>,<expr><literal type="number">1403</literal></expr>,<expr><literal type="number">1309</literal></expr>,<expr><operator>-</operator><literal type="number">1535</literal></expr>,<expr><literal type="number">1372</literal></expr>,<expr><literal type="number">1448</literal></expr>,<expr><literal type="number">1418</literal></expr>,<expr><literal type="number">1476</literal></expr>,<expr><literal type="number">1356</literal></expr>,<expr><literal type="number">1462</literal></expr>,<expr><literal type="number">1387</literal></expr>,<expr><operator>-</operator><literal type="number">1551</literal></expr>,<expr><literal type="number">1475</literal></expr>,<expr><literal type="number">1340</literal></expr>,<expr><literal type="number">1447</literal></expr>,<expr><literal type="number">1402</literal></expr>,<expr><literal type="number">1386</literal></expr>,<expr><operator>-</operator><literal type="number">1567</literal></expr>,<expr><literal type="number">1068</literal></expr>,<expr><literal type="number">1068</literal></expr>,<expr><literal type="number">1474</literal></expr>,<expr><literal type="number">1461</literal></expr>,<expr><literal type="number">455</literal></expr>,<expr><literal type="number">380</literal></expr>,<expr><literal type="number">468</literal></expr>,<expr><literal type="number">440</literal></expr>,<expr><literal type="number">395</literal></expr>,<expr><literal type="number">425</literal></expr>,<expr><literal type="number">410</literal></expr>,<expr><literal type="number">454</literal></expr>,<expr><literal type="number">364</literal></expr>,<expr><literal type="number">467</literal></expr>,<expr><literal type="number">466</literal></expr>,<expr><literal type="number">464</literal></expr>,<expr><literal type="number">453</literal></expr>,<expr><literal type="number">269</literal></expr>,<expr><literal type="number">409</literal></expr>,<expr><literal type="number">448</literal></expr>,<expr><literal type="number">268</literal></expr>,<expr><literal type="number">432</literal></expr>,<expr><literal type="number">1371</literal></expr>,<expr><literal type="number">1473</literal></expr>,<expr><literal type="number">1432</literal></expr>,<expr><literal type="number">1417</literal></expr>,<expr><literal type="number">1308</literal></expr>,<expr><literal type="number">1460</literal></expr>,<expr><literal type="number">1355</literal></expr>,<expr><literal type="number">1446</literal></expr>,<expr><literal type="number">1459</literal></expr>,<expr><literal type="number">1431</literal></expr>,<expr><literal type="number">1083</literal></expr>,<expr><literal type="number">1083</literal></expr>,<expr><literal type="number">1401</literal></expr>,<expr><literal type="number">1416</literal></expr>,<expr><literal type="number">1458</literal></expr>,<expr><literal type="number">1445</literal></expr>,<expr><literal type="number">1067</literal></expr>,<expr><literal type="number">1067</literal></expr>,<expr><literal type="number">1370</literal></expr>,<expr><literal type="number">1457</literal></expr>,<expr><literal type="number">1051</literal></expr>,<expr><literal type="number">1051</literal></expr>,<expr><literal type="number">1291</literal></expr>,<expr><literal type="number">1430</literal></expr>,<expr><literal type="number">1385</literal></expr>,<expr><literal type="number">1444</literal></expr>,<expr><literal type="number">1354</literal></expr>,<expr><literal type="number">1415</literal></expr>,<expr><literal type="number">1400</literal></expr>,<expr><literal type="number">1443</literal></expr>,<expr><literal type="number">1082</literal></expr>,<expr><literal type="number">1082</literal></expr>,<expr><literal type="number">1173</literal></expr>,<expr><literal type="number">1113</literal></expr>,<expr><literal type="number">1186</literal></expr>,<expr><literal type="number">1066</literal></expr>,<expr><literal type="number">1185</literal></expr>,<expr><literal type="number">1050</literal></expr>,<expr><operator>-</operator><literal type="number">1967</literal></expr>,<expr><literal type="number">1158</literal></expr>,<expr><literal type="number">1128</literal></expr>,<expr><literal type="number">1172</literal></expr>,<expr><literal type="number">1097</literal></expr>,<expr><literal type="number">1171</literal></expr>,<expr><literal type="number">1081</literal></expr>,<expr><operator>-</operator><literal type="number">1983</literal></expr>,<expr><literal type="number">1157</literal></expr>,<expr><literal type="number">1112</literal></expr>,<expr><literal type="number">416</literal></expr>,<expr><literal type="number">266</literal></expr>,<expr><literal type="number">375</literal></expr>,<expr><literal type="number">400</literal></expr>,<expr><literal type="number">1170</literal></expr>,<expr><literal type="number">1142</literal></expr>,<expr><literal type="number">1127</literal></expr>,<expr><literal type="number">1065</literal></expr>,<expr><literal type="number">793</literal></expr>,<expr><literal type="number">793</literal></expr>,<expr><literal type="number">1169</literal></expr>,<expr><literal type="number">1033</literal></expr>,<expr><literal type="number">1156</literal></expr>,<expr><literal type="number">1096</literal></expr>,<expr><literal type="number">1141</literal></expr>,<expr><literal type="number">1111</literal></expr>,<expr><literal type="number">1155</literal></expr>,<expr><literal type="number">1080</literal></expr>,<expr><literal type="number">1126</literal></expr>,<expr><literal type="number">1140</literal></expr>,<expr><literal type="number">898</literal></expr>,<expr><literal type="number">898</literal></expr>,<expr><literal type="number">808</literal></expr>,<expr><literal type="number">808</literal></expr>,<expr><literal type="number">897</literal></expr>,<expr><literal type="number">897</literal></expr>,<expr><literal type="number">792</literal></expr>,<expr><literal type="number">792</literal></expr>,<expr><literal type="number">1095</literal></expr>,<expr><literal type="number">1152</literal></expr>,<expr><literal type="number">1032</literal></expr>,<expr><literal type="number">1125</literal></expr>,<expr><literal type="number">1110</literal></expr>,<expr><literal type="number">1139</literal></expr>,<expr><literal type="number">1079</literal></expr>,<expr><literal type="number">1124</literal></expr>,<expr><literal type="number">882</literal></expr>,<expr><literal type="number">807</literal></expr>,<expr><literal type="number">838</literal></expr>,<expr><literal type="number">881</literal></expr>,<expr><literal type="number">853</literal></expr>,<expr><literal type="number">791</literal></expr>,<expr><operator>-</operator><literal type="number">2319</literal></expr>,<expr><literal type="number">867</literal></expr>,<expr><literal type="number">368</literal></expr>,<expr><literal type="number">263</literal></expr>,<expr><literal type="number">822</literal></expr>,<expr><literal type="number">852</literal></expr>,<expr><literal type="number">837</literal></expr>,<expr><literal type="number">866</literal></expr>,<expr><literal type="number">806</literal></expr>,<expr><literal type="number">865</literal></expr>,<expr><operator>-</operator><literal type="number">2399</literal></expr>,<expr><literal type="number">851</literal></expr>,<expr><literal type="number">352</literal></expr>,<expr><literal type="number">262</literal></expr>,<expr><literal type="number">534</literal></expr>,<expr><literal type="number">534</literal></expr>,<expr><literal type="number">821</literal></expr>,<expr><literal type="number">836</literal></expr>,<expr><literal type="number">594</literal></expr>,<expr><literal type="number">594</literal></expr>,<expr><literal type="number">549</literal></expr>,<expr><literal type="number">549</literal></expr>,<expr><literal type="number">593</literal></expr>,<expr><literal type="number">593</literal></expr>,<expr><literal type="number">533</literal></expr>,<expr><literal type="number">533</literal></expr>,<expr><literal type="number">848</literal></expr>,<expr><literal type="number">773</literal></expr>,<expr><literal type="number">579</literal></expr>,<expr><literal type="number">579</literal></expr>,<expr><literal type="number">564</literal></expr>,<expr><literal type="number">578</literal></expr>,<expr><literal type="number">548</literal></expr>,<expr><literal type="number">563</literal></expr>,<expr><literal type="number">276</literal></expr>,<expr><literal type="number">276</literal></expr>,<expr><literal type="number">577</literal></expr>,<expr><literal type="number">576</literal></expr>,<expr><literal type="number">306</literal></expr>,<expr><literal type="number">291</literal></expr>,<expr><literal type="number">516</literal></expr>,<expr><literal type="number">560</literal></expr>,<expr><literal type="number">305</literal></expr>,<expr><literal type="number">305</literal></expr>,<expr><literal type="number">275</literal></expr>,<expr><literal type="number">259</literal></expr>,

<expr><operator>-</operator><literal type="number">251</literal></expr>,<expr><operator>-</operator><literal type="number">892</literal></expr>,<expr><operator>-</operator><literal type="number">2058</literal></expr>,<expr><operator>-</operator><literal type="number">2620</literal></expr>,<expr><operator>-</operator><literal type="number">2828</literal></expr>,<expr><operator>-</operator><literal type="number">2957</literal></expr>,<expr><operator>-</operator><literal type="number">3023</literal></expr>,<expr><operator>-</operator><literal type="number">3039</literal></expr>,<expr><literal type="number">1041</literal></expr>,<expr><literal type="number">1041</literal></expr>,<expr><literal type="number">1040</literal></expr>,<expr><literal type="number">1040</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><operator>-</operator><literal type="number">511</literal></expr>,<expr><operator>-</operator><literal type="number">527</literal></expr>,<expr><operator>-</operator><literal type="number">543</literal></expr>,<expr><operator>-</operator><literal type="number">559</literal></expr>,<expr><literal type="number">1530</literal></expr>,<expr><operator>-</operator><literal type="number">575</literal></expr>,<expr><operator>-</operator><literal type="number">591</literal></expr>,<expr><literal type="number">1528</literal></expr>,<expr><literal type="number">1527</literal></expr>,<expr><literal type="number">1407</literal></expr>,<expr><literal type="number">1526</literal></expr>,<expr><literal type="number">1391</literal></expr>,<expr><literal type="number">1023</literal></expr>,<expr><literal type="number">1023</literal></expr>,<expr><literal type="number">1023</literal></expr>,<expr><literal type="number">1023</literal></expr>,<expr><literal type="number">1525</literal></expr>,<expr><literal type="number">1375</literal></expr>,<expr><literal type="number">1268</literal></expr>,<expr><literal type="number">1268</literal></expr>,<expr><literal type="number">1103</literal></expr>,<expr><literal type="number">1103</literal></expr>,<expr><literal type="number">1087</literal></expr>,<expr><literal type="number">1087</literal></expr>,<expr><literal type="number">1039</literal></expr>,<expr><literal type="number">1039</literal></expr>,<expr><literal type="number">1523</literal></expr>,<expr><operator>-</operator><literal type="number">604</literal></expr>,<expr><literal type="number">815</literal></expr>,<expr><literal type="number">815</literal></expr>,<expr><literal type="number">815</literal></expr>,<expr><literal type="number">815</literal></expr>,<expr><literal type="number">510</literal></expr>,<expr><literal type="number">495</literal></expr>,<expr><literal type="number">509</literal></expr>,<expr><literal type="number">479</literal></expr>,<expr><literal type="number">508</literal></expr>,<expr><literal type="number">463</literal></expr>,<expr><literal type="number">507</literal></expr>,<expr><literal type="number">447</literal></expr>,<expr><literal type="number">431</literal></expr>,<expr><literal type="number">505</literal></expr>,<expr><literal type="number">415</literal></expr>,<expr><literal type="number">399</literal></expr>,<expr><operator>-</operator><literal type="number">734</literal></expr>,<expr><operator>-</operator><literal type="number">782</literal></expr>,<expr><literal type="number">1262</literal></expr>,<expr><operator>-</operator><literal type="number">815</literal></expr>,<expr><literal type="number">1259</literal></expr>,<expr><literal type="number">1244</literal></expr>,<expr><operator>-</operator><literal type="number">831</literal></expr>,<expr><literal type="number">1258</literal></expr>,<expr><literal type="number">1228</literal></expr>,<expr><operator>-</operator><literal type="number">847</literal></expr>,<expr><operator>-</operator><literal type="number">863</literal></expr>,<expr><literal type="number">1196</literal></expr>,<expr><operator>-</operator><literal type="number">879</literal></expr>,<expr><literal type="number">1253</literal></expr>,<expr><literal type="number">987</literal></expr>,<expr><literal type="number">987</literal></expr>,<expr><literal type="number">748</literal></expr>,<expr><operator>-</operator><literal type="number">767</literal></expr>,<expr><literal type="number">493</literal></expr>,<expr><literal type="number">493</literal></expr>,<expr><literal type="number">462</literal></expr>,<expr><literal type="number">477</literal></expr>,<expr><literal type="number">414</literal></expr>,<expr><literal type="number">414</literal></expr>,<expr><literal type="number">686</literal></expr>,<expr><literal type="number">669</literal></expr>,<expr><literal type="number">478</literal></expr>,<expr><literal type="number">446</literal></expr>,<expr><literal type="number">461</literal></expr>,<expr><literal type="number">445</literal></expr>,<expr><literal type="number">474</literal></expr>,<expr><literal type="number">429</literal></expr>,<expr><literal type="number">487</literal></expr>,<expr><literal type="number">458</literal></expr>,<expr><literal type="number">412</literal></expr>,<expr><literal type="number">471</literal></expr>,<expr><literal type="number">1266</literal></expr>,<expr><literal type="number">1264</literal></expr>,<expr><literal type="number">1009</literal></expr>,<expr><literal type="number">1009</literal></expr>,<expr><literal type="number">799</literal></expr>,<expr><literal type="number">799</literal></expr>,<expr><operator>-</operator><literal type="number">1019</literal></expr>,<expr><operator>-</operator><literal type="number">1276</literal></expr>,<expr><operator>-</operator><literal type="number">1452</literal></expr>,<expr><operator>-</operator><literal type="number">1581</literal></expr>,<expr><operator>-</operator><literal type="number">1677</literal></expr>,<expr><operator>-</operator><literal type="number">1757</literal></expr>,<expr><operator>-</operator><literal type="number">1821</literal></expr>,<expr><operator>-</operator><literal type="number">1886</literal></expr>,<expr><operator>-</operator><literal type="number">1933</literal></expr>,<expr><operator>-</operator><literal type="number">1997</literal></expr>,<expr><literal type="number">1257</literal></expr>,<expr><literal type="number">1257</literal></expr>,<expr><literal type="number">1483</literal></expr>,<expr><literal type="number">1468</literal></expr>,<expr><literal type="number">1512</literal></expr>,<expr><literal type="number">1422</literal></expr>,<expr><literal type="number">1497</literal></expr>,<expr><literal type="number">1406</literal></expr>,<expr><literal type="number">1467</literal></expr>,<expr><literal type="number">1496</literal></expr>,<expr><literal type="number">1421</literal></expr>,<expr><literal type="number">1510</literal></expr>,<expr><literal type="number">1134</literal></expr>,<expr><literal type="number">1134</literal></expr>,<expr><literal type="number">1225</literal></expr>,<expr><literal type="number">1225</literal></expr>,<expr><literal type="number">1466</literal></expr>,<expr><literal type="number">1451</literal></expr>,<expr><literal type="number">1374</literal></expr>,<expr><literal type="number">1405</literal></expr>,<expr><literal type="number">1252</literal></expr>,<expr><literal type="number">1252</literal></expr>,<expr><literal type="number">1358</literal></expr>,<expr><literal type="number">1480</literal></expr>,<expr><literal type="number">1164</literal></expr>,<expr><literal type="number">1164</literal></expr>,<expr><literal type="number">1251</literal></expr>,<expr><literal type="number">1251</literal></expr>,<expr><literal type="number">1238</literal></expr>,<expr><literal type="number">1238</literal></expr>,<expr><literal type="number">1389</literal></expr>,<expr><literal type="number">1465</literal></expr>,<expr><operator>-</operator><literal type="number">1407</literal></expr>,<expr><literal type="number">1054</literal></expr>,<expr><literal type="number">1101</literal></expr>,<expr><operator>-</operator><literal type="number">1423</literal></expr>,<expr><literal type="number">1207</literal></expr>,<expr><operator>-</operator><literal type="number">1439</literal></expr>,<expr><literal type="number">830</literal></expr>,<expr><literal type="number">830</literal></expr>,<expr><literal type="number">1248</literal></expr>,<expr><literal type="number">1038</literal></expr>,<expr><literal type="number">1237</literal></expr>,<expr><literal type="number">1117</literal></expr>,<expr><literal type="number">1223</literal></expr>,<expr><literal type="number">1148</literal></expr>,<expr><literal type="number">1236</literal></expr>,<expr><literal type="number">1208</literal></expr>,<expr><literal type="number">411</literal></expr>,<expr><literal type="number">426</literal></expr>,<expr><literal type="number">395</literal></expr>,<expr><literal type="number">410</literal></expr>,<expr><literal type="number">379</literal></expr>,<expr><literal type="number">269</literal></expr>,<expr><literal type="number">1193</literal></expr>,<expr><literal type="number">1222</literal></expr>,<expr><literal type="number">1132</literal></expr>,<expr><literal type="number">1235</literal></expr>,<expr><literal type="number">1221</literal></expr>,<expr><literal type="number">1116</literal></expr>,<expr><literal type="number">976</literal></expr>,<expr><literal type="number">976</literal></expr>,<expr><literal type="number">1192</literal></expr>,<expr><literal type="number">1162</literal></expr>,<expr><literal type="number">1177</literal></expr>,<expr><literal type="number">1220</literal></expr>,<expr><literal type="number">1131</literal></expr>,<expr><literal type="number">1191</literal></expr>,<expr><literal type="number">963</literal></expr>,<expr><literal type="number">963</literal></expr>,<expr><operator>-</operator><literal type="number">1647</literal></expr>,<expr><literal type="number">961</literal></expr>,<expr><literal type="number">780</literal></expr>,<expr><operator>-</operator><literal type="number">1663</literal></expr>,<expr><literal type="number">558</literal></expr>,<expr><literal type="number">558</literal></expr>,<expr><literal type="number">994</literal></expr>,<expr><literal type="number">993</literal></expr>,<expr><literal type="number">437</literal></expr>,<expr><literal type="number">408</literal></expr>,<expr><literal type="number">393</literal></expr>,<expr><literal type="number">407</literal></expr>,<expr><literal type="number">829</literal></expr>,<expr><literal type="number">978</literal></expr>,<expr><literal type="number">813</literal></expr>,<expr><literal type="number">797</literal></expr>,<expr><literal type="number">947</literal></expr>,<expr><operator>-</operator><literal type="number">1743</literal></expr>,<expr><literal type="number">721</literal></expr>,<expr><literal type="number">721</literal></expr>,<expr><literal type="number">377</literal></expr>,<expr><literal type="number">392</literal></expr>,<expr><literal type="number">844</literal></expr>,<expr><literal type="number">950</literal></expr>,<expr><literal type="number">828</literal></expr>,<expr><literal type="number">890</literal></expr>,<expr><literal type="number">706</literal></expr>,<expr><literal type="number">706</literal></expr>,<expr><literal type="number">812</literal></expr>,<expr><literal type="number">859</literal></expr>,<expr><literal type="number">796</literal></expr>,<expr><literal type="number">960</literal></expr>,<expr><literal type="number">948</literal></expr>,<expr><literal type="number">843</literal></expr>,<expr><literal type="number">934</literal></expr>,<expr><literal type="number">874</literal></expr>,<expr><literal type="number">571</literal></expr>,<expr><literal type="number">571</literal></expr>,<expr><operator>-</operator><literal type="number">1919</literal></expr>,<expr><literal type="number">690</literal></expr>,<expr><literal type="number">555</literal></expr>,<expr><literal type="number">689</literal></expr>,<expr><literal type="number">421</literal></expr>,<expr><literal type="number">346</literal></expr>,<expr><literal type="number">539</literal></expr>,<expr><literal type="number">539</literal></expr>,<expr><literal type="number">944</literal></expr>,<expr><literal type="number">779</literal></expr>,<expr><literal type="number">918</literal></expr>,<expr><literal type="number">873</literal></expr>,<expr><literal type="number">932</literal></expr>,<expr><literal type="number">842</literal></expr>,<expr><literal type="number">903</literal></expr>,<expr><literal type="number">888</literal></expr>,<expr><literal type="number">570</literal></expr>,<expr><literal type="number">570</literal></expr>,<expr><literal type="number">931</literal></expr>,<expr><literal type="number">917</literal></expr>,<expr><literal type="number">674</literal></expr>,<expr><literal type="number">674</literal></expr>,<expr><operator>-</operator><literal type="number">2575</literal></expr>,<expr><literal type="number">1562</literal></expr>,<expr><operator>-</operator><literal type="number">2591</literal></expr>,<expr><literal type="number">1609</literal></expr>,<expr><operator>-</operator><literal type="number">2607</literal></expr>,<expr><literal type="number">1654</literal></expr>,<expr><literal type="number">1322</literal></expr>,<expr><literal type="number">1322</literal></expr>,<expr><literal type="number">1441</literal></expr>,<expr><literal type="number">1441</literal></expr>,<expr><literal type="number">1696</literal></expr>,<expr><literal type="number">1546</literal></expr>,<expr><literal type="number">1683</literal></expr>,<expr><literal type="number">1593</literal></expr>,<expr><literal type="number">1669</literal></expr>,<expr><literal type="number">1624</literal></expr>,<expr><literal type="number">1426</literal></expr>,<expr><literal type="number">1426</literal></expr>,<expr><literal type="number">1321</literal></expr>,<expr><literal type="number">1321</literal></expr>,<expr><literal type="number">1639</literal></expr>,<expr><literal type="number">1680</literal></expr>,<expr><literal type="number">1425</literal></expr>,<expr><literal type="number">1425</literal></expr>,<expr><literal type="number">1305</literal></expr>,<expr><literal type="number">1305</literal></expr>,<expr><literal type="number">1545</literal></expr>,<expr><literal type="number">1668</literal></expr>,<expr><literal type="number">1608</literal></expr>,<expr><literal type="number">1623</literal></expr>,<expr><literal type="number">1667</literal></expr>,<expr><literal type="number">1592</literal></expr>,<expr><literal type="number">1638</literal></expr>,<expr><literal type="number">1666</literal></expr>,<expr><literal type="number">1320</literal></expr>,<expr><literal type="number">1320</literal></expr>,<expr><literal type="number">1652</literal></expr>,<expr><literal type="number">1607</literal></expr>,<expr><literal type="number">1409</literal></expr>,<expr><literal type="number">1409</literal></expr>,<expr><literal type="number">1304</literal></expr>,<expr><literal type="number">1304</literal></expr>,<expr><literal type="number">1288</literal></expr>,<expr><literal type="number">1288</literal></expr>,<expr><literal type="number">1664</literal></expr>,<expr><literal type="number">1637</literal></expr>,<expr><literal type="number">1395</literal></expr>,<expr><literal type="number">1395</literal></expr>,<expr><literal type="number">1335</literal></expr>,<expr><literal type="number">1335</literal></expr>,<expr><literal type="number">1622</literal></expr>,<expr><literal type="number">1636</literal></expr>,<expr><literal type="number">1394</literal></expr>,<expr><literal type="number">1394</literal></expr>,<expr><literal type="number">1319</literal></expr>,<expr><literal type="number">1319</literal></expr>,<expr><literal type="number">1606</literal></expr>,<expr><literal type="number">1621</literal></expr>,<expr><literal type="number">1392</literal></expr>,<expr><literal type="number">1392</literal></expr>,<expr><literal type="number">1137</literal></expr>,<expr><literal type="number">1137</literal></expr>,<expr><literal type="number">1137</literal></expr>,<expr><literal type="number">1137</literal></expr>,<expr><literal type="number">345</literal></expr>,<expr><literal type="number">390</literal></expr>,<expr><literal type="number">360</literal></expr>,<expr><literal type="number">375</literal></expr>,<expr><literal type="number">404</literal></expr>,<expr><literal type="number">373</literal></expr>,<expr><literal type="number">1047</literal></expr>,<expr><operator>-</operator><literal type="number">2751</literal></expr>,<expr><operator>-</operator><literal type="number">2767</literal></expr>,<expr><operator>-</operator><literal type="number">2783</literal></expr>,<expr><literal type="number">1062</literal></expr>,<expr><literal type="number">1121</literal></expr>,<expr><literal type="number">1046</literal></expr>,<expr><operator>-</operator><literal type="number">2799</literal></expr>,<expr><literal type="number">1077</literal></expr>,<expr><operator>-</operator><literal type="number">2815</literal></expr>,<expr><literal type="number">1106</literal></expr>,<expr><literal type="number">1061</literal></expr>,<expr><literal type="number">789</literal></expr>,<expr><literal type="number">789</literal></expr>,<expr><literal type="number">1105</literal></expr>,<expr><literal type="number">1104</literal></expr>,<expr><literal type="number">263</literal></expr>,<expr><literal type="number">355</literal></expr>,<expr><literal type="number">310</literal></expr>,<expr><literal type="number">340</literal></expr>,<expr><literal type="number">325</literal></expr>,<expr><literal type="number">354</literal></expr>,<expr><literal type="number">352</literal></expr>,<expr><literal type="number">262</literal></expr>,<expr><literal type="number">339</literal></expr>,<expr><literal type="number">324</literal></expr>,<expr><literal type="number">1091</literal></expr>,<expr><literal type="number">1076</literal></expr>,<expr><literal type="number">1029</literal></expr>,<expr><literal type="number">1090</literal></expr>,<expr><literal type="number">1060</literal></expr>,<expr><literal type="number">1075</literal></expr>,<expr><literal type="number">833</literal></expr>,<expr><literal type="number">833</literal></expr>,<expr><literal type="number">788</literal></expr>,<expr><literal type="number">788</literal></expr>,<expr><literal type="number">1088</literal></expr>,<expr><literal type="number">1028</literal></expr>,<expr><literal type="number">818</literal></expr>,<expr><literal type="number">818</literal></expr>,<expr><literal type="number">803</literal></expr>,<expr><literal type="number">803</literal></expr>,<expr><literal type="number">561</literal></expr>,<expr><literal type="number">561</literal></expr>,<expr><literal type="number">531</literal></expr>,<expr><literal type="number">531</literal></expr>,<expr><literal type="number">816</literal></expr>,<expr><literal type="number">771</literal></expr>,<expr><literal type="number">546</literal></expr>,<expr><literal type="number">546</literal></expr>,<expr><literal type="number">289</literal></expr>,<expr><literal type="number">274</literal></expr>,<expr><literal type="number">288</literal></expr>,<expr><literal type="number">258</literal></expr>,

<expr><operator>-</operator><literal type="number">253</literal></expr>,<expr><operator>-</operator><literal type="number">317</literal></expr>,<expr><operator>-</operator><literal type="number">381</literal></expr>,<expr><operator>-</operator><literal type="number">446</literal></expr>,<expr><operator>-</operator><literal type="number">478</literal></expr>,<expr><operator>-</operator><literal type="number">509</literal></expr>,<expr><literal type="number">1279</literal></expr>,<expr><literal type="number">1279</literal></expr>,<expr><operator>-</operator><literal type="number">811</literal></expr>,<expr><operator>-</operator><literal type="number">1179</literal></expr>,<expr><operator>-</operator><literal type="number">1451</literal></expr>,<expr><operator>-</operator><literal type="number">1756</literal></expr>,<expr><operator>-</operator><literal type="number">1900</literal></expr>,<expr><operator>-</operator><literal type="number">2028</literal></expr>,<expr><operator>-</operator><literal type="number">2189</literal></expr>,<expr><operator>-</operator><literal type="number">2253</literal></expr>,<expr><operator>-</operator><literal type="number">2333</literal></expr>,<expr><operator>-</operator><literal type="number">2414</literal></expr>,<expr><operator>-</operator><literal type="number">2445</literal></expr>,<expr><operator>-</operator><literal type="number">2511</literal></expr>,<expr><operator>-</operator><literal type="number">2526</literal></expr>,<expr><literal type="number">1313</literal></expr>,<expr><literal type="number">1298</literal></expr>,<expr><operator>-</operator><literal type="number">2559</literal></expr>,<expr><literal type="number">1041</literal></expr>,<expr><literal type="number">1041</literal></expr>,<expr><literal type="number">1040</literal></expr>,<expr><literal type="number">1040</literal></expr>,<expr><literal type="number">1025</literal></expr>,<expr><literal type="number">1025</literal></expr>,<expr><literal type="number">1024</literal></expr>,<expr><literal type="number">1024</literal></expr>,<expr><literal type="number">1022</literal></expr>,<expr><literal type="number">1007</literal></expr>,<expr><literal type="number">1021</literal></expr>,<expr><literal type="number">991</literal></expr>,<expr><literal type="number">1020</literal></expr>,<expr><literal type="number">975</literal></expr>,<expr><literal type="number">1019</literal></expr>,<expr><literal type="number">959</literal></expr>,<expr><literal type="number">687</literal></expr>,<expr><literal type="number">687</literal></expr>,<expr><literal type="number">1018</literal></expr>,<expr><literal type="number">1017</literal></expr>,<expr><literal type="number">671</literal></expr>,<expr><literal type="number">671</literal></expr>,<expr><literal type="number">655</literal></expr>,<expr><literal type="number">655</literal></expr>,<expr><literal type="number">1016</literal></expr>,<expr><literal type="number">1015</literal></expr>,<expr><literal type="number">639</literal></expr>,<expr><literal type="number">639</literal></expr>,<expr><literal type="number">758</literal></expr>,<expr><literal type="number">758</literal></expr>,<expr><literal type="number">623</literal></expr>,<expr><literal type="number">623</literal></expr>,<expr><literal type="number">757</literal></expr>,<expr><literal type="number">607</literal></expr>,<expr><literal type="number">756</literal></expr>,<expr><literal type="number">591</literal></expr>,<expr><literal type="number">755</literal></expr>,<expr><literal type="number">575</literal></expr>,<expr><literal type="number">754</literal></expr>,<expr><literal type="number">559</literal></expr>,<expr><literal type="number">543</literal></expr>,<expr><literal type="number">543</literal></expr>,<expr><literal type="number">1009</literal></expr>,<expr><literal type="number">783</literal></expr>,<expr><operator>-</operator><literal type="number">575</literal></expr>,<expr><operator>-</operator><literal type="number">621</literal></expr>,<expr><operator>-</operator><literal type="number">685</literal></expr>,<expr><operator>-</operator><literal type="number">749</literal></expr>,<expr><literal type="number">496</literal></expr>,<expr><operator>-</operator><literal type="number">590</literal></expr>,<expr><literal type="number">750</literal></expr>,<expr><literal type="number">749</literal></expr>,<expr><literal type="number">734</literal></expr>,<expr><literal type="number">748</literal></expr>,<expr><literal type="number">974</literal></expr>,<expr><literal type="number">989</literal></expr>,<expr><literal type="number">1003</literal></expr>,<expr><literal type="number">958</literal></expr>,<expr><literal type="number">988</literal></expr>,<expr><literal type="number">973</literal></expr>,<expr><literal type="number">1002</literal></expr>,<expr><literal type="number">942</literal></expr>,<expr><literal type="number">987</literal></expr>,<expr><literal type="number">957</literal></expr>,<expr><literal type="number">972</literal></expr>,<expr><literal type="number">1001</literal></expr>,<expr><literal type="number">926</literal></expr>,<expr><literal type="number">986</literal></expr>,<expr><literal type="number">941</literal></expr>,<expr><literal type="number">971</literal></expr>,<expr><literal type="number">956</literal></expr>,<expr><literal type="number">1000</literal></expr>,<expr><literal type="number">910</literal></expr>,<expr><literal type="number">985</literal></expr>,<expr><literal type="number">925</literal></expr>,<expr><literal type="number">999</literal></expr>,<expr><literal type="number">894</literal></expr>,<expr><literal type="number">970</literal></expr>,<expr><operator>-</operator><literal type="number">1071</literal></expr>,<expr><operator>-</operator><literal type="number">1087</literal></expr>,<expr><operator>-</operator><literal type="number">1102</literal></expr>,<expr><literal type="number">1390</literal></expr>,<expr><operator>-</operator><literal type="number">1135</literal></expr>,<expr><literal type="number">1436</literal></expr>,<expr><literal type="number">1509</literal></expr>,<expr><literal type="number">1451</literal></expr>,<expr><literal type="number">1374</literal></expr>,<expr><operator>-</operator><literal type="number">1151</literal></expr>,<expr><literal type="number">1405</literal></expr>,<expr><literal type="number">1358</literal></expr>,<expr><literal type="number">1480</literal></expr>,<expr><literal type="number">1420</literal></expr>,<expr><operator>-</operator><literal type="number">1167</literal></expr>,<expr><literal type="number">1507</literal></expr>,<expr><literal type="number">1494</literal></expr>,<expr><literal type="number">1389</literal></expr>,<expr><literal type="number">1342</literal></expr>,<expr><literal type="number">1465</literal></expr>,<expr><literal type="number">1435</literal></expr>,<expr><literal type="number">1450</literal></expr>,<expr><literal type="number">1326</literal></expr>,<expr><literal type="number">1505</literal></expr>,<expr><literal type="number">1310</literal></expr>,<expr><literal type="number">1493</literal></expr>,<expr><literal type="number">1373</literal></expr>,<expr><literal type="number">1479</literal></expr>,<expr><literal type="number">1404</literal></expr>,<expr><literal type="number">1492</literal></expr>,<expr><literal type="number">1464</literal></expr>,<expr><literal type="number">1419</literal></expr>,<expr><literal type="number">428</literal></expr>,<expr><literal type="number">443</literal></expr>,<expr><literal type="number">472</literal></expr>,<expr><literal type="number">397</literal></expr>,<expr><literal type="number">736</literal></expr>,<expr><literal type="number">526</literal></expr>,<expr><literal type="number">464</literal></expr>,<expr><literal type="number">464</literal></expr>,<expr><literal type="number">486</literal></expr>,<expr><literal type="number">457</literal></expr>,<expr><literal type="number">442</literal></expr>,<expr><literal type="number">471</literal></expr>,<expr><literal type="number">484</literal></expr>,<expr><literal type="number">482</literal></expr>,<expr><literal type="number">1357</literal></expr>,<expr><literal type="number">1449</literal></expr>,<expr><literal type="number">1434</literal></expr>,<expr><literal type="number">1478</literal></expr>,<expr><literal type="number">1388</literal></expr>,<expr><literal type="number">1491</literal></expr>,<expr><literal type="number">1341</literal></expr>,<expr><literal type="number">1490</literal></expr>,<expr><literal type="number">1325</literal></expr>,<expr><literal type="number">1489</literal></expr>,<expr><literal type="number">1463</literal></expr>,<expr><literal type="number">1403</literal></expr>,<expr><literal type="number">1309</literal></expr>,<expr><literal type="number">1477</literal></expr>,<expr><literal type="number">1372</literal></expr>,<expr><literal type="number">1448</literal></expr>,<expr><literal type="number">1418</literal></expr>,<expr><literal type="number">1433</literal></expr>,<expr><literal type="number">1476</literal></expr>,<expr><literal type="number">1356</literal></expr>,<expr><literal type="number">1462</literal></expr>,<expr><literal type="number">1387</literal></expr>,<expr><operator>-</operator><literal type="number">1439</literal></expr>,<expr><literal type="number">1475</literal></expr>,<expr><literal type="number">1340</literal></expr>,<expr><literal type="number">1447</literal></expr>,<expr><literal type="number">1402</literal></expr>,<expr><literal type="number">1474</literal></expr>,<expr><literal type="number">1324</literal></expr>,<expr><literal type="number">1461</literal></expr>,<expr><literal type="number">1371</literal></expr>,<expr><literal type="number">1473</literal></expr>,<expr><literal type="number">269</literal></expr>,<expr><literal type="number">448</literal></expr>,<expr><literal type="number">1432</literal></expr>,<expr><literal type="number">1417</literal></expr>,<expr><literal type="number">1308</literal></expr>,<expr><literal type="number">1460</literal></expr>,<expr><operator>-</operator><literal type="number">1711</literal></expr>,<expr><literal type="number">1459</literal></expr>,<expr><operator>-</operator><literal type="number">1727</literal></expr>,<expr><literal type="number">1441</literal></expr>,<expr><literal type="number">1099</literal></expr>,<expr><literal type="number">1099</literal></expr>,<expr><literal type="number">1446</literal></expr>,<expr><literal type="number">1386</literal></expr>,<expr><literal type="number">1431</literal></expr>,<expr><literal type="number">1401</literal></expr>,<expr><operator>-</operator><literal type="number">1743</literal></expr>,<expr><literal type="number">1289</literal></expr>,<expr><literal type="number">1083</literal></expr>,<expr><literal type="number">1083</literal></expr>,<expr><literal type="number">1160</literal></expr>,<expr><literal type="number">1160</literal></expr>,<expr><literal type="number">1458</literal></expr>,<expr><literal type="number">1445</literal></expr>,<expr><literal type="number">1067</literal></expr>,<expr><literal type="number">1067</literal></expr>,<expr><literal type="number">1370</literal></expr>,<expr><literal type="number">1457</literal></expr>,<expr><literal type="number">1307</literal></expr>,<expr><literal type="number">1430</literal></expr>,<expr><literal type="number">1129</literal></expr>,<expr><literal type="number">1129</literal></expr>,<expr><literal type="number">1098</literal></expr>,<expr><literal type="number">1098</literal></expr>,<expr><literal type="number">268</literal></expr>,<expr><literal type="number">432</literal></expr>,<expr><literal type="number">267</literal></expr>,<expr><literal type="number">416</literal></expr>,<expr><literal type="number">266</literal></expr>,<expr><literal type="number">400</literal></expr>,<expr><operator>-</operator><literal type="number">1887</literal></expr>,<expr><literal type="number">1144</literal></expr>,<expr><literal type="number">1187</literal></expr>,<expr><literal type="number">1082</literal></expr>,<expr><literal type="number">1173</literal></expr>,<expr><literal type="number">1113</literal></expr>,<expr><literal type="number">1186</literal></expr>,<expr><literal type="number">1066</literal></expr>,<expr><literal type="number">1050</literal></expr>,<expr><literal type="number">1158</literal></expr>,<expr><literal type="number">1128</literal></expr>,<expr><literal type="number">1143</literal></expr>,<expr><literal type="number">1172</literal></expr>,<expr><literal type="number">1097</literal></expr>,<expr><literal type="number">1171</literal></expr>,<expr><literal type="number">1081</literal></expr>,<expr><literal type="number">420</literal></expr>,<expr><literal type="number">391</literal></expr>,<expr><literal type="number">1157</literal></expr>,<expr><literal type="number">1112</literal></expr>,<expr><literal type="number">1170</literal></expr>,<expr><literal type="number">1142</literal></expr>,<expr><literal type="number">1127</literal></expr>,<expr><literal type="number">1065</literal></expr>,<expr><literal type="number">1169</literal></expr>,<expr><literal type="number">1049</literal></expr>,<expr><literal type="number">1156</literal></expr>,<expr><literal type="number">1096</literal></expr>,<expr><literal type="number">1141</literal></expr>,<expr><literal type="number">1111</literal></expr>,<expr><literal type="number">1155</literal></expr>,<expr><literal type="number">1080</literal></expr>,<expr><literal type="number">1126</literal></expr>,<expr><literal type="number">1154</literal></expr>,<expr><literal type="number">1064</literal></expr>,<expr><literal type="number">1153</literal></expr>,<expr><literal type="number">1140</literal></expr>,<expr><literal type="number">1095</literal></expr>,<expr><literal type="number">1048</literal></expr>,<expr><operator>-</operator><literal type="number">2159</literal></expr>,<expr><literal type="number">1125</literal></expr>,<expr><literal type="number">1110</literal></expr>,<expr><literal type="number">1137</literal></expr>,<expr><operator>-</operator><literal type="number">2175</literal></expr>,<expr><literal type="number">823</literal></expr>,<expr><literal type="number">823</literal></expr>,<expr><literal type="number">1139</literal></expr>,<expr><literal type="number">1138</literal></expr>,<expr><literal type="number">807</literal></expr>,<expr><literal type="number">807</literal></expr>,<expr><literal type="number">384</literal></expr>,<expr><literal type="number">264</literal></expr>,<expr><literal type="number">368</literal></expr>,<expr><literal type="number">263</literal></expr>,<expr><literal type="number">868</literal></expr>,<expr><literal type="number">838</literal></expr>,<expr><literal type="number">853</literal></expr>,<expr><literal type="number">791</literal></expr>,<expr><literal type="number">867</literal></expr>,<expr><literal type="number">822</literal></expr>,<expr><literal type="number">852</literal></expr>,<expr><literal type="number">837</literal></expr>,<expr><literal type="number">866</literal></expr>,<expr><literal type="number">806</literal></expr>,<expr><literal type="number">865</literal></expr>,<expr><literal type="number">790</literal></expr>,<expr><operator>-</operator><literal type="number">2319</literal></expr>,<expr><literal type="number">851</literal></expr>,<expr><literal type="number">821</literal></expr>,<expr><literal type="number">836</literal></expr>,<expr><literal type="number">352</literal></expr>,<expr><literal type="number">262</literal></expr>,<expr><literal type="number">850</literal></expr>,<expr><literal type="number">805</literal></expr>,<expr><literal type="number">849</literal></expr>,<expr><operator>-</operator><literal type="number">2399</literal></expr>,<expr><literal type="number">533</literal></expr>,<expr><literal type="number">533</literal></expr>,<expr><literal type="number">835</literal></expr>,<expr><literal type="number">820</literal></expr>,<expr><literal type="number">336</literal></expr>,<expr><literal type="number">261</literal></expr>,<expr><literal type="number">578</literal></expr>,<expr><literal type="number">548</literal></expr>,<expr><literal type="number">563</literal></expr>,<expr><literal type="number">577</literal></expr>,<expr><literal type="number">532</literal></expr>,<expr><literal type="number">532</literal></expr>,<expr><literal type="number">832</literal></expr>,<expr><literal type="number">772</literal></expr>,<expr><literal type="number">562</literal></expr>,<expr><literal type="number">562</literal></expr>,<expr><literal type="number">547</literal></expr>,<expr><literal type="number">547</literal></expr>,<expr><literal type="number">305</literal></expr>,<expr><literal type="number">275</literal></expr>,<expr><literal type="number">560</literal></expr>,<expr><literal type="number">515</literal></expr>,<expr><literal type="number">290</literal></expr>,<expr><literal type="number">290</literal></expr>,<expr><literal type="number">288</literal></expr>,<expr><literal type="number">258</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_uint8</name></type> <name><name>tab32</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">130</literal></expr>,<expr><literal type="number">162</literal></expr>,<expr><literal type="number">193</literal></expr>,<expr><literal type="number">209</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">76</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">190</literal></expr>,<expr><literal type="number">254</literal></expr>,<expr><literal type="number">222</literal></expr>,<expr><literal type="number">238</literal></expr>,<expr><literal type="number">126</literal></expr>,<expr><literal type="number">94</literal></expr>,<expr><literal type="number">157</literal></expr>,<expr><literal type="number">157</literal></expr>,<expr><literal type="number">109</literal></expr>,<expr><literal type="number">61</literal></expr>,<expr><literal type="number">173</literal></expr>,<expr><literal type="number">205</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_uint8</name></type> <name><name>tab33</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">252</literal></expr>,<expr><literal type="number">236</literal></expr>,<expr><literal type="number">220</literal></expr>,<expr><literal type="number">204</literal></expr>,<expr><literal type="number">188</literal></expr>,<expr><literal type="number">172</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">92</literal></expr>,<expr><literal type="number">76</literal></expr>,<expr><literal type="number">60</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">12</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_int16</name></type> <name><name>tabindex</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">64</literal></expr>,<expr><literal type="number">98</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">218</literal></expr>,<expr><literal type="number">292</literal></expr>,<expr><literal type="number">364</literal></expr>,<expr><literal type="number">426</literal></expr>,<expr><literal type="number">538</literal></expr>,<expr><literal type="number">648</literal></expr>,<expr><literal type="number">746</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1126</literal></expr>,<expr><literal type="number">1460</literal></expr>,<expr><literal type="number">1460</literal></expr>,<expr><literal type="number">1460</literal></expr>,<expr><literal type="number">1460</literal></expr>,<expr><literal type="number">1460</literal></expr>,<expr><literal type="number">1460</literal></expr>,<expr><literal type="number">1460</literal></expr>,<expr><literal type="number">1460</literal></expr>,<expr><literal type="number">1842</literal></expr>,<expr><literal type="number">1842</literal></expr>,<expr><literal type="number">1842</literal></expr>,<expr><literal type="number">1842</literal></expr>,<expr><literal type="number">1842</literal></expr>,<expr><literal type="number">1842</literal></expr>,<expr><literal type="number">1842</literal></expr>,<expr><literal type="number">1842</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_uint8</name></type> <name><name>g_linbits</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">13</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_PEEK_BITS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bs_cache &gt;&gt; (32 - n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_FLUSH_BITS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ bs_cache &lt;&lt;= (n); bs_sh += (n); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_CHECK_BITS</name></cpp:macro> <cpp:value>while (bs_sh &gt;= 0) { bs_cache |= (drmp3_uint32)*bs_next_ptr++ &lt;&lt; bs_sh; bs_sh -= 8; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_BSPOS</name></cpp:macro> <cpp:value>((bs_next_ptr - bs-&gt;buf)*8 - 24 + bs_sh)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>float</name></type> <name>one</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ireg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>big_val_cnt</name> <init>= <expr><name><name>gr_info</name><operator>-&gt;</operator><name>big_values</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>sfb</name> <init>= <expr><name><name>gr_info</name><operator>-&gt;</operator><name>sfbtab</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>bs_next_ptr</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>bs</name><operator>-&gt;</operator><name>pos</name></name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>bs_cache</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>bs_next_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">256u</literal> <operator>+</operator> <name><name>bs_next_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256u</literal> <operator>+</operator> <name><name>bs_next_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256u</literal> <operator>+</operator> <name><name>bs_next_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>pos</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pairs_to_decode</name></decl>, <decl><type ref="prev"/><name>np</name></decl>, <decl><type ref="prev"/><name>bs_sh</name> <init>= <expr><operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>pos</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bs_next_ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>big_val_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tab_num</name> <init>= <expr><name><name>gr_info</name><operator>-&gt;</operator><name>table_select</name><index>[<expr><name>ireg</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sfb_cnt</name> <init>= <expr><name><name>gr_info</name><operator>-&gt;</operator><name>region_count</name><index>[<expr><name>ireg</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drmp3_int16</name> <modifier>*</modifier></type><name>codebook</name> <init>= <expr><name>tabs</name> <operator>+</operator> <name><name>tabindex</name><index>[<expr><name>tab_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linbits</name> <init>= <expr><name><name>g_linbits</name><index>[<expr><name>tab_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>linbits</name></expr>)</condition>

<block>{<block_content>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <operator>*</operator><name>sfb</name><operator>++</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pairs_to_decode</name> <operator>=</operator> <call><name>DRMP3_MIN</name><argument_list>(<argument><expr><name>big_val_cnt</name></expr></argument>, <argument><expr><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>one</name> <operator>=</operator> <operator>*</operator><name>scf</name><operator>++</operator></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leaf</name> <init>= <expr><name><name>codebook</name><index>[<expr><call><name>DRMP3_PEEK_BITS</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>leaf</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DRMP3_FLUSH_BITS</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>leaf</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>leaf</name> <operator>=</operator> <name><name>codebook</name><index>[<expr><call><name>DRMP3_PEEK_BITS</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>leaf</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>DRMP3_FLUSH_BITS</name><argument_list>(<argument><expr><name>leaf</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name><operator>++</operator></expr><operator>,</operator> <expr><name>leaf</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lsb</name> <init>= <expr><name>leaf</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lsb</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lsb</name> <operator>+=</operator> <call><name>DRMP3_PEEK_BITS</name><argument_list>(<argument><expr><name>linbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_FLUSH_BITS</name><argument_list>(<argument><expr><name>linbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>DRMP3_CHECK_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>one</name><operator>*</operator><call><name>drmp3_L3_pow_43</name><argument_list>(<argument><expr><name>lsb</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>drmp3_int32</name><operator>)</operator><name>bs_cache</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name><name>g_drmp3_pow43</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>lsb</name> <operator>-</operator> <literal type="number">16</literal><operator>*</operator><operator>(</operator><name>bs_cache</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>]</index></name><operator>*</operator><name>one</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>DRMP3_FLUSH_BITS</name><argument_list>(<argument><expr><ternary><condition><expr><name>lsb</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>DRMP3_CHECK_BITS</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>pairs_to_decode</name></expr>)</condition>;</do>

</block_content>}</block> while <condition>(<expr><operator>(</operator><name>big_val_cnt</name> <operator>-=</operator> <name>np</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name>sfb_cnt</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

</block_content>}</block></if> <else>else

<block>{<block_content>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <operator>*</operator><name>sfb</name><operator>++</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pairs_to_decode</name> <operator>=</operator> <call><name>DRMP3_MIN</name><argument_list>(<argument><expr><name>big_val_cnt</name></expr></argument>, <argument><expr><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>one</name> <operator>=</operator> <operator>*</operator><name>scf</name><operator>++</operator></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leaf</name> <init>= <expr><name><name>codebook</name><index>[<expr><call><name>DRMP3_PEEK_BITS</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>leaf</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DRMP3_FLUSH_BITS</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>leaf</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>leaf</name> <operator>=</operator> <name><name>codebook</name><index>[<expr><call><name>DRMP3_PEEK_BITS</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>leaf</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>DRMP3_FLUSH_BITS</name><argument_list>(<argument><expr><name>leaf</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name><operator>++</operator></expr><operator>,</operator> <expr><name>leaf</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lsb</name> <init>= <expr><name>leaf</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name><name>g_drmp3_pow43</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>lsb</name> <operator>-</operator> <literal type="number">16</literal><operator>*</operator><operator>(</operator><name>bs_cache</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>]</index></name><operator>*</operator><name>one</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_FLUSH_BITS</name><argument_list>(<argument><expr><ternary><condition><expr><name>lsb</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>DRMP3_CHECK_BITS</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>pairs_to_decode</name></expr>)</condition>;</do>

</block_content>}</block> while <condition>(<expr><operator>(</operator><name>big_val_cnt</name> <operator>-=</operator> <name>np</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name>sfb_cnt</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>big_val_cnt</name></expr>;</init><condition>;</condition> <incr><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>codebook_count1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>gr_info</name><operator>-&gt;</operator><name>count1_table</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>tab33</name></expr> </then><else>: <expr><name>tab32</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leaf</name> <init>= <expr><name><name>codebook_count1</name><index>[<expr><call><name>DRMP3_PEEK_BITS</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>leaf</name> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>leaf</name> <operator>=</operator> <name><name>codebook_count1</name><index>[<expr><operator>(</operator><name>leaf</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bs_cache</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <operator>(</operator><name>leaf</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DRMP3_FLUSH_BITS</name><argument_list>(<argument><expr><name>leaf</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>DRMP3_BSPOS</name> <operator>&gt;</operator> <name>layer3gr_limit</name></expr>)</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_RELOAD_SCALEFACTOR</name></cpp:macro> <cpp:value>if (!--np) { np = *sfb++/2; if (!np) break; one = *scf++; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_DEQ_COUNT1</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (leaf &amp; (128 &gt;&gt; s)) { dst[s] = ((drmp3_int32)bs_cache &lt; 0) ? -one : one; DRMP3_FLUSH_BITS(1) }</cpp:value></cpp:define>

<expr_stmt><expr><name>DRMP3_RELOAD_SCALEFACTOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_DEQ_COUNT1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_DEQ_COUNT1</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>DRMP3_RELOAD_SCALEFACTOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_DEQ_COUNT1</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_DEQ_COUNT1</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>DRMP3_CHECK_BITS</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>layer3gr_limit</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_midside_stereo</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><name>left</name> <operator>+</operator> <literal type="number">576</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DRMP3_HAVE_SIMD</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>drmp3_have_simd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vl</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><name>left</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vr</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><name>right</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DRMP3_VSTORE</name><argument_list>(<argument><expr><name>left</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>vl</name></expr></argument>, <argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSTORE</name><argument_list>(<argument><expr><name>right</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>vl</name></expr></argument>, <argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><name><name>right</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_intensity_stereo_band</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>kl</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>kr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">576</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>kr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>kl</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_stereo_top_band</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>right</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>sfb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbands</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>max_band</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>max_band</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>max_band</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>max_band</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sfb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>right</name><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>right</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>max_band</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>sfb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_stereo_process</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>ist_pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>sfb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>max_band</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mpeg2_sh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g_pan</name><index>[<expr><literal type="number">7</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0.21132487f</literal></expr>,<expr><literal type="number">0.78867513f</literal></expr>,<expr><literal type="number">0.36602540f</literal></expr>,<expr><literal type="number">0.63397460f</literal></expr>,<expr><literal type="number">0.5f</literal></expr>,<expr><literal type="number">0.5f</literal></expr>,<expr><literal type="number">0.63397460f</literal></expr>,<expr><literal type="number">0.36602540f</literal></expr>,<expr><literal type="number">0.78867513f</literal></expr>,<expr><literal type="number">0.21132487f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>max_pos</name> <init>= <expr><ternary><condition><expr><call><name>DRMP3_HDR_TEST_MPEG1</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sfb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ipos</name> <init>= <expr><name><name>ist_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name> <operator>&gt;</operator> <name><name>max_band</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>ipos</name> <operator>&lt;</operator> <name>max_pos</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>kl</name></decl>, <decl><type ref="prev"/><name>kr</name></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><ternary><condition><expr><call><name>DRMP3_HDR_TEST_MS_STEREO</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1.41421356f</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DRMP3_HDR_TEST_MPEG1</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>kl</name> <operator>=</operator> <name><name>g_pan</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>ipos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <name><name>g_pan</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>ipos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<expr_stmt><expr><name>kl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>drmp3_L3_ldexp_q2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>ipos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mpeg2_sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ipos</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>kl</name> <operator>=</operator> <name>kr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>drmp3_L3_intensity_stereo_band</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>sfb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>kl</name><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>kr</name><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>DRMP3_HDR_TEST_MS_STEREO</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_L3_midside_stereo</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>sfb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>sfb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_intensity_stereo</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint8</name> <modifier>*</modifier></type><name>ist_pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_L3_gr_info</name> <modifier>*</modifier></type><name>gr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>max_band</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>n_sfb</name> <init>= <expr><name><name>gr</name><operator>-&gt;</operator><name>n_long_sfb</name></name> <operator>+</operator> <name><name>gr</name><operator>-&gt;</operator><name>n_short_sfb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>max_blocks</name> <init>= <expr><ternary><condition><expr><name><name>gr</name><operator>-&gt;</operator><name>n_short_sfb</name></name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_L3_stereo_top_band</name><argument_list>(<argument><expr><name>left</name> <operator>+</operator> <literal type="number">576</literal></expr></argument>, <argument><expr><name><name>gr</name><operator>-&gt;</operator><name>sfbtab</name></name></expr></argument>, <argument><expr><name>n_sfb</name></expr></argument>, <argument><expr><name>max_band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gr</name><operator>-&gt;</operator><name>n_long_sfb</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>max_band</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>max_band</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>max_band</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>DRMP3_MAX</name><argument_list>(<argument><expr><call><name>DRMP3_MAX</name><argument_list>(<argument><expr><name><name>max_band</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>max_band</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>max_band</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_blocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>default_pos</name> <init>= <expr><ternary><condition><expr><call><name>DRMP3_HDR_TEST_MPEG1</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>itop</name> <init>= <expr><name>n_sfb</name> <operator>-</operator> <name>max_blocks</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><name>itop</name> <operator>-</operator> <name>max_blocks</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ist_pos</name><index>[<expr><name>itop</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name><name>max_band</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>prev</name></expr> ?</condition><then> <expr><name>default_pos</name></expr> </then><else>: <expr><name><name>ist_pos</name><index>[<expr><name>prev</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>drmp3_L3_stereo_process</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>ist_pos</name></expr></argument>, <argument><expr><name><name>gr</name><operator>-&gt;</operator><name>sfbtab</name></name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>max_band</name></expr></argument>, <argument><expr><name><name>gr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scalefac_compress</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_reorder</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>grbuf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>scratch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>sfb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>grbuf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name> <init>= <expr><name>scratch</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition><expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><name>len</name> <operator>=</operator> <operator>*</operator><name>sfb</name><operator>)</operator></expr>;</condition> <incr><expr><name>sfb</name> <operator>+=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>len</name></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>src</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>len</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>grbuf</name></expr></argument>, <argument><expr><name>scratch</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>-</operator> <name>scratch</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_antialias</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>grbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbands</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g_aa</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0.85749293f</literal></expr>,<expr><literal type="number">0.88174200f</literal></expr>,<expr><literal type="number">0.94962865f</literal></expr>,<expr><literal type="number">0.98331459f</literal></expr>,<expr><literal type="number">0.99551782f</literal></expr>,<expr><literal type="number">0.99916056f</literal></expr>,<expr><literal type="number">0.99989920f</literal></expr>,<expr><literal type="number">0.99999316f</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.51449576f</literal></expr>,<expr><literal type="number">0.47173197f</literal></expr>,<expr><literal type="number">0.31337745f</literal></expr>,<expr><literal type="number">0.18191320f</literal></expr>,<expr><literal type="number">0.09457419f</literal></expr>,<expr><literal type="number">0.04096558f</literal></expr>,<expr><literal type="number">0.01419856f</literal></expr>,<expr><literal type="number">0.00369997f</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>nbands</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>nbands</name><operator>--</operator></expr><operator>,</operator> <expr><name>grbuf</name> <operator>+=</operator> <literal type="number">18</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DRMP3_HAVE_SIMD</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>drmp3_have_simd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vu</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><name>grbuf</name> <operator>+</operator> <literal type="number">18</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vd</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><name>grbuf</name> <operator>+</operator> <literal type="number">14</literal> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vc0</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><name><name>g_aa</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vc1</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><name><name>g_aa</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <call><name>DRMP3_VREV</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSTORE</name><argument_list>(<argument><expr><name>grbuf</name> <operator>+</operator> <literal type="number">18</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>vc0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>vc1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>vc1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>vc0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSTORE</name><argument_list>(<argument><expr><name>grbuf</name> <operator>+</operator> <literal type="number">14</literal> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><call><name>DRMP3_VREV</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_ONLY_SIMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><name><name>grbuf</name><index>[<expr><literal type="number">18</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><name><name>grbuf</name><index>[<expr><literal type="number">17</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>grbuf</name><index>[<expr><literal type="number">18</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>u</name><operator>*</operator><name><name>g_aa</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>d</name><operator>*</operator><name><name>g_aa</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grbuf</name><index>[<expr><literal type="number">17</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>u</name><operator>*</operator><name><name>g_aa</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>d</name><operator>*</operator><name><name>g_aa</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_dct3_9</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>s4</name></decl>, <decl><type ref="prev"/><name>s5</name></decl>, <decl><type ref="prev"/><name>s6</name></decl>, <decl><type ref="prev"/><name>s7</name></decl>, <decl><type ref="prev"/><name>s8</name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s4</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s6</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s8</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>s0</name> <operator>+</operator> <name>s6</name><operator>*</operator><literal type="number">0.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s0</name> <operator>-=</operator> <name>s6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>s4</name> <operator>+</operator> <name>s2</name><operator>)</operator><operator>*</operator><literal type="number">0.93969262f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>s8</name> <operator>+</operator> <name>s2</name><operator>)</operator><operator>*</operator><literal type="number">0.76604444f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s6</name> <operator>=</operator> <operator>(</operator><name>s4</name> <operator>-</operator> <name>s8</name><operator>)</operator><operator>*</operator><literal type="number">0.17364818f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s4</name> <operator>+=</operator> <name>s8</name> <operator>-</operator> <name>s2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>s0</name> <operator>-</operator> <name>s4</name><operator>*</operator><literal type="number">0.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>s4</name> <operator>+</operator> <name>s0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s8</name> <operator>=</operator> <name>t0</name> <operator>-</operator> <name>t2</name> <operator>+</operator> <name>s6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>t0</name> <operator>-</operator> <name>t4</name> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s4</name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>t4</name> <operator>-</operator> <name>s6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s3</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s5</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s7</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s3</name> <operator>*=</operator> <literal type="number">0.86602540f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>s5</name> <operator>+</operator> <name>s1</name><operator>)</operator><operator>*</operator><literal type="number">0.98480775f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>s5</name> <operator>-</operator> <name>s7</name><operator>)</operator><operator>*</operator><literal type="number">0.34202014f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>s1</name> <operator>+</operator> <name>s7</name><operator>)</operator><operator>*</operator><literal type="number">0.64278761f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>(</operator><name>s1</name> <operator>-</operator> <name>s5</name> <operator>-</operator> <name>s7</name><operator>)</operator><operator>*</operator><literal type="number">0.86602540f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s5</name> <operator>=</operator> <name>t0</name> <operator>-</operator> <name>s3</name> <operator>-</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s7</name> <operator>=</operator> <name>t4</name> <operator>-</operator> <name>s3</name> <operator>-</operator> <name>t0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s3</name> <operator>=</operator> <name>t4</name> <operator>+</operator> <name>s3</name> <operator>-</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s4</name> <operator>-</operator> <name>s7</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>s2</name> <operator>+</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>s0</name> <operator>-</operator> <name>s3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>s8</name> <operator>+</operator> <name>s5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>s8</name> <operator>-</operator> <name>s5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>s0</name> <operator>+</operator> <name>s3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>s2</name> <operator>-</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>s4</name> <operator>+</operator> <name>s7</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_imdct36</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>grbuf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>overlap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbands</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g_twid9</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0.73727734f</literal></expr>,<expr><literal type="number">0.79335334f</literal></expr>,<expr><literal type="number">0.84339145f</literal></expr>,<expr><literal type="number">0.88701083f</literal></expr>,<expr><literal type="number">0.92387953f</literal></expr>,<expr><literal type="number">0.95371695f</literal></expr>,<expr><literal type="number">0.97629601f</literal></expr>,<expr><literal type="number">0.99144486f</literal></expr>,<expr><literal type="number">0.99904822f</literal></expr>,<expr><literal type="number">0.67559021f</literal></expr>,<expr><literal type="number">0.60876143f</literal></expr>,<expr><literal type="number">0.53729961f</literal></expr>,<expr><literal type="number">0.46174861f</literal></expr>,<expr><literal type="number">0.38268343f</literal></expr>,<expr><literal type="number">0.30070580f</literal></expr>,<expr><literal type="number">0.21643961f</literal></expr>,<expr><literal type="number">0.13052619f</literal></expr>,<expr><literal type="number">0.04361938f</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nbands</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>grbuf</name> <operator>+=</operator> <literal type="number">18</literal></expr><operator>,</operator> <expr><name>overlap</name> <operator>+=</operator> <literal type="number">9</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>co</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>si</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>grbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>grbuf</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>si</name><index>[<expr><literal type="number">8</literal> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>grbuf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>grbuf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>grbuf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>grbuf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><index>[<expr><literal type="number">7</literal> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>grbuf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>grbuf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>grbuf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>grbuf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>drmp3_L3_dct3_9</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_L3_dct3_9</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>si</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>si</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>si</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>si</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DRMP3_HAVE_SIMD</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>drmp3_have_simd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vovl</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><name>overlap</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vc</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><name>co</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vs</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><name>si</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vr0</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><name>g_twid9</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vr1</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><name>g_twid9</name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vw0</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><name>window</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vw1</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><name>window</name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>vsum</name> <init>= <expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>vc</name></expr></argument>, <argument><expr><name>vr1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>vs</name></expr></argument>, <argument><expr><name>vr0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DRMP3_VSTORE</name><argument_list>(<argument><expr><name>overlap</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>vc</name></expr></argument>, <argument><expr><name>vr0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>vs</name></expr></argument>, <argument><expr><name>vr1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSTORE</name><argument_list>(<argument><expr><name>grbuf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>vovl</name></expr></argument>, <argument><expr><name>vw0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>, <argument><expr><name>vw1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>vovl</name></expr></argument>, <argument><expr><name>vw1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>, <argument><expr><name>vw0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSTORE</name><argument_list>(<argument><expr><name>grbuf</name> <operator>+</operator> <literal type="number">14</literal> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><call><name>DRMP3_VREV</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>ovl</name> <init>= <expr><name><name>overlap</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><name><name>co</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>g_twid9</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <name><name>si</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>g_twid9</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>overlap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>co</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>g_twid9</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name><name>si</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>g_twid9</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ovl</name><operator>*</operator><name><name>window</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name>sum</name><operator>*</operator><name><name>window</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grbuf</name><index>[<expr><literal type="number">17</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>ovl</name><operator>*</operator><name><name>window</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <name>sum</name><operator>*</operator><name><name>window</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_idct3</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>m1</name> <init>= <expr><name>x1</name><operator>*</operator><literal type="number">0.86602540f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a1</name> <init>= <expr><name>x0</name> <operator>-</operator> <name>x2</name><operator>*</operator><literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>x0</name> <operator>+</operator> <name>x2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a1</name> <operator>+</operator> <name>m1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>a1</name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_imdct12</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>overlap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g_twid3</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0.79335334f</literal></expr>,<expr><literal type="number">0.92387953f</literal></expr>,<expr><literal type="number">0.99144486f</literal></expr>, <expr><literal type="number">0.60876143f</literal></expr>,<expr><literal type="number">0.38268343f</literal></expr>,<expr><literal type="number">0.13052619f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>co</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>si</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_L3_idct3</name><argument_list>(<argument><expr><operator>-</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_L3_idct3</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>si</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>ovl</name> <init>= <expr><name><name>overlap</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><name><name>co</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>g_twid3</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <name><name>si</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>g_twid3</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>overlap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>co</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>g_twid3</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name><name>si</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>g_twid3</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ovl</name><operator>*</operator><name><name>g_twid3</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name>sum</name><operator>*</operator><name><name>g_twid3</name><index>[<expr><literal type="number">5</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>ovl</name><operator>*</operator><name><name>g_twid3</name><index>[<expr><literal type="number">5</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <name>sum</name><operator>*</operator><name><name>g_twid3</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_imdct_short</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>grbuf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>overlap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbands</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init>;</init><condition><expr><name>nbands</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>nbands</name><operator>--</operator></expr><operator>,</operator> <expr><name>overlap</name> <operator>+=</operator> <literal type="number">9</literal></expr><operator>,</operator> <expr><name>grbuf</name> <operator>+=</operator> <literal type="number">18</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>tmp</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>grbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>grbuf</name></expr></argument>, <argument><expr><name>overlap</name></expr></argument>, <argument><expr><literal type="number">6</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_L3_imdct12</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>grbuf</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>overlap</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_L3_imdct12</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>grbuf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>overlap</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_L3_imdct12</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>overlap</name></expr></argument>, <argument><expr><name>overlap</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_change_sign</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>grbuf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>grbuf</name> <operator>+=</operator> <literal type="number">18</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>b</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>grbuf</name> <operator>+=</operator> <literal type="number">36</literal></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>grbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>grbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_imdct_gr</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>grbuf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>overlap</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>block_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>n_long_bands</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g_mdct_window</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">18</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0.99904822f</literal></expr>,<expr><literal type="number">0.99144486f</literal></expr>,<expr><literal type="number">0.97629601f</literal></expr>,<expr><literal type="number">0.95371695f</literal></expr>,<expr><literal type="number">0.92387953f</literal></expr>,<expr><literal type="number">0.88701083f</literal></expr>,<expr><literal type="number">0.84339145f</literal></expr>,<expr><literal type="number">0.79335334f</literal></expr>,<expr><literal type="number">0.73727734f</literal></expr>,<expr><literal type="number">0.04361938f</literal></expr>,<expr><literal type="number">0.13052619f</literal></expr>,<expr><literal type="number">0.21643961f</literal></expr>,<expr><literal type="number">0.30070580f</literal></expr>,<expr><literal type="number">0.38268343f</literal></expr>,<expr><literal type="number">0.46174861f</literal></expr>,<expr><literal type="number">0.53729961f</literal></expr>,<expr><literal type="number">0.60876143f</literal></expr>,<expr><literal type="number">0.67559021f</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0.99144486f</literal></expr>,<expr><literal type="number">0.92387953f</literal></expr>,<expr><literal type="number">0.79335334f</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0.13052619f</literal></expr>,<expr><literal type="number">0.38268343f</literal></expr>,<expr><literal type="number">0.60876143f</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n_long_bands</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_L3_imdct36</name><argument_list>(<argument><expr><name>grbuf</name></expr></argument>, <argument><expr><name>overlap</name></expr></argument>, <argument><expr><name><name>g_mdct_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n_long_bands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>grbuf</name> <operator>+=</operator> <literal type="number">18</literal><operator>*</operator><name>n_long_bands</name></expr>;</expr_stmt>

<expr_stmt><expr><name>overlap</name> <operator>+=</operator> <literal type="number">9</literal><operator>*</operator><name>n_long_bands</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>block_type</name> <operator>==</operator> <name>DRMP3_SHORT_BLOCK_TYPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>drmp3_L3_imdct_short</name><argument_list>(<argument><expr><name>grbuf</name></expr></argument>, <argument><expr><name>overlap</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <name>n_long_bands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>drmp3_L3_imdct36</name><argument_list>(<argument><expr><name>grbuf</name></expr></argument>, <argument><expr><name>overlap</name></expr></argument>, <argument><expr><name><name>g_mdct_window</name><index>[<expr><name>block_type</name> <operator>==</operator> <name>DRMP3_STOP_BLOCK_TYPE</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <name>n_long_bands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_save_reservoir</name><parameter_list>(<parameter><decl><type><name>drmp3dec</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>drmp3dec_scratch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>pos</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8u</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remains</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>limit</name></name><operator>/</operator><literal type="number">8u</literal> <operator>-</operator> <name>pos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>remains</name> <operator>&gt;</operator> <name>DRMP3_MAX_BITRESERVOIR_BYTES</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>remains</name> <operator>-</operator> <name>DRMP3_MAX_BITRESERVOIR_BYTES</name></expr>;</expr_stmt>

<expr_stmt><expr><name>remains</name> <operator>=</operator> <name>DRMP3_MAX_BITRESERVOIR_BYTES</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remains</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>reserv_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maindata</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>remains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>reserv</name></name> <operator>=</operator> <name>remains</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>drmp3_L3_restore_reservoir</name><parameter_list>(<parameter><decl><type><name>drmp3dec</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>drmp3_bs</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>drmp3dec_scratch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>main_data_begin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>frame_bytes</name> <init>= <expr><operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>limit</name></name> <operator>-</operator> <name><name>bs</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_have</name> <init>= <expr><call><name>DRMP3_MIN</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>reserv</name></name></expr></argument>, <argument><expr><name>main_data_begin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>maindata</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>reserv_buf</name></name> <operator>+</operator> <call><name>DRMP3_MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>reserv</name></name> <operator>-</operator> <name>main_data_begin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DRMP3_MIN</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>reserv</name></name></expr></argument>, <argument><expr><name>main_data_begin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>maindata</name></name> <operator>+</operator> <name>bytes_have</name></expr></argument>, <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>bs</name><operator>-&gt;</operator><name>pos</name></name><operator>/</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>frame_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_bs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maindata</name></name></expr></argument>, <argument><expr><name>bytes_have</name> <operator>+</operator> <name>frame_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>h</name><operator>-&gt;</operator><name>reserv</name></name> <operator>&gt;=</operator> <name>main_data_begin</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_L3_decode</name><parameter_list>(<parameter><decl><type><name>drmp3dec</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>drmp3dec_scratch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>drmp3_L3_gr_info</name> <modifier>*</modifier></type><name>gr_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nch</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>layer3gr_limit</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>pos</name></name> <operator>+</operator> <name><name>gr_info</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>part_23_length</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_L3_decode_scalefactors</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ist_pos</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name>gr_info</name> <operator>+</operator> <name>ch</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scf</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_L3_huffman</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grbuf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name>gr_info</name> <operator>+</operator> <name>ch</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scf</name></name></expr></argument>, <argument><expr><name>layer3gr_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>DRMP3_HDR_TEST_I_STEREO</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_L3_intensity_stereo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ist_pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>gr_info</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>DRMP3_HDR_IS_MS_STEREO</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_L3_midside_stereo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">576</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nch</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr><operator>,</operator> <expr><name>gr_info</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>aa_bands</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_long_bands</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>gr_info</name><operator>-&gt;</operator><name>mixed_block_flag</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>DRMP3_HDR_GET_MY_SAMPLE_RATE</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gr_info</name><operator>-&gt;</operator><name>n_short_sfb</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>aa_bands</name> <operator>=</operator> <name>n_long_bands</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_L3_reorder</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grbuf</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>n_long_bands</name><operator>*</operator><literal type="number">18</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>syn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>gr_info</name><operator>-&gt;</operator><name>sfbtab</name></name> <operator>+</operator> <name><name>gr_info</name><operator>-&gt;</operator><name>n_long_sfb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_L3_antialias</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grbuf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>aa_bands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_L3_imdct_gr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grbuf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>mdct_overlap</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>gr_info</name><operator>-&gt;</operator><name>block_type</name></name></expr></argument>, <argument><expr><name>n_long_bands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_L3_change_sign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grbuf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3d_DCT_II</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>grbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g_sec</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">10.19000816f</literal></expr>,<expr><literal type="number">0.50060302f</literal></expr>,<expr><literal type="number">0.50241929f</literal></expr>,<expr><literal type="number">3.40760851f</literal></expr>,<expr><literal type="number">0.50547093f</literal></expr>,<expr><literal type="number">0.52249861f</literal></expr>,<expr><literal type="number">2.05778098f</literal></expr>,<expr><literal type="number">0.51544732f</literal></expr>,<expr><literal type="number">0.56694406f</literal></expr>,<expr><literal type="number">1.48416460f</literal></expr>,<expr><literal type="number">0.53104258f</literal></expr>,<expr><literal type="number">0.64682180f</literal></expr>,<expr><literal type="number">1.16943991f</literal></expr>,<expr><literal type="number">0.55310392f</literal></expr>,<expr><literal type="number">0.78815460f</literal></expr>,<expr><literal type="number">0.97256821f</literal></expr>,<expr><literal type="number">0.58293498f</literal></expr>,<expr><literal type="number">1.06067765f</literal></expr>,<expr><literal type="number">0.83934963f</literal></expr>,<expr><literal type="number">0.62250412f</literal></expr>,<expr><literal type="number">1.72244716f</literal></expr>,<expr><literal type="number">0.74453628f</literal></expr>,<expr><literal type="number">0.67480832f</literal></expr>,<expr><literal type="number">5.10114861f</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DRMP3_HAVE_SIMD</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>drmp3_have_simd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name>grbuf</name> <operator>+</operator> <name>k</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>x0</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">18</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>x1</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><literal type="number">18</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>x2</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><literal type="number">18</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>x3</name> <init>= <expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><literal type="number">18</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>t0</name> <init>= <expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>t1</name> <init>= <expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>t2</name> <init>= <expr><call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>g_sec</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>t3</name> <init>= <expr><call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>g_sec</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>g_sec</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>g_sec</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>x0</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x1</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x2</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x3</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x4</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x5</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x6</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x7</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>xt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xt</name> <operator>=</operator> <call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x7</name> <operator>=</operator> <call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x6</name> <operator>=</operator> <call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x5</name> <operator>=</operator> <call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x4</name> <operator>=</operator> <call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.70710677f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x5</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x5</name></expr></argument>, <argument><expr><name>x6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x6</name> <operator>=</operator> <call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x6</name></expr></argument>, <argument><expr><name>x7</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.70710677f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x7</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x7</name></expr></argument>, <argument><expr><name>xt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.70710677f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x5</name> <operator>=</operator> <call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>x5</name></expr></argument>, <argument><expr><call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><name>x7</name></expr></argument>, <argument><expr><literal type="number">0.198912367f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>x7</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x7</name></expr></argument>, <argument><expr><call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><name>x5</name></expr></argument>, <argument><expr><literal type="number">0.382683432f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x5</name> <operator>=</operator> <call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>x5</name></expr></argument>, <argument><expr><call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><name>x7</name></expr></argument>, <argument><expr><literal type="number">0.198912367f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>xt</name></expr></argument>, <argument><expr><name>x6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>xt</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>xt</name></expr></argument>, <argument><expr><name>x6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>xt</name></expr></argument>, <argument><expr><name>x7</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.50979561f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.54119611f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.60134488f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.89997619f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.30656302f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>DRMP3_VMUL_S</name><argument_list>(<argument><expr><call><name>DRMP3_VSUB</name><argument_list>(<argument><expr><name>xt</name></expr></argument>, <argument><expr><name>x7</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2.56291556f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <name>n</name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DRMP3_HAVE_SSE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VSAVE2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_storel_pi((__m64 *)(void*)&amp;y[i*18], v)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VSAVE2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vst1_f32((float32_t *)&amp;y[i*18], vget_low_f32(v))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>y</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">18</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>s</name> <init>= <expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE2</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE2</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>DRMP3_VSAVE2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE2</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE2</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VSAVE4</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DRMP3_VSTORE(&amp;y[i*18], v)</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>y</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">18</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>s</name> <init>= <expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE4</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE4</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>DRMP3_VSAVE4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE4</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRMP3_VSAVE4</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for></block_content></block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_ONLY_SIMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content/>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>y</name> <init>= <expr><name>grbuf</name> <operator>+</operator> <name>k</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x0</name> <init>= <expr><name><name>y</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">18</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x1</name> <init>= <expr><name><name>y</name><index>[<expr><operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><literal type="number">18</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x2</name> <init>= <expr><name><name>y</name><index>[<expr><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><literal type="number">18</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x3</name> <init>= <expr><name><name>y</name><index>[<expr><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><literal type="number">18</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t0</name> <init>= <expr><name>x0</name> <operator>+</operator> <name>x3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t1</name> <init>= <expr><name>x1</name> <operator>+</operator> <name>x2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t2</name> <init>= <expr><operator>(</operator><name>x1</name> <operator>-</operator> <name>x2</name><operator>)</operator><operator>*</operator><name><name>g_sec</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t3</name> <init>= <expr><operator>(</operator><name>x0</name> <operator>-</operator> <name>x3</name><operator>)</operator><operator>*</operator><name><name>g_sec</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t0</name> <operator>-</operator> <name>t1</name><operator>)</operator><operator>*</operator><name><name>g_sec</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t3</name> <operator>-</operator> <name>t2</name><operator>)</operator><operator>*</operator><name><name>g_sec</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x0</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x1</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x2</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x3</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x4</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x5</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x6</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>x7</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>xt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xt</name> <operator>=</operator> <name>x0</name> <operator>-</operator> <name>x7</name></expr>;</expr_stmt> <expr_stmt><expr><name>x0</name> <operator>+=</operator> <name>x7</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x7</name> <operator>=</operator> <name>x1</name> <operator>-</operator> <name>x6</name></expr>;</expr_stmt> <expr_stmt><expr><name>x1</name> <operator>+=</operator> <name>x6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x6</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>x5</name></expr>;</expr_stmt> <expr_stmt><expr><name>x2</name> <operator>+=</operator> <name>x5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x5</name> <operator>=</operator> <name>x3</name> <operator>-</operator> <name>x4</name></expr>;</expr_stmt> <expr_stmt><expr><name>x3</name> <operator>+=</operator> <name>x4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x4</name> <operator>=</operator> <name>x0</name> <operator>-</operator> <name>x3</name></expr>;</expr_stmt> <expr_stmt><expr><name>x0</name> <operator>+=</operator> <name>x3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <name>x1</name> <operator>-</operator> <name>x2</name></expr>;</expr_stmt> <expr_stmt><expr><name>x1</name> <operator>+=</operator> <name>x2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x0</name> <operator>+</operator> <name>x1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>-</operator> <name>x1</name><operator>)</operator><operator>*</operator><literal type="number">0.70710677f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x5</name> <operator>=</operator> <name>x5</name> <operator>+</operator> <name>x6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x6</name> <operator>=</operator> <operator>(</operator><name>x6</name> <operator>+</operator> <name>x7</name><operator>)</operator><operator>*</operator><literal type="number">0.70710677f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x7</name> <operator>=</operator> <name>x7</name> <operator>+</operator> <name>xt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <operator>(</operator><name>x3</name> <operator>+</operator> <name>x4</name><operator>)</operator><operator>*</operator><literal type="number">0.70710677f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x5</name> <operator>-=</operator> <name>x7</name><operator>*</operator><literal type="number">0.198912367f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>x7</name> <operator>+=</operator> <name>x5</name><operator>*</operator><literal type="number">0.382683432f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x5</name> <operator>-=</operator> <name>x7</name><operator>*</operator><literal type="number">0.198912367f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <name>xt</name> <operator>-</operator> <name>x6</name></expr>;</expr_stmt> <expr_stmt><expr><name>xt</name> <operator>+=</operator> <name>x6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>xt</name> <operator>+</operator> <name>x7</name><operator>)</operator><operator>*</operator><literal type="number">0.50979561f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x4</name> <operator>+</operator> <name>x3</name><operator>)</operator><operator>*</operator><literal type="number">0.54119611f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>-</operator> <name>x5</name><operator>)</operator><operator>*</operator><literal type="number">0.60134488f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>+</operator> <name>x5</name><operator>)</operator><operator>*</operator><literal type="number">0.89997619f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x4</name> <operator>-</operator> <name>x3</name><operator>)</operator><operator>*</operator><literal type="number">1.30656302f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>xt</name> <operator>-</operator> <name>x7</name><operator>)</operator><operator>*</operator><literal type="number">2.56291556f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>y</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">18</literal></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_FLOAT_OUTPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>drmp3_int16</name></type> <name>drmp3d_sample_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>drmp3_int16</name></type> <name>drmp3d_scale_pcm</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>sample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_int16</name></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sample</name> <operator>&gt;=</operator> <literal type="number">32766.5</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>drmp3_int16</name><operator>)</operator> <literal type="number">32767</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sample</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">32767.5</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>drmp3_int16</name><operator>)</operator><operator>-</operator><literal type="number">32768</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><operator>(</operator><name>sample</name> <operator>+</operator> <literal type="number">.5f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>-=</operator> <operator>(</operator><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt> 

<return>return <expr><operator>(</operator><name>drmp3_int16</name><operator>)</operator><name>s</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>float</name></type> <name>drmp3d_sample_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>float</name></type> <name>drmp3d_scale_pcm</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>sample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>sample</name><operator>*</operator><operator>(</operator><literal type="number">1.f</literal><operator>/</operator><literal type="number">32768.f</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3d_synth_pair</name><parameter_list>(<parameter><decl><type><name>drmp3d_sample_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">14</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">29</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>z</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">13</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">213</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">12</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">459</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>z</name><index>[ <expr><literal type="number">3</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">11</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">2037</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">10</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[ <expr><literal type="number">4</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">5153</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>z</name><index>[ <expr><literal type="number">5</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[ <expr><literal type="number">9</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">6574</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>z</name><index>[ <expr><literal type="number">8</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[ <expr><literal type="number">6</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">37489</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>z</name><index>[ <expr><literal type="number">7</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <literal type="number">75038</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pcm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>drmp3d_scale_pcm</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>z</name><index>[<expr><literal type="number">14</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <literal type="number">104</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>z</name><index>[<expr><literal type="number">12</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <literal type="number">1567</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>z</name><index>[<expr><literal type="number">10</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <literal type="number">9727</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>z</name><index>[ <expr><literal type="number">8</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <literal type="number">64019</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>z</name><index>[ <expr><literal type="number">6</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">9975</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>z</name><index>[ <expr><literal type="number">4</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">45</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>z</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <literal type="number">146</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>z</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pcm</name><index>[<expr><literal type="number">16</literal><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <call><name>drmp3d_scale_pcm</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3d_synth</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>xl</name></decl></parameter>, <parameter><decl><type><name>drmp3d_sample_t</name> <modifier>*</modifier></type><name>dstl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nch</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lins</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>xr</name> <init>= <expr><name>xl</name> <operator>+</operator> <literal type="number">576</literal><operator>*</operator><operator>(</operator><name>nch</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3d_sample_t</name> <modifier>*</modifier></type><name>dstr</name> <init>= <expr><name>dstl</name> <operator>+</operator> <operator>(</operator><name>nch</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g_win</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><operator>-</operator><literal type="number">31</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><literal type="number">218</literal></expr>,<expr><literal type="number">401</literal></expr>,<expr><operator>-</operator><literal type="number">519</literal></expr>,<expr><literal type="number">2063</literal></expr>,<expr><literal type="number">2000</literal></expr>,<expr><literal type="number">4788</literal></expr>,<expr><operator>-</operator><literal type="number">5517</literal></expr>,<expr><literal type="number">7134</literal></expr>,<expr><literal type="number">5959</literal></expr>,<expr><literal type="number">35640</literal></expr>,<expr><operator>-</operator><literal type="number">39336</literal></expr>,<expr><literal type="number">74992</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><operator>-</operator><literal type="number">35</literal></expr>,<expr><literal type="number">202</literal></expr>,<expr><literal type="number">222</literal></expr>,<expr><literal type="number">347</literal></expr>,<expr><operator>-</operator><literal type="number">581</literal></expr>,<expr><literal type="number">2080</literal></expr>,<expr><literal type="number">1952</literal></expr>,<expr><literal type="number">4425</literal></expr>,<expr><operator>-</operator><literal type="number">5879</literal></expr>,<expr><literal type="number">7640</literal></expr>,<expr><literal type="number">5288</literal></expr>,<expr><literal type="number">33791</literal></expr>,<expr><operator>-</operator><literal type="number">41176</literal></expr>,<expr><literal type="number">74856</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><operator>-</operator><literal type="number">38</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">225</literal></expr>,<expr><literal type="number">294</literal></expr>,<expr><operator>-</operator><literal type="number">645</literal></expr>,<expr><literal type="number">2087</literal></expr>,<expr><literal type="number">1893</literal></expr>,<expr><literal type="number">4063</literal></expr>,<expr><operator>-</operator><literal type="number">6237</literal></expr>,<expr><literal type="number">8092</literal></expr>,<expr><literal type="number">4561</literal></expr>,<expr><literal type="number">31947</literal></expr>,<expr><operator>-</operator><literal type="number">43006</literal></expr>,<expr><literal type="number">74630</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><operator>-</operator><literal type="number">41</literal></expr>,<expr><literal type="number">190</literal></expr>,<expr><literal type="number">227</literal></expr>,<expr><literal type="number">244</literal></expr>,<expr><operator>-</operator><literal type="number">711</literal></expr>,<expr><literal type="number">2085</literal></expr>,<expr><literal type="number">1822</literal></expr>,<expr><literal type="number">3705</literal></expr>,<expr><operator>-</operator><literal type="number">6589</literal></expr>,<expr><literal type="number">8492</literal></expr>,<expr><literal type="number">3776</literal></expr>,<expr><literal type="number">30112</literal></expr>,<expr><operator>-</operator><literal type="number">44821</literal></expr>,<expr><literal type="number">74313</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><operator>-</operator><literal type="number">45</literal></expr>,<expr><literal type="number">183</literal></expr>,<expr><literal type="number">228</literal></expr>,<expr><literal type="number">197</literal></expr>,<expr><operator>-</operator><literal type="number">779</literal></expr>,<expr><literal type="number">2075</literal></expr>,<expr><literal type="number">1739</literal></expr>,<expr><literal type="number">3351</literal></expr>,<expr><operator>-</operator><literal type="number">6935</literal></expr>,<expr><literal type="number">8840</literal></expr>,<expr><literal type="number">2935</literal></expr>,<expr><literal type="number">28289</literal></expr>,<expr><operator>-</operator><literal type="number">46617</literal></expr>,<expr><literal type="number">73908</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><operator>-</operator><literal type="number">49</literal></expr>,<expr><literal type="number">176</literal></expr>,<expr><literal type="number">228</literal></expr>,<expr><literal type="number">153</literal></expr>,<expr><operator>-</operator><literal type="number">848</literal></expr>,<expr><literal type="number">2057</literal></expr>,<expr><literal type="number">1644</literal></expr>,<expr><literal type="number">3004</literal></expr>,<expr><operator>-</operator><literal type="number">7271</literal></expr>,<expr><literal type="number">9139</literal></expr>,<expr><literal type="number">2037</literal></expr>,<expr><literal type="number">26482</literal></expr>,<expr><operator>-</operator><literal type="number">48390</literal></expr>,<expr><literal type="number">73415</literal></expr>,

<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><operator>-</operator><literal type="number">53</literal></expr>,<expr><literal type="number">169</literal></expr>,<expr><literal type="number">227</literal></expr>,<expr><literal type="number">111</literal></expr>,<expr><operator>-</operator><literal type="number">919</literal></expr>,<expr><literal type="number">2032</literal></expr>,<expr><literal type="number">1535</literal></expr>,<expr><literal type="number">2663</literal></expr>,<expr><operator>-</operator><literal type="number">7597</literal></expr>,<expr><literal type="number">9389</literal></expr>,<expr><literal type="number">1082</literal></expr>,<expr><literal type="number">24694</literal></expr>,<expr><operator>-</operator><literal type="number">50137</literal></expr>,<expr><literal type="number">72835</literal></expr>,

<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><operator>-</operator><literal type="number">58</literal></expr>,<expr><literal type="number">161</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">72</literal></expr>,<expr><operator>-</operator><literal type="number">991</literal></expr>,<expr><literal type="number">2001</literal></expr>,<expr><literal type="number">1414</literal></expr>,<expr><literal type="number">2330</literal></expr>,<expr><operator>-</operator><literal type="number">7910</literal></expr>,<expr><literal type="number">9592</literal></expr>,<expr><literal type="number">70</literal></expr>,<expr><literal type="number">22929</literal></expr>,<expr><operator>-</operator><literal type="number">51853</literal></expr>,<expr><literal type="number">72169</literal></expr>,

<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><operator>-</operator><literal type="number">63</literal></expr>,<expr><literal type="number">154</literal></expr>,<expr><literal type="number">221</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><operator>-</operator><literal type="number">1064</literal></expr>,<expr><literal type="number">1962</literal></expr>,<expr><literal type="number">1280</literal></expr>,<expr><literal type="number">2006</literal></expr>,<expr><operator>-</operator><literal type="number">8209</literal></expr>,<expr><literal type="number">9750</literal></expr>,<expr><operator>-</operator><literal type="number">998</literal></expr>,<expr><literal type="number">21189</literal></expr>,<expr><operator>-</operator><literal type="number">53534</literal></expr>,<expr><literal type="number">71420</literal></expr>,

<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><operator>-</operator><literal type="number">68</literal></expr>,<expr><literal type="number">147</literal></expr>,<expr><literal type="number">215</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1137</literal></expr>,<expr><literal type="number">1919</literal></expr>,<expr><literal type="number">1131</literal></expr>,<expr><literal type="number">1692</literal></expr>,<expr><operator>-</operator><literal type="number">8491</literal></expr>,<expr><literal type="number">9863</literal></expr>,<expr><operator>-</operator><literal type="number">2122</literal></expr>,<expr><literal type="number">19478</literal></expr>,<expr><operator>-</operator><literal type="number">55178</literal></expr>,<expr><literal type="number">70590</literal></expr>,

<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">73</literal></expr>,<expr><literal type="number">139</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><operator>-</operator><literal type="number">29</literal></expr>,<expr><operator>-</operator><literal type="number">1210</literal></expr>,<expr><literal type="number">1870</literal></expr>,<expr><literal type="number">970</literal></expr>,<expr><literal type="number">1388</literal></expr>,<expr><operator>-</operator><literal type="number">8755</literal></expr>,<expr><literal type="number">9935</literal></expr>,<expr><operator>-</operator><literal type="number">3300</literal></expr>,<expr><literal type="number">17799</literal></expr>,<expr><operator>-</operator><literal type="number">56778</literal></expr>,<expr><literal type="number">69679</literal></expr>,

<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><operator>-</operator><literal type="number">79</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">200</literal></expr>,<expr><operator>-</operator><literal type="number">57</literal></expr>,<expr><operator>-</operator><literal type="number">1283</literal></expr>,<expr><literal type="number">1817</literal></expr>,<expr><literal type="number">794</literal></expr>,<expr><literal type="number">1095</literal></expr>,<expr><operator>-</operator><literal type="number">8998</literal></expr>,<expr><literal type="number">9966</literal></expr>,<expr><operator>-</operator><literal type="number">4533</literal></expr>,<expr><literal type="number">16155</literal></expr>,<expr><operator>-</operator><literal type="number">58333</literal></expr>,<expr><literal type="number">68692</literal></expr>,

<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><operator>-</operator><literal type="number">85</literal></expr>,<expr><literal type="number">125</literal></expr>,<expr><literal type="number">189</literal></expr>,<expr><operator>-</operator><literal type="number">83</literal></expr>,<expr><operator>-</operator><literal type="number">1356</literal></expr>,<expr><literal type="number">1759</literal></expr>,<expr><literal type="number">605</literal></expr>,<expr><literal type="number">814</literal></expr>,<expr><operator>-</operator><literal type="number">9219</literal></expr>,<expr><literal type="number">9959</literal></expr>,<expr><operator>-</operator><literal type="number">5818</literal></expr>,<expr><literal type="number">14548</literal></expr>,<expr><operator>-</operator><literal type="number">59838</literal></expr>,<expr><literal type="number">67629</literal></expr>,

<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><operator>-</operator><literal type="number">91</literal></expr>,<expr><literal type="number">117</literal></expr>,<expr><literal type="number">177</literal></expr>,<expr><operator>-</operator><literal type="number">106</literal></expr>,<expr><operator>-</operator><literal type="number">1428</literal></expr>,<expr><literal type="number">1698</literal></expr>,<expr><literal type="number">402</literal></expr>,<expr><literal type="number">545</literal></expr>,<expr><operator>-</operator><literal type="number">9416</literal></expr>,<expr><literal type="number">9916</literal></expr>,<expr><operator>-</operator><literal type="number">7154</literal></expr>,<expr><literal type="number">12980</literal></expr>,<expr><operator>-</operator><literal type="number">61289</literal></expr>,<expr><literal type="number">66494</literal></expr>,

<expr><operator>-</operator><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><operator>-</operator><literal type="number">97</literal></expr>,<expr><literal type="number">111</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><operator>-</operator><literal type="number">127</literal></expr>,<expr><operator>-</operator><literal type="number">1498</literal></expr>,<expr><literal type="number">1634</literal></expr>,<expr><literal type="number">185</literal></expr>,<expr><literal type="number">288</literal></expr>,<expr><operator>-</operator><literal type="number">9585</literal></expr>,<expr><literal type="number">9838</literal></expr>,<expr><operator>-</operator><literal type="number">8540</literal></expr>,<expr><literal type="number">11455</literal></expr>,<expr><operator>-</operator><literal type="number">62684</literal></expr>,<expr><literal type="number">65290</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>zlin</name> <init>= <expr><name>lins</name> <operator>+</operator> <literal type="number">15</literal><operator>*</operator><literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name>g_win</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>xl</name><index>[<expr><literal type="number">18</literal><operator>*</operator><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">15</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>xr</name><index>[<expr><literal type="number">18</literal><operator>*</operator><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">15</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>xl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">15</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>xr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <name><name>xl</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">18</literal><operator>*</operator><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">31</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>xr</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">18</literal><operator>*</operator><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">31</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>xl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">31</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>xr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3d_synth_pair</name><argument_list>(<argument><expr><name>dstr</name></expr></argument>, <argument><expr><name>nch</name></expr></argument>, <argument><expr><name>lins</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">15</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3d_synth_pair</name><argument_list>(<argument><expr><name>dstr</name> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>nch</name></expr></argument>, <argument><expr><name>lins</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">15</literal> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3d_synth_pair</name><argument_list>(<argument><expr><name>dstl</name></expr></argument>, <argument><expr><name>nch</name></expr></argument>, <argument><expr><name>lins</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3d_synth_pair</name><argument_list>(<argument><expr><name>dstl</name> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>nch</name></expr></argument>, <argument><expr><name>lins</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">15</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DRMP3_HAVE_SIMD</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>drmp3_have_simd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">14</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_VLOAD</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>drmp3_f4 w0 = DRMP3_VSET(*w++); drmp3_f4 w1 = DRMP3_VSET(*w++); drmp3_f4 vz = DRMP3_VLD(&amp;zlin[4*i - 64*k]); drmp3_f4 vy = DRMP3_VLD(&amp;zlin[4*i - 64*(15 - k)]);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_V0</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ DRMP3_VLOAD(k) b = DRMP3_VADD(DRMP3_VMUL(vz, w1), DRMP3_VMUL(vy, w0)) ; a = DRMP3_VSUB(DRMP3_VMUL(vz, w0), DRMP3_VMUL(vy, w1)); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_V1</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ DRMP3_VLOAD(k) b = DRMP3_VADD(b, DRMP3_VADD(DRMP3_VMUL(vz, w1), DRMP3_VMUL(vy, w0))); a = DRMP3_VADD(a, DRMP3_VSUB(DRMP3_VMUL(vz, w0), DRMP3_VMUL(vy, w1))); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_V2</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ DRMP3_VLOAD(k) b = DRMP3_VADD(b, DRMP3_VADD(DRMP3_VMUL(vz, w1), DRMP3_VMUL(vy, w0))); a = DRMP3_VADD(a, DRMP3_VSUB(DRMP3_VMUL(vy, w1), DRMP3_VMUL(vz, w0))); }</cpp:value></cpp:define>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>xl</name><index>[<expr><literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>xr</name><index>[<expr><literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>xl</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>xr</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name> <operator>=</operator> <name><name>xl</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>xr</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>-</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>xl</name><index>[<expr><literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>-</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>xr</name><index>[<expr><literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<macro><name>DRMP3_V0</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <macro><name>DRMP3_V2</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <macro><name>DRMP3_V1</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>DRMP3_V2</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro> <macro><name>DRMP3_V1</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro> <macro><name>DRMP3_V2</name><argument_list>(<argument><literal type="number">5</literal></argument>)</argument_list></macro> <macro><name>DRMP3_V1</name><argument_list>(<argument><literal type="number">6</literal></argument>)</argument_list></macro> <macro><name>DRMP3_V2</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_FLOAT_OUTPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DRMP3_HAVE_SSE</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_f4</name></type> <name>g_max</name> <init>= <expr><block>{ <expr><literal type="number">32767.0f</literal></expr>, <expr><literal type="number">32767.0f</literal></expr>, <expr><literal type="number">32767.0f</literal></expr>, <expr><literal type="number">32767.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_f4</name></type> <name>g_min</name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">32768.0f</literal></expr>, <expr><operator>-</operator><literal type="number">32768.0f</literal></expr>, <expr><operator>-</operator><literal type="number">32768.0f</literal></expr>, <expr><operator>-</operator><literal type="number">32768.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>pcm8</name> <init>= <expr><call><name>_mm_packs_epi32</name><argument_list>(<argument><expr><call><name>_mm_cvtps_epi32</name><argument_list>(<argument><expr><call><name>_mm_max_ps</name><argument_list>(<argument><expr><call><name>_mm_min_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>g_max</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>g_min</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_mm_cvtps_epi32</name><argument_list>(<argument><expr><call><name>_mm_max_ps</name><argument_list>(<argument><expr><call><name>_mm_min_ps</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>g_max</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>g_min</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><operator>(</operator><literal type="number">17</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><operator>(</operator><literal type="number">17</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><operator>(</operator><literal type="number">47</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><operator>(</operator><literal type="number">49</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><operator>(</operator><literal type="number">47</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><operator>(</operator><literal type="number">49</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>pcma</name></decl>, <decl><type ref="prev"/><name>pcmb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>DRMP3_VSET</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>DRMP3_VSET</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pcma</name> <operator>=</operator> <call><name>vqmovn_s32</name><argument_list>(<argument><expr><call><name>vqaddq_s32</name><argument_list>(<argument><expr><call><name>vcvtq_s32_f32</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vreinterpretq_s32_u32</name><argument_list>(<argument><expr><call><name>vcltq_f32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>DRMP3_VSET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pcmb</name> <operator>=</operator> <call><name>vqmovn_s32</name><argument_list>(<argument><expr><call><name>vqaddq_s32</name><argument_list>(<argument><expr><call><name>vcvtq_s32_f32</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vreinterpretq_s32_u32</name><argument_list>(<argument><expr><call><name>vcltq_f32</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>DRMP3_VSET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>dstr</name> <operator>+</operator> <operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>pcma</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>dstr</name> <operator>+</operator> <operator>(</operator><literal type="number">17</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>pcmb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>dstl</name> <operator>+</operator> <operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>pcma</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>dstl</name> <operator>+</operator> <operator>(</operator><literal type="number">17</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>pcmb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>dstr</name> <operator>+</operator> <operator>(</operator><literal type="number">47</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>pcma</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>dstr</name> <operator>+</operator> <operator>(</operator><literal type="number">49</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>pcmb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>dstl</name> <operator>+</operator> <operator>(</operator><literal type="number">47</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>pcma</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>dstl</name> <operator>+</operator> <operator>(</operator><literal type="number">49</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>pcmb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drmp3_f4</name></type> <name>g_scale</name> <init>= <expr><block>{ <expr><literal type="number">1.0f</literal><operator>/</operator><literal type="number">32768.0f</literal></expr>, <expr><literal type="number">1.0f</literal><operator>/</operator><literal type="number">32768.0f</literal></expr>, <expr><literal type="number">1.0f</literal><operator>/</operator><literal type="number">32768.0f</literal></expr>, <expr><literal type="number">1.0f</literal><operator>/</operator><literal type="number">32768.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>g_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>g_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DRMP3_HAVE_SSE</name></expr></cpp:if>

<expr_stmt><expr><call><name>_mm_store_ss</name><argument_list>(<argument><expr><name>dstr</name> <operator>+</operator> <operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_store_ss</name><argument_list>(<argument><expr><name>dstr</name> <operator>+</operator> <operator>(</operator><literal type="number">17</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_ps</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_store_ss</name><argument_list>(<argument><expr><name>dstl</name> <operator>+</operator> <operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_store_ss</name><argument_list>(<argument><expr><name>dstl</name> <operator>+</operator> <operator>(</operator><literal type="number">17</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_ps</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_store_ss</name><argument_list>(<argument><expr><name>dstr</name> <operator>+</operator> <operator>(</operator><literal type="number">47</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_store_ss</name><argument_list>(<argument><expr><name>dstr</name> <operator>+</operator> <operator>(</operator><literal type="number">49</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_ps</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_store_ss</name><argument_list>(<argument><expr><name>dstl</name> <operator>+</operator> <operator>(</operator><literal type="number">47</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_store_ss</name><argument_list>(<argument><expr><name>dstl</name> <operator>+</operator> <operator>(</operator><literal type="number">49</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_ps</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>vst1q_lane_f32</name><argument_list>(<argument><expr><name>dstr</name> <operator>+</operator> <operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1q_lane_f32</name><argument_list>(<argument><expr><name>dstr</name> <operator>+</operator> <operator>(</operator><literal type="number">17</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1q_lane_f32</name><argument_list>(<argument><expr><name>dstl</name> <operator>+</operator> <operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1q_lane_f32</name><argument_list>(<argument><expr><name>dstl</name> <operator>+</operator> <operator>(</operator><literal type="number">17</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1q_lane_f32</name><argument_list>(<argument><expr><name>dstr</name> <operator>+</operator> <operator>(</operator><literal type="number">47</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1q_lane_f32</name><argument_list>(<argument><expr><name>dstr</name> <operator>+</operator> <operator>(</operator><literal type="number">49</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1q_lane_f32</name><argument_list>(<argument><expr><name>dstl</name> <operator>+</operator> <operator>(</operator><literal type="number">47</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1q_lane_f32</name><argument_list>(<argument><expr><name>dstl</name> <operator>+</operator> <operator>(</operator><literal type="number">49</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block>

</block_content>}</block></for></block_content></block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_ONLY_SIMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content/>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">14</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_LOAD</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>float w0 = *w++; float w1 = *w++; float *vz = &amp;zlin[4*i - k*64]; float *vy = &amp;zlin[4*i - (15 - k)*64];</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_S0</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int j; DRMP3_LOAD(k); for (j = 0; j &lt; 4; j++) b[j] = vz[j]*w1 + vy[j]*w0, a[j] = vz[j]*w0 - vy[j]*w1; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_S1</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int j; DRMP3_LOAD(k); for (j = 0; j &lt; 4; j++) b[j] += vz[j]*w1 + vy[j]*w0, a[j] += vz[j]*w0 - vy[j]*w1; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_S2</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int j; DRMP3_LOAD(k); for (j = 0; j &lt; 4; j++) b[j] += vz[j]*w1 + vy[j]*w0, a[j] += vy[j]*w1 - vz[j]*w0; }</cpp:value></cpp:define>

<decl_stmt><decl><type><name>float</name></type> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>xl</name><index>[<expr><literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>xr</name><index>[<expr><literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>xl</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>xr</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>xl</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>xr</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>xl</name><index>[<expr><literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zlin</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>xr</name><index>[<expr><literal type="number">18</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<macro><name>DRMP3_S0</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <macro><name>DRMP3_S2</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <macro><name>DRMP3_S1</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>DRMP3_S2</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro> <macro><name>DRMP3_S1</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro> <macro><name>DRMP3_S2</name><argument_list>(<argument><literal type="number">5</literal></argument>)</argument_list></macro> <macro><name>DRMP3_S1</name><argument_list>(<argument><literal type="number">6</literal></argument>)</argument_list></macro> <macro><name>DRMP3_S2</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <call><name>drmp3d_scale_pcm</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><operator>(</operator><literal type="number">17</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <call><name>drmp3d_scale_pcm</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <call><name>drmp3d_scale_pcm</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><operator>(</operator><literal type="number">17</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <call><name>drmp3d_scale_pcm</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><operator>(</operator><literal type="number">47</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <call><name>drmp3d_scale_pcm</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><operator>(</operator><literal type="number">49</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <call><name>drmp3d_scale_pcm</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><operator>(</operator><literal type="number">47</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <call><name>drmp3d_scale_pcm</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><operator>(</operator><literal type="number">49</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>*</operator><name>nch</name></expr>]</index></name> <operator>=</operator> <call><name>drmp3d_scale_pcm</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3d_synth_granule</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>qmf_state</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>grbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbands</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nch</name></decl></parameter>, <parameter><decl><type><name>drmp3d_sample_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lins</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nch</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3d_DCT_II</name><argument_list>(<argument><expr><name>grbuf</name> <operator>+</operator> <literal type="number">576</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name>nbands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lins</name></expr></argument>, <argument><expr><name>qmf_state</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">15</literal><operator>*</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbands</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3d_synth</name><argument_list>(<argument><expr><name>grbuf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>pcm</name> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><name>nch</name><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name>nch</name></expr></argument>, <argument><expr><name>lins</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_NONSTANDARD_BUT_LOGICAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>nch</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal><operator>*</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>qmf_state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lins</name><index>[<expr><name>nbands</name><operator>*</operator><literal type="number">64</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>qmf_state</name></expr></argument>, <argument><expr><name>lins</name> <operator>+</operator> <name>nbands</name><operator>*</operator><literal type="number">64</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">15</literal><operator>*</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>drmp3d_match_frame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mp3_bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nmatch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>nmatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nmatch</name> <operator>&lt;</operator> <name>DRMP3_MAX_FRAME_SYNC_MATCHES</name></expr>;</condition> <incr><expr><name>nmatch</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>drmp3_hdr_frame_bytes</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>frame_bytes</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>drmp3_hdr_padding</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>DRMP3_HDR_SIZE</name> <operator>&gt;</operator> <name>mp3_bytes</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>nmatch</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_hdr_compare</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>hdr</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>drmp3d_find_frame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>mp3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mp3_bytes</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>free_format_bytes</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ptr_frame_bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mp3_bytes</name> <operator>-</operator> <name>DRMP3_HDR_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>mp3</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drmp3_hdr_valid</name><argument_list>(<argument><expr><name>mp3</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>frame_bytes</name> <init>= <expr><call><name>drmp3_hdr_frame_bytes</name><argument_list>(<argument><expr><name>mp3</name></expr></argument>, <argument><expr><operator>*</operator><name>free_format_bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_and_padding</name> <init>= <expr><name>frame_bytes</name> <operator>+</operator> <call><name>drmp3_hdr_padding</name><argument_list>(<argument><expr><name>mp3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>DRMP3_HDR_SIZE</name></expr>;</init> <condition><expr><operator>!</operator><name>frame_bytes</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>DRMP3_MAX_FREE_FORMAT_FRAME_SIZE</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>k</name> <operator>&lt;</operator> <name>mp3_bytes</name> <operator>-</operator> <name>DRMP3_HDR_SIZE</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drmp3_hdr_compare</name><argument_list>(<argument><expr><name>mp3</name></expr></argument>, <argument><expr><name>mp3</name> <operator>+</operator> <name>k</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fb</name> <init>= <expr><name>k</name> <operator>-</operator> <call><name>drmp3_hdr_padding</name><argument_list>(<argument><expr><name>mp3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nextfb</name> <init>= <expr><name>fb</name> <operator>+</operator> <call><name>drmp3_hdr_padding</name><argument_list>(<argument><expr><name>mp3</name> <operator>+</operator> <name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>k</name> <operator>+</operator> <name>nextfb</name> <operator>+</operator> <name>DRMP3_HDR_SIZE</name> <operator>&gt;</operator> <name>mp3_bytes</name> <operator>||</operator> <operator>!</operator><call><name>drmp3_hdr_compare</name><argument_list>(<argument><expr><name>mp3</name></expr></argument>, <argument><expr><name>mp3</name> <operator>+</operator> <name>k</name> <operator>+</operator> <name>nextfb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_and_padding</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_bytes</name> <operator>=</operator> <name>fb</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>free_format_bytes</name> <operator>=</operator> <name>fb</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>frame_bytes</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <name>frame_and_padding</name> <operator>&lt;=</operator> <name>mp3_bytes</name> <operator>&amp;&amp;</operator>

<call><name>drmp3d_match_frame</name><argument_list>(<argument><expr><name>mp3</name></expr></argument>, <argument><expr><name>mp3_bytes</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>frame_bytes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <name>frame_and_padding</name> <operator>==</operator> <name>mp3_bytes</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr_frame_bytes</name> <operator>=</operator> <name>frame_and_padding</name></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>free_format_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>ptr_frame_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drmp3dec_init</name><parameter_list>(<parameter><decl><type><name>drmp3dec</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>drmp3dec_decode_frame</name><parameter_list>(<parameter><decl><type><name>drmp3dec</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mp3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mp3_bytes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>, <parameter><decl><type><name>drmp3dec_frame_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>igr</name></decl>, <decl><type ref="prev"/><name>frame_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>success</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drmp3_uint8</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_bs</name></type> <name><name>bs_frame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3dec_scratch</name></type> <name>scratch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mp3_bytes</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <call><name>drmp3_hdr_compare</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>mp3</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <call><name>drmp3_hdr_frame_bytes</name><argument_list>(<argument><expr><name>mp3</name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>free_format_bytes</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>drmp3_hdr_padding</name><argument_list>(<argument><expr><name>mp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>!=</operator> <name>mp3_bytes</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>frame_size</name> <operator>+</operator> <name>DRMP3_HDR_SIZE</name> <operator>&gt;</operator> <name>mp3_bytes</name> <operator>||</operator> <operator>!</operator><call><name>drmp3_hdr_compare</name><argument_list>(<argument><expr><name>mp3</name></expr></argument>, <argument><expr><name>mp3</name> <operator>+</operator> <name>frame_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame_size</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>drmp3dec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>drmp3d_find_frame</name><argument_list>(<argument><expr><name>mp3</name></expr></argument>, <argument><expr><name>mp3_bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dec</name><operator>-&gt;</operator><name>free_format_bytes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame_size</name> <operator>||</operator> <name>i</name> <operator>+</operator> <name>frame_size</name> <operator>&gt;</operator> <name>mp3_bytes</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>frame_bytes</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hdr</name> <operator>=</operator> <name>mp3</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>DRMP3_HDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>frame_bytes</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>frame_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <ternary><condition><expr><call><name>DRMP3_HDR_IS_MONO</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>hz</name></name> <operator>=</operator> <call><name>drmp3_hdr_sample_rate_hz</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>layer</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <call><name>DRMP3_HDR_GET_LAYER</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bitrate_kbps</name></name> <operator>=</operator> <call><name>drmp3_hdr_bitrate_kbps</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_bs_init</name><argument_list>(<argument><expr><name>bs_frame</name></expr></argument>, <argument><expr><name>hdr</name> <operator>+</operator> <name>DRMP3_HDR_SIZE</name></expr></argument>, <argument><expr><name>frame_size</name> <operator>-</operator> <name>DRMP3_HDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DRMP3_HDR_IS_CRC</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_bs_get_bits</name><argument_list>(<argument><expr><name>bs_frame</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>layer</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>main_data_begin</name> <init>= <expr><call><name>drmp3_L3_read_side_info</name><argument_list>(<argument><expr><name>bs_frame</name></expr></argument>, <argument><expr><name><name>scratch</name><operator>.</operator><name>gr_info</name></name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>main_data_begin</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>bs_frame</name><operator>-&gt;</operator><name>pos</name></name></expr></argument> &gt;</argument_list></name> <name><name>bs_frame</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3dec_init</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>drmp3_L3_restore_reservoir</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>bs_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scratch</name></expr></argument>, <argument><expr><name>main_data_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name> <operator>&amp;&amp;</operator> <name>pcm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>igr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>igr</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><call><name>DRMP3_HDR_TEST_MPEG1</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>igr</name><operator>++</operator></expr><operator>,</operator> <expr><name>pcm</name> <operator>=</operator> <call><name>DRMP3_OFFSET_PTR</name><argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>drmp3d_sample_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">576</literal><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>scratch</name><operator>.</operator><name>grbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">576</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_L3_decode</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scratch</name></expr></argument>, <argument><expr><name><name>scratch</name><operator>.</operator><name>gr_info</name></name> <operator>+</operator> <name>igr</name><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3d_synth_granule</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>qmf_state</name></name></expr></argument>, <argument><expr><name><name>scratch</name><operator>.</operator><name>grbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><operator>(</operator><name>drmp3d_sample_t</name><operator>*</operator><operator>)</operator><name>pcm</name></expr></argument>, <argument><expr><name><name>scratch</name><operator>.</operator><name>syn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_L3_save_reservoir</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_ONLY_MP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>drmp3_L12_scale_info</name></type> <name><name>sci</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pcm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drmp3_hdr_frame_samples</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_L12_read_scale_info</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>bs_frame</name></expr></argument>, <argument><expr><name>sci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>scratch</name><operator>.</operator><name>grbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">576</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>igr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>igr</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>igr</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">12</literal> <operator>==</operator> <operator>(</operator><name>i</name> <operator>+=</operator> <call><name>drmp3_L12_dequantize_granule</name><argument_list>(<argument><expr><name><name>scratch</name><operator>.</operator><name>grbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>bs_frame</name></expr></argument>, <argument><expr><name>sci</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>layer</name></name> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_L12_apply_scf_384</name><argument_list>(<argument><expr><name>sci</name></expr></argument>, <argument><expr><name><name>sci</name><operator>-&gt;</operator><name>scf</name></name> <operator>+</operator> <name>igr</name></expr></argument>, <argument><expr><name><name>scratch</name><operator>.</operator><name>grbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3d_synth_granule</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>qmf_state</name></name></expr></argument>, <argument><expr><name><name>scratch</name><operator>.</operator><name>grbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><operator>(</operator><name>drmp3d_sample_t</name><operator>*</operator><operator>)</operator><name>pcm</name></expr></argument>, <argument><expr><name><name>scratch</name><operator>.</operator><name>syn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>scratch</name><operator>.</operator><name>grbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">576</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pcm</name> <operator>=</operator> <call><name>DRMP3_OFFSET_PTR</name><argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>drmp3d_sample_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">384</literal><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bs_frame</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>bs_frame</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3dec_init</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>success</name><operator>*</operator><call><name>drmp3_hdr_frame_samples</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drmp3dec_f32_to_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>drmp3_int16</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>num_samples</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DRMP3_HAVE_SIMD</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>aligned_count</name> <init>= <expr><name>num_samples</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>aligned_count</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>scale</name> <init>= <expr><call><name>DRMP3_VSET</name><argument_list>(<argument><expr><literal type="number">32768.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>a</name> <init>= <expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr> ]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>b</name> <init>= <expr><call><name>DRMP3_VMUL</name><argument_list>(<argument><expr><call><name>DRMP3_VLD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DRMP3_HAVE_SSE</name></expr></cpp:if>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>s16max</name> <init>= <expr><call><name>DRMP3_VSET</name><argument_list>( <argument><expr><literal type="number">32767.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_f4</name></type> <name>s16min</name> <init>= <expr><call><name>DRMP3_VSET</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">32768.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>pcm8</name> <init>= <expr><call><name>_mm_packs_epi32</name><argument_list>(<argument><expr><call><name>_mm_cvtps_epi32</name><argument_list>(<argument><expr><call><name>_mm_max_ps</name><argument_list>(<argument><expr><call><name>_mm_min_ps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>s16max</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s16min</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_mm_cvtps_epi32</name><argument_list>(<argument><expr><call><name>_mm_max_ps</name><argument_list>(<argument><expr><call><name>_mm_min_ps</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s16max</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s16min</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>pcm8</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>pcma</name></decl>, <decl><type ref="prev"/><name>pcmb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>DRMP3_VSET</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>DRMP3_VADD</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>DRMP3_VSET</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pcma</name> <operator>=</operator> <call><name>vqmovn_s32</name><argument_list>(<argument><expr><call><name>vqaddq_s32</name><argument_list>(<argument><expr><call><name>vcvtq_s32_f32</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vreinterpretq_s32_u32</name><argument_list>(<argument><expr><call><name>vcltq_f32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>DRMP3_VSET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pcmb</name> <operator>=</operator> <call><name>vqmovn_s32</name><argument_list>(<argument><expr><call><name>vqaddq_s32</name><argument_list>(<argument><expr><call><name>vcvtq_s32_f32</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vreinterpretq_s32_u32</name><argument_list>(<argument><expr><call><name>vcltq_f32</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>DRMP3_VSET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><name>i</name></expr></argument> , <argument><expr><name>pcma</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pcma</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>pcma</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>pcma</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>pcmb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>pcmb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>pcmb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vst1_lane_s16</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">7</literal></expr></argument>, <argument><expr><name>pcmb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>sample</name> <init>= <expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">32768.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sample</name> <operator>&gt;=</operator> <literal type="number">32766.5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>sample</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">32767.5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>)</operator><operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>drmp3_int16</name><operator>)</operator><operator>(</operator><name>sample</name> <operator>+</operator> <literal type="number">.5f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>-=</operator> <operator>(</operator><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_SIZE_MAX</name></cpp:macro> <cpp:value>SIZE_MAX</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_SIZE_MAX</name></cpp:macro> <cpp:value>((drmp3_uint64)0xFFFFFFFFFFFFFFFF)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_SIZE_MAX</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRMP3_SEEK_LEADING_MP3_FRAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_SEEK_LEADING_MP3_FRAMES</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRMP3_ASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_ASSERT</name><parameter_list>(<parameter><type><name>expression</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(expression)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRMP3_COPY_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_COPY_MEMORY</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy((dst), (src), (sz))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRMP3_ZERO_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_ZERO_MEMORY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((p), 0, (sz))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_ZERO_OBJECT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DRMP3_ZERO_MEMORY((p), sizeof(*(p)))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRMP3_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MALLOC</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc((sz))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRMP3_REALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_REALLOC</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>realloc((p), (sz))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRMP3_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_FREE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free((p))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drmp3_assert</name></cpp:macro> <cpp:value>DRMP3_ASSERT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drmp3_copy_memory</name></cpp:macro> <cpp:value>DRMP3_COPY_MEMORY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drmp3_zero_memory</name></cpp:macro> <cpp:value>DRMP3_ZERO_MEMORY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drmp3_zero_object</name></cpp:macro> <cpp:value>DRMP3_ZERO_OBJECT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drmp3_malloc</name></cpp:macro> <cpp:value>DRMP3_MALLOC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drmp3_realloc</name></cpp:macro> <cpp:value>DRMP3_REALLOC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drmp3_countof</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(x) / sizeof(x[0]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drmp3_max</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt; (y)) ? (x) : (y))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drmp3_min</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt; (y)) ? (x) : (y))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_DATA_CHUNK_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>DRMP3_INLINE</name> <name>float</name></type> <name>drmp3_mix_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>x</name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><name>a</name><operator>)</operator> <operator>+</operator> <name>y</name><operator>*</operator><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drmp3_blend_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pInA</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pInB</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>factor</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint32</name></type> <name>channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>drmp3_mix_f32</name><argument_list>(<argument><expr><name><name>pInA</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pInB</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drmp3_src_cache_init</name><parameter_list>(<parameter><decl><type><name>drmp3_src</name><modifier>*</modifier></type> <name>pSRC</name></decl></parameter>, <parameter><decl><type><name>drmp3_src_cache</name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pSRC</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pCache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSRC</name></name> <operator>=</operator> <name>pSRC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>cachedFrameCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>iNextFrame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>drmp3_uint64</name></type> <name>drmp3_src_cache_read_frames</name><parameter_list>(<parameter><decl><type><name>drmp3_src_cache</name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pFramesOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>totalFramesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pCache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSRC</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSRC</name><operator>-&gt;</operator><name>onRead</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>frameCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pFramesOut</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>frameCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>framesToReadFromClient</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesRemainingInMemory</name> <init>= <expr><name><name>pCache</name><operator>-&gt;</operator><name>cachedFrameCount</name></name> <operator>-</operator> <name><name>pCache</name><operator>-&gt;</operator><name>iNextFrame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesToReadFromMemory</name> <init>= <expr><name>frameCount</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>framesToReadFromMemory</name> <operator>&gt;</operator> <name>framesRemainingInMemory</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>framesToReadFromMemory</name> <operator>=</operator> <name>framesRemainingInMemory</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_copy_memory</name><argument_list>(<argument><expr><name>pFramesOut</name></expr></argument>, <argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pCachedFrames</name></name> <operator>+</operator> <name><name>pCache</name><operator>-&gt;</operator><name>iNextFrame</name></name><operator>*</operator><name>channels</name></expr></argument>, <argument><expr><operator>(</operator><name>drmp3_uint32</name><operator>)</operator><operator>(</operator><name>framesToReadFromMemory</name> <operator>*</operator> <name>channels</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>iNextFrame</name></name> <operator>+=</operator> <operator>(</operator><name>drmp3_uint32</name><operator>)</operator><name>framesToReadFromMemory</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalFramesRead</name> <operator>+=</operator> <name>framesToReadFromMemory</name></expr>;</expr_stmt>

<expr_stmt><expr><name>frameCount</name> <operator>-=</operator> <name>framesToReadFromMemory</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frameCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>frameCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pFramesOut</name> <operator>+=</operator> <name>framesToReadFromMemory</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>iNextFrame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>cachedFrameCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>framesToReadFromClient</name> <operator>=</operator> <call><name>drmp3_countof</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pCachedFrames</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesToReadFromClient</name> <operator>&gt;</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cacheSizeInFrames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>framesToReadFromClient</name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cacheSizeInFrames</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>cachedFrameCount</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint32</name><operator>)</operator><call><name><name>pCache</name><operator>-&gt;</operator><name>pSRC</name><operator>-&gt;</operator><name>onRead</name></name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSRC</name></name></expr></argument>, <argument><expr><name>framesToReadFromClient</name></expr></argument>, <argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pCachedFrames</name></name></expr></argument>, <argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSRC</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>cachedFrameCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalFramesRead</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>drmp3_uint64</name></type> <name>drmp3_src_read_frames_passthrough</name><parameter_list>(<parameter><decl><type><name>drmp3_src</name><modifier>*</modifier></type> <name>pSRC</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pFramesOut</name></decl></parameter>, <parameter><decl><type><name>drmp3_bool32</name></type> <name>flush</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drmp3_uint64</name></type> <name>drmp3_src_read_frames_linear</name><parameter_list>(<parameter><decl><type><name>drmp3_src</name><modifier>*</modifier></type> <name>pSRC</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pFramesOut</name></decl></parameter>, <parameter><decl><type><name>drmp3_bool32</name></type> <name>flush</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_src_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drmp3_src_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_src_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>drmp3_src</name><modifier>*</modifier></type> <name>pSRC</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pSRC</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_zero_object</name><argument_list>(<argument><expr><name>pSRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pConfig</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>onRead</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pConfig</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pSRC</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <operator>*</operator><name>pConfig</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSRC</name><operator>-&gt;</operator><name>onRead</name></name> <operator>=</operator> <name>onRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSRC</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cacheSizeInFrames</name></name> <operator>&gt;</operator> <name>DRMP3_SRC_CACHE_SIZE_IN_FRAMES</name> <operator>||</operator> <name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cacheSizeInFrames</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cacheSizeInFrames</name></name> <operator>=</operator> <name>DRMP3_SRC_CACHE_SIZE_IN_FRAMES</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_src_cache_init</name><argument_list>(<argument><expr><name>pSRC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSRC</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_src_set_input_sample_rate</name><parameter_list>(<parameter><decl><type><name>drmp3_src</name><modifier>*</modifier></type> <name>pSRC</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint32</name></type> <name>sampleRateIn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pSRC</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateIn</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>sampleRateIn</name></name> <operator>=</operator> <name>sampleRateIn</name></expr>;</expr_stmt>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_src_set_output_sample_rate</name><parameter_list>(<parameter><decl><type><name>drmp3_src</name><modifier>*</modifier></type> <name>pSRC</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint32</name></type> <name>sampleRateOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pSRC</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>sampleRateOut</name></name> <operator>=</operator> <name>sampleRateOut</name></expr>;</expr_stmt>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_uint64</name></type> <name>drmp3_src_read_frames_ex</name><parameter_list>(<parameter><decl><type><name>drmp3_src</name><modifier>*</modifier></type> <name>pSRC</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pFramesOut</name></decl></parameter>, <parameter><decl><type><name>drmp3_bool32</name></type> <name>flush</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_src_algorithm</name></type> <name>algorithm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pSRC</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>frameCount</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pFramesOut</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>algorithm</name> <operator>=</operator> <name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>algorithm</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>sampleRateIn</name></name> <operator>==</operator> <name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>sampleRateOut</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>algorithm</name> <operator>=</operator> <name>drmp3_src_algorithm_none</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>algorithm</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>drmp3_src_algorithm_none</name></expr>:</case> <return>return <expr><call><name>drmp3_src_read_frames_passthrough</name><argument_list>(<argument><expr><name>pSRC</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>pFramesOut</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>drmp3_src_algorithm_linear</name></expr>:</case> <return>return <expr><call><name>drmp3_src_read_frames_linear</name><argument_list>(<argument><expr><name>pSRC</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>pFramesOut</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>drmp3_uint64</name></type> <name>drmp3_src_read_frames</name><parameter_list>(<parameter><decl><type><name>drmp3_src</name><modifier>*</modifier></type> <name>pSRC</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pFramesOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drmp3_src_read_frames_ex</name><argument_list>(<argument><expr><name>pSRC</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>pFramesOut</name></expr></argument>, <argument><expr><name>DRMP3_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_uint64</name></type> <name>drmp3_src_read_frames_passthrough</name><parameter_list>(<parameter><decl><type><name>drmp3_src</name><modifier>*</modifier></type> <name>pSRC</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pFramesOut</name></decl></parameter>, <parameter><decl><type><name>drmp3_bool32</name></type> <name>flush</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pSRC</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>frameCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pFramesOut</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flush</name></expr>;</expr_stmt> 

<return>return <expr><call><name><name>pSRC</name><operator>-&gt;</operator><name>onRead</name></name><argument_list>(<argument><expr><name>pSRC</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>pFramesOut</name></expr></argument>, <argument><expr><name><name>pSRC</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_uint64</name></type> <name>drmp3_src_read_frames_linear</name><parameter_list>(<parameter><decl><type><name>drmp3_src</name><modifier>*</modifier></type> <name>pSRC</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pFramesOut</name></decl></parameter>, <parameter><decl><type><name>drmp3_bool32</name></type> <name>flush</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>totalFramesRead</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pSRC</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>frameCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pFramesOut</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>isPrevFramesLoaded</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesRead</name> <init>= <expr><call><name>drmp3_src_cache_read_frames</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSRC</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pSRC</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>framesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>isPrevFramesLoaded</name></name> <operator>=</operator> <name>DRMP3_TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>isNextFramesLoaded</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesRead</name> <init>= <expr><call><name>drmp3_src_cache_read_frames</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSRC</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pSRC</name><operator>-&gt;</operator><name>bin</name></name> <operator>+</operator> <name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>framesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>isNextFramesLoaded</name></name> <operator>=</operator> <name>DRMP3_TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>factor</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>sampleRateIn</name></name> <operator>/</operator> <name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>sampleRateOut</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalFramesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>frameCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>framesToReadFromClient</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>pPrevFrame</name> <init>= <expr><name><name>pSRC</name><operator>-&gt;</operator><name>bin</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>pNextFrame</name> <init>= <expr><name><name>pSRC</name><operator>-&gt;</operator><name>bin</name></name> <operator>+</operator> <name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_blend_f32</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>pFramesOut</name></expr></argument>, <argument><expr><name>pPrevFrame</name></expr></argument>, <argument><expr><name>pNextFrame</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>alpha</name></name></expr></argument>, <argument><expr><name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>alpha</name></name> <operator>+=</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name>framesToReadFromClient</name> <operator>=</operator> <operator>(</operator><name>drmp3_uint32</name><operator>)</operator><name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>alpha</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>alpha</name></name> <operator>-</operator> <name>framesToReadFromClient</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>framesToReadFromClient</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pPrevFrame</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pNextFrame</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>framesRead</name> <operator>=</operator> <call><name>drmp3_src_cache_read_frames</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSRC</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pNextFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pNextFrame</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>isNextFramesLoaded</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>isNextFramesLoaded</name></name> <operator>=</operator> <name>DRMP3_FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flush</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>isPrevFramesLoaded</name></name> <operator>=</operator> <name>DRMP3_FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pFramesOut</name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>*</operator><operator>)</operator><name>pFramesOut</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>*</operator> <name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>frameCount</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>totalFramesRead</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>isNextFramesLoaded</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>flush</name> <operator>||</operator> <operator>!</operator><name><name>pSRC</name><operator>-&gt;</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>isPrevFramesLoaded</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalFramesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>drmp3__on_read</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRead</name> <init>= <expr><call><name><name>pMP3</name><operator>-&gt;</operator><name>onRead</name></name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>streamCursor</name></name> <operator>+=</operator> <name>bytesRead</name></expr>;</expr_stmt>

<return>return <expr><name>bytesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drmp3_bool32</name></type> <name>drmp3__on_seek</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pMP3</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>origin</name> <operator>==</operator> <name>drmp3_seek_origin_start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>streamCursor</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_uint64</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>streamCursor</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drmp3_bool32</name></type> <name>drmp3__on_seek_64</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;=</operator> <literal type="number">0x7FFFFFFF</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drmp3__on_seek</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3__on_seek</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>, <argument><expr><name>drmp3_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>-=</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;=</operator> <literal type="number">0x7FFFFFFF</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3__on_seek</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><name>drmp3_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3__on_seek</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>, <argument><expr><name>drmp3_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>-=</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>drmp3_uint32</name></type> <name>drmp3_decode_next_frame_ex</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3d_sample_t</name><modifier>*</modifier></type> <name>pPCMFrames</name></decl></parameter>, <parameter><decl><type><name>drmp3_bool32</name></type> <name>discard</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>drmp3_uint32</name></type> <name>drmp3_decode_next_frame</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>drmp3_uint64</name></type> <name>drmp3_read_src</name><parameter_list>(<parameter><decl><type><name>drmp3_src</name><modifier>*</modifier></type> <name>pSRC</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pFramesOut</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name> <init>= <expr><operator>(</operator><name>drmp3</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>pFramesOutF</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>pFramesOut</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>totalFramesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pMP3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>onRead</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>frameCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesRemainingInMP3Frame</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>frameCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3d_sample_t</name><modifier>*</modifier></type> <name>frames</name> <init>= <expr><operator>(</operator><name>drmp3d_sample_t</name><operator>*</operator><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFrames</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_FLOAT_OUTPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameChannels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pFramesOutF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frames</name><index>[<expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">32768.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pFramesOutF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frames</name><index>[<expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">32768.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFramesOutF</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frames</name><index>[<expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">32768.0f</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name><name>frames</name><index>[<expr><operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameChannels</name></name><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">32768.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name><name>frames</name><index>[<expr><operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameChannels</name></name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">32768.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFramesOutF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sample</name> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pFramesOutF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frames</name><index>[<expr><operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameChannels</name></name><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">32768.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFramesOutF</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frames</name><index>[<expr><operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameChannels</name></name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">32768.0f</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameChannels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pFramesOutF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frames</name><index>[<expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pFramesOutF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frames</name><index>[<expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFramesOutF</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frames</name><index>[<expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name><name>frames</name><index>[<expr><operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameChannels</name></name><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name><name>frames</name><index>[<expr><operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameChannels</name></name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFramesOutF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sample</name> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pFramesOutF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frames</name><index>[<expr><operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameChannels</name></name><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFramesOutF</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frames</name><index>[<expr><operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameChannels</name></name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesRemainingInMP3Frame</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>totalFramesRead</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>frameCount</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pFramesOutF</name> <operator>+=</operator> <name><name>pSRC</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>frameCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesRemainingInMP3Frame</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drmp3_decode_next_frame</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalFramesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drmp3_bool32</name></type> <name>drmp3_init_src</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_src_config</name></type> <name>srcConfig</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_zero_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srcConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcConfig</name><operator>.</operator><name>sampleRateIn</name></name> <operator>=</operator> <name>DR_MP3_DEFAULT_SAMPLE_RATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcConfig</name><operator>.</operator><name>sampleRateOut</name></name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>sampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcConfig</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcConfig</name><operator>.</operator><name>algorithm</name></name> <operator>=</operator> <name>drmp3_src_algorithm_linear</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_src_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srcConfig</name></expr></argument>, <argument><expr><name>drmp3_read_src</name></expr></argument>, <argument><expr><name>pMP3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMP3</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drmp3_uninit</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drmp3_uint32</name></type> <name>drmp3_decode_next_frame_ex</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3d_sample_t</name><modifier>*</modifier></type> <name>pPCMFrames</name></decl></parameter>, <parameter><decl><type><name>drmp3_bool32</name></type> <name>discard</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>pcmFramesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pMP3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>onRead</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>atEnd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>drmp3dec_frame_info</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>leftoverDataSize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>&lt;</operator> <name>DRMP3_DATA_CHUNK_SIZE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRead</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>dataCapacity</name></name> <operator>&lt;</operator> <name>DRMP3_DATA_CHUNK_SIZE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint8</name><modifier>*</modifier></type> <name>pNewData</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>dataCapacity</name></name> <operator>=</operator> <name>DRMP3_DATA_CHUNK_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pNewData</name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>*</operator><operator>)</operator><call><name>drmp3_realloc</name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>dataCapacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pNewData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>pNewData</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesRead</name> <operator>=</operator> <call><name>drmp3__on_read</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>dataCapacity</name></name> <operator>-</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>atEnd</name></name> <operator>=</operator> <name>DRMP3_TRUE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>+=</operator> <name>bytesRead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>atEnd</name></name> <operator>=</operator> <name>DRMP3_TRUE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pcmFramesRead</name> <operator>=</operator> <call><name>drmp3dec_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMP3</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name></expr></argument>, <argument><expr><name>pPCMFrames</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>leftoverDataSize</name> <operator>=</operator> <operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>info</name><operator>.</operator><name>frame_bytes</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>frame_bytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>info</name><operator>.</operator><name>frame_bytes</name></name></expr></argument>, <argument><expr><name>leftoverDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>=</operator> <name>leftoverDataSize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmFramesRead</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>frame_bytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>discard</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pcmFramesRead</name> <operator>=</operator> <call><name>drmp3_hdr_frame_samples</name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>decoder</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesRemainingInMP3Frame</name></name> <operator>=</operator> <name>pcmFramesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameChannels</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameSampleRate</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>hz</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>hz</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_init_src</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_src_set_input_sample_rate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMP3</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameSampleRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>.</operator><name>frame_bytes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRead</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>dataCapacity</name></name> <operator>==</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint8</name><modifier>*</modifier></type> <name>pNewData</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>dataCapacity</name></name> <operator>+=</operator> <name>DRMP3_DATA_CHUNK_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pNewData</name> <operator>=</operator> <operator>(</operator><name>drmp3_uint8</name><operator>*</operator><operator>)</operator><call><name>drmp3_realloc</name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>dataCapacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pNewData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>pNewData</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesRead</name> <operator>=</operator> <call><name>drmp3__on_read</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>dataCapacity</name></name> <operator>-</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>atEnd</name></name> <operator>=</operator> <name>DRMP3_TRUE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>+=</operator> <name>bytesRead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>DRMP3_TRUE</name></expr>)</condition>;</do>

<return>return <expr><name>pcmFramesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drmp3_uint32</name></type> <name>drmp3_decode_next_frame</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pMP3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>drmp3_decode_next_frame_ex</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><operator>(</operator><name>drmp3d_sample_t</name><operator>*</operator><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFrames</name></name></expr></argument>, <argument><expr><name>DRMP3_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static drmp3_uint32 drmp3_seek_next_frame(drmp3* pMP3)

{

drmp3_uint32 pcmFrameCount;

drmp3_assert(pMP3 != NULL);

pcmFrameCount = drmp3_decode_next_frame_ex(pMP3, NULL);

if (pcmFrameCount == 0) {

return 0;

}

pMP3-&gt;currentPCMFrame += pcmFrameCount;

pMP3-&gt;pcmFramesConsumedInMP3Frame = pcmFrameCount;

pMP3-&gt;pcmFramesRemainingInMP3Frame = 0;

return pcmFrameCount;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_init_internal</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_config</name></type> <name>config</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pMP3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>onRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3dec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMP3</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pConfig</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>config</name> <operator>=</operator> <operator>*</operator><name>pConfig</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>drmp3_zero_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>config</name><operator>.</operator><name>outputChannels</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>config</name><operator>.</operator><name>outputSampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>onRead</name></name> <operator>=</operator> <name>onRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>onSeek</name></name> <operator>=</operator> <name>onSeek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drmp3_init_src</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_decode_next_frame</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drmp3_uninit</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_init</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pMP3</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>onRead</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_zero_object</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>drmp3_init_internal</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>drmp3__on_read_memory</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name> <init>= <expr><operator>(</operator><name>drmp3</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRemaining</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pMP3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>dataSize</name></name> <operator>&gt;=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>currentReadPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytesRemaining</name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>dataSize</name></name> <operator>-</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>currentReadPos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesToRead</name> <operator>&gt;</operator> <name>bytesRemaining</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytesToRead</name> <operator>=</operator> <name>bytesRemaining</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drmp3_copy_memory</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>pData</name></name> <operator>+</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>currentReadPos</name></name></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>currentReadPos</name></name> <operator>+=</operator> <name>bytesToRead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bytesToRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drmp3_bool32</name></type> <name>drmp3__on_seek_memory</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>byteOffset</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name> <init>= <expr><operator>(</operator><name>drmp3</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pMP3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>origin</name> <operator>==</operator> <name>drmp3_seek_origin_current</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>byteOffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>currentReadPos</name></name> <operator>+</operator> <name>byteOffset</name> <operator>&gt;</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>dataSize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byteOffset</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>dataSize</name></name> <operator>-</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>currentReadPos</name></name><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>currentReadPos</name></name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><name>byteOffset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byteOffset</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>currentReadPos</name></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>currentReadPos</name></name> <operator>+=</operator> <name>byteOffset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>drmp3_uint32</name><operator>)</operator><name>byteOffset</name> <operator>&lt;=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>dataSize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>currentReadPos</name></name> <operator>=</operator> <name>byteOffset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>currentReadPos</name></name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>dataSize</name></name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_init_memory</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pMP3</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_zero_object</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pData</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dataSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>drmp3_uint8</name><operator>*</operator><operator>)</operator><name>pData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>dataSize</name></name> <operator>=</operator> <name>dataSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>currentReadPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>drmp3_init_internal</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>drmp3__on_read_memory</name></expr></argument>, <argument><expr><name>drmp3__on_seek_memory</name></expr></argument>, <argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>drmp3__on_read_stdio</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>fread</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>, <argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drmp3_bool32</name></type> <name>drmp3__on_seek_stdio</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>fseek</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>origin</name> <operator>==</operator> <name>drmp3_seek_origin_current</name><operator>)</operator></expr> ?</condition><then> <expr><name>SEEK_CUR</name></expr> </then><else>: <expr><name>SEEK_SET</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_init_file</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filePath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>pFile</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>fopen_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>, <argument><expr><name>filePath</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filePath</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>drmp3_init</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>drmp3__on_read_stdio</name></expr></argument>, <argument><expr><name>drmp3__on_seek_stdio</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>drmp3_uninit</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pMP3</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>onRead</name></name> <operator>==</operator> <name>drmp3__on_read_stdio</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>drmp3_free</name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>drmp3_uint64</name></type> <name>drmp3_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>totalFramesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pMP3</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>onRead</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pBufferOut</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>temp</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>framesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesJustRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesToReadRightNow</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>framesToReadRightNow</name> <operator>&gt;</operator> <name>framesToRead</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>framesToReadRightNow</name> <operator>=</operator> <name>framesToRead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>framesJustRead</name> <operator>=</operator> <call><name>drmp3_read_pcm_frames_f32</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>framesToReadRightNow</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesJustRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>framesToRead</name> <operator>-=</operator> <name>framesJustRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalFramesRead</name> <operator>+=</operator> <name>framesJustRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>totalFramesRead</name> <operator>=</operator> <call><name>drmp3_src_read_frames_ex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMP3</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>framesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>DRMP3_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>currentPCMFrame</name></name> <operator>+=</operator> <name>totalFramesRead</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>totalFramesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_uint64</name></type> <name>drmp3_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>drmp3_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>tempF32</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>pcmFramesJustRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>totalPCMFramesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pMP3</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>onRead</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>pcmFramesToReadThisIteration</name> <init>= <expr><operator>(</operator><name>framesToRead</name> <operator>-</operator> <name>totalPCMFramesRead</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmFramesToReadThisIteration</name> <operator>&gt;</operator> <call><name>drmp3_countof</name><argument_list>(<argument><expr><name>tempF32</name></expr></argument>)</argument_list></call><operator>/</operator><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pcmFramesToReadThisIteration</name> <operator>=</operator> <call><name>drmp3_countof</name><argument_list>(<argument><expr><name>tempF32</name></expr></argument>)</argument_list></call><operator>/</operator><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pcmFramesJustRead</name> <operator>=</operator> <call><name>drmp3_read_pcm_frames_f32</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>pcmFramesToReadThisIteration</name></expr></argument>, <argument><expr><name>tempF32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmFramesJustRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3dec_f32_to_s16</name><argument_list>(<argument><expr><name>tempF32</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pcmFramesJustRead</name> <operator>*</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>pcmFramesJustRead</name> <operator>*</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalPCMFramesRead</name> <operator>+=</operator> <name>pcmFramesJustRead</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmFramesJustRead</name> <operator>&lt;</operator> <name>pcmFramesToReadThisIteration</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>totalPCMFramesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drmp3_reset</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pMP3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesConsumedInMP3Frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesRemainingInMP3Frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>currentPCMFrame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>atEnd</name></name> <operator>=</operator> <name>DRMP3_FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>bin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>bin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>bin</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>bin</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>cache</name><operator>.</operator><name>cachedFrameCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>cache</name><operator>.</operator><name>iNextFrame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>isNextFramesLoaded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>isPrevFramesLoaded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3dec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMP3</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_seek_to_start_of_stream</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pMP3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>onSeek</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3__on_seek</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>drmp3_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_reset</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>drmp3_get_cached_pcm_frame_count_from_src</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>cache</name><operator>.</operator><name>cachedFrameCount</name></name> <operator>-</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>cache</name><operator>.</operator><name>iNextFrame</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>alpha</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>drmp3_get_pcm_frames_remaining_in_mp3_frame</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>factor</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>config</name><operator>.</operator><name>sampleRateOut</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>config</name><operator>.</operator><name>sampleRateIn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>frameCountPreSRC</name> <init>= <expr><call><name>drmp3_get_cached_pcm_frame_count_from_src</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>pcmFramesRemainingInMP3Frame</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>frameCountPreSRC</name> <operator>*</operator> <name>factor</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_seek_forward_by_pcm_frames__brute_force</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameOffset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesRead</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

drmp3_uint64 maxFramesToReadAndDiscard = (drmp3_uint64)(DRMP3_MAX_PCM_FRAMES_PER_MP3_FRAME * 3 * ((float)pMP3-&gt;src.config.sampleRateOut / (float)pMP3-&gt;src.config.sampleRateIn));

while (frameOffset &gt; maxFramesToReadAndDiscard) {

float pcmFramesRemainingInCurrentMP3FrameF = drmp3_get_pcm_frames_remaining_in_mp3_frame(pMP3);

drmp3_uint32 pcmFramesRemainingInCurrentMP3Frame = (drmp3_uint32)pcmFramesRemainingInCurrentMP3FrameF;

if (frameOffset &gt; pcmFramesRemainingInCurrentMP3Frame) {

frameOffset -= pcmFramesRemainingInCurrentMP3Frame;

pMP3-&gt;currentPCMFrame += pcmFramesRemainingInCurrentMP3Frame;

pMP3-&gt;pcmFramesConsumedInMP3Frame += pMP3-&gt;pcmFramesRemainingInMP3Frame;

pMP3-&gt;pcmFramesRemainingInMP3Frame = 0;

} else {

break;

}

drmp3_uint32 pcmFrameCount = drmp3_decode_next_frame_ex(pMP3, pMP3-&gt;pcmFrames, DRMP3_FALSE);

if (pcmFrameCount == 0) {

break;

}

}

framesRead = drmp3_read_pcm_frames_f32(pMP3, frameOffset, NULL);

if (framesRead != frameOffset) {

return DRMP3_FALSE;

}

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>framesRead</name> <operator>=</operator> <call><name>drmp3_read_pcm_frames_f32</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>frameOffset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesRead</name> <operator>!=</operator> <name>frameOffset</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_seek_to_pcm_frame__brute_force</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameIndex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pMP3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frameIndex</name> <operator>==</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>currentPCMFrame</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frameIndex</name> <operator>&lt;</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>currentPCMFrame</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_seek_to_start_of_stream</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>frameIndex</name> <operator>&gt;=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>currentPCMFrame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>drmp3_seek_forward_by_pcm_frames__brute_force</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><operator>(</operator><name>frameIndex</name> <operator>-</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>currentPCMFrame</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_find_closest_seek_point</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameIndex</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint32</name><modifier>*</modifier></type> <name>pSeekPointIndex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>iSeekPoint</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pSeekPointIndex</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pSeekPointIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frameIndex</name> <operator>&lt;</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>pSeekPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pcmFrameIndex</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>iSeekPoint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iSeekPoint</name> <operator>&lt;</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>seekPointCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iSeekPoint</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>pSeekPoints</name><index>[<expr><name>iSeekPoint</name></expr>]</index></name><operator>.</operator><name>pcmFrameIndex</name> <operator>&gt;</operator> <name>frameIndex</name></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pSeekPointIndex</name> <operator>=</operator> <name>iSeekPoint</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_seek_to_pcm_frame__seek_table</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameIndex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_seek_point</name></type> <name>seekPoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>priorSeekPointIndex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint16</name></type> <name>iMP3Frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>leftoverFrames</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pMP3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pSeekPoints</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>seekPointCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drmp3_find_closest_seek_point</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>frameIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priorSeekPointIndex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>seekPoint</name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>pSeekPoints</name><index>[<expr><name>priorSeekPointIndex</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>seekPoint</name><operator>.</operator><name>seekPosInBytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>seekPoint</name><operator>.</operator><name>pcmFrameIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>seekPoint</name><operator>.</operator><name>mp3FramesToDiscard</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>seekPoint</name><operator>.</operator><name>pcmFramesToDiscard</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3__on_seek_64</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name><name>seekPoint</name><operator>.</operator><name>seekPosInBytes</name></name></expr></argument>, <argument><expr><name>drmp3_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_reset</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>iMP3Frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iMP3Frame</name> <operator>&lt;</operator> <name><name>seekPoint</name><operator>.</operator><name>mp3FramesToDiscard</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iMP3Frame</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>pcmFramesReadPreSRC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3d_sample_t</name><modifier>*</modifier></type> <name>pPCMFrames</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pPCMFrames</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>iMP3Frame</name> <operator>==</operator> <name><name>seekPoint</name><operator>.</operator><name>mp3FramesToDiscard</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pPCMFrames</name> <operator>=</operator> <operator>(</operator><name>drmp3d_sample_t</name><operator>*</operator><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>pcmFrames</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pcmFramesReadPreSRC</name> <operator>=</operator> <call><name>drmp3_decode_next_frame_ex</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>pPCMFrames</name></expr></argument>, <argument><expr><name>DRMP3_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmFramesReadPreSRC</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>currentPCMFrame</name></name> <operator>=</operator> <name><name>seekPoint</name><operator>.</operator><name>pcmFrameIndex</name></name> <operator>-</operator> <name><name>seekPoint</name><operator>.</operator><name>pcmFramesToDiscard</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <operator>(</operator><name>drmp3_int64</name><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>currentPCMFrame</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>config</name><operator>.</operator><name>sampleRateIn</name></name> <operator>/</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>config</name><operator>.</operator><name>sampleRateOut</name></name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>alpha</name></name> <operator>-</operator> <operator>(</operator><name>drmp3_uint32</name><operator>)</operator><operator>(</operator><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>alpha</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>alpha</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>algo</name><operator>.</operator><name>linear</name><operator>.</operator><name>isPrevFramesLoaded</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>leftoverFrames</name> <operator>=</operator> <name>frameIndex</name> <operator>-</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>currentPCMFrame</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>drmp3_seek_forward_by_pcm_frames__brute_force</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>leftoverFrames</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_seek_to_pcm_frame</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name></type> <name>frameIndex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pMP3</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>onSeek</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frameIndex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drmp3_seek_to_start_of_stream</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>pSeekPoints</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>seekPointCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drmp3_seek_to_pcm_frame__seek_table</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>frameIndex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>drmp3_seek_to_pcm_frame__brute_force</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>frameIndex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_get_mp3_and_pcm_frame_count</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pMP3FrameCount</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pPCMFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>currentPCMFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>totalMP3FrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>totalPCMFrameCountFractionalPart</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pMP3</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMP3</name><operator>-&gt;</operator><name>onSeek</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>currentPCMFrame</name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>currentPCMFrame</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_seek_to_start_of_stream</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totalPCMFrameCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>totalMP3FrameCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>totalPCMFrameCountFractionalPart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>pcmFramesInCurrentMP3FrameIn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>srcRatio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pcmFramesInCurrentMP3FrameOutF</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>pcmFramesInCurrentMP3FrameOut</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pcmFramesInCurrentMP3FrameIn</name> <operator>=</operator> <call><name>drmp3_decode_next_frame_ex</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DRMP3_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmFramesInCurrentMP3FrameIn</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>srcRatio</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameSampleRate</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>sampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>srcRatio</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pcmFramesInCurrentMP3FrameOutF</name> <operator>=</operator> <name>totalPCMFrameCountFractionalPart</name> <operator>+</operator> <operator>(</operator><name>pcmFramesInCurrentMP3FrameIn</name> <operator>/</operator> <name>srcRatio</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pcmFramesInCurrentMP3FrameOut</name> <operator>=</operator> <operator>(</operator><name>drmp3_uint32</name><operator>)</operator><name>pcmFramesInCurrentMP3FrameOutF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalPCMFrameCountFractionalPart</name> <operator>=</operator> <name>pcmFramesInCurrentMP3FrameOutF</name> <operator>-</operator> <name>pcmFramesInCurrentMP3FrameOut</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalPCMFrameCount</name> <operator>+=</operator> <name>pcmFramesInCurrentMP3FrameOut</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalMP3FrameCount</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_seek_to_start_of_stream</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_seek_to_pcm_frame</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>currentPCMFrame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pMP3FrameCount</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pMP3FrameCount</name> <operator>=</operator> <name>totalMP3FrameCount</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pPCMFrameCount</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pPCMFrameCount</name> <operator>=</operator> <name>totalPCMFrameCount</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_uint64</name></type> <name>drmp3_get_pcm_frame_count</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_get_mp3_and_pcm_frame_count</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>totalPCMFrameCount</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_uint64</name></type> <name>drmp3_get_mp3_frame_count</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>totalMP3FrameCount</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_get_mp3_and_pcm_frame_count</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalMP3FrameCount</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>totalMP3FrameCount</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drmp3__accumulate_running_pcm_frame_count</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint32</name></type> <name>pcmFrameCountIn</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pRunningPCMFrameCount</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pRunningPCMFrameCountFractionalPart</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>srcRatio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pcmFrameCountOutF</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>pcmFrameCountOut</name></decl>;</decl_stmt>

<expr_stmt><expr><name>srcRatio</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>mp3FrameSampleRate</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>pMP3</name><operator>-&gt;</operator><name>sampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>srcRatio</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pcmFrameCountOutF</name> <operator>=</operator> <operator>*</operator><name>pRunningPCMFrameCountFractionalPart</name> <operator>+</operator> <operator>(</operator><name>pcmFrameCountIn</name> <operator>/</operator> <name>srcRatio</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pcmFrameCountOut</name> <operator>=</operator> <operator>(</operator><name>drmp3_uint32</name><operator>)</operator><name>pcmFrameCountOutF</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pRunningPCMFrameCountFractionalPart</name> <operator>=</operator> <name>pcmFrameCountOutF</name> <operator>-</operator> <name>pcmFrameCountOut</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pRunningPCMFrameCount</name> <operator>+=</operator> <name>pcmFrameCountOut</name></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>bytePos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>pcmFrameIndex</name></decl>;</decl_stmt> 

}</block></struct></type> <name>drmp3__seeking_mp3_frame_info</name>;</typedef>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_calculate_seek_points</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint32</name><modifier>*</modifier></type> <name>pSeekPointCount</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_point</name><modifier>*</modifier></type> <name>pSeekPoints</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>seekPointCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>currentPCMFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>totalMP3FrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pMP3</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pSeekPointCount</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pSeekPoints</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seekPointCount</name> <operator>=</operator> <operator>*</operator><name>pSeekPointCount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seekPointCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>currentPCMFrame</name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>currentPCMFrame</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_get_mp3_and_pcm_frame_count</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalMP3FrameCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalMP3FrameCount</name> <operator>&lt;</operator> <name>DRMP3_SEEK_LEADING_MP3_FRAMES</name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>seekPointCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSeekPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>seekPosInBytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSeekPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pcmFrameIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSeekPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mp3FramesToDiscard</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSeekPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pcmFramesToDiscard</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>pcmFramesBetweenSeekPoints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3__seeking_mp3_frame_info</name></type> <name><name>mp3FrameInfo</name><index>[<expr><name>DRMP3_SEEK_LEADING_MP3_FRAMES</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>runningPCMFrameCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>runningPCMFrameCountFractionalPart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>nextTargetPCMFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>iMP3Frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>iSeekPoint</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>seekPointCount</name> <operator>&gt;</operator> <name>totalMP3FrameCount</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>seekPointCount</name> <operator>=</operator> <operator>(</operator><name>drmp3_uint32</name><operator>)</operator><name>totalMP3FrameCount</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pcmFramesBetweenSeekPoints</name> <operator>=</operator> <name>totalPCMFrameCount</name> <operator>/</operator> <operator>(</operator><name>seekPointCount</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_seek_to_start_of_stream</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>iMP3Frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iMP3Frame</name> <operator>&lt;</operator> <name>DRMP3_SEEK_LEADING_MP3_FRAMES</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>iMP3Frame</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>pcmFramesInCurrentMP3FrameIn</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name><name>pMP3</name><operator>-&gt;</operator><name>streamCursor</name></name> <operator>&gt;=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3FrameInfo</name><index>[<expr><name>iMP3Frame</name></expr>]</index></name><operator>.</operator><name>bytePos</name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>streamCursor</name></name> <operator>-</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3FrameInfo</name><index>[<expr><name>iMP3Frame</name></expr>]</index></name><operator>.</operator><name>pcmFrameIndex</name> <operator>=</operator> <name>runningPCMFrameCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pcmFramesInCurrentMP3FrameIn</name> <operator>=</operator> <call><name>drmp3_decode_next_frame_ex</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DRMP3_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmFramesInCurrentMP3FrameIn</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3__accumulate_running_pcm_frame_count</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>pcmFramesInCurrentMP3FrameIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>runningPCMFrameCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>runningPCMFrameCountFractionalPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>nextTargetPCMFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>iSeekPoint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iSeekPoint</name> <operator>&lt;</operator> <name>seekPointCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>iSeekPoint</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>nextTargetPCMFrame</name> <operator>+=</operator> <name>pcmFramesBetweenSeekPoints</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nextTargetPCMFrame</name> <operator>&lt;</operator> <name>runningPCMFrameCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSeekPoints</name><index>[<expr><name>iSeekPoint</name></expr>]</index></name><operator>.</operator><name>seekPosInBytes</name> <operator>=</operator> <name><name>mp3FrameInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytePos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSeekPoints</name><index>[<expr><name>iSeekPoint</name></expr>]</index></name><operator>.</operator><name>pcmFrameIndex</name> <operator>=</operator> <name>nextTargetPCMFrame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSeekPoints</name><index>[<expr><name>iSeekPoint</name></expr>]</index></name><operator>.</operator><name>mp3FramesToDiscard</name> <operator>=</operator> <name>DRMP3_SEEK_LEADING_MP3_FRAMES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSeekPoints</name><index>[<expr><name>iSeekPoint</name></expr>]</index></name><operator>.</operator><name>pcmFramesToDiscard</name> <operator>=</operator> <operator>(</operator><name>drmp3_uint16</name><operator>)</operator><operator>(</operator><name>nextTargetPCMFrame</name> <operator>-</operator> <name><name>mp3FrameInfo</name><index>[<expr><name>DRMP3_SEEK_LEADING_MP3_FRAMES</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pcmFrameIndex</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint32</name></type> <name>pcmFramesInCurrentMP3FrameIn</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>drmp3_countof</name><argument_list>(<argument><expr><name>mp3FrameInfo</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mp3FrameInfo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mp3FrameInfo</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mp3FrameInfo</name><index>[<expr><call><name>drmp3_countof</name><argument_list>(<argument><expr><name>mp3FrameInfo</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bytePos</name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>streamCursor</name></name> <operator>-</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>dataSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3FrameInfo</name><index>[<expr><call><name>drmp3_countof</name><argument_list>(<argument><expr><name>mp3FrameInfo</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pcmFrameIndex</name> <operator>=</operator> <name>runningPCMFrameCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pcmFramesInCurrentMP3FrameIn</name> <operator>=</operator> <call><name>drmp3_decode_next_frame_ex</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DRMP3_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmFramesInCurrentMP3FrameIn</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSeekPoints</name><index>[<expr><name>iSeekPoint</name></expr>]</index></name><operator>.</operator><name>seekPosInBytes</name> <operator>=</operator> <name><name>mp3FrameInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytePos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSeekPoints</name><index>[<expr><name>iSeekPoint</name></expr>]</index></name><operator>.</operator><name>pcmFrameIndex</name> <operator>=</operator> <name>nextTargetPCMFrame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSeekPoints</name><index>[<expr><name>iSeekPoint</name></expr>]</index></name><operator>.</operator><name>mp3FramesToDiscard</name> <operator>=</operator> <name>DRMP3_SEEK_LEADING_MP3_FRAMES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSeekPoints</name><index>[<expr><name>iSeekPoint</name></expr>]</index></name><operator>.</operator><name>pcmFramesToDiscard</name> <operator>=</operator> <operator>(</operator><name>drmp3_uint16</name><operator>)</operator><operator>(</operator><name>nextTargetPCMFrame</name> <operator>-</operator> <name><name>mp3FrameInfo</name><index>[<expr><name>DRMP3_SEEK_LEADING_MP3_FRAMES</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pcmFrameIndex</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3__accumulate_running_pcm_frame_count</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>pcmFramesInCurrentMP3FrameIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>runningPCMFrameCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>runningPCMFrameCountFractionalPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_seek_to_start_of_stream</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_seek_to_pcm_frame</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>currentPCMFrame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pSeekPointCount</name> <operator>=</operator> <name>seekPointCount</name></expr>;</expr_stmt>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_bool32</name></type> <name>drmp3_bind_seek_table</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint32</name></type> <name>seekPointCount</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_point</name><modifier>*</modifier></type> <name>pSeekPoints</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pMP3</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRMP3_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>seekPointCount</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pSeekPoints</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>seekPointCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pSeekPoints</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>seekPointCount</name></name> <operator>=</operator> <name>seekPointCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pMP3</name><operator>-&gt;</operator><name>pSeekPoints</name></name> <operator>=</operator> <name>pSeekPoints</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>DRMP3_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drmp3__full_read_and_close_f32</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>totalFramesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesCapacity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>pFrames</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>temp</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pMP3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesToReadRightNow</name> <init>= <expr><call><name>drmp3_countof</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesJustRead</name> <init>= <expr><call><name>drmp3_read_pcm_frames_f32</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>framesToReadRightNow</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>framesJustRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCapacity</name> <operator>&lt;</operator> <name>totalFramesRead</name> <operator>+</operator> <name>framesJustRead</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>newFramesBufferSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>pNewFrames</name></decl>;</decl_stmt>

<expr_stmt><expr><name>framesCapacity</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCapacity</name> <operator>&lt;</operator> <name>totalFramesRead</name> <operator>+</operator> <name>framesJustRead</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>framesCapacity</name> <operator>=</operator> <name>totalFramesRead</name> <operator>+</operator> <name>framesJustRead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newFramesBufferSize</name> <operator>=</operator> <name>framesCapacity</name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newFramesBufferSize</name> <operator>&gt;</operator> <name>DRMP3_SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pNewFrames</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>drmp3_realloc</name><argument_list>(<argument><expr><name>pFrames</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>newFramesBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pNewFrames</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drmp3_free</name><argument_list>(<argument><expr><name>pFrames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFrames</name> <operator>=</operator> <name>pNewFrames</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_copy_memory</name><argument_list>(<argument><expr><name>pFrames</name> <operator>+</operator> <name>totalFramesRead</name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>framesJustRead</name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>totalFramesRead</name> <operator>+=</operator> <name>framesJustRead</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesJustRead</name> <operator>!=</operator> <name>framesToReadRightNow</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pConfig</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pConfig</name><operator>-&gt;</operator><name>outputChannels</name></name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pConfig</name><operator>-&gt;</operator><name>outputSampleRate</name></name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>sampleRate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_uninit</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pTotalFrameCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pTotalFrameCount</name> <operator>=</operator> <name>totalFramesRead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pFrames</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_int16</name><modifier>*</modifier></type> <name>drmp3__full_read_and_close_s16</name><parameter_list>(<parameter><decl><type><name>drmp3</name><modifier>*</modifier></type> <name>pMP3</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>totalFramesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesCapacity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_int16</name><modifier>*</modifier></type> <name>pFrames</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_int16</name></type> <name><name>temp</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drmp3_assert</name><argument_list>(<argument><expr><name>pMP3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesToReadRightNow</name> <init>= <expr><call><name>drmp3_countof</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>framesJustRead</name> <init>= <expr><call><name>drmp3_read_pcm_frames_s16</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>, <argument><expr><name>framesToReadRightNow</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>framesJustRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCapacity</name> <operator>&lt;</operator> <name>totalFramesRead</name> <operator>+</operator> <name>framesJustRead</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drmp3_uint64</name></type> <name>newFramesBufferSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmp3_int16</name><modifier>*</modifier></type> <name>pNewFrames</name></decl>;</decl_stmt>

<expr_stmt><expr><name>framesCapacity</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCapacity</name> <operator>&lt;</operator> <name>totalFramesRead</name> <operator>+</operator> <name>framesJustRead</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>framesCapacity</name> <operator>=</operator> <name>totalFramesRead</name> <operator>+</operator> <name>framesJustRead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newFramesBufferSize</name> <operator>=</operator> <name>framesCapacity</name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>drmp3_int16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newFramesBufferSize</name> <operator>&gt;</operator> <name>DRMP3_SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pNewFrames</name> <operator>=</operator> <operator>(</operator><name>drmp3_int16</name><operator>*</operator><operator>)</operator><call><name>drmp3_realloc</name><argument_list>(<argument><expr><name>pFrames</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>newFramesBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pNewFrames</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drmp3_free</name><argument_list>(<argument><expr><name>pFrames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFrames</name> <operator>=</operator> <name>pNewFrames</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_copy_memory</name><argument_list>(<argument><expr><name>pFrames</name> <operator>+</operator> <name>totalFramesRead</name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>framesJustRead</name><operator>*</operator><name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>drmp3_int16</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>totalFramesRead</name> <operator>+=</operator> <name>framesJustRead</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesJustRead</name> <operator>!=</operator> <name>framesToReadRightNow</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pConfig</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pConfig</name><operator>-&gt;</operator><name>outputChannels</name></name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pConfig</name><operator>-&gt;</operator><name>outputSampleRate</name></name> <operator>=</operator> <name><name>pMP3</name><operator>-&gt;</operator><name>sampleRate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drmp3_uninit</name><argument_list>(<argument><expr><name>pMP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pTotalFrameCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pTotalFrameCount</name> <operator>=</operator> <name>totalFramesRead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pFrames</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drmp3_open_and_read_f32</name><parameter_list>(<parameter><decl><type><name>drmp3_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3</name></type> <name>mp3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp3</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drmp3__full_read_and_close_f32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp3</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>pTotalFrameCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_int16</name><modifier>*</modifier></type> <name>drmp3_open_and_read_s16</name><parameter_list>(<parameter><decl><type><name>drmp3_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drmp3_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3</name></type> <name>mp3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp3</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drmp3__full_read_and_close_s16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp3</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>pTotalFrameCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drmp3_open_memory_and_read_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3</name></type> <name>mp3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_init_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp3</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drmp3__full_read_and_close_f32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp3</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>pTotalFrameCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_int16</name><modifier>*</modifier></type> <name>drmp3_open_memory_and_read_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3</name></type> <name>mp3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_init_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp3</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drmp3__full_read_and_close_s16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp3</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>pTotalFrameCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_MP3_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>float</name><modifier>*</modifier></type> <name>drmp3_open_file_and_read_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filePath</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3</name></type> <name>mp3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_init_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp3</name></expr></argument>, <argument><expr><name>filePath</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drmp3__full_read_and_close_f32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp3</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>pTotalFrameCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drmp3_int16</name><modifier>*</modifier></type> <name>drmp3_open_file_and_read_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filePath</name></decl></parameter>, <parameter><decl><type><name>drmp3_config</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><name>drmp3_uint64</name><modifier>*</modifier></type> <name>pTotalFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drmp3</name></type> <name>mp3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drmp3_init_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp3</name></expr></argument>, <argument><expr><name>filePath</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drmp3__full_read_and_close_s16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp3</name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>pTotalFrameCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>drmp3_free</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DRMP3_FREE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
