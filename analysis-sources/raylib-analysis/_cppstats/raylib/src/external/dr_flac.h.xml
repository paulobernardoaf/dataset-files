<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\dr_flac.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1600</literal></expr></cpp:if>

<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>drflac_int8</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>drflac_uint8</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>short</name></type> <name>drflac_int16</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>drflac_uint16</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>int</name></type> <name>drflac_int32</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>drflac_uint32</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>__int64</name></type> <name>drflac_int64</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>drflac_uint64</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>int8_t</name></type> <name>drflac_int8</name>;</typedef>

<typedef>typedef <type><name>uint8_t</name></type> <name>drflac_uint8</name>;</typedef>

<typedef>typedef <type><name>int16_t</name></type> <name>drflac_int16</name>;</typedef>

<typedef>typedef <type><name>uint16_t</name></type> <name>drflac_uint16</name>;</typedef>

<typedef>typedef <type><name>int32_t</name></type> <name>drflac_int32</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>drflac_uint32</name>;</typedef>

<typedef>typedef <type><name>int64_t</name></type> <name>drflac_int64</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>drflac_uint64</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>drflac_uint8</name></type> <name>drflac_bool8</name>;</typedef>

<typedef>typedef <type><name>drflac_uint32</name></type> <name>drflac_bool32</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1700</literal></expr></cpp:if> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_DEPRECATED</name></cpp:macro> <cpp:value>__declspec(deprecated)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:elif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_DEPRECATED</name></cpp:macro> <cpp:value>__attribute__((deprecated))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:elif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_feature</name><argument_list>(<argument><expr><name>attribute_deprecated</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_DEPRECATED</name></cpp:macro> <cpp:value>__attribute__((deprecated))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_DEPRECATED</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_DEPRECATED</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_FLAC_BUFFER_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_64BIT</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>drflac_uint64</name></type> <name>drflac_cache_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>drflac_uint32</name></type> <name>drflac_cache_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_METADATA_BLOCK_TYPE_STREAMINFO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_METADATA_BLOCK_TYPE_PADDING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_METADATA_BLOCK_TYPE_APPLICATION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_METADATA_BLOCK_TYPE_SEEKTABLE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_METADATA_BLOCK_TYPE_VORBIS_COMMENT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_METADATA_BLOCK_TYPE_CUESHEET</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_METADATA_BLOCK_TYPE_PICTURE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_METADATA_BLOCK_TYPE_INVALID</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_OTHER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_FILE_ICON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_OTHER_FILE_ICON</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_COVER_FRONT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_COVER_BACK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_LEAFLET_PAGE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_MEDIA</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_LEAD_ARTIST</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_ARTIST</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_CONDUCTOR</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_BAND</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_COMPOSER</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_LYRICIST</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_RECORDING_LOCATION</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_DURING_RECORDING</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_DURING_PERFORMANCE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_SCREEN_CAPTURE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_BRIGHT_COLORED_FISH</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_ILLUSTRATION</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_BAND_LOGOTYPE</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_PICTURE_TYPE_PUBLISHER_LOGOTYPE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>drflac_container_native</name></decl>,

<decl><name>drflac_container_ogg</name></decl>,

<decl><name>drflac_container_unknown</name></decl>

}</block></enum></type> <name>drflac_container</name>;</typedef>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>drflac_seek_origin_start</name></decl>,

<decl><name>drflac_seek_origin_current</name></decl>

}</block></enum></type> <name>drflac_seek_origin</name>;</typedef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>2</name><name>)</name></cpp:pragma>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>firstSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>frameOffset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drflac_uint16</name></type> <name>sampleCount</name></decl>;</decl_stmt>

}</block></struct></type> <name>drflac_seekpoint</name>;</typedef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>)</name></cpp:pragma>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint16</name></type> <name>minBlockSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint16</name></type> <name>maxBlockSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>minFrameSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>maxFrameSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>bitsPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>md5</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>drflac_streaminfo</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pRawData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>rawDataSize</name></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>drflac_streaminfo</name></type> <name>streaminfo</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>unused</name></decl>;</decl_stmt>

}</block> <decl><name>padding</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>dataSize</name></decl>;</decl_stmt>

}</block> <decl><name>application</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>seekpointCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_seekpoint</name><modifier>*</modifier></type> <name>pSeekpoints</name></decl>;</decl_stmt>

}</block> <decl><name>seektable</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>vendorLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>vendor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>commentCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pComments</name></decl>;</decl_stmt>

}</block> <decl><name>vorbis_comment</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>catalog</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>leadInSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_bool32</name></type> <name>isCD</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>trackCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pTrackData</name></decl>;</decl_stmt>

}</block> <decl><name>cuesheet</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>mimeLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>descriptionLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>colorDepth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>indexColorCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>pictureDataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_uint8</name><modifier>*</modifier></type> <name>pPictureData</name></decl>;</decl_stmt>

}</block> <decl><name>picture</name></decl>;</struct>

}</block> <decl><name>data</name></decl>;</union>

}</block></struct></type> <name>drflac_metadata</name>;</typedef>

<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier> <name>drflac_read_proc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>drflac_bool32</name></type> (<modifier>*</modifier> <name>drflac_seek_proc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>drflac_meta_proc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>drflac_metadata</name><modifier>*</modifier></type> <name>pMetadata</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_uint8</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>currentReadPos</name></decl>;</decl_stmt>

}</block></struct></type> <name>drflac__memory_stream</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>unalignedByteCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_cache_t</name></type> <name>unalignedCache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>nextL2Line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>consumedBits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_cache_t</name></type> <name><name>cacheL2</name><index>[<expr><name>DR_FLAC_BUFFER_SIZE</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>drflac_cache_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_cache_t</name></type> <name>cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint16</name></type> <name>crc16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_cache_t</name></type> <name>crc16Cache</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>crc16CacheIgnoredBytes</name></decl>;</decl_stmt> 

}</block></struct></type> <name>drflac_bs</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>subframeType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>wastedBitsPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>lpcOrder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>bitsPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples</name></decl>;</decl_stmt>

}</block></struct></type> <name>drflac_subframe</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>sampleNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>frameNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint16</name></type> <name>blockSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>channelAssignment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>bitsPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>crc8</name></decl>;</decl_stmt>

}</block></struct></type> <name>drflac_frame_header</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_frame_header</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>samplesRemaining</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_subframe</name></type> <name><name>subframes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>drflac_frame</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserDataMD</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>bitsPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint16</name></type> <name>maxBlockSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drflac_container</name></type> <name>container</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>seekpointCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_frame</name></type> <name>currentFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>currentSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>firstFramePos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac__memory_stream</name></type> <name>memoryStream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_seekpoint</name><modifier>*</modifier></type> <name>pSeekpoints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>_oggbs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_bs</name></type> <name>bs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>pExtraData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>drflac</name>;</typedef>

<function_decl><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_relaxed</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drflac_container</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_with_metadata</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_with_metadata_relaxed</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl></parameter>, <parameter><decl><type><name>drflac_container</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drflac_close</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac_uint64</name></type> <name>drflac_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac_uint64</name></type> <name>drflac_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>drflac_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac_uint64</name></type> <name>drflac_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac_bool32</name></type> <name>drflac_seek_to_pcm_frame</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>pcmFrameIndex</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_file_with_metadata</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_memory_with_metadata</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>drflac_open_and_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac_int16</name><modifier>*</modifier></type> <name>drflac_open_and_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float</name><modifier>*</modifier></type> <name>drflac_open_and_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>drflac_open_file_and_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac_int16</name><modifier>*</modifier></type> <name>drflac_open_file_and_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float</name><modifier>*</modifier></type> <name>drflac_open_file_and_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>drflac_open_memory_and_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac_int16</name><modifier>*</modifier></type> <name>drflac_open_memory_and_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float</name><modifier>*</modifier></type> <name>drflac_open_memory_and_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drflac_free</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>countRemaining</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pRunningData</name></decl>;</decl_stmt>

}</block></struct></type> <name>drflac_vorbis_comment_iterator</name>;</typedef>

<function_decl><type><name>void</name></type> <name>drflac_init_vorbis_comment_iterator</name><parameter_list>(<parameter><decl><type><name>drflac_vorbis_comment_iterator</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>commentCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pComments</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>drflac_next_vorbis_comment</name><parameter_list>(<parameter><decl><type><name>drflac_vorbis_comment_iterator</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>pCommentLengthOut</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>countRemaining</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pRunningData</name></decl>;</decl_stmt>

}</block></struct></type> <name>drflac_cuesheet_track_iterator</name>;</typedef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>4</name><name>)</name></cpp:pragma>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>drflac_cuesheet_track_index</name>;</typedef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>)</name></cpp:pragma>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>trackNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>ISRC</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_bool8</name></type> <name>isAudio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_bool8</name></type> <name>preEmphasis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>indexCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_cuesheet_track_index</name><modifier>*</modifier></type> <name>pIndexPoints</name></decl>;</decl_stmt>

}</block></struct></type> <name>drflac_cuesheet_track</name>;</typedef>

<function_decl><type><name>void</name></type> <name>drflac_init_cuesheet_track_iterator</name><parameter_list>(<parameter><decl><type><name>drflac_cuesheet_track_iterator</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>trackCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pTrackData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drflac_bool32</name></type> <name>drflac_next_cuesheet_track</name><parameter_list>(<parameter><decl><type><name>drflac_cuesheet_track_iterator</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>drflac_cuesheet_track</name><modifier>*</modifier></type> <name>pCuesheetTrack</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DRFLAC_DEPRECATED</name> <name>drflac_uint64</name></type> <name>drflac_read_s32</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>DRFLAC_DEPRECATED</name> <name>drflac_uint64</name></type> <name>drflac_read_s16</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drflac_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>DRFLAC_DEPRECATED</name> <name>drflac_uint64</name></type> <name>drflac_read_f32</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>DRFLAC_DEPRECATED</name> <name>drflac_bool32</name></type> <name>drflac_seek_to_sample</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>sampleIndex</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>DRFLAC_DEPRECATED</name> <name>drflac_int32</name><modifier>*</modifier></type> <name>drflac_open_and_decode_s32</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>DRFLAC_DEPRECATED</name> <name>drflac_int16</name><modifier>*</modifier></type> <name>drflac_open_and_decode_s16</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>DRFLAC_DEPRECATED</name> <name>float</name><modifier>*</modifier></type> <name>drflac_open_and_decode_f32</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>DRFLAC_DEPRECATED</name> <name>drflac_int32</name><modifier>*</modifier></type> <name>drflac_open_and_decode_file_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>DRFLAC_DEPRECATED</name> <name>drflac_int16</name><modifier>*</modifier></type> <name>drflac_open_and_decode_file_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>DRFLAC_DEPRECATED</name> <name>float</name><modifier>*</modifier></type> <name>drflac_open_and_decode_file_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>DRFLAC_DEPRECATED</name> <name>drflac_int32</name><modifier>*</modifier></type> <name>drflac_open_and_decode_memory_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>DRFLAC_DEPRECATED</name> <name>drflac_int16</name><modifier>*</modifier></type> <name>drflac_open_and_decode_memory_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>DRFLAC_DEPRECATED</name> <name>float</name><modifier>*</modifier></type> <name>drflac_open_and_decode_memory_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wimplicit-fallthrough"</cpp:literal></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_BSD_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BSD_SOURCE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USE_BSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_BSD</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;endian.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_INLINE</name></cpp:macro> <cpp:value>__forceinline</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_INLINE</name></cpp:macro> <cpp:value>__inline__ __attribute__((always_inline))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_INLINE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_X64</name></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_X86</name></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_ARM</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_SIMD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUPPORT_SSE2</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1600</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_SSE41</name></expr></argument>)</argument_list></call></expr></cpp:if> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUPPORT_SSE41</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SSE2__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUPPORT_SSE2</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SSE4_1__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_SSE41</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUPPORT_SSE41</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__has_include</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_SSE2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_include</name><argument_list>(<argument><expr><operator>&lt;</operator><name><name>emmintrin</name><operator>.</operator><name>h</name></name><operator>&gt;</operator></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUPPORT_SSE2</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE41</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_SSE41</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_include</name><argument_list>(<argument><expr><operator>&lt;</operator><name><name>smmintrin</name><operator>.</operator><name>h</name></name><operator>&gt;</operator></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUPPORT_SSE41</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE41</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;smmintrin.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emmintrin.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_ARM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_NEON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_NEON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM64</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUPPORT_NEON</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__has_include</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_NEON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_NEON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_include</name><argument_list>(<argument><expr><operator>&lt;</operator><name><name>arm_neon</name><operator>.</operator><name>h</name></name><operator>&gt;</operator></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUPPORT_NEON</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arm_neon.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_SIMD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X64</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drflac__cpuid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>info</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>__cpuid</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_NO_CPUID</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drflac__cpuid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>info</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X86</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PIC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<asm>__asm__ <specifier>__volatile__</specifier> (

"xchg{l} {%%}ebx, %k1;"

"cpuid;"

"xchg{l} {%%}ebx, %k1;"

: "=a"(info[0]), "=&amp;r"(info[1]), "=c"(info[2]), "=d"(info[3]) : "a"(fid), "c"(0)

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<asm>__asm__ <specifier>__volatile__</specifier> (

"cpuid" : "=a"(info[0]), "=b"(info[1]), "=c"(info[2]), "=d"(info[3]) : "a"(fid), "c"(0)

);</asm>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_NO_CPUID</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_NO_CPUID</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_bool32</name></type> <name>drflac_has_sse2</name><parameter_list>()</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X86</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86_FP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_M_IX86_FP</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SSE2__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_CPUID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name><name>info</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac__cpuid</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>info</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_bool32</name></type> <name>drflac_has_sse41</name><parameter_list>()</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE41</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X86</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_SSE41</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86_FP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_M_IX86_FP</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SSE4_1__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_CPUID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name><name>info</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac__cpuid</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1500</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X64</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_HAS_LZCNT_INTRINSIC</name></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_HAS_LZCNT_INTRINSIC</name></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_clzll</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_clzl</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_HAS_LZCNT_INTRINSIC</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_HAS_BYTESWAP16_INTRINSIC</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_HAS_BYTESWAP32_INTRINSIC</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_HAS_BYTESWAP64_INTRINSIC</name></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_bswap16</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_HAS_BYTESWAP16_INTRINSIC</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_bswap32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_HAS_BYTESWAP32_INTRINSIC</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_bswap64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_HAS_BYTESWAP64_INTRINSIC</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_HAS_BYTESWAP32_INTRINSIC</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_HAS_BYTESWAP64_INTRINSIC</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_HAS_BYTESWAP16_INTRINSIC</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_ASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_ASSERT</name><parameter_list>(<parameter><type><name>expression</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(expression)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_MALLOC</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc((sz))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_REALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_REALLOC</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>realloc((p), (sz))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_FREE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free((p))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_COPY_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_COPY_MEMORY</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy((dst), (src), (sz))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_ZERO_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_ZERO_MEMORY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((p), 0, (sz))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_MAX_SIMD_VECTOR_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 

<typedef>typedef <type><name>drflac_int32</name></type> <name>drflac_result</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_ERROR</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_INVALID_ARGS</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_END_OF_STREAM</name></cpp:macro> <cpp:value>-128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CRC_MISMATCH</name></cpp:macro> <cpp:value>-129</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUBFRAME_CONSTANT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUBFRAME_VERBATIM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUBFRAME_FIXED</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUBFRAME_LPC</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SUBFRAME_RESERVED</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_RESIDUAL_CODING_METHOD_PARTITIONED_RICE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_RESIDUAL_CODING_METHOD_PARTITIONED_RICE2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CHANNEL_ASSIGNMENT_INDEPENDENT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CHANNEL_ASSIGNMENT_LEFT_SIDE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CHANNEL_ASSIGNMENT_RIGHT_SIDE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CHANNEL_ASSIGNMENT_MID_SIDE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_LEADING_SAMPLES</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drflac_align</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x) + (a) - 1) / (a)) * (a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drflac_assert</name></cpp:macro> <cpp:value>DRFLAC_ASSERT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drflac_copy_memory</name></cpp:macro> <cpp:value>DRFLAC_COPY_MEMORY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drflac_zero_memory</name></cpp:macro> <cpp:value>DRFLAC_ZERO_MEMORY</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__gIsLZCNTSupported</name> <init>= <expr><name>DRFLAC_FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_CPUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_feature</name><argument_list>(<argument><expr><name>thread_sanitizer</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_NO_THREAD_SANITIZE</name></cpp:macro> <cpp:value>__attribute__((no_sanitize("thread")))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_NO_THREAD_SANITIZE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_NO_THREAD_SANITIZE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__gIsSSE2Supported</name> <init>= <expr><name>DRFLAC_FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__gIsSSE41Supported</name> <init>= <expr><name>DRFLAC_FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><name>DRFLAC_NO_THREAD_SANITIZE</name> <specifier>static</specifier> <name>void</name></type> <name>drflac__init_cpu_caps</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>isCPUCapsInitialized</name> <init>= <expr><name>DRFLAC_FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isCPUCapsInitialized</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>info</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac__cpuid</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">0x80000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>drflac__gIsLZCNTSupported</name> <operator>=</operator> <operator>(</operator><name><name>info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>drflac__gIsSSE2Supported</name> <operator>=</operator> <call><name>drflac_has_sse2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>drflac__gIsSSE41Supported</name> <operator>=</operator> <call><name>drflac_has_sse41</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>isCPUCapsInitialized</name> <operator>=</operator> <name>DRFLAC_TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_bool32</name></type> <name>drflac__is_little_endian</name><parameter_list>()</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BYTE_ORDER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__BYTE_ORDER</name> <operator>==</operator> <name>__LITTLE_ENDIAN</name></expr></cpp:elif>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint16</name></type> <name>drflac__swap_endian_uint16</name><parameter_list>(<parameter><decl><type><name>drflac_uint16</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_HAS_BYTESWAP16_INTRINSIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>_byteswap_ushort</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><call><name>__builtin_bswap16</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This compiler does not support the byte swap intrinsic."</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint32</name></type> <name>drflac__swap_endian_uint32</name><parameter_list>(<parameter><decl><type><name>drflac_uint32</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_HAS_BYTESWAP32_INTRINSIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>_byteswap_ulong</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><call><name>__builtin_bswap32</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This compiler does not support the byte swap intrinsic."</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x00FF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x0000FF00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x000000FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint64</name></type> <name>drflac__swap_endian_uint64</name><parameter_list>(<parameter><decl><type><name>drflac_uint64</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_HAS_BYTESWAP64_INTRINSIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>_byteswap_uint64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><call><name>__builtin_bswap64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This compiler does not support the byte swap intrinsic."</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0xFF00000000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x00FF000000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x0000FF0000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x000000FF00000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x00000000FF000000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x0000000000FF0000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x000000000000FF00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x00000000000000FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint16</name></type> <name>drflac__be2host_16</name><parameter_list>(<parameter><decl><type><name>drflac_uint16</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drflac__is_little_endian</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__swap_endian_uint16</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint32</name></type> <name>drflac__be2host_32</name><parameter_list>(<parameter><decl><type><name>drflac_uint32</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drflac__is_little_endian</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__swap_endian_uint32</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint64</name></type> <name>drflac__be2host_64</name><parameter_list>(<parameter><decl><type><name>drflac_uint64</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drflac__is_little_endian</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__swap_endian_uint64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint32</name></type> <name>drflac__le2host_32</name><parameter_list>(<parameter><decl><type><name>drflac_uint32</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__is_little_endian</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__swap_endian_uint32</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint32</name></type> <name>drflac__unsynchsafe_32</name><parameter_list>(<parameter><decl><type><name>drflac_uint32</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x7F000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x007F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x00007F00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x0000007F</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>drflac_uint8</name></type> <name><name>drflac__crc8_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x2D</literal></expr>,

<expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x5D</literal></expr>,

<expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xCD</literal></expr>,

<expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBD</literal></expr>,

<expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xEA</literal></expr>,

<expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x9A</literal></expr>,

<expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0A</literal></expr>,

<expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x7A</literal></expr>,

<expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xA4</literal></expr>,

<expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xD4</literal></expr>,

<expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x44</literal></expr>,

<expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x34</literal></expr>,

<expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x63</literal></expr>,

<expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x13</literal></expr>,

<expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x83</literal></expr>,

<expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xF3</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>drflac_uint16</name></type> <name><name>drflac__crc16_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x8005</literal></expr>, <expr><literal type="number">0x800F</literal></expr>, <expr><literal type="number">0x000A</literal></expr>, <expr><literal type="number">0x801B</literal></expr>, <expr><literal type="number">0x001E</literal></expr>, <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">0x8011</literal></expr>,

<expr><literal type="number">0x8033</literal></expr>, <expr><literal type="number">0x0036</literal></expr>, <expr><literal type="number">0x003C</literal></expr>, <expr><literal type="number">0x8039</literal></expr>, <expr><literal type="number">0x0028</literal></expr>, <expr><literal type="number">0x802D</literal></expr>, <expr><literal type="number">0x8027</literal></expr>, <expr><literal type="number">0x0022</literal></expr>,

<expr><literal type="number">0x8063</literal></expr>, <expr><literal type="number">0x0066</literal></expr>, <expr><literal type="number">0x006C</literal></expr>, <expr><literal type="number">0x8069</literal></expr>, <expr><literal type="number">0x0078</literal></expr>, <expr><literal type="number">0x807D</literal></expr>, <expr><literal type="number">0x8077</literal></expr>, <expr><literal type="number">0x0072</literal></expr>,

<expr><literal type="number">0x0050</literal></expr>, <expr><literal type="number">0x8055</literal></expr>, <expr><literal type="number">0x805F</literal></expr>, <expr><literal type="number">0x005A</literal></expr>, <expr><literal type="number">0x804B</literal></expr>, <expr><literal type="number">0x004E</literal></expr>, <expr><literal type="number">0x0044</literal></expr>, <expr><literal type="number">0x8041</literal></expr>,

<expr><literal type="number">0x80C3</literal></expr>, <expr><literal type="number">0x00C6</literal></expr>, <expr><literal type="number">0x00CC</literal></expr>, <expr><literal type="number">0x80C9</literal></expr>, <expr><literal type="number">0x00D8</literal></expr>, <expr><literal type="number">0x80DD</literal></expr>, <expr><literal type="number">0x80D7</literal></expr>, <expr><literal type="number">0x00D2</literal></expr>,

<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">0x80F5</literal></expr>, <expr><literal type="number">0x80FF</literal></expr>, <expr><literal type="number">0x00FA</literal></expr>, <expr><literal type="number">0x80EB</literal></expr>, <expr><literal type="number">0x00EE</literal></expr>, <expr><literal type="number">0x00E4</literal></expr>, <expr><literal type="number">0x80E1</literal></expr>,

<expr><literal type="number">0x00A0</literal></expr>, <expr><literal type="number">0x80A5</literal></expr>, <expr><literal type="number">0x80AF</literal></expr>, <expr><literal type="number">0x00AA</literal></expr>, <expr><literal type="number">0x80BB</literal></expr>, <expr><literal type="number">0x00BE</literal></expr>, <expr><literal type="number">0x00B4</literal></expr>, <expr><literal type="number">0x80B1</literal></expr>,

<expr><literal type="number">0x8093</literal></expr>, <expr><literal type="number">0x0096</literal></expr>, <expr><literal type="number">0x009C</literal></expr>, <expr><literal type="number">0x8099</literal></expr>, <expr><literal type="number">0x0088</literal></expr>, <expr><literal type="number">0x808D</literal></expr>, <expr><literal type="number">0x8087</literal></expr>, <expr><literal type="number">0x0082</literal></expr>,

<expr><literal type="number">0x8183</literal></expr>, <expr><literal type="number">0x0186</literal></expr>, <expr><literal type="number">0x018C</literal></expr>, <expr><literal type="number">0x8189</literal></expr>, <expr><literal type="number">0x0198</literal></expr>, <expr><literal type="number">0x819D</literal></expr>, <expr><literal type="number">0x8197</literal></expr>, <expr><literal type="number">0x0192</literal></expr>,

<expr><literal type="number">0x01B0</literal></expr>, <expr><literal type="number">0x81B5</literal></expr>, <expr><literal type="number">0x81BF</literal></expr>, <expr><literal type="number">0x01BA</literal></expr>, <expr><literal type="number">0x81AB</literal></expr>, <expr><literal type="number">0x01AE</literal></expr>, <expr><literal type="number">0x01A4</literal></expr>, <expr><literal type="number">0x81A1</literal></expr>,

<expr><literal type="number">0x01E0</literal></expr>, <expr><literal type="number">0x81E5</literal></expr>, <expr><literal type="number">0x81EF</literal></expr>, <expr><literal type="number">0x01EA</literal></expr>, <expr><literal type="number">0x81FB</literal></expr>, <expr><literal type="number">0x01FE</literal></expr>, <expr><literal type="number">0x01F4</literal></expr>, <expr><literal type="number">0x81F1</literal></expr>,

<expr><literal type="number">0x81D3</literal></expr>, <expr><literal type="number">0x01D6</literal></expr>, <expr><literal type="number">0x01DC</literal></expr>, <expr><literal type="number">0x81D9</literal></expr>, <expr><literal type="number">0x01C8</literal></expr>, <expr><literal type="number">0x81CD</literal></expr>, <expr><literal type="number">0x81C7</literal></expr>, <expr><literal type="number">0x01C2</literal></expr>,

<expr><literal type="number">0x0140</literal></expr>, <expr><literal type="number">0x8145</literal></expr>, <expr><literal type="number">0x814F</literal></expr>, <expr><literal type="number">0x014A</literal></expr>, <expr><literal type="number">0x815B</literal></expr>, <expr><literal type="number">0x015E</literal></expr>, <expr><literal type="number">0x0154</literal></expr>, <expr><literal type="number">0x8151</literal></expr>,

<expr><literal type="number">0x8173</literal></expr>, <expr><literal type="number">0x0176</literal></expr>, <expr><literal type="number">0x017C</literal></expr>, <expr><literal type="number">0x8179</literal></expr>, <expr><literal type="number">0x0168</literal></expr>, <expr><literal type="number">0x816D</literal></expr>, <expr><literal type="number">0x8167</literal></expr>, <expr><literal type="number">0x0162</literal></expr>,

<expr><literal type="number">0x8123</literal></expr>, <expr><literal type="number">0x0126</literal></expr>, <expr><literal type="number">0x012C</literal></expr>, <expr><literal type="number">0x8129</literal></expr>, <expr><literal type="number">0x0138</literal></expr>, <expr><literal type="number">0x813D</literal></expr>, <expr><literal type="number">0x8137</literal></expr>, <expr><literal type="number">0x0132</literal></expr>,

<expr><literal type="number">0x0110</literal></expr>, <expr><literal type="number">0x8115</literal></expr>, <expr><literal type="number">0x811F</literal></expr>, <expr><literal type="number">0x011A</literal></expr>, <expr><literal type="number">0x810B</literal></expr>, <expr><literal type="number">0x010E</literal></expr>, <expr><literal type="number">0x0104</literal></expr>, <expr><literal type="number">0x8101</literal></expr>,

<expr><literal type="number">0x8303</literal></expr>, <expr><literal type="number">0x0306</literal></expr>, <expr><literal type="number">0x030C</literal></expr>, <expr><literal type="number">0x8309</literal></expr>, <expr><literal type="number">0x0318</literal></expr>, <expr><literal type="number">0x831D</literal></expr>, <expr><literal type="number">0x8317</literal></expr>, <expr><literal type="number">0x0312</literal></expr>,

<expr><literal type="number">0x0330</literal></expr>, <expr><literal type="number">0x8335</literal></expr>, <expr><literal type="number">0x833F</literal></expr>, <expr><literal type="number">0x033A</literal></expr>, <expr><literal type="number">0x832B</literal></expr>, <expr><literal type="number">0x032E</literal></expr>, <expr><literal type="number">0x0324</literal></expr>, <expr><literal type="number">0x8321</literal></expr>,

<expr><literal type="number">0x0360</literal></expr>, <expr><literal type="number">0x8365</literal></expr>, <expr><literal type="number">0x836F</literal></expr>, <expr><literal type="number">0x036A</literal></expr>, <expr><literal type="number">0x837B</literal></expr>, <expr><literal type="number">0x037E</literal></expr>, <expr><literal type="number">0x0374</literal></expr>, <expr><literal type="number">0x8371</literal></expr>,

<expr><literal type="number">0x8353</literal></expr>, <expr><literal type="number">0x0356</literal></expr>, <expr><literal type="number">0x035C</literal></expr>, <expr><literal type="number">0x8359</literal></expr>, <expr><literal type="number">0x0348</literal></expr>, <expr><literal type="number">0x834D</literal></expr>, <expr><literal type="number">0x8347</literal></expr>, <expr><literal type="number">0x0342</literal></expr>,

<expr><literal type="number">0x03C0</literal></expr>, <expr><literal type="number">0x83C5</literal></expr>, <expr><literal type="number">0x83CF</literal></expr>, <expr><literal type="number">0x03CA</literal></expr>, <expr><literal type="number">0x83DB</literal></expr>, <expr><literal type="number">0x03DE</literal></expr>, <expr><literal type="number">0x03D4</literal></expr>, <expr><literal type="number">0x83D1</literal></expr>,

<expr><literal type="number">0x83F3</literal></expr>, <expr><literal type="number">0x03F6</literal></expr>, <expr><literal type="number">0x03FC</literal></expr>, <expr><literal type="number">0x83F9</literal></expr>, <expr><literal type="number">0x03E8</literal></expr>, <expr><literal type="number">0x83ED</literal></expr>, <expr><literal type="number">0x83E7</literal></expr>, <expr><literal type="number">0x03E2</literal></expr>,

<expr><literal type="number">0x83A3</literal></expr>, <expr><literal type="number">0x03A6</literal></expr>, <expr><literal type="number">0x03AC</literal></expr>, <expr><literal type="number">0x83A9</literal></expr>, <expr><literal type="number">0x03B8</literal></expr>, <expr><literal type="number">0x83BD</literal></expr>, <expr><literal type="number">0x83B7</literal></expr>, <expr><literal type="number">0x03B2</literal></expr>,

<expr><literal type="number">0x0390</literal></expr>, <expr><literal type="number">0x8395</literal></expr>, <expr><literal type="number">0x839F</literal></expr>, <expr><literal type="number">0x039A</literal></expr>, <expr><literal type="number">0x838B</literal></expr>, <expr><literal type="number">0x038E</literal></expr>, <expr><literal type="number">0x0384</literal></expr>, <expr><literal type="number">0x8381</literal></expr>,

<expr><literal type="number">0x0280</literal></expr>, <expr><literal type="number">0x8285</literal></expr>, <expr><literal type="number">0x828F</literal></expr>, <expr><literal type="number">0x028A</literal></expr>, <expr><literal type="number">0x829B</literal></expr>, <expr><literal type="number">0x029E</literal></expr>, <expr><literal type="number">0x0294</literal></expr>, <expr><literal type="number">0x8291</literal></expr>,

<expr><literal type="number">0x82B3</literal></expr>, <expr><literal type="number">0x02B6</literal></expr>, <expr><literal type="number">0x02BC</literal></expr>, <expr><literal type="number">0x82B9</literal></expr>, <expr><literal type="number">0x02A8</literal></expr>, <expr><literal type="number">0x82AD</literal></expr>, <expr><literal type="number">0x82A7</literal></expr>, <expr><literal type="number">0x02A2</literal></expr>,

<expr><literal type="number">0x82E3</literal></expr>, <expr><literal type="number">0x02E6</literal></expr>, <expr><literal type="number">0x02EC</literal></expr>, <expr><literal type="number">0x82E9</literal></expr>, <expr><literal type="number">0x02F8</literal></expr>, <expr><literal type="number">0x82FD</literal></expr>, <expr><literal type="number">0x82F7</literal></expr>, <expr><literal type="number">0x02F2</literal></expr>,

<expr><literal type="number">0x02D0</literal></expr>, <expr><literal type="number">0x82D5</literal></expr>, <expr><literal type="number">0x82DF</literal></expr>, <expr><literal type="number">0x02DA</literal></expr>, <expr><literal type="number">0x82CB</literal></expr>, <expr><literal type="number">0x02CE</literal></expr>, <expr><literal type="number">0x02C4</literal></expr>, <expr><literal type="number">0x82C1</literal></expr>,

<expr><literal type="number">0x8243</literal></expr>, <expr><literal type="number">0x0246</literal></expr>, <expr><literal type="number">0x024C</literal></expr>, <expr><literal type="number">0x8249</literal></expr>, <expr><literal type="number">0x0258</literal></expr>, <expr><literal type="number">0x825D</literal></expr>, <expr><literal type="number">0x8257</literal></expr>, <expr><literal type="number">0x0252</literal></expr>,

<expr><literal type="number">0x0270</literal></expr>, <expr><literal type="number">0x8275</literal></expr>, <expr><literal type="number">0x827F</literal></expr>, <expr><literal type="number">0x027A</literal></expr>, <expr><literal type="number">0x826B</literal></expr>, <expr><literal type="number">0x026E</literal></expr>, <expr><literal type="number">0x0264</literal></expr>, <expr><literal type="number">0x8261</literal></expr>,

<expr><literal type="number">0x0220</literal></expr>, <expr><literal type="number">0x8225</literal></expr>, <expr><literal type="number">0x822F</literal></expr>, <expr><literal type="number">0x022A</literal></expr>, <expr><literal type="number">0x823B</literal></expr>, <expr><literal type="number">0x023E</literal></expr>, <expr><literal type="number">0x0234</literal></expr>, <expr><literal type="number">0x8231</literal></expr>,

<expr><literal type="number">0x8213</literal></expr>, <expr><literal type="number">0x0216</literal></expr>, <expr><literal type="number">0x021C</literal></expr>, <expr><literal type="number">0x8219</literal></expr>, <expr><literal type="number">0x0208</literal></expr>, <expr><literal type="number">0x820D</literal></expr>, <expr><literal type="number">0x8207</literal></expr>, <expr><literal type="number">0x0202</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint8</name></type> <name>drflac_crc8_byte</name><parameter_list>(<parameter><decl><type><name>drflac_uint8</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>drflac__crc8_table</name><index>[<expr><name>crc</name> <operator>^</operator> <name>data</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint8</name></type> <name>drflac_crc8</name><parameter_list>(<parameter><decl><type><name>drflac_uint8</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>crc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>count</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

drflac_uint8 p = 0x07;

for (int i = count-1; i &gt;= 0; --i) {

drflac_uint8 bit = (data &amp; (1 &lt;&lt; i)) &gt;&gt; i;

if (crc &amp; 0x80) {

crc = ((crc &lt;&lt; 1) | bit) ^ p;

} else {

crc = ((crc &lt;&lt; 1) | bit);

}

}

return crc;

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>wholeBytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>leftoverBits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>leftoverDataMask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>drflac_uint64</name></type> <name><name>leftoverDataMaskTable</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x7F</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>count</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wholeBytes</name> <operator>=</operator> <name>count</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>leftoverBits</name> <operator>=</operator> <name>count</name> <operator>-</operator> <operator>(</operator><name>wholeBytes</name><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>leftoverDataMask</name> <operator>=</operator> <name><name>leftoverDataMaskTable</name><index>[<expr><name>leftoverBits</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>wholeBytes</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc8_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xFF000000UL</literal> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc8_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x00FF0000UL</literal> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc8_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x0000FF00UL</literal> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator> <literal type="number">8</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc8_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x000000FFUL</literal> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator> <literal type="number">0</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>leftoverBits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator> <operator>^</operator> <name><name>drflac__crc8_table</name><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>^</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <name>leftoverDataMask</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></switch>

<return>return <expr><name>crc</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint16</name></type> <name>drflac_crc16_byte</name><parameter_list>(<parameter><decl><type><name>drflac_uint16</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <name><name>drflac__crc16_table</name><index>[<expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <name>data</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint16</name></type> <name>drflac_crc16_bytes</name><parameter_list>(<parameter><decl><type><name>drflac_uint16</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>drflac_cache_t</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>byteCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>byteCount</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>crc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint16</name></type> <name>drflac_crc16__32bit</name><parameter_list>(<parameter><decl><type><name>drflac_uint16</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>crc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>count</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

drflac_uint16 p = 0x8005;

for (int i = count-1; i &gt;= 0; --i) {

drflac_uint16 bit = (data &amp; (1ULL &lt;&lt; i)) &gt;&gt; i;

if (r &amp; 0x8000) {

r = ((r &lt;&lt; 1) | bit) ^ p;

} else {

r = ((r &lt;&lt; 1) | bit);

}

}

return crc;

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>wholeBytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>leftoverBits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>leftoverDataMask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>drflac_uint64</name></type> <name><name>leftoverDataMaskTable</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x7F</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>count</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wholeBytes</name> <operator>=</operator> <name>count</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>leftoverBits</name> <operator>=</operator> <name>count</name> <operator>-</operator> <operator>(</operator><name>wholeBytes</name><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>leftoverDataMask</name> <operator>=</operator> <name><name>leftoverDataMaskTable</name><index>[<expr><name>leftoverBits</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>wholeBytes</name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xFF000000UL</literal> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x00FF0000UL</literal> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x0000FF00UL</literal> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator> <literal type="number">8</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x000000FFUL</literal> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator> <literal type="number">0</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>leftoverBits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator> <operator>^</operator> <name><name>drflac__crc16_table</name><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>^</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <name>leftoverDataMask</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></switch>

<return>return <expr><name>crc</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint16</name></type> <name>drflac_crc16__64bit</name><parameter_list>(<parameter><decl><type><name>drflac_uint16</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>crc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>count</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>wholeBytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>leftoverBits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>leftoverDataMask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>drflac_uint64</name></type> <name><name>leftoverDataMaskTable</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x7F</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>count</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wholeBytes</name> <operator>=</operator> <name>count</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>leftoverBits</name> <operator>=</operator> <name>count</name> <operator>-</operator> <operator>(</operator><name>wholeBytes</name><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>leftoverDataMask</name> <operator>=</operator> <name><name>leftoverDataMaskTable</name><index>[<expr><name>leftoverBits</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>wholeBytes</name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0xFF000000</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">56</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x00FF0000</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">48</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x0000FF00</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">40</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x000000FF</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0xFF000000</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x00FF0000</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x0000FF00</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator> <literal type="number">8</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc16_byte</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x000000FF</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator> <literal type="number">0</literal> <operator>+</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>leftoverBits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <name>leftoverBits</name><operator>)</operator> <operator>^</operator> <name><name>drflac__crc16_table</name><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>leftoverBits</name><operator>)</operator><operator>)</operator> <operator>^</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <name>leftoverDataMask</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></switch>

<return>return <expr><name>crc</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint16</name></type> <name>drflac_crc16</name><parameter_list>(<parameter><decl><type><name>drflac_uint16</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>drflac_cache_t</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>drflac_crc16__64bit</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>drflac_crc16__32bit</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drflac__be2host__cache_line</name></cpp:macro> <cpp:value>drflac__be2host_64</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drflac__be2host__cache_line</name></cpp:macro> <cpp:value>drflac__be2host_32</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CACHE_L1_SIZE_BYTES</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof((bs)-&gt;cache))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CACHE_L1_SIZE_BITS</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof((bs)-&gt;cache)*8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DRFLAC_CACHE_L1_SIZE_BITS(bs) - (bs)-&gt;consumedBits)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CACHE_L1_SELECTION_MASK</name><parameter_list>(<parameter><type><name>_bitCount</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(~((~(drflac_cache_t)0) &gt;&gt; (_bitCount)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CACHE_L1_SELECTION_SHIFT</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>, <parameter><type><name>_bitCount</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DRFLAC_CACHE_L1_SIZE_BITS(bs) - (_bitCount))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CACHE_L1_SELECT</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>, <parameter><type><name>_bitCount</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((bs)-&gt;cache) &amp; DRFLAC_CACHE_L1_SELECTION_MASK(_bitCount))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CACHE_L1_SELECT_AND_SHIFT</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>, <parameter><type><name>_bitCount</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DRFLAC_CACHE_L1_SELECT((bs), (_bitCount)) &gt;&gt; DRFLAC_CACHE_L1_SELECTION_SHIFT((bs), (_bitCount)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CACHE_L1_SELECT_AND_SHIFT_SAFE</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>, <parameter><type><name>_bitCount</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(DRFLAC_CACHE_L1_SELECT((bs), (_bitCount)) &gt;&gt; (DRFLAC_CACHE_L1_SELECTION_SHIFT((bs), (_bitCount)) &amp; (DRFLAC_CACHE_L1_SIZE_BITS(bs)-1)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CACHE_L2_SIZE_BYTES</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof((bs)-&gt;cacheL2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CACHE_L2_LINE_COUNT</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DRFLAC_CACHE_L2_SIZE_BYTES(bs) / sizeof((bs)-&gt;cacheL2[0]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_CACHE_L2_LINES_REMAINING</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DRFLAC_CACHE_L2_LINE_COUNT(bs) - (bs)-&gt;nextL2Line)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac__reset_crc16</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16CacheIgnoredBytes</name></name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac__update_crc16</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16</name></name> <operator>=</operator> <call><name>drflac_crc16_bytes</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16</name></name></expr></argument>, <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16Cache</name></name></expr></argument>, <argument><expr><call><name>DRFLAC_CACHE_L1_SIZE_BYTES</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>bs</name><operator>-&gt;</operator><name>crc16CacheIgnoredBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16CacheIgnoredBytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint16</name></type> <name>drflac__flush_crc16</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drflac__update_crc16</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16</name></name> <operator>=</operator> <call><name>drflac_crc16_bytes</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16</name></name></expr></argument>, <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16Cache</name></name> <operator>&gt;&gt;</operator> <call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name><name>bs</name><operator>-&gt;</operator><name>crc16CacheIgnoredBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16CacheIgnoredBytes</name></name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>bs</name><operator>-&gt;</operator><name>crc16</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_bool32</name></type> <name>drflac__reload_l1_cache_from_l2</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>alignedL1LineCount</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name> <operator>&lt;</operator> <call><name>DRFLAC_CACHE_L2_LINE_COUNT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>cacheL2</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>unalignedByteCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesRead</name> <operator>=</operator> <call><name><name>bs</name><operator>-&gt;</operator><name>onRead</name></name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>cacheL2</name></name></expr></argument>, <argument><expr><call><name>DRFLAC_CACHE_L2_SIZE_BYTES</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesRead</name> <operator>==</operator> <call><name>DRFLAC_CACHE_L2_SIZE_BYTES</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>cacheL2</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>alignedL1LineCount</name> <operator>=</operator> <name>bytesRead</name> <operator>/</operator> <call><name>DRFLAC_CACHE_L1_SIZE_BYTES</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>unalignedByteCount</name></name> <operator>=</operator> <name>bytesRead</name> <operator>-</operator> <operator>(</operator><name>alignedL1LineCount</name> <operator>*</operator> <call><name>DRFLAC_CACHE_L1_SIZE_BYTES</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>unalignedByteCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>unalignedCache</name></name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>cacheL2</name><index>[<expr><name>alignedL1LineCount</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alignedL1LineCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><call><name>DRFLAC_CACHE_L2_LINE_COUNT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>alignedL1LineCount</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>alignedL1LineCount</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cacheL2</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>cacheL2</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>cacheL2</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name> <operator>=</operator> <call><name>DRFLAC_CACHE_L2_LINE_COUNT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__reload_cache</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRead</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>drflac__update_crc16</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>drflac__reload_l1_cache_from_l2</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <call><name>drflac__be2host__cache_line</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16Cache</name></name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesRead</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>unalignedByteCount</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>=</operator> <call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bytesRead</name> <operator>&lt;</operator> <call><name>DRFLAC_CACHE_L1_SIZE_BYTES</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><call><name>DRFLAC_CACHE_L1_SIZE_BYTES</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>bytesRead</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <call><name>drflac__be2host__cache_line</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>unalignedCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>&amp;=</operator> <call><name>DRFLAC_CACHE_L1_SELECTION_MASK</name><argument_list>(<argument><expr><call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>unalignedByteCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16Cache</name></name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>&gt;&gt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16CacheIgnoredBytes</name></name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drflac__reset_cache</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name> <operator>=</operator> <call><name>DRFLAC_CACHE_L2_LINE_COUNT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>=</operator> <call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>unalignedByteCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>unalignedCache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16Cache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16CacheIgnoredBytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_bool32</name></type> <name>drflac__read_uint32</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bitCount</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>pResultOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pResultOut</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bitCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bitCount</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>==</operator> <call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__reload_cache</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitCount</name> <operator>&lt;=</operator> <call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>pResultOut</name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><call><name>DRFLAC_CACHE_L1_SELECT_AND_SHIFT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>+=</operator> <name>bitCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>&lt;&lt;=</operator> <name>bitCount</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>bitCount</name> <operator>&lt;</operator> <call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pResultOut</name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><call><name>DRFLAC_CACHE_L1_SELECT_AND_SHIFT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>+=</operator> <name>bitCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>&lt;&lt;=</operator> <name>bitCount</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pResultOut</name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>=</operator> <call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>bitCountHi</name> <init>= <expr><call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>bitCountLo</name> <init>= <expr><name>bitCount</name> <operator>-</operator> <name>bitCountHi</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>resultHi</name> <init>= <expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><call><name>DRFLAC_CACHE_L1_SELECT_AND_SHIFT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitCountHi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__reload_cache</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pResultOut</name> <operator>=</operator> <operator>(</operator><name>resultHi</name> <operator>&lt;&lt;</operator> <name>bitCountLo</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><call><name>DRFLAC_CACHE_L1_SELECT_AND_SHIFT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitCountLo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>+=</operator> <name>bitCountLo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>&lt;&lt;=</operator> <name>bitCountLo</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__read_int32</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bitCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>signbit</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pResult</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bitCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bitCount</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>signbit</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>result</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>bitCount</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><operator>~</operator><name>signbit</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bitCount</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pResult</name> <operator>=</operator> <operator>(</operator><name>drflac_int32</name><operator>)</operator><name>result</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__read_uint64</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bitCount</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>pResultOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>resultHi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>resultLo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bitCount</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bitCount</name> <operator>&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitCount</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>resultHi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>resultLo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pResultOut</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><name>resultHi</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><name>resultLo</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static drflac_bool32 drflac__read_int64(drflac_bs* bs, unsigned int bitCount, drflac_int64* pResultOut)

{

drflac_uint64 result;

drflac_uint64 signbit;

drflac_assert(bitCount &lt;= 64);

if (!drflac__read_uint64(bs, bitCount, &amp;result)) {

return DRFLAC_FALSE;

}

signbit = ((result &gt;&gt; (bitCount-1)) &amp; 0x01);

result |= (~signbit + 1) &lt;&lt; bitCount;

*pResultOut = (drflac_int64)result;

return DRFLAC_TRUE;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__read_uint16</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bitCount</name></decl></parameter>, <parameter><decl><type><name>drflac_uint16</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pResult</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bitCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bitCount</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pResult</name> <operator>=</operator> <operator>(</operator><name>drflac_uint16</name><operator>)</operator><name>result</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static drflac_bool32 drflac__read_int16(drflac_bs* bs, unsigned int bitCount, drflac_int16* pResult)

{

drflac_int32 result;

drflac_assert(bs != NULL);

drflac_assert(pResult != NULL);

drflac_assert(bitCount &gt; 0);

drflac_assert(bitCount &lt;= 16);

if (!drflac__read_int32(bs, bitCount, &amp;result)) {

return DRFLAC_FALSE;

}

*pResult = (drflac_int16)result;

return DRFLAC_TRUE;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__read_uint8</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bitCount</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pResult</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bitCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bitCount</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pResult</name> <operator>=</operator> <operator>(</operator><name>drflac_uint8</name><operator>)</operator><name>result</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__read_int8</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bitCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int8</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pResult</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bitCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bitCount</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_int32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pResult</name> <operator>=</operator> <operator>(</operator><name>drflac_int8</name><operator>)</operator><name>result</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__seek_bits</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bitsToSeek</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bitsToSeek</name> <operator>&lt;=</operator> <call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>+=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>bitsToSeek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>&lt;&lt;=</operator> <name>bitsToSeek</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bitsToSeek</name> <operator>-=</operator> <call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>+=</operator> <call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name>bitsToSeek</name> <operator>&gt;=</operator> <call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>bin</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint64</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitsToSeek</name> <operator>-=</operator> <call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<while>while <condition>(<expr><name>bitsToSeek</name> <operator>&gt;=</operator> <call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>bin</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitsToSeek</name> <operator>-=</operator> <call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>bitsToSeek</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>bin</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitsToSeek</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>bitsToSeek</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>bin</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>bitsToSeek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitsToSeek</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bitsToSeek</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__find_and_seek_to_next_sync_code</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>hi</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>drflac__reset_crc16</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>lo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lo</name> <operator>==</operator> <literal type="number">0x3E</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_SIMD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_HAS_LZCNT_INTRINSIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_IMPLEMENT_CLZ_LZCNT</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_X86</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_IMPLEMENT_CLZ_MSVC</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint32</name></type> <name>drflac__clz_software</name><parameter_list>(<parameter><decl><type><name>drflac_cache_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>drflac_uint32</name></type> <name><name>clz_table_4</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">4</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>clz_table_4</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0xFFFFFFFF</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0xFFFF0000</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0xFF000000</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0xF0000000</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xFFFF0000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xF0000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>clz_table_4</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_IMPLEMENT_CLZ_LZCNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_bool32</name></type> <name>drflac__is_lzcnt_supported</name><parameter_list>()</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_HAS_LZCNT_INTRINSIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>drflac__gIsLZCNTSupported</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint32</name></type> <name>drflac__clz_lzcnt</name><parameter_list>(<parameter><decl><type><name>drflac_cache_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><call><name>__lzcnt64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><call><name>__lzcnt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><call><name>__builtin_clzll</name><argument_list>(<argument><expr><operator>(</operator><name>drflac_uint64</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><call><name>__builtin_clzl</name><argument_list>(<argument><expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This compiler does not support the lzcnt intrinsic."</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_IMPLEMENT_CLZ_MSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include> 

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint32</name></type> <name>drflac__clz_msvc</name><parameter_list>(<parameter><decl><type><name>drflac_cache_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_BitScanReverse64</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>_BitScanReverse</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint32</name></type> <name>drflac__clz</name><parameter_list>(<parameter><decl><type><name>drflac_cache_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_IMPLEMENT_CLZ_LZCNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>drflac__is_lzcnt_supported</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__clz_lzcnt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_IMPLEMENT_CLZ_MSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>drflac__clz_msvc</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>drflac__clz_software</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_bool32</name></type> <name>drflac__seek_past_next_set_bit</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>pOffsetOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>zeroCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>setBitOffsetPlus1</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>zeroCounter</name> <operator>+=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__reload_cache</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>setBitOffsetPlus1</name> <operator>=</operator> <call><name>drflac__clz</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setBitOffsetPlus1</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>+=</operator> <name>setBitOffsetPlus1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>&lt;&lt;=</operator> <name>setBitOffsetPlus1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pOffsetOut</name> <operator>=</operator> <name>zeroCounter</name> <operator>+</operator> <name>setBitOffsetPlus1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__seek_to_byte</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>offsetFromStart</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>offsetFromStart</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offsetFromStart</name> <operator>&gt;</operator> <literal type="number">0x7FFFFFFF</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>bytesRemaining</name> <init>= <expr><name>offsetFromStart</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bs</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>, <argument><expr><name>drflac_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesRemaining</name> <operator>-=</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bytesRemaining</name> <operator>&gt;</operator> <literal type="number">0x7FFFFFFF</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bs</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesRemaining</name> <operator>-=</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>bytesRemaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bs</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>bytesRemaining</name></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bs</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>offsetFromStart</name></expr></argument>, <argument><expr><name>drflac_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>drflac__reset_cache</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_result</name></type> <name>drflac__read_utf8_coded_number</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>pNumberOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name><modifier>*</modifier></type> <name>pCRCOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>crc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>utf8</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byteCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pNumberOut</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pCRCOut</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>*</operator><name>pCRCOut</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pNumberOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_END_OF_STREAM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pNumberOut</name> <operator>=</operator> <name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pCRCOut</name> <operator>=</operator> <name>crc</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>byteCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byteCount</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byteCount</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byteCount</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFC</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byteCount</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFE</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xFC</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byteCount</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xFE</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byteCount</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pNumberOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_CRC_MISMATCH</name></expr>;</return> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>byteCount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>drflac_uint64</name><operator>)</operator><operator>(</operator><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xFF</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>byteCount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>byteCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>utf8</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pNumberOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_END_OF_STREAM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>utf8</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>utf8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pNumberOut</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pCRCOut</name> <operator>=</operator> <name>crc</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_int32</name></type> <name>drflac__calculate_prediction_32</name><parameter_list>(<parameter><decl><type><name>drflac_uint32</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>coefficients</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>prediction</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>order</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">31</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">31</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">30</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">30</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">29</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">29</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">28</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">28</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">27</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">27</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">26</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">26</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">25</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">25</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">24</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">23</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">23</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">22</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">21</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">21</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">20</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">19</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">18</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">17</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><name>prediction</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_int32</name></type> <name>drflac__calculate_prediction_64</name><parameter_list>(<parameter><decl><type><name>drflac_uint32</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>coefficients</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_int64</name></type> <name>prediction</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>order</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prediction</name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prediction</name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prediction</name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prediction</name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prediction</name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prediction</name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prediction</name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prediction</name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prediction</name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prediction</name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prediction</name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prediction</name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prediction</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>order</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>prediction</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">31</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">31</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">30</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">30</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">29</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">29</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">28</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">28</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">27</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">27</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">26</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">26</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">25</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">25</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">24</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">23</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">23</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">22</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">21</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">21</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">20</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">19</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">18</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">17</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><name>prediction</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac__calculate_prediction_64_x4</name><parameter_list>(<parameter><decl><type><name>drflac_uint32</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>coefficients</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_uint32</name></type> <name><name>riceParamParts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_int64</name></type> <name>prediction0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int64</name></type> <name>prediction1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int64</name></type> <name>prediction2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int64</name></type> <name>prediction3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>order</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">31</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">30</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">29</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">31</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">31</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">30</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">29</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">28</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">30</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">30</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">29</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">28</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">27</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">29</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">29</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">28</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">27</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">26</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">28</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">28</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">27</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">26</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">25</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">27</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">27</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">26</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">25</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">24</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">26</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">26</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">25</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">24</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">23</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">25</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">25</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">24</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">23</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">22</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">24</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">23</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">22</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">21</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">23</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">23</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">22</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">21</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">22</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">22</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">21</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">21</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">21</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">20</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">19</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">18</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">17</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">15</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">14</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">13</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">11</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>order</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>prediction0</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><name>prediction0</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>prediction1</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><name>prediction1</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>prediction2</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><name>prediction2</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>prediction3</name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><name>prediction3</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE41</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_int32</name></type> <name>drflac__calculate_prediction_64__sse41</name><parameter_list>(<parameter><decl><type><name>drflac_uint32</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>coefficients</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>prediction</name> <init>= <expr><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>order</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<case>case <expr><literal type="number">31</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">31</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">30</literal></expr>:</case>

<case>case <expr><literal type="number">29</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">29</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">30</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">29</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">28</literal></expr>:</case>

<case>case <expr><literal type="number">27</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">28</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">27</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">26</literal></expr>:</case>

<case>case <expr><literal type="number">25</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">26</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">25</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<case>case <expr><literal type="number">23</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">23</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">23</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">22</literal></expr>:</case>

<case>case <expr><literal type="number">21</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">22</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">21</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">20</literal></expr>:</case>

<case>case <expr><literal type="number">19</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">19</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">18</literal></expr>:</case>

<case>case <expr><literal type="number">17</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">17</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">14</literal></expr>:</case>

<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><operator>(</operator>

<operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>prediction</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>prediction</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac__calculate_prediction_64_x2__sse41</name><parameter_list>(<parameter><decl><type><name>drflac_uint32</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>coefficients</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_uint32</name></type> <name><name>riceParamParts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>prediction</name> <init>= <expr><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int64</name></type> <name><name>predictions</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>order</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">31</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">31</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">30</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">31</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">30</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">29</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">29</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">29</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">30</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">29</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">28</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">29</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">28</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">27</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">28</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">27</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">26</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">27</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">26</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">25</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">26</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">25</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">25</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">23</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">23</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">23</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">23</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">22</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">23</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">21</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">22</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">21</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">21</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">20</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">19</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">19</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">19</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">18</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">17</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">18</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">17</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">17</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mul_epi32</name><argument_list>(<argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coefficients</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>order</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>predictions</name></expr></argument>, <argument><expr><name>prediction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>predictions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[<expr><operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><name><name>predictions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>predictions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>coefficients</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>pDecodedSamples</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><name><name>predictions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>__m128i</name></type> <name>drflac__mm_not_si128</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>_mm_cmpeq_epi32</name><argument_list>(<argument><expr><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>__m128i</name></type> <name>drflac__mm_slide1_epi32</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>b3a3b2a2</name> <init>= <expr><call><name>_mm_unpackhi_epi32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>a2b3a2b3</name> <init>= <expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>b3a3b2a2</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>a1a2a0b3</name> <init>= <expr><call><name>_mm_unpacklo_epi32</name><argument_list>(<argument><expr><name>a2b3a2b3</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>a2a1a0b3</name> <init>= <expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>a1a2a0b3</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>a2a1a0b3</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>__m128i</name></type> <name>drflac__mm_slide2_epi32</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>b1b0b3b2</name> <init>= <expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>a1b3a0b2</name> <init>= <expr><call><name>_mm_unpacklo_epi32</name><argument_list>(<argument><expr><name>b1b0b3b2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>a1a0b3b2</name> <init>= <expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>a1b3a0b2</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>a1a0b3b2</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>__m128i</name></type> <name>drflac__mm_slide3_epi32</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>b1a1b0a0</name> <init>= <expr><call><name>_mm_unpacklo_epi32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>a0b1a0b1</name> <init>= <expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>b1a1b0a0</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>b3a0b2b1</name> <init>= <expr><call><name>_mm_unpackhi_epi32</name><argument_list>(<argument><expr><name>a0b1a0b1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>a0b3b2b1</name> <init>= <expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>b3a0b2b1</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>a0b3b2b1</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac__calculate_prediction_32_x4__sse41</name><parameter_list>(<parameter><decl><type><name>drflac_uint32</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>__m128i</name><modifier>*</modifier></type> <name>coefficients128</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>__m128i</name></type> <name>riceParamParts128</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>order</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>order</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name><name>predictions</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name><name>riceParamParts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>s_09_10_11_12</name> <init>= <expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>s_05_06_07_08</name> <init>= <expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>s_01_02_03_04</name> <init>= <expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>prediction</name> <init>= <expr><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">31</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">30</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">29</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">30</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">29</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">29</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">28</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">28</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">27</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">27</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">26</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">26</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">25</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">25</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">23</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">24</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">23</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">23</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">22</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">21</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">21</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">20</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">20</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">19</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">19</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">18</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">18</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">17</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pDecodedSamples</name> <operator>-</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s_09_10_11_12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>drflac__mm_slide3_epi32</name><argument_list>(<argument><expr><name>s_05_06_07_08</name></expr></argument>, <argument><expr><name>s_09_10_11_12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>drflac__mm_slide2_epi32</name><argument_list>(<argument><expr><name>s_05_06_07_08</name></expr></argument>, <argument><expr><name>s_09_10_11_12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>drflac__mm_slide1_epi32</name><argument_list>(<argument><expr><name>s_05_06_07_08</name></expr></argument>, <argument><expr><name>s_09_10_11_12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s_05_06_07_08</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>drflac__mm_slide3_epi32</name><argument_list>(<argument><expr><name>s_01_02_03_04</name></expr></argument>, <argument><expr><name>s_05_06_07_08</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>drflac__mm_slide2_epi32</name><argument_list>(<argument><expr><name>s_01_02_03_04</name></expr></argument>, <argument><expr><name>s_05_06_07_08</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>drflac__mm_slide1_epi32</name><argument_list>(<argument><expr><name>s_01_02_03_04</name></expr></argument>, <argument><expr><name>s_05_06_07_08</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s_01_02_03_04</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>order</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>drflac__mm_slide3_epi32</name><argument_list>(<argument><expr><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>s_01_02_03_04</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>drflac__mm_slide2_epi32</name><argument_list>(<argument><expr><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>s_01_02_03_04</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>prediction</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>prediction</name></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><name><name>coefficients128</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>drflac__mm_slide1_epi32</name><argument_list>(<argument><expr><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>s_01_02_03_04</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>predictions</name></expr></argument>, <argument><expr><name>prediction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>riceParamParts</name></expr></argument>, <argument><expr><name>riceParamParts128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>predictions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>predictions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>predictions</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>drflac_int32</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>coefficients128</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>*</operator> <name><name>predictions</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>predictions</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>drflac_int32</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>coefficients128</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>*</operator> <name><name>predictions</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>predictions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>drflac_int32</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>coefficients128</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>*</operator> <name><name>predictions</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>predictions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>predictions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>predictions</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>drflac_int32</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>coefficients128</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>*</operator> <name><name>predictions</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>predictions</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>drflac_int32</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>coefficients128</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>*</operator> <name><name>predictions</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>predictions</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>predictions</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>predictions</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>drflac_int32</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>coefficients128</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>*</operator> <name><name>predictions</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>predictions</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>predictions</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>predictions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>predictions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>predictions</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>predictions</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>pDecodedSamples</name></expr></argument>, <argument><expr><name>riceParamParts128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static drflac_bool32 drflac__decode_samples_with_residual__rice__reference(drflac_bs* bs, drflac_uint32 bitsPerSample, drflac_uint32 count, drflac_uint8 riceParam, drflac_uint32 order, drflac_int32 shift, const drflac_int32* coefficients, drflac_int32* pSamplesOut)

{

drflac_uint32 i;

drflac_assert(bs != NULL);

drflac_assert(count &gt; 0);

drflac_assert(pSamplesOut != NULL);

for (i = 0; i &lt; count; ++i) {

drflac_uint32 zeroCounter = 0;

for (;;) {

drflac_uint8 bit;

if (!drflac__read_uint8(bs, 1, &amp;bit)) {

return DRFLAC_FALSE;

}

if (bit == 0) {

zeroCounter += 1;

} else {

break;

}

}

drflac_uint32 decodedRice;

if (riceParam &gt; 0) {

if (!drflac__read_uint32(bs, riceParam, &amp;decodedRice)) {

return DRFLAC_FALSE;

}

} else {

decodedRice = 0;

}

decodedRice |= (zeroCounter &lt;&lt; riceParam);

if ((decodedRice &amp; 0x01)) {

decodedRice = ~(decodedRice &gt;&gt; 1);

} else {

decodedRice = (decodedRice &gt;&gt; 1);

}

if (bitsPerSample &gt; 16) {

pSamplesOut[i] = decodedRice + drflac__calculate_prediction_64(order, shift, coefficients, pSamplesOut + i);

} else {

pSamplesOut[i] = decodedRice + drflac__calculate_prediction_32(order, shift, coefficients, pSamplesOut + i);

}

}

return DRFLAC_TRUE;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static drflac_bool32 drflac__read_rice_parts__reference(drflac_bs* bs, drflac_uint8 riceParam, drflac_uint32* pZeroCounterOut, drflac_uint32* pRiceParamPartOut)

{

drflac_uint32 zeroCounter = 0;

drflac_uint32 decodedRice;

for (;;) {

drflac_uint8 bit;

if (!drflac__read_uint8(bs, 1, &amp;bit)) {

return DRFLAC_FALSE;

}

if (bit == 0) {

zeroCounter += 1;

} else {

break;

}

}

if (riceParam &gt; 0) {

if (!drflac__read_uint32(bs, riceParam, &amp;decodedRice)) {

return DRFLAC_FALSE;

}

} else {

decodedRice = 0;

}

*pZeroCounterOut = zeroCounter;

*pRiceParamPartOut = decodedRice;

return DRFLAC_TRUE;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static DRFLAC_INLINE drflac_bool32 drflac__read_rice_parts(drflac_bs* bs, drflac_uint8 riceParam, drflac_uint32* pZeroCounterOut, drflac_uint32* pRiceParamPartOut)

{

drflac_cache_t riceParamMask;

drflac_uint32 zeroCounter;

drflac_uint32 setBitOffsetPlus1;

drflac_uint32 riceParamPart;

drflac_uint32 riceLength;

drflac_assert(riceParam &gt; 0); 

riceParamMask = DRFLAC_CACHE_L1_SELECTION_MASK(riceParam);

zeroCounter = 0;

while (bs-&gt;cache == 0) {

zeroCounter += (drflac_uint32)DRFLAC_CACHE_L1_BITS_REMAINING(bs);

if (!drflac__reload_cache(bs)) {

return DRFLAC_FALSE;

}

}

setBitOffsetPlus1 = drflac__clz(bs-&gt;cache);

zeroCounter += setBitOffsetPlus1;

setBitOffsetPlus1 += 1;

riceLength = setBitOffsetPlus1 + riceParam;

if (riceLength &lt; DRFLAC_CACHE_L1_BITS_REMAINING(bs)) {

riceParamPart = (drflac_uint32)((bs-&gt;cache &amp; (riceParamMask &gt;&gt; setBitOffsetPlus1)) &gt;&gt; DRFLAC_CACHE_L1_SELECTION_SHIFT(bs, riceLength));

bs-&gt;consumedBits += riceLength;

bs-&gt;cache &lt;&lt;= riceLength;

} else {

drflac_uint32 bitCountLo;

drflac_cache_t resultHi;

bs-&gt;consumedBits += riceLength;

bs-&gt;cache &lt;&lt;= setBitOffsetPlus1 &amp; (DRFLAC_CACHE_L1_SIZE_BITS(bs)-1); 

bitCountLo = bs-&gt;consumedBits - DRFLAC_CACHE_L1_SIZE_BITS(bs);

resultHi = DRFLAC_CACHE_L1_SELECT_AND_SHIFT(bs, riceParam); 

if (bs-&gt;nextL2Line &lt; DRFLAC_CACHE_L2_LINE_COUNT(bs)) {

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
drflac__update_crc16(bs);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

bs-&gt;cache = drflac__be2host__cache_line(bs-&gt;cacheL2[bs-&gt;nextL2Line++]);

bs-&gt;consumedBits = 0;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
bs-&gt;crc16Cache = bs-&gt;cache;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

} else {

if (!drflac__reload_cache(bs)) {

return DRFLAC_FALSE;

}

}

riceParamPart = (drflac_uint32)(resultHi | DRFLAC_CACHE_L1_SELECT_AND_SHIFT_SAFE(bs, bitCountLo));

bs-&gt;consumedBits += bitCountLo;

bs-&gt;cache &lt;&lt;= bitCountLo;

}

pZeroCounterOut[0] = zeroCounter;

pRiceParamPartOut[0] = riceParamPart;

return DRFLAC_TRUE;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_bool32</name></type> <name>drflac__read_rice_parts_x1</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>riceParam</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>pZeroCounterOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>pRiceParamPartOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPlus1</name> <init>= <expr><name>riceParam</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPlus1Shift</name> <init>= <expr><call><name>DRFLAC_CACHE_L1_SELECTION_SHIFT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParamPlus1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPlus1MaxConsumedBits</name> <init>= <expr><call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>riceParamPlus1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_cache_t</name></type> <name>bs_cache</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>bs_consumedBits</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>lzcount</name> <init>= <expr><call><name>drflac__clz</name><argument_list>(<argument><expr><name>bs_cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lzcount</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bs_cache</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pZeroCounterOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>lzcount</name></expr>;</expr_stmt>

<label><name>extract_rice_param_part</name>:</label>

<expr_stmt><expr><name>bs_cache</name> <operator>&lt;&lt;=</operator> <name>lzcount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>+=</operator> <name>lzcount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bs_consumedBits</name> <operator>&lt;=</operator> <name>riceParamPlus1MaxConsumedBits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pRiceParamPartOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><name>bs_cache</name> <operator>&gt;&gt;</operator> <name>riceParamPlus1Shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_cache</name> <operator>&lt;&lt;=</operator> <name>riceParamPlus1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>+=</operator> <name>riceParamPlus1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPartHi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPartLo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPartLoBitCount</name></decl>;</decl_stmt>

<expr_stmt><expr><name>riceParamPartHi</name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><name>bs_cache</name> <operator>&gt;&gt;</operator> <name>riceParamPlus1Shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPartLoBitCount</name> <operator>=</operator> <name>bs_consumedBits</name> <operator>-</operator> <name>riceParamPlus1MaxConsumedBits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>riceParamPartLoBitCount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>riceParamPartLoBitCount</name> <operator>&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name> <operator>&lt;</operator> <call><name>DRFLAC_CACHE_L2_LINE_COUNT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>drflac__update_crc16</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>bs_cache</name> <operator>=</operator> <call><name>drflac__be2host__cache_line</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>cacheL2</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>=</operator> <name>riceParamPartLoBitCount</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16Cache</name></name> <operator>=</operator> <name>bs_cache</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__reload_cache</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bs_cache</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>+</operator> <name>riceParamPartLoBitCount</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>riceParamPartLo</name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><name>bs_cache</name> <operator>&gt;&gt;</operator> <operator>(</operator><call><name>DRFLAC_CACHE_L1_SELECTION_SHIFT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParamPartLoBitCount</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pRiceParamPartOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>riceParamPartHi</name> <operator>|</operator> <name>riceParamPartLo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_cache</name> <operator>&lt;&lt;=</operator> <name>riceParamPartLoBitCount</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>zeroCounter</name> <init>= <expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>bs_consumedBits</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name> <operator>&lt;</operator> <call><name>DRFLAC_CACHE_L2_LINE_COUNT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>drflac__update_crc16</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>bs_cache</name> <operator>=</operator> <call><name>drflac__be2host__cache_line</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>cacheL2</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16Cache</name></name> <operator>=</operator> <name>bs_cache</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__reload_cache</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bs_cache</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lzcount</name> <operator>=</operator> <call><name>drflac__clz</name><argument_list>(<argument><expr><name>bs_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zeroCounter</name> <operator>+=</operator> <name>lzcount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lzcount</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bs_cache</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pZeroCounterOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>zeroCounter</name></expr>;</expr_stmt>

<goto>goto <name>extract_rice_param_part</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>bs_cache</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>=</operator> <name>bs_consumedBits</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_bool32</name></type> <name>drflac__read_rice_parts_x4</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>riceParam</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>pZeroCounterOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>pRiceParamPartOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPlus1</name> <init>= <expr><name>riceParam</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPlus1Shift</name> <init>= <expr><call><name>DRFLAC_CACHE_L1_SELECTION_SHIFT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParamPlus1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPlus1MaxConsumedBits</name> <init>= <expr><call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>riceParamPlus1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_cache_t</name></type> <name>bs_cache</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>bs_consumedBits</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>lzcount</name> <init>= <expr><call><name>drflac__clz</name><argument_list>(<argument><expr><name>bs_cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lzcount</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bs_cache</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pZeroCounterOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lzcount</name></expr>;</expr_stmt>

<label><name>extract_rice_param_part</name>:</label>

<expr_stmt><expr><name>bs_cache</name> <operator>&lt;&lt;=</operator> <name>lzcount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>+=</operator> <name>lzcount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bs_consumedBits</name> <operator>&lt;=</operator> <name>riceParamPlus1MaxConsumedBits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pRiceParamPartOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><name>bs_cache</name> <operator>&gt;&gt;</operator> <name>riceParamPlus1Shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_cache</name> <operator>&lt;&lt;=</operator> <name>riceParamPlus1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>+=</operator> <name>riceParamPlus1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPartHi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPartLo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPartLoBitCount</name></decl>;</decl_stmt>

<expr_stmt><expr><name>riceParamPartHi</name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><name>bs_cache</name> <operator>&gt;&gt;</operator> <name>riceParamPlus1Shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPartLoBitCount</name> <operator>=</operator> <name>bs_consumedBits</name> <operator>-</operator> <name>riceParamPlus1MaxConsumedBits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name> <operator>&lt;</operator> <call><name>DRFLAC_CACHE_L2_LINE_COUNT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>drflac__update_crc16</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>bs_cache</name> <operator>=</operator> <call><name>drflac__be2host__cache_line</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>cacheL2</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>=</operator> <name>riceParamPartLoBitCount</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16Cache</name></name> <operator>=</operator> <name>bs_cache</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__reload_cache</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bs_cache</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>+</operator> <name>riceParamPartLoBitCount</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>riceParamPartLo</name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><name>bs_cache</name> <operator>&gt;&gt;</operator> <operator>(</operator><call><name>DRFLAC_CACHE_L1_SELECTION_SHIFT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParamPartLoBitCount</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pRiceParamPartOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>riceParamPartHi</name> <operator>|</operator> <name>riceParamPartLo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_cache</name> <operator>&lt;&lt;=</operator> <name>riceParamPartLoBitCount</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>zeroCounter</name> <init>= <expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>bs_consumedBits</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name> <operator>&lt;</operator> <call><name>DRFLAC_CACHE_L2_LINE_COUNT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>drflac__update_crc16</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>bs_cache</name> <operator>=</operator> <call><name>drflac__be2host__cache_line</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>cacheL2</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16Cache</name></name> <operator>=</operator> <name>bs_cache</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__reload_cache</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bs_cache</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lzcount</name> <operator>=</operator> <call><name>drflac__clz</name><argument_list>(<argument><expr><name>bs_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zeroCounter</name> <operator>+=</operator> <name>lzcount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lzcount</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bs_cache</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pZeroCounterOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>zeroCounter</name></expr>;</expr_stmt>

<goto>goto <name>extract_rice_param_part</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>bs_cache</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>=</operator> <name>bs_consumedBits</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_bool32</name></type> <name>drflac__seek_rice_parts</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>riceParam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPlus1</name> <init>= <expr><name>riceParam</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPlus1MaxConsumedBits</name> <init>= <expr><call><name>DRFLAC_CACHE_L1_SIZE_BITS</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>riceParamPlus1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_cache_t</name></type> <name>bs_cache</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>bs_consumedBits</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>lzcount</name> <init>= <expr><call><name>drflac__clz</name><argument_list>(<argument><expr><name>bs_cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lzcount</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bs_cache</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<label><name>extract_rice_param_part</name>:</label>

<expr_stmt><expr><name>bs_cache</name> <operator>&lt;&lt;=</operator> <name>lzcount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>+=</operator> <name>lzcount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bs_consumedBits</name> <operator>&lt;=</operator> <name>riceParamPlus1MaxConsumedBits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bs_cache</name> <operator>&lt;&lt;=</operator> <name>riceParamPlus1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>+=</operator> <name>riceParamPlus1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPartLoBitCount</name> <init>= <expr><name>bs_consumedBits</name> <operator>-</operator> <name>riceParamPlus1MaxConsumedBits</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>riceParamPartLoBitCount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>riceParamPartLoBitCount</name> <operator>&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name> <operator>&lt;</operator> <call><name>DRFLAC_CACHE_L2_LINE_COUNT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>drflac__update_crc16</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>bs_cache</name> <operator>=</operator> <call><name>drflac__be2host__cache_line</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>cacheL2</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>=</operator> <name>riceParamPartLoBitCount</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16Cache</name></name> <operator>=</operator> <name>bs_cache</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__reload_cache</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bs_cache</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>+</operator> <name>riceParamPartLoBitCount</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>bs_cache</name> <operator>&lt;&lt;=</operator> <name>riceParamPartLoBitCount</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name> <operator>&lt;</operator> <call><name>DRFLAC_CACHE_L2_LINE_COUNT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>drflac__update_crc16</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>bs_cache</name> <operator>=</operator> <call><name>drflac__be2host__cache_line</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>cacheL2</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nextL2Line</name></name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>crc16Cache</name></name> <operator>=</operator> <name>bs_cache</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__reload_cache</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bs_cache</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_consumedBits</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lzcount</name> <operator>=</operator> <call><name>drflac__clz</name><argument_list>(<argument><expr><name>bs_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lzcount</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bs_cache</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<goto>goto <name>extract_rice_param_part</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>bs_cache</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>consumedBits</name></name> <operator>=</operator> <name>bs_consumedBits</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__decode_samples_with_residual__rice__scalar</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>bitsPerSample</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>riceParam</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>coefficients</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pSamplesOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>zeroCountPart0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>zeroCountPart1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>zeroCountPart2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>zeroCountPart3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPart0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPart1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPart2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamPart3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamMask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pSamplesOutEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pSamplesOut</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamMask</name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><operator>~</operator><literal type="number">0UL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>riceParam</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pSamplesOutEnd</name> <operator>=</operator> <name>pSamplesOut</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>count</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitsPerSample</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>pSamplesOut</name> <operator>&lt;</operator> <name>pSamplesOutEnd</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountPart0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamPart0</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountPart1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamPart1</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountPart2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamPart2</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountPart3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamPart3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>riceParamPart0</name> <operator>&amp;=</operator> <name>riceParamMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart1</name> <operator>&amp;=</operator> <name>riceParamMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart2</name> <operator>&amp;=</operator> <name>riceParamMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart3</name> <operator>&amp;=</operator> <name>riceParamMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart0</name> <operator>|=</operator> <operator>(</operator><name>zeroCountPart0</name> <operator>&lt;&lt;</operator> <name>riceParam</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart1</name> <operator>|=</operator> <operator>(</operator><name>zeroCountPart1</name> <operator>&lt;&lt;</operator> <name>riceParam</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart2</name> <operator>|=</operator> <operator>(</operator><name>zeroCountPart2</name> <operator>&lt;&lt;</operator> <name>riceParam</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart3</name> <operator>|=</operator> <operator>(</operator><name>zeroCountPart3</name> <operator>&lt;&lt;</operator> <name>riceParam</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart0</name> <operator>=</operator> <operator>(</operator><name>riceParamPart0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>t</name><index>[<expr><name>riceParamPart0</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart1</name> <operator>=</operator> <operator>(</operator><name>riceParamPart1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>t</name><index>[<expr><name>riceParamPart1</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart2</name> <operator>=</operator> <operator>(</operator><name>riceParamPart2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>t</name><index>[<expr><name>riceParamPart2</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart3</name> <operator>=</operator> <operator>(</operator><name>riceParamPart3</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>t</name><index>[<expr><name>riceParamPart3</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>riceParamPart0</name> <operator>+</operator> <call><name>drflac__calculate_prediction_64</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>riceParamPart1</name> <operator>+</operator> <call><name>drflac__calculate_prediction_64</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>riceParamPart2</name> <operator>+</operator> <call><name>drflac__calculate_prediction_64</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>riceParamPart3</name> <operator>+</operator> <call><name>drflac__calculate_prediction_64</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pSamplesOut</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>pSamplesOut</name> <operator>&lt;</operator> <name>pSamplesOutEnd</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountPart0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamPart0</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountPart1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamPart1</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountPart2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamPart2</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountPart3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamPart3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>riceParamPart0</name> <operator>&amp;=</operator> <name>riceParamMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart1</name> <operator>&amp;=</operator> <name>riceParamMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart2</name> <operator>&amp;=</operator> <name>riceParamMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart3</name> <operator>&amp;=</operator> <name>riceParamMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart0</name> <operator>|=</operator> <operator>(</operator><name>zeroCountPart0</name> <operator>&lt;&lt;</operator> <name>riceParam</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart1</name> <operator>|=</operator> <operator>(</operator><name>zeroCountPart1</name> <operator>&lt;&lt;</operator> <name>riceParam</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart2</name> <operator>|=</operator> <operator>(</operator><name>zeroCountPart2</name> <operator>&lt;&lt;</operator> <name>riceParam</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart3</name> <operator>|=</operator> <operator>(</operator><name>zeroCountPart3</name> <operator>&lt;&lt;</operator> <name>riceParam</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart0</name> <operator>=</operator> <operator>(</operator><name>riceParamPart0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>t</name><index>[<expr><name>riceParamPart0</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart1</name> <operator>=</operator> <operator>(</operator><name>riceParamPart1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>t</name><index>[<expr><name>riceParamPart1</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart2</name> <operator>=</operator> <operator>(</operator><name>riceParamPart2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>t</name><index>[<expr><name>riceParamPart2</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart3</name> <operator>=</operator> <operator>(</operator><name>riceParamPart3</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>t</name><index>[<expr><name>riceParamPart3</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>riceParamPart0</name> <operator>+</operator> <call><name>drflac__calculate_prediction_32</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>riceParamPart1</name> <operator>+</operator> <call><name>drflac__calculate_prediction_32</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>riceParamPart2</name> <operator>+</operator> <call><name>drflac__calculate_prediction_32</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>riceParamPart3</name> <operator>+</operator> <call><name>drflac__calculate_prediction_32</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pSamplesOut</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>count</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountPart0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamPart0</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>riceParamPart0</name> <operator>&amp;=</operator> <name>riceParamMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart0</name> <operator>|=</operator> <operator>(</operator><name>zeroCountPart0</name> <operator>&lt;&lt;</operator> <name>riceParam</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart0</name> <operator>=</operator> <operator>(</operator><name>riceParamPart0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>t</name><index>[<expr><name>riceParamPart0</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitsPerSample</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>riceParamPart0</name> <operator>+</operator> <call><name>drflac__calculate_prediction_64</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>riceParamPart0</name> <operator>+</operator> <call><name>drflac__calculate_prediction_32</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pSamplesOut</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE41</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__decode_samples_with_residual__rice__sse41</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>bitsPerSample</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>riceParam</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>coefficients</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pSamplesOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>drflac_uint32</name></type> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>zeroCountParts0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>zeroCountParts1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>zeroCountParts2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>zeroCountParts3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamParts0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamParts1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamParts2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamParts3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>riceParamMask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pSamplesOutEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>riceParamMask128</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>one</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pSamplesOut</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamMask</name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><operator>~</operator><literal type="number">0UL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>riceParam</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamMask128</name> <operator>=</operator> <call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><name>riceParamMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>one</name> <operator>=</operator> <call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pSamplesOutEnd</name> <operator>=</operator> <name>pSamplesOut</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>count</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitsPerSample</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>pSamplesOut</name> <operator>&lt;</operator> <name>pSamplesOutEnd</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>zeroCountPart128</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>riceParamPart128</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name><name>riceParamParts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountParts0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamParts0</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountParts1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamParts1</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountParts2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamParts2</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountParts3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamParts3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zeroCountPart128</name> <operator>=</operator> <call><name>_mm_set_epi32</name><argument_list>(<argument><expr><name>zeroCountParts3</name></expr></argument>, <argument><expr><name>zeroCountParts2</name></expr></argument>, <argument><expr><name>zeroCountParts1</name></expr></argument>, <argument><expr><name>zeroCountParts0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart128</name> <operator>=</operator> <call><name>_mm_set_epi32</name><argument_list>(<argument><expr><name>riceParamParts3</name></expr></argument>, <argument><expr><name>riceParamParts2</name></expr></argument>, <argument><expr><name>riceParamParts1</name></expr></argument>, <argument><expr><name>riceParamParts0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart128</name> <operator>=</operator> <call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>riceParamPart128</name></expr></argument>, <argument><expr><name>riceParamMask128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart128</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>riceParamPart128</name></expr></argument>, <argument><expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>zeroCountPart128</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart128</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>riceParamPart128</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>riceParamPart128</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>riceParamParts</name></expr></argument>, <argument><expr><name>riceParamPart128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>drflac__calculate_prediction_64_x4</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>riceParamParts</name></expr></argument>, <argument><expr><name>pSamplesOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name>drflac__calculate_prediction_64__sse41</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>drflac__calculate_prediction_64__sse41</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <call><name>drflac__calculate_prediction_64__sse41</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <call><name>drflac__calculate_prediction_64__sse41</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>pSamplesOut</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name><name>coefficientsUnaligned</name><index>[<expr><literal type="number">32</literal><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>coefficients128</name> <init>= <expr><operator>(</operator><name>drflac_int32</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>coefficientsUnaligned</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>coefficients128</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coefficients128</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coefficients128</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coefficients128</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>pSamplesOut</name> <operator>&lt;</operator> <name>pSamplesOutEnd</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>zeroCountPart128</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>riceParamPart128</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountParts0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamParts0</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountParts1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamParts1</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountParts2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamParts2</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountParts3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamParts3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zeroCountPart128</name> <operator>=</operator> <call><name>_mm_set_epi32</name><argument_list>(<argument><expr><name>zeroCountParts3</name></expr></argument>, <argument><expr><name>zeroCountParts2</name></expr></argument>, <argument><expr><name>zeroCountParts1</name></expr></argument>, <argument><expr><name>zeroCountParts0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart128</name> <operator>=</operator> <call><name>_mm_set_epi32</name><argument_list>(<argument><expr><name>riceParamParts3</name></expr></argument>, <argument><expr><name>riceParamParts2</name></expr></argument>, <argument><expr><name>riceParamParts1</name></expr></argument>, <argument><expr><name>riceParamParts0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_rice_parts_x4</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><name>zeroCountParts</name></expr></argument>, <argument><expr><name>riceParamParts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zeroCountPart128</name> <operator>=</operator> <call><name>_mm_set_epi32</name><argument_list>(<argument><expr><name><name>zeroCountParts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>zeroCountParts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>zeroCountParts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>zeroCountParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart128</name> <operator>=</operator> <call><name>_mm_set_epi32</name><argument_list>(<argument><expr><name><name>riceParamParts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>riceParamParts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>riceParamParts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>riceParamParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>riceParamPart128</name> <operator>=</operator> <call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>riceParamPart128</name></expr></argument>, <argument><expr><name>riceParamMask128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart128</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>riceParamPart128</name></expr></argument>, <argument><expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>zeroCountPart128</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamPart128</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>riceParamPart128</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_mullo_epi32</name><argument_list>(<argument><expr><call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>riceParamPart128</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>drflac__calculate_prediction_32_x4__sse41</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><name>coefficients128</name></expr></argument>, <argument><expr><name>riceParamPart128</name></expr></argument>, <argument><expr><name>pSamplesOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>riceParamParts</name></expr></argument>, <argument><expr><name>riceParamPart128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name>drflac__calculate_prediction_32</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>drflac__calculate_prediction_32</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <call><name>drflac__calculate_prediction_32</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>riceParamParts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <call><name>drflac__calculate_prediction_32</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>pSamplesOut</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>count</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_rice_parts_x1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroCountParts0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParamParts0</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>riceParamParts0</name> <operator>&amp;=</operator> <name>riceParamMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamParts0</name> <operator>|=</operator> <operator>(</operator><name>zeroCountParts0</name> <operator>&lt;&lt;</operator> <name>riceParam</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>riceParamParts0</name> <operator>=</operator> <operator>(</operator><name>riceParamParts0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>t</name><index>[<expr><name>riceParamParts0</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitsPerSample</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>riceParamParts0</name> <operator>+</operator> <call><name>drflac__calculate_prediction_64</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>riceParamParts0</name> <operator>+</operator> <call><name>drflac__calculate_prediction_32</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pSamplesOut</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__decode_samples_with_residual__rice</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>bitsPerSample</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>riceParam</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>coefficients</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pSamplesOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE41</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>drflac__gIsSSE41Supported</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__decode_samples_with_residual__rice__sse41</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsPerSample</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

return drflac__decode_samples_with_residual__rice__reference(bs, bitsPerSample, count, riceParam, order, shift, coefficients, pSamplesOut);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>drflac__decode_samples_with_residual__rice__scalar</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsPerSample</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__read_and_seek_residual__rice</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>riceParam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_rice_parts</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__decode_samples_with_residual__unencoded</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>bitsPerSample</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>unencodedBitsPerSample</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>coefficients</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pSamplesOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>unencodedBitsPerSample</name> <operator>&lt;=</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pSamplesOut</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>unencodedBitsPerSample</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_int32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>unencodedBitsPerSample</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitsPerSample</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>drflac__calculate_prediction_64</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pSamplesOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>drflac__calculate_prediction_32</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pSamplesOut</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__decode_samples_with_residual</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>bitsPerSample</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>coefficients</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>residualMethod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>partitionOrder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>samplesInPartition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>partitionsRemaining</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>blockSize</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pDecodedSamples</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>residualMethod</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>residualMethod</name> <operator>!=</operator> <name>DRFLAC_RESIDUAL_CODING_METHOD_PARTITIONED_RICE</name> <operator>&amp;&amp;</operator> <name>residualMethod</name> <operator>!=</operator> <name>DRFLAC_RESIDUAL_CODING_METHOD_PARTITIONED_RICE2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pDecodedSamples</name> <operator>+=</operator> <name>order</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>partitionOrder</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>partitionOrder</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>blockSize</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>partitionOrder</name><operator>)</operator><operator>)</operator> <operator>&lt;=</operator> <name>order</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samplesInPartition</name> <operator>=</operator> <operator>(</operator><name>blockSize</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>partitionOrder</name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>order</name></expr>;</expr_stmt>

<expr_stmt><expr><name>partitionsRemaining</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>partitionOrder</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>riceParam</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>residualMethod</name> <operator>==</operator> <name>DRFLAC_RESIDUAL_CODING_METHOD_PARTITIONED_RICE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>riceParam</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>riceParam</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>residualMethod</name> <operator>==</operator> <name>DRFLAC_RESIDUAL_CODING_METHOD_PARTITIONED_RICE2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>riceParam</name> <operator>==</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>riceParam</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>riceParam</name> <operator>!=</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__decode_samples_with_residual__rice</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsPerSample</name></expr></argument>, <argument><expr><name>samplesInPartition</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pDecodedSamples</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>unencodedBitsPerSample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>unencodedBitsPerSample</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__decode_samples_with_residual__unencoded</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsPerSample</name></expr></argument>, <argument><expr><name>samplesInPartition</name></expr></argument>, <argument><expr><name>unencodedBitsPerSample</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pDecodedSamples</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pDecodedSamples</name> <operator>+=</operator> <name>samplesInPartition</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>partitionsRemaining</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>partitionsRemaining</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>partitionOrder</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samplesInPartition</name> <operator>=</operator> <name>blockSize</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>partitionOrder</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__read_and_seek_residual</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>residualMethod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>partitionOrder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>samplesInPartition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>partitionsRemaining</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>blockSize</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>residualMethod</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>residualMethod</name> <operator>!=</operator> <name>DRFLAC_RESIDUAL_CODING_METHOD_PARTITIONED_RICE</name> <operator>&amp;&amp;</operator> <name>residualMethod</name> <operator>!=</operator> <name>DRFLAC_RESIDUAL_CODING_METHOD_PARTITIONED_RICE2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>partitionOrder</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>partitionOrder</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>blockSize</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>partitionOrder</name><operator>)</operator><operator>)</operator> <operator>&lt;=</operator> <name>order</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samplesInPartition</name> <operator>=</operator> <operator>(</operator><name>blockSize</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>partitionOrder</name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>order</name></expr>;</expr_stmt>

<expr_stmt><expr><name>partitionsRemaining</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>partitionOrder</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>riceParam</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>residualMethod</name> <operator>==</operator> <name>DRFLAC_RESIDUAL_CODING_METHOD_PARTITIONED_RICE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>riceParam</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>riceParam</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>residualMethod</name> <operator>==</operator> <name>DRFLAC_RESIDUAL_CODING_METHOD_PARTITIONED_RICE2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>riceParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>riceParam</name> <operator>==</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>riceParam</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>riceParam</name> <operator>!=</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_and_seek_residual__rice</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>samplesInPartition</name></expr></argument>, <argument><expr><name>riceParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>unencodedBitsPerSample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>unencodedBitsPerSample</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>unencodedBitsPerSample</name> <operator>*</operator> <name>samplesInPartition</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>partitionsRemaining</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>partitionsRemaining</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesInPartition</name> <operator>=</operator> <name>blockSize</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>partitionOrder</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__decode_samples__constant</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>bitsPerSample</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>sample</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_int32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsPerSample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sample</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blockSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__decode_samples__verbatim</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>bitsPerSample</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blockSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>sample</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_int32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsPerSample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sample</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__decode_samples__fixed</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>bitsPerSample</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>lpcOrder</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>drflac_int32</name></type> <name><name>lpcCoefficientsTable</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lpcOrder</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>sample</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_int32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsPerSample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sample</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__decode_samples_with_residual</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsPerSample</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>lpcOrder</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>lpcCoefficientsTable</name><index>[<expr><name>lpcOrder</name></expr>]</index></name></expr></argument>, <argument><expr><name>pDecodedSamples</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__decode_samples__lpc</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>bitsPerSample</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>lpcOrder</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>lpcPrecision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int8</name></type> <name>lpcShift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name><name>coefficients</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lpcOrder</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>sample</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_int32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsPerSample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sample</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pDecodedSamples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lpcPrecision</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lpcPrecision</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lpcPrecision</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_int8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lpcShift</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drflac_zero_memory</name><argument_list>(<argument><expr><name>coefficients</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coefficients</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lpcOrder</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_int32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>lpcPrecision</name></expr></argument>, <argument><expr><name>coefficients</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__decode_samples_with_residual</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsPerSample</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>lpcOrder</name></expr></argument>, <argument><expr><name>lpcShift</name></expr></argument>, <argument><expr><name>coefficients</name></expr></argument>, <argument><expr><name>pDecodedSamples</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__read_next_flac_frame_header</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>streaminfoBitsPerSample</name></decl></parameter>, <parameter><decl><type><name>drflac_frame_header</name><modifier>*</modifier></type> <name>header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_uint32</name></type> <name><name>sampleRateTable</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">88200</literal></expr>, <expr><literal type="number">176400</literal></expr>, <expr><literal type="number">192000</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><literal type="number">16000</literal></expr>, <expr><literal type="number">22050</literal></expr>, <expr><literal type="number">24000</literal></expr>, <expr><literal type="number">32000</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">96000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_uint8</name></type> <name><name>bitsPerSampleTable</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>header</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>crc8</name> <init>= <expr><literal type="number">0xCE</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>reserved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>blockingStrategy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>blockSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>sampleRate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>channelAssignment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>bitsPerSample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_bool32</name></type> <name>isVariableBlockSize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__find_and_seek_to_next_sync_code</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>reserved</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reserved</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc8</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc8</name></expr></argument>, <argument><expr><name>reserved</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockingStrategy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc8</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc8</name></expr></argument>, <argument><expr><name>blockingStrategy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blockSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc8</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc8</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc8</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc8</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelAssignment</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelAssignment</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc8</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc8</name></expr></argument>, <argument><expr><name>channelAssignment</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsPerSample</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitsPerSample</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>bitsPerSample</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc8</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc8</name></expr></argument>, <argument><expr><name>bitsPerSample</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>reserved</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reserved</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc8</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc8</name></expr></argument>, <argument><expr><name>reserved</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>isVariableBlockSize</name> <operator>=</operator> <name>blockingStrategy</name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isVariableBlockSize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>sampleNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_result</name></type> <name>result</name> <init>= <expr><call><name>drflac__read_utf8_coded_number</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_END_OF_STREAM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>frameNumber</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>sampleNumber</name></name> <operator>=</operator> <name>sampleNumber</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>frameNumber</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_result</name></type> <name>result</name> <init>= <expr><call><name>drflac__read_utf8_coded_number</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frameNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_END_OF_STREAM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>frameNumber</name></name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>frameNumber</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>sampleNumber</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blockSize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>blockSize</name></name> <operator>=</operator> <literal type="number">192</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>blockSize</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>blockSize</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>blockSize</name></name> <operator>=</operator> <literal type="number">576</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>blockSize</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>blockSize</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint16</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>blockSize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc8</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc8</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>blockSize</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>blockSize</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>blockSize</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint16</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>blockSize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc8</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc8</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>blockSize</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>blockSize</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>blockSize</name></name> <operator>=</operator> <literal type="number">256</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>blockSize</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name> <operator>&lt;=</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>sampleRateTable</name><index>[<expr><name>sampleRate</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sampleRate</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>sampleRate</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc8</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc8</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sampleRate</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>sampleRate</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc8</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc8</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sampleRate</name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>sampleRate</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc8</name> <operator>=</operator> <call><name>drflac_crc8</name><argument_list>(<argument><expr><name>crc8</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>channelAssignment</name></name> <operator>=</operator> <name>channelAssignment</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>=</operator> <name><name>bitsPerSampleTable</name><index>[<expr><name>bitsPerSample</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>=</operator> <name>streaminfoBitsPerSample</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>crc8</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>crc8</name></name> <operator>!=</operator> <name>crc8</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__read_subframe_header</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_subframe</name><modifier>*</modifier></type> <name>pSubframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>header</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>header</name> <operator>&amp;</operator> <literal type="number">0x7E</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>subframeType</name></name> <operator>=</operator> <name>DRFLAC_SUBFRAME_CONSTANT</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>subframeType</name></name> <operator>=</operator> <name>DRFLAC_SUBFRAME_VERBATIM</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>subframeType</name></name> <operator>=</operator> <name>DRFLAC_SUBFRAME_LPC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>lpcOrder</name></name> <operator>=</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>subframeType</name></name> <operator>=</operator> <name>DRFLAC_SUBFRAME_FIXED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>lpcOrder</name></name> <operator>=</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pSubframe</name><operator>-&gt;</operator><name>lpcOrder</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>subframeType</name></name> <operator>=</operator> <name>DRFLAC_SUBFRAME_RESERVED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>lpcOrder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>subframeType</name></name> <operator>=</operator> <name>DRFLAC_SUBFRAME_RESERVED</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pSubframe</name><operator>-&gt;</operator><name>subframeType</name></name> <operator>==</operator> <name>DRFLAC_SUBFRAME_RESERVED</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>wastedBitsPerSample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>header</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>wastedBitsPerSample</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_past_next_set_bit</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wastedBitsPerSample</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>wastedBitsPerSample</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>wastedBitsPerSample</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__decode_subframe</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_frame</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subframeIndex</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamplesOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_subframe</name><modifier>*</modifier></type> <name>pSubframe</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>frame</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pSubframe</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>subframes</name></name> <operator>+</operator> <name>subframeIndex</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_subframe_header</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>pSubframe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>bitsPerSample</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name> <operator>==</operator> <name>DRFLAC_CHANNEL_ASSIGNMENT_LEFT_SIDE</name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name> <operator>==</operator> <name>DRFLAC_CHANNEL_ASSIGNMENT_MID_SIDE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>subframeIndex</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name> <operator>==</operator> <name>DRFLAC_CHANNEL_ASSIGNMENT_RIGHT_SIDE</name> <operator>&amp;&amp;</operator> <name>subframeIndex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pSubframe</name><operator>-&gt;</operator><name>wastedBitsPerSample</name></name> <operator>&gt;=</operator> <name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>-=</operator> <name><name>pSubframe</name><operator>-&gt;</operator><name>wastedBitsPerSample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>pDecodedSamples</name></name> <operator>=</operator> <name>pDecodedSamplesOut</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>pSubframe</name><operator>-&gt;</operator><name>subframeType</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>DRFLAC_SUBFRAME_CONSTANT</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac__decode_samples__constant</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blockSize</name></name></expr></argument>, <argument><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>pDecodedSamples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_SUBFRAME_VERBATIM</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac__decode_samples__verbatim</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blockSize</name></name></expr></argument>, <argument><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>pDecodedSamples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_SUBFRAME_FIXED</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac__decode_samples__fixed</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blockSize</name></name></expr></argument>, <argument><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>lpcOrder</name></name></expr></argument>, <argument><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>pDecodedSamples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_SUBFRAME_LPC</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac__decode_samples__lpc</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blockSize</name></name></expr></argument>, <argument><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>lpcOrder</name></name></expr></argument>, <argument><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>pDecodedSamples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<default>default:</default> <return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__seek_subframe</name><parameter_list>(<parameter><decl><type><name>drflac_bs</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>drflac_frame</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subframeIndex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_subframe</name><modifier>*</modifier></type> <name>pSubframe</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>frame</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pSubframe</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>subframes</name></name> <operator>+</operator> <name>subframeIndex</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_subframe_header</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>pSubframe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>bitsPerSample</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name> <operator>==</operator> <name>DRFLAC_CHANNEL_ASSIGNMENT_LEFT_SIDE</name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name> <operator>==</operator> <name>DRFLAC_CHANNEL_ASSIGNMENT_MID_SIDE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>subframeIndex</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name> <operator>==</operator> <name>DRFLAC_CHANNEL_ASSIGNMENT_RIGHT_SIDE</name> <operator>&amp;&amp;</operator> <name>subframeIndex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pSubframe</name><operator>-&gt;</operator><name>wastedBitsPerSample</name></name> <operator>&gt;=</operator> <name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>-=</operator> <name><name>pSubframe</name><operator>-&gt;</operator><name>wastedBitsPerSample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>pDecodedSamples</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>pSubframe</name><operator>-&gt;</operator><name>subframeType</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>DRFLAC_SUBFRAME_CONSTANT</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_SUBFRAME_VERBATIM</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bitsToSeek</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blockSize</name></name> <operator>*</operator> <name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsToSeek</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_SUBFRAME_FIXED</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bitsToSeek</name> <init>= <expr><name><name>pSubframe</name><operator>-&gt;</operator><name>lpcOrder</name></name> <operator>*</operator> <name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsToSeek</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_and_seek_residual</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blockSize</name></name></expr></argument>, <argument><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>lpcOrder</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_SUBFRAME_LPC</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>lpcPrecision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bitsToSeek</name> <init>= <expr><name><name>pSubframe</name><operator>-&gt;</operator><name>lpcOrder</name></name> <operator>*</operator> <name><name>pSubframe</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsToSeek</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lpcPrecision</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lpcPrecision</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lpcPrecision</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitsToSeek</name> <operator>=</operator> <operator>(</operator><name><name>pSubframe</name><operator>-&gt;</operator><name>lpcOrder</name></name> <operator>*</operator> <name>lpcPrecision</name><operator>)</operator> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_bits</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bitsToSeek</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_and_seek_residual</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blockSize</name></name></expr></argument>, <argument><expr><name><name>pSubframe</name><operator>-&gt;</operator><name>lpcOrder</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<default>default:</default> <return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint8</name></type> <name>drflac__get_channel_count_from_channel_assignment</name><parameter_list>(<parameter><decl><type><name>drflac_int8</name></type> <name>channelAssignment</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>lookup</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>channelAssignment</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>lookup</name><index>[<expr><name>channelAssignment</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_result</name></type> <name>drflac__decode_flac_frame</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>channelCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>paddingSizeInBits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint16</name></type> <name>desiredCRC16</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>drflac_uint16</name></type> <name>actualCRC16</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>drflac_zero_memory</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>blockSize</name></name> <operator>&gt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>maxBlockSize</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>channelCount</name> <operator>=</operator> <call><name>drflac__get_channel_count_from_channel_assignment</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channelCount</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channelCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__decode_subframe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pDecodedSamples</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>blockSize</name></name><operator>+</operator><name>DRFLAC_LEADING_SAMPLES</name><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator> <operator>+</operator> <name>DRFLAC_LEADING_SAMPLES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>paddingSizeInBits</name> <operator>=</operator> <call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>paddingSizeInBits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name>paddingSizeInBits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>padding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_END_OF_STREAM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>actualCRC16</name> <operator>=</operator> <call><name>drflac__flush_crc16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>desiredCRC16</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_END_OF_STREAM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>actualCRC16</name> <operator>!=</operator> <name>desiredCRC16</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_CRC_MISMATCH</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>blockSize</name></name> <operator>*</operator> <name>channelCount</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_result</name></type> <name>drflac__seek_flac_frame</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>channelCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint16</name></type> <name>desiredCRC16</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>drflac_uint16</name></type> <name>actualCRC16</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>channelCount</name> <operator>=</operator> <call><name>drflac__get_channel_count_from_channel_assignment</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channelCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_subframe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><call><name>DRFLAC_CACHE_L1_BITS_REMAINING</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>actualCRC16</name> <operator>=</operator> <call><name>drflac__flush_crc16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_uint16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>desiredCRC16</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_END_OF_STREAM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>actualCRC16</name> <operator>!=</operator> <name>desiredCRC16</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_CRC_MISMATCH</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>DRFLAC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__read_and_decode_next_flac_frame</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pFlac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_result</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_next_flac_frame_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>drflac__decode_flac_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_CRC_MISMATCH</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drflac__get_current_frame_sample_range</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>pFirstSampleInFrameOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>pLastSampleInFrameOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channelCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>firstSampleInFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>lastSampleInFrame</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pFlac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channelCount</name> <operator>=</operator> <call><name>drflac__get_channel_count_from_channel_assignment</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>firstSampleInFrame</name> <operator>=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>sampleNumber</name></name><operator>*</operator><name>channelCount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>firstSampleInFrame</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>firstSampleInFrame</name> <operator>=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>frameNumber</name></name> <operator>*</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>maxBlockSize</name></name><operator>*</operator><name>channelCount</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lastSampleInFrame</name> <operator>=</operator> <name>firstSampleInFrame</name> <operator>+</operator> <operator>(</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>blockSize</name></name><operator>*</operator><name>channelCount</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lastSampleInFrame</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lastSampleInFrame</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pFirstSampleInFrameOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pFirstSampleInFrameOut</name> <operator>=</operator> <name>firstSampleInFrame</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pLastSampleInFrameOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pLastSampleInFrameOut</name> <operator>=</operator> <name>lastSampleInFrame</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static void drflac__get_pcm_frame_range_of_current_flac_frame(drflac* pFlac, drflac_uint64* pFirstPCMFrame, drflac_uint64* pLastPCMFrame)

{

drflac_uint64 firstPCMFrame;

drflac_uint64 lastPCMFrame;

drflac_assert(pFlac != NULL);

firstPCMFrame = pFlac-&gt;currentFrame.header.sampleNumber;

if (firstPCMFrame == 0) {

firstPCMFrame = pFlac-&gt;currentFrame.header.frameNumber * pFlac-&gt;maxBlockSize;

}

lastPCMFrame = firstPCMFrame + (pFlac-&gt;currentFrame.header.blockSize);

if (lastPCMFrame &gt; 0) {

lastPCMFrame -= 1; 

}

if (pFirstPCMFrame) {

*pFirstPCMFrame = firstPCMFrame;

}

if (pLastPCMFrame) {

*pLastPCMFrame = lastPCMFrame;

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__seek_to_first_frame</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_bool32</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pFlac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>drflac__seek_to_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>firstFramePos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_zero_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_result</name></type> <name>drflac__seek_to_next_flac_frame</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pFlac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>drflac__seek_flac_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_uint64</name></type> <name>drflac__seek_forward_by_samples</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>samplesToRead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>samplesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_and_decode_next_flac_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>&gt;</operator> <name>samplesToRead</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samplesRead</name> <operator>+=</operator> <name>samplesToRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>-=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>samplesToRead</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>samplesToRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>samplesRead</name> <operator>+=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<return>return <expr><name>samplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_uint64</name></type> <name>drflac__seek_forward_by_pcm_frames</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>pcmFramesToSeek</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drflac__seek_forward_by_samples</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>pcmFramesToSeek</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__seek_to_sample__brute_force</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>sampleIndex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_bool32</name></type> <name>isMidFrame</name> <init>= <expr><name>DRFLAC_FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>runningSampleCount</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pFlac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleIndex</name> <operator>&gt;=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>runningSampleCount</name> <operator>=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_next_flac_frame_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>isMidFrame</name> <operator>=</operator> <name>DRFLAC_TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>runningSampleCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_to_first_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_next_flac_frame_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>sampleCountInThisFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>firstSampleInFrame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>lastSampleInFrame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac__get_current_frame_sample_range</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>firstSampleInFrame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastSampleInFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sampleCountInThisFrame</name> <operator>=</operator> <operator>(</operator><name>lastSampleInFrame</name> <operator>-</operator> <name>firstSampleInFrame</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleIndex</name> <operator>&lt;</operator> <operator>(</operator><name>runningSampleCount</name> <operator>+</operator> <name>sampleCountInThisFrame</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>samplesToDecode</name> <init>= <expr><name>sampleIndex</name> <operator>-</operator> <name>runningSampleCount</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMidFrame</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_result</name></type> <name>result</name> <init>= <expr><call><name>drflac__decode_flac_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__seek_forward_by_samples</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>samplesToDecode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>samplesToDecode</name></expr>;</return> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_CRC_MISMATCH</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>next_iteration</name>;</goto> 

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>drflac__seek_forward_by_samples</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>samplesToDecode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>samplesToDecode</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMidFrame</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_result</name></type> <name>result</name> <init>= <expr><call><name>drflac__seek_to_next_flac_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>runningSampleCount</name> <operator>+=</operator> <name>sampleCountInThisFrame</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_CRC_MISMATCH</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>next_iteration</name>;</goto> 

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>runningSampleCount</name> <operator>+=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>isMidFrame</name> <operator>=</operator> <name>DRFLAC_FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>next_iteration</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_next_flac_frame_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__seek_to_sample__seek_table</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>sampleIndex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>iClosestSeekpoint</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_bool32</name></type> <name>isMidFrame</name> <init>= <expr><name>DRFLAC_FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>runningSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>iSeekpoint</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pFlac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>seekpointCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>iSeekpoint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iSeekpoint</name> <operator>&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>seekpointCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iSeekpoint</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name><index>[<expr><name>iSeekpoint</name></expr>]</index></name><operator>.</operator><name>firstSample</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;=</operator> <name>sampleIndex</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>iClosestSeekpoint</name> <operator>=</operator> <name>iSeekpoint</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sampleIndex</name> <operator>&gt;=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name><index>[<expr><name>iClosestSeekpoint</name></expr>]</index></name><operator>.</operator><name>firstSample</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>runningSampleCount</name> <operator>=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_next_flac_frame_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>isMidFrame</name> <operator>=</operator> <name>DRFLAC_TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>runningSampleCount</name> <operator>=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name><index>[<expr><name>iClosestSeekpoint</name></expr>]</index></name><operator>.</operator><name>firstSample</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_to_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>firstFramePos</name></name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name><index>[<expr><name>iClosestSeekpoint</name></expr>]</index></name><operator>.</operator><name>frameOffset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_next_flac_frame_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>sampleCountInThisFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>firstSampleInFrame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>lastSampleInFrame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac__get_current_frame_sample_range</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>firstSampleInFrame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastSampleInFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sampleCountInThisFrame</name> <operator>=</operator> <operator>(</operator><name>lastSampleInFrame</name> <operator>-</operator> <name>firstSampleInFrame</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleIndex</name> <operator>&lt;</operator> <operator>(</operator><name>runningSampleCount</name> <operator>+</operator> <name>sampleCountInThisFrame</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>samplesToDecode</name> <init>= <expr><name>sampleIndex</name> <operator>-</operator> <name>runningSampleCount</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMidFrame</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_result</name></type> <name>result</name> <init>= <expr><call><name>drflac__decode_flac_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__seek_forward_by_samples</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>samplesToDecode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>samplesToDecode</name></expr>;</return> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_CRC_MISMATCH</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>next_iteration</name>;</goto> 

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>drflac__seek_forward_by_samples</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>samplesToDecode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>samplesToDecode</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMidFrame</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_result</name></type> <name>result</name> <init>= <expr><call><name>drflac__seek_to_next_flac_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>runningSampleCount</name> <operator>+=</operator> <name>sampleCountInThisFrame</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_CRC_MISMATCH</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>next_iteration</name>;</goto> 

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>runningSampleCount</name> <operator>+=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>isMidFrame</name> <operator>=</operator> <name>DRFLAC_FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>next_iteration</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_next_flac_frame_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>capturePattern</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>structureVersion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>headerType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>granulePosition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>serialNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>sequenceNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>checksum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>segmentCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>segmentTable</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>drflac_ogg_page_header</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_container</name></type> <name>container</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserDataMD</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>bitsPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint16</name></type> <name>maxBlockSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>runningFilePos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_bool32</name></type> <name>hasStreamInfoBlock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_bool32</name></type> <name>hasMetadataBlocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_bs</name></type> <name>bs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drflac_frame_header</name></type> <name>firstFrameHeader</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>oggSerial</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>oggFirstBytePos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_ogg_page_header</name></type> <name>oggBosHeader</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>drflac_init_info</name>;</typedef>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac__decode_block_header</name><parameter_list>(<parameter><decl><type><name>drflac_uint32</name></type> <name>blockHeader</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name><modifier>*</modifier></type> <name>isLastBlock</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name><modifier>*</modifier></type> <name>blockType</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>blockSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>blockHeader</name> <operator>=</operator> <call><name>drflac__be2host_32</name><argument_list>(<argument><expr><name>blockHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>isLastBlock</name> <operator>=</operator> <operator>(</operator><name>blockHeader</name> <operator>&amp;</operator> <literal type="number">0x80000000UL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>blockType</name> <operator>=</operator> <operator>(</operator><name>blockHeader</name> <operator>&amp;</operator> <literal type="number">0x7F000000UL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>blockSize</name> <operator>=</operator> <operator>(</operator><name>blockHeader</name> <operator>&amp;</operator> <literal type="number">0x00FFFFFFUL</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_bool32</name></type> <name>drflac__read_and_decode_block_header</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name><modifier>*</modifier></type> <name>isLastBlock</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name><modifier>*</modifier></type> <name>blockType</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>blockSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>blockHeader</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockHeader</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drflac__decode_block_header</name><argument_list>(<argument><expr><name>blockHeader</name></expr></argument>, <argument><expr><name>isLastBlock</name></expr></argument>, <argument><expr><name>blockType</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_bool32</name></type> <name>drflac__read_streaminfo</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>drflac_streaminfo</name><modifier>*</modifier></type> <name>pStreamInfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>blockSizes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>frameSizes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>importantProps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>md5</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockSizes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frameSizes</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>importantProps</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>md5</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>md5</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>md5</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>blockSizes</name> <operator>=</operator> <call><name>drflac__be2host_32</name><argument_list>(<argument><expr><name>blockSizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frameSizes</name> <operator>=</operator> <call><name>drflac__be2host_64</name><argument_list>(<argument><expr><name>frameSizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>importantProps</name> <operator>=</operator> <call><name>drflac__be2host_64</name><argument_list>(<argument><expr><name>importantProps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pStreamInfo</name><operator>-&gt;</operator><name>minBlockSize</name></name> <operator>=</operator> <operator>(</operator><name>blockSizes</name> <operator>&amp;</operator> <literal type="number">0xFFFF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pStreamInfo</name><operator>-&gt;</operator><name>maxBlockSize</name></name> <operator>=</operator> <operator>(</operator><name>blockSizes</name> <operator>&amp;</operator> <literal type="number">0x0000FFFF</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pStreamInfo</name><operator>-&gt;</operator><name>minFrameSize</name></name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>frameSizes</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x00FFFFFF</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pStreamInfo</name><operator>-&gt;</operator><name>maxFrameSize</name></name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>frameSizes</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x00FFFFFF</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pStreamInfo</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>importantProps</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x000FFFFF</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pStreamInfo</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <operator>(</operator><name>drflac_uint8</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>importantProps</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x0000000E</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">41</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pStreamInfo</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>=</operator> <operator>(</operator><name>drflac_uint8</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>importantProps</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x0000001F</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">36</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pStreamInfo</name><operator>-&gt;</operator><name>totalSampleCount</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>importantProps</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint64</name><operator>)</operator><literal type="number">0x0000000F</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>pStreamInfo</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_copy_memory</name><argument_list>(<argument><expr><name><name>pStreamInfo</name><operator>-&gt;</operator><name>md5</name></name></expr></argument>, <argument><expr><name>md5</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>md5</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_bool32</name></type> <name>drflac__read_and_decode_metadata</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserDataMD</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>pFirstFramePos</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>pSeektablePos</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>pSeektableSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>runningFilePos</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>seektablePos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>seektableSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_metadata</name></type> <name>metadata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>isLastBlock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>blockType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>blockSize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_and_decode_block_header</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isLastBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>runningFilePos</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>blockType</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>pRawData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>rawDataSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>blockType</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>DRFLAC_METADATA_BLOCK_TYPE_APPLICATION</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blockSize</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>onMeta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pRawData</name> <init>= <expr><call><name>DRFLAC_MALLOC</name><argument_list>(<argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pRawData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pRawData</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>blockSize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>pRawData</name></name> <operator>=</operator> <name>pRawData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>rawDataSize</name></name> <operator>=</operator> <name>blockSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>application</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>drflac__be2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>application</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint8</name><operator>*</operator><operator>)</operator><name>pRawData</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drflac_uint32</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>application</name><operator>.</operator><name>dataSize</name></name> <operator>=</operator> <name>blockSize</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drflac_uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>onMeta</name><argument_list>(<argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_METADATA_BLOCK_TYPE_SEEKTABLE</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>seektablePos</name> <operator>=</operator> <name>runningFilePos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>seektableSize</name> <operator>=</operator> <name>blockSize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>onMeta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>iSeekpoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pRawData</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pRawData</name> <operator>=</operator> <call><name>DRFLAC_MALLOC</name><argument_list>(<argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pRawData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pRawData</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>blockSize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>pRawData</name></name> <operator>=</operator> <name>pRawData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>rawDataSize</name></name> <operator>=</operator> <name>blockSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>seektable</name><operator>.</operator><name>seekpointCount</name></name> <operator>=</operator> <name>blockSize</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>drflac_seekpoint</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>seektable</name><operator>.</operator><name>pSeekpoints</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>drflac_seekpoint</name><operator>*</operator><operator>)</operator><name>pRawData</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>iSeekpoint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iSeekpoint</name> <operator>&lt;</operator> <name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>seektable</name><operator>.</operator><name>seekpointCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iSeekpoint</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_seekpoint</name><modifier>*</modifier></type> <name>pSeekpoint</name> <init>= <expr><operator>(</operator><name>drflac_seekpoint</name><operator>*</operator><operator>)</operator><name>pRawData</name> <operator>+</operator> <name>iSeekpoint</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pSeekpoint</name><operator>-&gt;</operator><name>firstSample</name></name> <operator>=</operator> <call><name>drflac__be2host_64</name><argument_list>(<argument><expr><name><name>pSeekpoint</name><operator>-&gt;</operator><name>firstSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSeekpoint</name><operator>-&gt;</operator><name>frameOffset</name></name> <operator>=</operator> <call><name>drflac__be2host_64</name><argument_list>(<argument><expr><name><name>pSeekpoint</name><operator>-&gt;</operator><name>frameOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSeekpoint</name><operator>-&gt;</operator><name>sampleCount</name></name> <operator>=</operator> <call><name>drflac__be2host_16</name><argument_list>(<argument><expr><name><name>pSeekpoint</name><operator>-&gt;</operator><name>sampleCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>onMeta</name><argument_list>(<argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_METADATA_BLOCK_TYPE_VORBIS_COMMENT</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blockSize</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>onMeta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pRawData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pRunningData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pRunningDataEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pRawData</name> <operator>=</operator> <call><name>DRFLAC_MALLOC</name><argument_list>(<argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pRawData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pRawData</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>blockSize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>pRawData</name></name> <operator>=</operator> <name>pRawData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>rawDataSize</name></name> <operator>=</operator> <name>blockSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pRunningData</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pRawData</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pRunningDataEnd</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pRawData</name> <operator>+</operator> <name>blockSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>vorbis_comment</name><operator>.</operator><name>vendorLength</name></name> <operator>=</operator> <call><name>drflac__le2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pRunningDataEnd</name> <operator>-</operator> <name>pRunningData</name><operator>)</operator> <operator>-</operator> <literal type="number">4</literal> <operator>&lt;</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>vorbis_comment</name><operator>.</operator><name>vendorLength</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>vorbis_comment</name><operator>.</operator><name>vendor</name></name> <operator>=</operator> <name>pRunningData</name></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>vorbis_comment</name><operator>.</operator><name>vendorLength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>vorbis_comment</name><operator>.</operator><name>commentCount</name></name> <operator>=</operator> <call><name>drflac__le2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pRunningDataEnd</name> <operator>-</operator> <name>pRunningData</name><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drflac_uint32</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>vorbis_comment</name><operator>.</operator><name>commentCount</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>vorbis_comment</name><operator>.</operator><name>pComments</name></name> <operator>=</operator> <name>pRunningData</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>vorbis_comment</name><operator>.</operator><name>commentCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>commentLength</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pRunningDataEnd</name> <operator>-</operator> <name>pRunningData</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>commentLength</name> <operator>=</operator> <call><name>drflac__le2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pRunningDataEnd</name> <operator>-</operator> <name>pRunningData</name> <operator>&lt;</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name>commentLength</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <name>commentLength</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>onMeta</name><argument_list>(<argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_METADATA_BLOCK_TYPE_CUESHEET</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blockSize</name> <operator>&lt;</operator> <literal type="number">396</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>onMeta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pRawData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pRunningData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pRunningDataEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>iTrack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>iIndex</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pRawData</name> <operator>=</operator> <call><name>DRFLAC_MALLOC</name><argument_list>(<argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pRawData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pRawData</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>blockSize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>pRawData</name></name> <operator>=</operator> <name>pRawData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>rawDataSize</name></name> <operator>=</operator> <name>blockSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pRunningData</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pRawData</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pRunningDataEnd</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pRawData</name> <operator>+</operator> <name>blockSize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_copy_memory</name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>cuesheet</name><operator>.</operator><name>catalog</name></name></expr></argument>, <argument><expr><name>pRunningData</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>cuesheet</name><operator>.</operator><name>leadInSampleCount</name></name> <operator>=</operator> <call><name>drflac__be2host_64</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint64</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>cuesheet</name><operator>.</operator><name>isCD</name></name> <operator>=</operator> <operator>(</operator><name><name>pRunningData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">259</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>cuesheet</name><operator>.</operator><name>trackCount</name></name> <operator>=</operator> <name><name>pRunningData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>cuesheet</name><operator>.</operator><name>pTrackData</name></name> <operator>=</operator> <name>pRunningData</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>iTrack</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iTrack</name> <operator>&lt;</operator> <name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>cuesheet</name><operator>.</operator><name>trackCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iTrack</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>indexCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>indexPointSize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pRunningDataEnd</name> <operator>-</operator> <name>pRunningData</name> <operator>&lt;</operator> <literal type="number">36</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">35</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>indexCount</name> <operator>=</operator> <name><name>pRunningData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>indexPointSize</name> <operator>=</operator> <name>indexCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drflac_cuesheet_track_index</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pRunningDataEnd</name> <operator>-</operator> <name>pRunningData</name> <operator>&lt;</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name>indexPointSize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>iIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iIndex</name> <operator>&lt;</operator> <name>indexCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>iIndex</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_cuesheet_track_index</name><modifier>*</modifier></type> <name>pTrack</name> <init>= <expr><operator>(</operator><name>drflac_cuesheet_track_index</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drflac_cuesheet_track_index</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pTrack</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>drflac__be2host_64</name><argument_list>(<argument><expr><name><name>pTrack</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>onMeta</name><argument_list>(<argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_METADATA_BLOCK_TYPE_PICTURE</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blockSize</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>onMeta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pRawData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pRunningData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pRunningDataEnd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pRawData</name> <operator>=</operator> <call><name>DRFLAC_MALLOC</name><argument_list>(<argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pRawData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pRawData</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>blockSize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>pRawData</name></name> <operator>=</operator> <name>pRawData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>rawDataSize</name></name> <operator>=</operator> <name>blockSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pRunningData</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pRawData</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pRunningDataEnd</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pRawData</name> <operator>+</operator> <name>blockSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name>drflac__be2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>mimeLength</name></name> <operator>=</operator> <call><name>drflac__be2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pRunningDataEnd</name> <operator>-</operator> <name>pRunningData</name><operator>)</operator> <operator>-</operator> <literal type="number">24</literal> <operator>&lt;</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>mimeLength</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>mime</name></name> <operator>=</operator> <name>pRunningData</name></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>mimeLength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>descriptionLength</name></name> <operator>=</operator> <call><name>drflac__be2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pRunningDataEnd</name> <operator>-</operator> <name>pRunningData</name><operator>)</operator> <operator>-</operator> <literal type="number">20</literal> <operator>&lt;</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>descriptionLength</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>description</name></name> <operator>=</operator> <name>pRunningData</name></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>descriptionLength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>drflac__be2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>drflac__be2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>colorDepth</name></name> <operator>=</operator> <call><name>drflac__be2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>indexColorCount</name></name> <operator>=</operator> <call><name>drflac__be2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>pictureDataSize</name></name> <operator>=</operator> <call><name>drflac__be2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>pPictureData</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>drflac_uint8</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pRunningDataEnd</name> <operator>-</operator> <name>pRunningData</name> <operator>&lt;</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>picture</name><operator>.</operator><name>pictureDataSize</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>onMeta</name><argument_list>(<argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_METADATA_BLOCK_TYPE_PADDING</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>onMeta</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>padding</name><operator>.</operator><name>unused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>isLastBlock</name> <operator>=</operator> <name>DRFLAC_TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>onMeta</name><argument_list>(<argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_METADATA_BLOCK_TYPE_INVALID</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>onMeta</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>isLastBlock</name> <operator>=</operator> <name>DRFLAC_TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<default>default:</default>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>onMeta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pRawData</name> <init>= <expr><call><name>DRFLAC_MALLOC</name><argument_list>(<argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pRawData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pRawData</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>blockSize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>pRawData</name></name> <operator>=</operator> <name>pRawData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>rawDataSize</name></name> <operator>=</operator> <name>blockSize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>onMeta</name><argument_list>(<argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pRawData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>onMeta</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>blockSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>isLastBlock</name> <operator>=</operator> <name>DRFLAC_TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>runningFilePos</name> <operator>+=</operator> <name>blockSize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isLastBlock</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pSeektablePos</name> <operator>=</operator> <name>seektablePos</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pSeektableSize</name> <operator>=</operator> <name>seektableSize</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pFirstFramePos</name> <operator>=</operator> <name>runningFilePos</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_bool32</name></type> <name>drflac__init_private__native</name><parameter_list>(<parameter><decl><type><name>drflac_init_info</name><modifier>*</modifier></type> <name>pInit</name></decl></parameter>, <parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserDataMD</name></decl></parameter>, <parameter><decl><type><name>drflac_bool32</name></type> <name>relaxed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>isLastBlock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>blockType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>blockSize</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>onSeek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>container</name></name> <operator>=</operator> <name>drflac_container_native</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_and_decode_block_header</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isLastBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blockType</name> <operator>!=</operator> <name>DRFLAC_METADATA_BLOCK_TYPE_STREAMINFO</name> <operator>||</operator> <name>blockSize</name> <operator>!=</operator> <literal type="number">34</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>relaxed</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>hasStreamInfoBlock</name></name> <operator>=</operator> <name>DRFLAC_FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>hasMetadataBlocks</name></name> <operator>=</operator> <name>DRFLAC_FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_next_flac_frame_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInit</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInit</name><operator>-&gt;</operator><name>firstFrameHeader</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pInit</name><operator>-&gt;</operator><name>firstFrameHeader</name><operator>.</operator><name>bitsPerSample</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>firstFrameHeader</name><operator>.</operator><name>sampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>drflac__get_channel_count_from_channel_assignment</name><argument_list>(<argument><expr><name><name>pInit</name><operator>-&gt;</operator><name>firstFrameHeader</name><operator>.</operator><name>channelAssignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>firstFrameHeader</name><operator>.</operator><name>bitsPerSample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>maxBlockSize</name></name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt> 

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_streaminfo</name></type> <name>streaminfo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_streaminfo</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>streaminfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>hasStreamInfoBlock</name></name> <operator>=</operator> <name>DRFLAC_TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>streaminfo</name><operator>.</operator><name>sampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>streaminfo</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>=</operator> <name><name>streaminfo</name><operator>.</operator><name>bitsPerSample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>totalSampleCount</name></name> <operator>=</operator> <name><name>streaminfo</name><operator>.</operator><name>totalSampleCount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>maxBlockSize</name></name> <operator>=</operator> <name><name>streaminfo</name><operator>.</operator><name>maxBlockSize</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>hasMetadataBlocks</name></name> <operator>=</operator> <operator>!</operator><name>isLastBlock</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>onMeta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_metadata</name></type> <name>metadata</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>DRFLAC_METADATA_BLOCK_TYPE_STREAMINFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>pRawData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>rawDataSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>streaminfo</name></name> <operator>=</operator> <name>streaminfo</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>onMeta</name><argument_list>(<argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_OGG_MAX_PAGE_SIZE</name></cpp:macro> <cpp:value>65307</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_OGG_CAPTURE_PATTERN_CRC32</name></cpp:macro> <cpp:value>1605413199</cpp:value></cpp:define> 

<typedef>typedef <type><enum>enum

<block>{

<decl><name>drflac_ogg_recover_on_crc_mismatch</name></decl>,

<decl><name>drflac_ogg_fail_on_crc_mismatch</name></decl>

}</block></enum></type> <name>drflac_ogg_crc_mismatch_recovery</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>drflac_uint32</name></type> <name><name>drflac__crc32_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00000000L</literal></expr>, <expr><literal type="number">0x04C11DB7L</literal></expr>, <expr><literal type="number">0x09823B6EL</literal></expr>, <expr><literal type="number">0x0D4326D9L</literal></expr>,

<expr><literal type="number">0x130476DCL</literal></expr>, <expr><literal type="number">0x17C56B6BL</literal></expr>, <expr><literal type="number">0x1A864DB2L</literal></expr>, <expr><literal type="number">0x1E475005L</literal></expr>,

<expr><literal type="number">0x2608EDB8L</literal></expr>, <expr><literal type="number">0x22C9F00FL</literal></expr>, <expr><literal type="number">0x2F8AD6D6L</literal></expr>, <expr><literal type="number">0x2B4BCB61L</literal></expr>,

<expr><literal type="number">0x350C9B64L</literal></expr>, <expr><literal type="number">0x31CD86D3L</literal></expr>, <expr><literal type="number">0x3C8EA00AL</literal></expr>, <expr><literal type="number">0x384FBDBDL</literal></expr>,

<expr><literal type="number">0x4C11DB70L</literal></expr>, <expr><literal type="number">0x48D0C6C7L</literal></expr>, <expr><literal type="number">0x4593E01EL</literal></expr>, <expr><literal type="number">0x4152FDA9L</literal></expr>,

<expr><literal type="number">0x5F15ADACL</literal></expr>, <expr><literal type="number">0x5BD4B01BL</literal></expr>, <expr><literal type="number">0x569796C2L</literal></expr>, <expr><literal type="number">0x52568B75L</literal></expr>,

<expr><literal type="number">0x6A1936C8L</literal></expr>, <expr><literal type="number">0x6ED82B7FL</literal></expr>, <expr><literal type="number">0x639B0DA6L</literal></expr>, <expr><literal type="number">0x675A1011L</literal></expr>,

<expr><literal type="number">0x791D4014L</literal></expr>, <expr><literal type="number">0x7DDC5DA3L</literal></expr>, <expr><literal type="number">0x709F7B7AL</literal></expr>, <expr><literal type="number">0x745E66CDL</literal></expr>,

<expr><literal type="number">0x9823B6E0L</literal></expr>, <expr><literal type="number">0x9CE2AB57L</literal></expr>, <expr><literal type="number">0x91A18D8EL</literal></expr>, <expr><literal type="number">0x95609039L</literal></expr>,

<expr><literal type="number">0x8B27C03CL</literal></expr>, <expr><literal type="number">0x8FE6DD8BL</literal></expr>, <expr><literal type="number">0x82A5FB52L</literal></expr>, <expr><literal type="number">0x8664E6E5L</literal></expr>,

<expr><literal type="number">0xBE2B5B58L</literal></expr>, <expr><literal type="number">0xBAEA46EFL</literal></expr>, <expr><literal type="number">0xB7A96036L</literal></expr>, <expr><literal type="number">0xB3687D81L</literal></expr>,

<expr><literal type="number">0xAD2F2D84L</literal></expr>, <expr><literal type="number">0xA9EE3033L</literal></expr>, <expr><literal type="number">0xA4AD16EAL</literal></expr>, <expr><literal type="number">0xA06C0B5DL</literal></expr>,

<expr><literal type="number">0xD4326D90L</literal></expr>, <expr><literal type="number">0xD0F37027L</literal></expr>, <expr><literal type="number">0xDDB056FEL</literal></expr>, <expr><literal type="number">0xD9714B49L</literal></expr>,

<expr><literal type="number">0xC7361B4CL</literal></expr>, <expr><literal type="number">0xC3F706FBL</literal></expr>, <expr><literal type="number">0xCEB42022L</literal></expr>, <expr><literal type="number">0xCA753D95L</literal></expr>,

<expr><literal type="number">0xF23A8028L</literal></expr>, <expr><literal type="number">0xF6FB9D9FL</literal></expr>, <expr><literal type="number">0xFBB8BB46L</literal></expr>, <expr><literal type="number">0xFF79A6F1L</literal></expr>,

<expr><literal type="number">0xE13EF6F4L</literal></expr>, <expr><literal type="number">0xE5FFEB43L</literal></expr>, <expr><literal type="number">0xE8BCCD9AL</literal></expr>, <expr><literal type="number">0xEC7DD02DL</literal></expr>,

<expr><literal type="number">0x34867077L</literal></expr>, <expr><literal type="number">0x30476DC0L</literal></expr>, <expr><literal type="number">0x3D044B19L</literal></expr>, <expr><literal type="number">0x39C556AEL</literal></expr>,

<expr><literal type="number">0x278206ABL</literal></expr>, <expr><literal type="number">0x23431B1CL</literal></expr>, <expr><literal type="number">0x2E003DC5L</literal></expr>, <expr><literal type="number">0x2AC12072L</literal></expr>,

<expr><literal type="number">0x128E9DCFL</literal></expr>, <expr><literal type="number">0x164F8078L</literal></expr>, <expr><literal type="number">0x1B0CA6A1L</literal></expr>, <expr><literal type="number">0x1FCDBB16L</literal></expr>,

<expr><literal type="number">0x018AEB13L</literal></expr>, <expr><literal type="number">0x054BF6A4L</literal></expr>, <expr><literal type="number">0x0808D07DL</literal></expr>, <expr><literal type="number">0x0CC9CDCAL</literal></expr>,

<expr><literal type="number">0x7897AB07L</literal></expr>, <expr><literal type="number">0x7C56B6B0L</literal></expr>, <expr><literal type="number">0x71159069L</literal></expr>, <expr><literal type="number">0x75D48DDEL</literal></expr>,

<expr><literal type="number">0x6B93DDDBL</literal></expr>, <expr><literal type="number">0x6F52C06CL</literal></expr>, <expr><literal type="number">0x6211E6B5L</literal></expr>, <expr><literal type="number">0x66D0FB02L</literal></expr>,

<expr><literal type="number">0x5E9F46BFL</literal></expr>, <expr><literal type="number">0x5A5E5B08L</literal></expr>, <expr><literal type="number">0x571D7DD1L</literal></expr>, <expr><literal type="number">0x53DC6066L</literal></expr>,

<expr><literal type="number">0x4D9B3063L</literal></expr>, <expr><literal type="number">0x495A2DD4L</literal></expr>, <expr><literal type="number">0x44190B0DL</literal></expr>, <expr><literal type="number">0x40D816BAL</literal></expr>,

<expr><literal type="number">0xACA5C697L</literal></expr>, <expr><literal type="number">0xA864DB20L</literal></expr>, <expr><literal type="number">0xA527FDF9L</literal></expr>, <expr><literal type="number">0xA1E6E04EL</literal></expr>,

<expr><literal type="number">0xBFA1B04BL</literal></expr>, <expr><literal type="number">0xBB60ADFCL</literal></expr>, <expr><literal type="number">0xB6238B25L</literal></expr>, <expr><literal type="number">0xB2E29692L</literal></expr>,

<expr><literal type="number">0x8AAD2B2FL</literal></expr>, <expr><literal type="number">0x8E6C3698L</literal></expr>, <expr><literal type="number">0x832F1041L</literal></expr>, <expr><literal type="number">0x87EE0DF6L</literal></expr>,

<expr><literal type="number">0x99A95DF3L</literal></expr>, <expr><literal type="number">0x9D684044L</literal></expr>, <expr><literal type="number">0x902B669DL</literal></expr>, <expr><literal type="number">0x94EA7B2AL</literal></expr>,

<expr><literal type="number">0xE0B41DE7L</literal></expr>, <expr><literal type="number">0xE4750050L</literal></expr>, <expr><literal type="number">0xE9362689L</literal></expr>, <expr><literal type="number">0xEDF73B3EL</literal></expr>,

<expr><literal type="number">0xF3B06B3BL</literal></expr>, <expr><literal type="number">0xF771768CL</literal></expr>, <expr><literal type="number">0xFA325055L</literal></expr>, <expr><literal type="number">0xFEF34DE2L</literal></expr>,

<expr><literal type="number">0xC6BCF05FL</literal></expr>, <expr><literal type="number">0xC27DEDE8L</literal></expr>, <expr><literal type="number">0xCF3ECB31L</literal></expr>, <expr><literal type="number">0xCBFFD686L</literal></expr>,

<expr><literal type="number">0xD5B88683L</literal></expr>, <expr><literal type="number">0xD1799B34L</literal></expr>, <expr><literal type="number">0xDC3ABDEDL</literal></expr>, <expr><literal type="number">0xD8FBA05AL</literal></expr>,

<expr><literal type="number">0x690CE0EEL</literal></expr>, <expr><literal type="number">0x6DCDFD59L</literal></expr>, <expr><literal type="number">0x608EDB80L</literal></expr>, <expr><literal type="number">0x644FC637L</literal></expr>,

<expr><literal type="number">0x7A089632L</literal></expr>, <expr><literal type="number">0x7EC98B85L</literal></expr>, <expr><literal type="number">0x738AAD5CL</literal></expr>, <expr><literal type="number">0x774BB0EBL</literal></expr>,

<expr><literal type="number">0x4F040D56L</literal></expr>, <expr><literal type="number">0x4BC510E1L</literal></expr>, <expr><literal type="number">0x46863638L</literal></expr>, <expr><literal type="number">0x42472B8FL</literal></expr>,

<expr><literal type="number">0x5C007B8AL</literal></expr>, <expr><literal type="number">0x58C1663DL</literal></expr>, <expr><literal type="number">0x558240E4L</literal></expr>, <expr><literal type="number">0x51435D53L</literal></expr>,

<expr><literal type="number">0x251D3B9EL</literal></expr>, <expr><literal type="number">0x21DC2629L</literal></expr>, <expr><literal type="number">0x2C9F00F0L</literal></expr>, <expr><literal type="number">0x285E1D47L</literal></expr>,

<expr><literal type="number">0x36194D42L</literal></expr>, <expr><literal type="number">0x32D850F5L</literal></expr>, <expr><literal type="number">0x3F9B762CL</literal></expr>, <expr><literal type="number">0x3B5A6B9BL</literal></expr>,

<expr><literal type="number">0x0315D626L</literal></expr>, <expr><literal type="number">0x07D4CB91L</literal></expr>, <expr><literal type="number">0x0A97ED48L</literal></expr>, <expr><literal type="number">0x0E56F0FFL</literal></expr>,

<expr><literal type="number">0x1011A0FAL</literal></expr>, <expr><literal type="number">0x14D0BD4DL</literal></expr>, <expr><literal type="number">0x19939B94L</literal></expr>, <expr><literal type="number">0x1D528623L</literal></expr>,

<expr><literal type="number">0xF12F560EL</literal></expr>, <expr><literal type="number">0xF5EE4BB9L</literal></expr>, <expr><literal type="number">0xF8AD6D60L</literal></expr>, <expr><literal type="number">0xFC6C70D7L</literal></expr>,

<expr><literal type="number">0xE22B20D2L</literal></expr>, <expr><literal type="number">0xE6EA3D65L</literal></expr>, <expr><literal type="number">0xEBA91BBCL</literal></expr>, <expr><literal type="number">0xEF68060BL</literal></expr>,

<expr><literal type="number">0xD727BBB6L</literal></expr>, <expr><literal type="number">0xD3E6A601L</literal></expr>, <expr><literal type="number">0xDEA580D8L</literal></expr>, <expr><literal type="number">0xDA649D6FL</literal></expr>,

<expr><literal type="number">0xC423CD6AL</literal></expr>, <expr><literal type="number">0xC0E2D0DDL</literal></expr>, <expr><literal type="number">0xCDA1F604L</literal></expr>, <expr><literal type="number">0xC960EBB3L</literal></expr>,

<expr><literal type="number">0xBD3E8D7EL</literal></expr>, <expr><literal type="number">0xB9FF90C9L</literal></expr>, <expr><literal type="number">0xB4BCB610L</literal></expr>, <expr><literal type="number">0xB07DABA7L</literal></expr>,

<expr><literal type="number">0xAE3AFBA2L</literal></expr>, <expr><literal type="number">0xAAFBE615L</literal></expr>, <expr><literal type="number">0xA7B8C0CCL</literal></expr>, <expr><literal type="number">0xA379DD7BL</literal></expr>,

<expr><literal type="number">0x9B3660C6L</literal></expr>, <expr><literal type="number">0x9FF77D71L</literal></expr>, <expr><literal type="number">0x92B45BA8L</literal></expr>, <expr><literal type="number">0x9675461FL</literal></expr>,

<expr><literal type="number">0x8832161AL</literal></expr>, <expr><literal type="number">0x8CF30BADL</literal></expr>, <expr><literal type="number">0x81B02D74L</literal></expr>, <expr><literal type="number">0x857130C3L</literal></expr>,

<expr><literal type="number">0x5D8A9099L</literal></expr>, <expr><literal type="number">0x594B8D2EL</literal></expr>, <expr><literal type="number">0x5408ABF7L</literal></expr>, <expr><literal type="number">0x50C9B640L</literal></expr>,

<expr><literal type="number">0x4E8EE645L</literal></expr>, <expr><literal type="number">0x4A4FFBF2L</literal></expr>, <expr><literal type="number">0x470CDD2BL</literal></expr>, <expr><literal type="number">0x43CDC09CL</literal></expr>,

<expr><literal type="number">0x7B827D21L</literal></expr>, <expr><literal type="number">0x7F436096L</literal></expr>, <expr><literal type="number">0x7200464FL</literal></expr>, <expr><literal type="number">0x76C15BF8L</literal></expr>,

<expr><literal type="number">0x68860BFDL</literal></expr>, <expr><literal type="number">0x6C47164AL</literal></expr>, <expr><literal type="number">0x61043093L</literal></expr>, <expr><literal type="number">0x65C52D24L</literal></expr>,

<expr><literal type="number">0x119B4BE9L</literal></expr>, <expr><literal type="number">0x155A565EL</literal></expr>, <expr><literal type="number">0x18197087L</literal></expr>, <expr><literal type="number">0x1CD86D30L</literal></expr>,

<expr><literal type="number">0x029F3D35L</literal></expr>, <expr><literal type="number">0x065E2082L</literal></expr>, <expr><literal type="number">0x0B1D065BL</literal></expr>, <expr><literal type="number">0x0FDC1BECL</literal></expr>,

<expr><literal type="number">0x3793A651L</literal></expr>, <expr><literal type="number">0x3352BBE6L</literal></expr>, <expr><literal type="number">0x3E119D3FL</literal></expr>, <expr><literal type="number">0x3AD08088L</literal></expr>,

<expr><literal type="number">0x2497D08DL</literal></expr>, <expr><literal type="number">0x2056CD3AL</literal></expr>, <expr><literal type="number">0x2D15EBE3L</literal></expr>, <expr><literal type="number">0x29D4F654L</literal></expr>,

<expr><literal type="number">0xC5A92679L</literal></expr>, <expr><literal type="number">0xC1683BCEL</literal></expr>, <expr><literal type="number">0xCC2B1D17L</literal></expr>, <expr><literal type="number">0xC8EA00A0L</literal></expr>,

<expr><literal type="number">0xD6AD50A5L</literal></expr>, <expr><literal type="number">0xD26C4D12L</literal></expr>, <expr><literal type="number">0xDF2F6BCBL</literal></expr>, <expr><literal type="number">0xDBEE767CL</literal></expr>,

<expr><literal type="number">0xE3A1CBC1L</literal></expr>, <expr><literal type="number">0xE760D676L</literal></expr>, <expr><literal type="number">0xEA23F0AFL</literal></expr>, <expr><literal type="number">0xEEE2ED18L</literal></expr>,

<expr><literal type="number">0xF0A5BD1DL</literal></expr>, <expr><literal type="number">0xF464A0AAL</literal></expr>, <expr><literal type="number">0xF9278673L</literal></expr>, <expr><literal type="number">0xFDE69BC4L</literal></expr>,

<expr><literal type="number">0x89B8FD09L</literal></expr>, <expr><literal type="number">0x8D79E0BEL</literal></expr>, <expr><literal type="number">0x803AC667L</literal></expr>, <expr><literal type="number">0x84FBDBD0L</literal></expr>,

<expr><literal type="number">0x9ABC8BD5L</literal></expr>, <expr><literal type="number">0x9E7D9662L</literal></expr>, <expr><literal type="number">0x933EB0BBL</literal></expr>, <expr><literal type="number">0x97FFAD0CL</literal></expr>,

<expr><literal type="number">0xAFB010B1L</literal></expr>, <expr><literal type="number">0xAB710D06L</literal></expr>, <expr><literal type="number">0xA6322BDFL</literal></expr>, <expr><literal type="number">0xA2F33668L</literal></expr>,

<expr><literal type="number">0xBCB4666DL</literal></expr>, <expr><literal type="number">0xB8757BDAL</literal></expr>, <expr><literal type="number">0xB5365D03L</literal></expr>, <expr><literal type="number">0xB1F740B4L</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint32</name></type> <name>drflac_crc32_byte</name><parameter_list>(<parameter><decl><type><name>drflac_uint32</name></type> <name>crc32</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>crc32</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <name><name>drflac__crc32_table</name><index>[<expr><operator>(</operator><name>drflac_uint8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>crc32</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>^</operator> <name>data</name></expr>]</index></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<return>return <expr><name>crc32</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static DRFLAC_INLINE drflac_uint32 drflac_crc32_uint32(drflac_uint32 crc32, drflac_uint32 data)

{

crc32 = drflac_crc32_byte(crc32, (drflac_uint8)((data &gt;&gt; 24) &amp; 0xFF));

crc32 = drflac_crc32_byte(crc32, (drflac_uint8)((data &gt;&gt; 16) &amp; 0xFF));

crc32 = drflac_crc32_byte(crc32, (drflac_uint8)((data &gt;&gt; 8) &amp; 0xFF));

crc32 = drflac_crc32_byte(crc32, (drflac_uint8)((data &gt;&gt; 0) &amp; 0xFF));

return crc32;

}

static DRFLAC_INLINE drflac_uint32 drflac_crc32_uint64(drflac_uint32 crc32, drflac_uint64 data)

{

crc32 = drflac_crc32_uint32(crc32, (drflac_uint32)((data &gt;&gt; 32) &amp; 0xFFFFFFFF));

crc32 = drflac_crc32_uint32(crc32, (drflac_uint32)((data &gt;&gt; 0) &amp; 0xFFFFFFFF));

return crc32;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint32</name></type> <name>drflac_crc32_buffer</name><parameter_list>(<parameter><decl><type><name>drflac_uint32</name></type> <name>crc32</name></decl></parameter>, <parameter><decl><type><name>drflac_uint8</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>dataSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dataSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>crc32</name> <operator>=</operator> <call><name>drflac_crc32_byte</name><argument_list>(<argument><expr><name>crc32</name></expr></argument>, <argument><expr><name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>crc32</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_bool32</name></type> <name>drflac_ogg__is_capture_pattern</name><parameter_list>(<parameter><decl><type><name>drflac_uint8</name></type> <name><name>pattern</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'O'</literal> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint32</name></type> <name>drflac_ogg__get_page_header_size</name><parameter_list>(<parameter><decl><type><name>drflac_ogg_page_header</name><modifier>*</modifier></type> <name>pHeader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">27</literal> <operator>+</operator> <name><name>pHeader</name><operator>-&gt;</operator><name>segmentCount</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>drflac_uint32</name></type> <name>drflac_ogg__get_page_body_size</name><parameter_list>(<parameter><decl><type><name>drflac_ogg_page_header</name><modifier>*</modifier></type> <name>pHeader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>pageBodySize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pHeader</name><operator>-&gt;</operator><name>segmentCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pageBodySize</name> <operator>+=</operator> <name><name>pHeader</name><operator>-&gt;</operator><name>segmentTable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>pageBodySize</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_result</name></type> <name>drflac_ogg__read_page_header_after_capture_pattern</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>drflac_ogg_page_header</name><modifier>*</modifier></type> <name>pHeader</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>pBytesRead</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>pCRC32</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>data</name><index>[<expr><literal type="number">23</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><operator>*</operator><name>pCRC32</name> <operator>==</operator> <name>DRFLAC_OGG_CAPTURE_PATTERN_CRC32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">23</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_END_OF_STREAM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pBytesRead</name> <operator>+=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pHeader</name><operator>-&gt;</operator><name>structureVersion</name></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pHeader</name><operator>-&gt;</operator><name>headerType</name></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_copy_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHeader</name><operator>-&gt;</operator><name>granulePosition</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_copy_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHeader</name><operator>-&gt;</operator><name>serialNumber</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_copy_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHeader</name><operator>-&gt;</operator><name>sequenceNumber</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_copy_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHeader</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pHeader</name><operator>-&gt;</operator><name>segmentCount</name></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">23</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pCRC32</name> <operator>=</operator> <call><name>drflac_crc32_byte</name><argument_list>(<argument><expr><operator>*</operator><name>pCRC32</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name><name>pHeader</name><operator>-&gt;</operator><name>segmentTable</name></name></expr></argument>, <argument><expr><name><name>pHeader</name><operator>-&gt;</operator><name>segmentCount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>pHeader</name><operator>-&gt;</operator><name>segmentCount</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_END_OF_STREAM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pBytesRead</name> <operator>+=</operator> <name><name>pHeader</name><operator>-&gt;</operator><name>segmentCount</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pHeader</name><operator>-&gt;</operator><name>segmentCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pCRC32</name> <operator>=</operator> <call><name>drflac_crc32_byte</name><argument_list>(<argument><expr><operator>*</operator><name>pCRC32</name></expr></argument>, <argument><expr><name><name>pHeader</name><operator>-&gt;</operator><name>segmentTable</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>DRFLAC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_result</name></type> <name>drflac_ogg__read_page_header</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>drflac_ogg_page_header</name><modifier>*</modifier></type> <name>pHeader</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>pBytesRead</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>pCRC32</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>id</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pBytesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_END_OF_STREAM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pBytesRead</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drflac_ogg__is_capture_pattern</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_result</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pCRC32</name> <operator>=</operator> <name>DRFLAC_OGG_CAPTURE_PATTERN_CRC32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>drflac_ogg__read_page_header_after_capture_pattern</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pHeader</name></expr></argument>, <argument><expr><name>pBytesRead</name></expr></argument>, <argument><expr><name>pCRC32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_SUCCESS</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_CRC_MISMATCH</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>id</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_END_OF_STREAM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pBytesRead</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>currentBytePos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>firstBytePos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>serialNumber</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drflac_ogg_page_header</name></type> <name>bosPageHeader</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drflac_ogg_page_header</name></type> <name>currentPageHeader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>bytesRemainingInPage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>pageDataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>pageData</name><index>[<expr><name>DRFLAC_OGG_MAX_PAGE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>drflac_oggbs</name>;</typedef> 

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>drflac_oggbs__read_physical</name><parameter_list>(<parameter><decl><type><name>drflac_oggbs</name><modifier>*</modifier></type> <name>oggbs</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>bufferOut</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesActuallyRead</name> <init>= <expr><call><name><name>oggbs</name><operator>-&gt;</operator><name>onRead</name></name><argument_list>(<argument><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><name>bufferOut</name></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>currentBytePos</name></name> <operator>+=</operator> <name>bytesActuallyRead</name></expr>;</expr_stmt>

<return>return <expr><name>bytesActuallyRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac_oggbs__seek_physical</name><parameter_list>(<parameter><decl><type><name>drflac_oggbs</name><modifier>*</modifier></type> <name>oggbs</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>origin</name> <operator>==</operator> <name>drflac_seek_origin_start</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;=</operator> <literal type="number">0x7FFFFFFF</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>oggbs</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><name>drflac_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>currentBytePos</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>oggbs</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>, <argument><expr><name>drflac_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>currentBytePos</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><call><name>drflac_oggbs__seek_physical</name><argument_list>(<argument><expr><name>oggbs</name></expr></argument>, <argument><expr><name>offset</name> <operator>-</operator> <literal type="number">0x7FFFFFFF</literal></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0x7FFFFFFF</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>oggbs</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>currentBytePos</name></name> <operator>+=</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>-=</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>oggbs</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>currentBytePos</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac_oggbs__goto_next_page</name><parameter_list>(<parameter><decl><type><name>drflac_oggbs</name><modifier>*</modifier></type> <name>oggbs</name></decl></parameter>, <parameter><decl><type><name>drflac_ogg_crc_mismatch_recovery</name></type> <name>recoveryMethod</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_ogg_page_header</name></type> <name>header</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>crc32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>bytesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>pageBodySize</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>actualCRC32</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>drflac_ogg__read_page_header</name><argument_list>(<argument><expr><name><name>oggbs</name><operator>-&gt;</operator><name>onRead</name></name></expr></argument>, <argument><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytesRead</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc32</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>currentBytePos</name></name> <operator>+=</operator> <name>bytesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pageBodySize</name> <operator>=</operator> <call><name>drflac_ogg__get_page_body_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pageBodySize</name> <operator>&gt;</operator> <name>DRFLAC_OGG_MAX_PAGE_SIZE</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>serialNumber</name></name> <operator>!=</operator> <name><name>oggbs</name><operator>-&gt;</operator><name>serialNumber</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pageBodySize</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>drflac_oggbs__seek_physical</name><argument_list>(<argument><expr><name>oggbs</name></expr></argument>, <argument><expr><name>pageBodySize</name></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drflac_oggbs__read_physical</name><argument_list>(<argument><expr><name>oggbs</name></expr></argument>, <argument><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pageData</name></name></expr></argument>, <argument><expr><name>pageBodySize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>pageBodySize</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pageDataSize</name></name> <operator>=</operator> <name>pageBodySize</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_CRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>actualCRC32</name> <operator>=</operator> <call><name>drflac_crc32_buffer</name><argument_list>(<argument><expr><name>crc32</name></expr></argument>, <argument><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pageData</name></name></expr></argument>, <argument><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pageDataSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>actualCRC32</name> <operator>!=</operator> <name><name>header</name><operator>.</operator><name>checksum</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>recoveryMethod</name> <operator>==</operator> <name>drflac_ogg_recover_on_crc_mismatch</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>drflac_oggbs__goto_next_page</name><argument_list>(<argument><expr><name>oggbs</name></expr></argument>, <argument><expr><name>drflac_ogg_recover_on_crc_mismatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>recoveryMethod</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>currentPageHeader</name></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name> <operator>=</operator> <name>pageBodySize</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static drflac_uint8 drflac_oggbs__get_current_segment_index(drflac_oggbs* oggbs, drflac_uint8* pBytesRemainingInSeg)

{

drflac_uint32 bytesConsumedInPage = drflac_ogg__get_page_body_size(&amp;oggbs-&gt;currentPageHeader) - oggbs-&gt;bytesRemainingInPage;

drflac_uint8 iSeg = 0;

drflac_uint32 iByte = 0;

while (iByte &lt; bytesConsumedInPage) {

drflac_uint8 segmentSize = oggbs-&gt;currentPageHeader.segmentTable[iSeg];

if (iByte + segmentSize &gt; bytesConsumedInPage) {

break;

} else {

iSeg += 1;

iByte += segmentSize;

}

}

*pBytesRemainingInSeg = oggbs-&gt;currentPageHeader.segmentTable[iSeg] - (drflac_uint8)(bytesConsumedInPage - iByte);

return iSeg;

}

static drflac_bool32 drflac_oggbs__seek_to_next_packet(drflac_oggbs* oggbs)

{

for (;;) {

drflac_bool32 atEndOfPage = DRFLAC_FALSE;

drflac_uint8 bytesRemainingInSeg;

drflac_uint8 iFirstSeg = drflac_oggbs__get_current_segment_index(oggbs, &amp;bytesRemainingInSeg);

drflac_uint32 bytesToEndOfPacketOrPage = bytesRemainingInSeg;

for (drflac_uint8 iSeg = iFirstSeg; iSeg &lt; oggbs-&gt;currentPageHeader.segmentCount; ++iSeg) {

drflac_uint8 segmentSize = oggbs-&gt;currentPageHeader.segmentTable[iSeg];

if (segmentSize &lt; 255) {

if (iSeg == oggbs-&gt;currentPageHeader.segmentCount-1) {

atEndOfPage = DRFLAC_TRUE;

}

break;

}

bytesToEndOfPacketOrPage += segmentSize;

}

drflac_oggbs__seek_physical(oggbs, bytesToEndOfPacketOrPage, drflac_seek_origin_current);

oggbs-&gt;bytesRemainingInPage -= bytesToEndOfPacketOrPage;

if (atEndOfPage) {

if (!drflac_oggbs__goto_next_page(oggbs)) {

return DRFLAC_FALSE;

}

if ((oggbs-&gt;currentPageHeader.headerType &amp; 0x01) == 0) {

return DRFLAC_TRUE;

}

} else {

return DRFLAC_TRUE;

}

}

}

static drflac_bool32 drflac_oggbs__seek_to_next_frame(drflac_oggbs* oggbs)

{

return drflac_oggbs__seek_to_next_packet(oggbs);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>drflac__on_read_ogg</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>bufferOut</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_oggbs</name><modifier>*</modifier></type> <name>oggbs</name> <init>= <expr><operator>(</operator><name>drflac_oggbs</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name><modifier>*</modifier></type> <name>pRunningBufferOut</name> <init>= <expr><operator>(</operator><name>drflac_uint8</name><operator>*</operator><operator>)</operator><name>bufferOut</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>oggbs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pRunningBufferOut</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bytesRead</name> <operator>&lt;</operator> <name>bytesToRead</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRemainingToRead</name> <init>= <expr><name>bytesToRead</name> <operator>-</operator> <name>bytesRead</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name> <operator>&gt;=</operator> <name>bytesRemainingToRead</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drflac_copy_memory</name><argument_list>(<argument><expr><name>pRunningBufferOut</name></expr></argument>, <argument><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pageData</name></name> <operator>+</operator> <operator>(</operator><name><name>oggbs</name><operator>-&gt;</operator><name>pageDataSize</name></name> <operator>-</operator> <name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name><operator>)</operator></expr></argument>, <argument><expr><name>bytesRemainingToRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytesRead</name> <operator>+=</operator> <name>bytesRemainingToRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name> <operator>-=</operator> <operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>bytesRemainingToRead</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drflac_copy_memory</name><argument_list>(<argument><expr><name>pRunningBufferOut</name></expr></argument>, <argument><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pageData</name></name> <operator>+</operator> <operator>(</operator><name><name>oggbs</name><operator>-&gt;</operator><name>pageDataSize</name></name> <operator>-</operator> <name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytesRead</name> <operator>+=</operator> <name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pRunningBufferOut</name> <operator>+=</operator> <name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bytesRemainingToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac_oggbs__goto_next_page</name><argument_list>(<argument><expr><name>oggbs</name></expr></argument>, <argument><expr><name>drflac_ogg_recover_on_crc_mismatch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>bytesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__on_seek_ogg</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_oggbs</name><modifier>*</modifier></type> <name>oggbs</name> <init>= <expr><operator>(</operator><name>drflac_oggbs</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesSeeked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>oggbs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>origin</name> <operator>==</operator> <name>drflac_seek_origin_start</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac_oggbs__seek_physical</name><argument_list>(<argument><expr><name>oggbs</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>oggbs</name><operator>-&gt;</operator><name>firstBytePos</name></name></expr></argument>, <argument><expr><name>drflac_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac_oggbs__goto_next_page</name><argument_list>(<argument><expr><name>oggbs</name></expr></argument>, <argument><expr><name>drflac_ogg_fail_on_crc_mismatch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drflac__on_seek_ogg</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>origin</name> <operator>==</operator> <name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bytesSeeked</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bytesRemainingToSeek</name> <init>= <expr><name>offset</name> <operator>-</operator> <name>bytesSeeked</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bytesRemainingToSeek</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>bytesRemainingToSeek</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytesSeeked</name> <operator>+=</operator> <name>bytesRemainingToSeek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name> <operator>-=</operator> <name>bytesRemainingToSeek</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytesSeeked</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>bytesRemainingToSeek</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac_oggbs__goto_next_page</name><argument_list>(<argument><expr><name>oggbs</name></expr></argument>, <argument><expr><name>drflac_ogg_fail_on_crc_mismatch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_bool32</name></type> <name>drflac_ogg__seek_to_sample</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>sampleIndex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_oggbs</name><modifier>*</modifier></type> <name>oggbs</name> <init>= <expr><operator>(</operator><name>drflac_oggbs</name><operator>*</operator><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>_oggbs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>originalBytePos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>runningGranulePosition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>runningFrameBytePos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>runningSampleCount</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>oggbs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>originalBytePos</name> <operator>=</operator> <name><name>oggbs</name><operator>-&gt;</operator><name>currentBytePos</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__seek_to_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>firstFramePos</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>bytesRemainingInPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>runningGranulePosition</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>runningFrameBytePos</name> <operator>=</operator> <name><name>oggbs</name><operator>-&gt;</operator><name>currentBytePos</name></name></expr>;</expr_stmt> 

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac_oggbs__goto_next_page</name><argument_list>(<argument><expr><name>oggbs</name></expr></argument>, <argument><expr><name>drflac_ogg_recover_on_crc_mismatch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drflac_oggbs__seek_physical</name><argument_list>(<argument><expr><name>oggbs</name></expr></argument>, <argument><expr><name>originalBytePos</name></expr></argument>, <argument><expr><name>drflac_seek_origin_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>runningFrameBytePos</name> <operator>=</operator> <name><name>oggbs</name><operator>-&gt;</operator><name>currentBytePos</name></name> <operator>-</operator> <call><name>drflac_ogg__get_page_header_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oggbs</name><operator>-&gt;</operator><name>currentPageHeader</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>oggbs</name><operator>-&gt;</operator><name>pageDataSize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oggbs</name><operator>-&gt;</operator><name>currentPageHeader</name><operator>.</operator><name>granulePosition</name></name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;=</operator> <name>sampleIndex</name></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>oggbs</name><operator>-&gt;</operator><name>currentPageHeader</name><operator>.</operator><name>headerType</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>oggbs</name><operator>-&gt;</operator><name>currentPageHeader</name><operator>.</operator><name>segmentTable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>firstBytesInPage</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>firstBytesInPage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>oggbs</name><operator>-&gt;</operator><name>pageData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>firstBytesInPage</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>oggbs</name><operator>-&gt;</operator><name>pageData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>firstBytesInPage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>firstBytesInPage</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFC</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF8</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>runningGranulePosition</name> <operator>=</operator> <name><name>oggbs</name><operator>-&gt;</operator><name>currentPageHeader</name><operator>.</operator><name>granulePosition</name></name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac_oggbs__seek_physical</name><argument_list>(<argument><expr><name>oggbs</name></expr></argument>, <argument><expr><name>runningFrameBytePos</name></expr></argument>, <argument><expr><name>drflac_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac_oggbs__goto_next_page</name><argument_list>(<argument><expr><name>oggbs</name></expr></argument>, <argument><expr><name>drflac_ogg_recover_on_crc_mismatch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>runningSampleCount</name> <operator>=</operator> <name>runningGranulePosition</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>firstSampleInFrame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>lastSampleInFrame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>sampleCountInThisFrame</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_next_flac_frame_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drflac__get_current_frame_sample_range</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>firstSampleInFrame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastSampleInFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sampleCountInThisFrame</name> <operator>=</operator> <operator>(</operator><name>lastSampleInFrame</name> <operator>-</operator> <name>firstSampleInFrame</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleIndex</name> <operator>&lt;</operator> <operator>(</operator><name>runningSampleCount</name> <operator>+</operator> <name>sampleCountInThisFrame</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_result</name></type> <name>result</name> <init>= <expr><call><name>drflac__decode_flac_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>samplesToDecode</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>sampleIndex</name> <operator>-</operator> <name>runningSampleCount</name><operator>)</operator></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>samplesToDecode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drflac__seek_forward_by_samples</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>samplesToDecode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>samplesToDecode</name></expr>;</return> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_CRC_MISMATCH</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_result</name></type> <name>result</name> <init>= <expr><call><name>drflac__seek_to_next_flac_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>runningSampleCount</name> <operator>+=</operator> <name>sampleCountInThisFrame</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_CRC_MISMATCH</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>drflac_bool32</name></type> <name>drflac__init_private__ogg</name><parameter_list>(<parameter><decl><type><name>drflac_init_info</name><modifier>*</modifier></type> <name>pInit</name></decl></parameter>, <parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserDataMD</name></decl></parameter>, <parameter><decl><type><name>drflac_bool32</name></type> <name>relaxed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_ogg_page_header</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>crc32</name> <init>= <expr><name>DRFLAC_OGG_CAPTURE_PATTERN_CRC32</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>bytesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>relaxed</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>container</name></name> <operator>=</operator> <name>drflac_container_ogg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>oggFirstBytePos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drflac_ogg__read_page_header_after_capture_pattern</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytesRead</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc32</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>runningFilePos</name></name> <operator>+=</operator> <name>bytesRead</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pageBodySize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>.</operator><name>headerType</name></name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pageBodySize</name> <operator>=</operator> <call><name>drflac_ogg__get_page_body_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pageBodySize</name> <operator>==</operator> <literal type="number">51</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>bytesRemainingInPage</name> <init>= <expr><name>pageBodySize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>packetType</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packetType</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesRemainingInPage</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>packetType</name> <operator>==</operator> <literal type="number">0x7F</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>sig</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesRemainingInPage</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal> <operator>&amp;&amp;</operator> <name><name>sig</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal> <operator>&amp;&amp;</operator> <name><name>sig</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>sig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>mappingVersion</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>mappingVersion</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mappingVersion</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name><name>sig</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal> <operator>&amp;&amp;</operator> <name><name>sig</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>sig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_streaminfo</name></type> <name>streaminfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>isLastBlock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>blockType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>blockSize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_and_decode_block_header</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isLastBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blockType</name> <operator>!=</operator> <name>DRFLAC_METADATA_BLOCK_TYPE_STREAMINFO</name> <operator>||</operator> <name>blockSize</name> <operator>!=</operator> <literal type="number">34</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drflac__read_streaminfo</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>streaminfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>hasStreamInfoBlock</name></name> <operator>=</operator> <name>DRFLAC_TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>streaminfo</name><operator>.</operator><name>sampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>streaminfo</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>=</operator> <name><name>streaminfo</name><operator>.</operator><name>bitsPerSample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>totalSampleCount</name></name> <operator>=</operator> <name><name>streaminfo</name><operator>.</operator><name>totalSampleCount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>maxBlockSize</name></name> <operator>=</operator> <name><name>streaminfo</name><operator>.</operator><name>maxBlockSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>hasMetadataBlocks</name></name> <operator>=</operator> <operator>!</operator><name>isLastBlock</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>onMeta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_metadata</name></type> <name>metadata</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>DRFLAC_METADATA_BLOCK_TYPE_STREAMINFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>pRawData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>rawDataSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>data</name><operator>.</operator><name>streaminfo</name></name> <operator>=</operator> <name>streaminfo</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>onMeta</name><argument_list>(<argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>runningFilePos</name></name> <operator>+=</operator> <name>pageBodySize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>oggFirstBytePos</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>runningFilePos</name></name> <operator>-</operator> <literal type="number">79</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>oggSerial</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>serialNumber</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>oggBosHeader</name></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>bytesRemainingInPage</name></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>bytesRemainingInPage</name></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pageBodySize</name></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>runningFilePos</name></name> <operator>+=</operator> <name>pageBodySize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drflac_ogg__read_page_header</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytesRead</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc32</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>runningFilePos</name></name> <operator>+=</operator> <name>bytesRead</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>hasMetadataBlocks</name></name> <operator>=</operator> <name>DRFLAC_TRUE</name></expr>;</expr_stmt> 

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>drflac_bool32</name></type> <name>drflac__init_private</name><parameter_list>(<parameter><decl><type><name>drflac_init_info</name><modifier>*</modifier></type> <name>pInit</name></decl></parameter>, <parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl></parameter>, <parameter><decl><type><name>drflac_container</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserDataMD</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_bool32</name></type> <name>relaxed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>id</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pInit</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>onRead</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>onSeek</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drflac_zero_memory</name><argument_list>(<argument><expr><name>pInit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pInit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>onRead</name></name> <operator>=</operator> <name>onRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>onSeek</name></name> <operator>=</operator> <name>onSeek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>onMeta</name></name> <operator>=</operator> <name>onMeta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>container</name></name> <operator>=</operator> <name>container</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>pUserDataMD</name></name> <operator>=</operator> <name>pUserDataMD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>onRead</name></name> <operator>=</operator> <name>onRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>onSeek</name></name> <operator>=</operator> <name>onSeek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac__reset_cache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInit</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>relaxed</name> <operator>=</operator> <name>container</name> <operator>!=</operator> <name>drflac_container_unknown</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>runningFilePos</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'I'</literal> <operator>&amp;&amp;</operator> <name><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'D'</literal> <operator>&amp;&amp;</operator> <name><name>id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'3'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name><name>header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint8</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>headerSize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>runningFilePos</name></name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_copy_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headerSize</name></expr></argument>, <argument><expr><name>header</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>headerSize</name> <operator>=</operator> <call><name>drflac__unsynchsafe_32</name><argument_list>(<argument><expr><call><name>drflac__be2host_32</name><argument_list>(<argument><expr><name>headerSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>headerSize</name></expr></argument>, <argument><expr><name>drflac_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pInit</name><operator>-&gt;</operator><name>runningFilePos</name></name> <operator>+=</operator> <name>headerSize</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal> <operator>&amp;&amp;</operator> <name><name>id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>id</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__init_private__native</name><argument_list>(<argument><expr><name>pInit</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>onMeta</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><name>relaxed</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'O'</literal> <operator>&amp;&amp;</operator> <name><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name><name>id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name><name>id</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__init_private__ogg</name><argument_list>(<argument><expr><name>pInit</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>onMeta</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><name>relaxed</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>relaxed</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>container</name> <operator>==</operator> <name>drflac_container_native</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__init_private__native</name><argument_list>(<argument><expr><name>pInit</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>onMeta</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><name>relaxed</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>container</name> <operator>==</operator> <name>drflac_container_ogg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__init_private__ogg</name><argument_list>(<argument><expr><name>pInit</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>onMeta</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><name>relaxed</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drflac__init_from_info</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_init_info</name><modifier>*</modifier></type> <name>pInit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pFlac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>pInit</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_zero_memory</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pFlac</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>bs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>onMeta</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>onMeta</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pUserDataMD</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>pUserDataMD</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>maxBlockSize</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>maxBlockSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>sampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <operator>(</operator><name>drflac_uint8</name><operator>)</operator><name><name>pInit</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>=</operator> <operator>(</operator><name>drflac_uint8</name><operator>)</operator><name><name>pInit</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>totalSampleCount</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>totalPCMFrameCount</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>totalSampleCount</name></name> <operator>/</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>container</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>container</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_with_metadata_private</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl></parameter>, <parameter><decl><type><name>drflac_container</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserDataMD</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_init_info</name></type> <name>init</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>allocationSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>wholeSIMDVectorCountPerChannel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>decodedSamplesAllocationSize</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>oggbsAllocationSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_oggbs</name></type> <name>oggbs</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>firstFramePos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>seektablePos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>seektableSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_NO_CPUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>drflac__init_cpu_caps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__init_private</name><argument_list>(<argument><expr><operator>&amp;</operator><name>init</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>onMeta</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pUserDataMD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>allocationSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drflac</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>init</name><operator>.</operator><name>maxBlockSize</name></name><operator>+</operator><name>DRFLAC_LEADING_SAMPLES</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>DRFLAC_MAX_SIMD_VECTOR_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drflac_int32</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wholeSIMDVectorCountPerChannel</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>init</name><operator>.</operator><name>maxBlockSize</name></name><operator>+</operator><name>DRFLAC_LEADING_SAMPLES</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>DRFLAC_MAX_SIMD_VECTOR_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drflac_int32</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>wholeSIMDVectorCountPerChannel</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>init</name><operator>.</operator><name>maxBlockSize</name></name><operator>+</operator><name>DRFLAC_LEADING_SAMPLES</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>DRFLAC_MAX_SIMD_VECTOR_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drflac_int32</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>decodedSamplesAllocationSize</name> <operator>=</operator> <name>wholeSIMDVectorCountPerChannel</name> <operator>*</operator> <name>DRFLAC_MAX_SIMD_VECTOR_SIZE</name> <operator>*</operator> <name><name>init</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>allocationSize</name> <operator>+=</operator> <name>decodedSamplesAllocationSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>allocationSize</name> <operator>+=</operator> <name>DRFLAC_MAX_SIMD_VECTOR_SIZE</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>oggbsAllocationSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>init</name><operator>.</operator><name>container</name></name> <operator>==</operator> <name>drflac_container_ogg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>oggbsAllocationSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drflac_oggbs</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>allocationSize</name> <operator>+=</operator> <name>oggbsAllocationSize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drflac_zero_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oggbs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oggbs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>init</name><operator>.</operator><name>container</name></name> <operator>==</operator> <name>drflac_container_ogg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>oggbs</name><operator>.</operator><name>onRead</name></name> <operator>=</operator> <name>onRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>.</operator><name>onSeek</name></name> <operator>=</operator> <name>onSeek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>.</operator><name>currentBytePos</name></name> <operator>=</operator> <name><name>init</name><operator>.</operator><name>oggFirstBytePos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>.</operator><name>firstBytePos</name></name> <operator>=</operator> <name><name>init</name><operator>.</operator><name>oggFirstBytePos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>.</operator><name>serialNumber</name></name> <operator>=</operator> <name><name>init</name><operator>.</operator><name>oggSerial</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>.</operator><name>bosPageHeader</name></name> <operator>=</operator> <name><name>init</name><operator>.</operator><name>oggBosHeader</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>.</operator><name>bytesRemainingInPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>firstFramePos</name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>seektablePos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>seektableSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>init</name><operator>.</operator><name>hasMetadataBlocks</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_read_proc</name></type> <name>onReadOverride</name> <init>= <expr><name>onRead</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_seek_proc</name></type> <name>onSeekOverride</name> <init>= <expr><name>onSeek</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserDataOverride</name> <init>= <expr><name>pUserData</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>init</name><operator>.</operator><name>container</name></name> <operator>==</operator> <name>drflac_container_ogg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>onReadOverride</name> <operator>=</operator> <name>drflac__on_read_ogg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>onSeekOverride</name> <operator>=</operator> <name>drflac__on_seek_ogg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pUserDataOverride</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>oggbs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_and_decode_metadata</name><argument_list>(<argument><expr><name>onReadOverride</name></expr></argument>, <argument><expr><name>onSeekOverride</name></expr></argument>, <argument><expr><name>onMeta</name></expr></argument>, <argument><expr><name>pUserDataOverride</name></expr></argument>, <argument><expr><name>pUserDataMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>firstFramePos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seektablePos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seektableSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>allocationSize</name> <operator>+=</operator> <name>seektableSize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <operator>(</operator><name>drflac</name><operator>*</operator><operator>)</operator><call><name>DRFLAC_MALLOC</name><argument_list>(<argument><expr><name>allocationSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac__init_from_info</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pDecodedSamples</name></name> <operator>=</operator> <operator>(</operator><name>drflac_int32</name><operator>*</operator><operator>)</operator><call><name>drflac_align</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>pExtraData</name></name></expr></argument>, <argument><expr><name>DRFLAC_MAX_SIMD_VECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>init</name><operator>.</operator><name>container</name></name> <operator>==</operator> <name>drflac_container_ogg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_oggbs</name><modifier>*</modifier></type> <name>pInternalOggbs</name> <init>= <expr><operator>(</operator><name>drflac_oggbs</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint8</name><operator>*</operator><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>pDecodedSamples</name></name> <operator>+</operator> <name>decodedSamplesAllocationSize</name> <operator>+</operator> <name>seektableSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pInternalOggbs</name> <operator>=</operator> <name>oggbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>onRead</name></name> <operator>=</operator> <name>drflac__on_read_ogg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>onSeek</name></name> <operator>=</operator> <name>drflac__on_seek_ogg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pInternalOggbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>_oggbs</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pInternalOggbs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>firstFramePos</name></name> <operator>=</operator> <name>firstFramePos</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>init</name><operator>.</operator><name>container</name></name> <operator>==</operator> <name>drflac_container_ogg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>seekpointCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>seektablePos</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>seekpointCount</name></name> <operator>=</operator> <name>seektableSize</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name></name> <operator>=</operator> <operator>(</operator><name>drflac_seekpoint</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint8</name><operator>*</operator><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>pDecodedSamples</name></name> <operator>+</operator> <name>decodedSamplesAllocationSize</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>seektablePos</name></expr></argument>, <argument><expr><name>drflac_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>onRead</name></name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>pUserData</name></name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name></name></expr></argument>, <argument><expr><name>seektableSize</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>seektableSize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>iSeekpoint</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>iSeekpoint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iSeekpoint</name> <operator>&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>seekpointCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iSeekpoint</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name><index>[<expr><name>iSeekpoint</name></expr>]</index></name><operator>.</operator><name>firstSample</name> <operator>=</operator> <call><name>drflac__be2host_64</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name><index>[<expr><name>iSeekpoint</name></expr>]</index></name><operator>.</operator><name>firstSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name><index>[<expr><name>iSeekpoint</name></expr>]</index></name><operator>.</operator><name>frameOffset</name> <operator>=</operator> <call><name>drflac__be2host_64</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name><index>[<expr><name>iSeekpoint</name></expr>]</index></name><operator>.</operator><name>frameOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name><index>[<expr><name>iSeekpoint</name></expr>]</index></name><operator>.</operator><name>sampleCount</name> <operator>=</operator> <call><name>drflac__be2host_16</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name><index>[<expr><name>iSeekpoint</name></expr>]</index></name><operator>.</operator><name>sampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>seekpointCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>firstFramePos</name></name></expr></argument>, <argument><expr><name>drflac_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>pSeekpoints</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>seekpointCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>init</name><operator>.</operator><name>hasStreamInfoBlock</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name><name>init</name><operator>.</operator><name>firstFrameHeader</name></name></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_result</name></type> <name>result</name> <init>= <expr><call><name>drflac__decode_flac_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DRFLAC_CRC_MISMATCH</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_next_flac_frame_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pFlac</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>drflac__on_read_stdio</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>bufferOut</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>fread</name><argument_list>(<argument><expr><name>bufferOut</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>, <argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__on_seek_stdio</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>fseek</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>origin</name> <operator>==</operator> <name>drflac_seek_origin_current</name><operator>)</operator></expr> ?</condition><then> <expr><name>SEEK_CUR</name></expr> </then><else>: <expr><name>SEEK_SET</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FILE</name><modifier>*</modifier></type> <name>drflac__fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>pFile</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>fopen_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>pFile</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>pFile</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>drflac__fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <call><name>drflac_open</name><argument_list>(<argument><expr><name>drflac__on_read_stdio</name></expr></argument>, <argument><expr><name>drflac__on_seek_stdio</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pFlac</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_file_with_metadata</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>pFile</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>drflac__fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <call><name>drflac_open_with_metadata_private</name><argument_list>(<argument><expr><name>drflac__on_read_stdio</name></expr></argument>, <argument><expr><name>drflac__on_seek_stdio</name></expr></argument>, <argument><expr><name>onMeta</name></expr></argument>, <argument><expr><name>drflac_container_unknown</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pFlac</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pFlac</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>drflac__on_read_memory</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>bufferOut</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac__memory_stream</name><modifier>*</modifier></type> <name>memoryStream</name> <init>= <expr><operator>(</operator><name>drflac__memory_stream</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRemaining</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>memoryStream</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name><name>memoryStream</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>&gt;=</operator> <name><name>memoryStream</name><operator>-&gt;</operator><name>currentReadPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytesRemaining</name> <operator>=</operator> <name><name>memoryStream</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>-</operator> <name><name>memoryStream</name><operator>-&gt;</operator><name>currentReadPos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesToRead</name> <operator>&gt;</operator> <name>bytesRemaining</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytesToRead</name> <operator>=</operator> <name>bytesRemaining</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drflac_copy_memory</name><argument_list>(<argument><expr><name>bufferOut</name></expr></argument>, <argument><expr><name><name>memoryStream</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>memoryStream</name><operator>-&gt;</operator><name>currentReadPos</name></name></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStream</name><operator>-&gt;</operator><name>currentReadPos</name></name> <operator>+=</operator> <name>bytesToRead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bytesToRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drflac_bool32</name></type> <name>drflac__on_seek_memory</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac__memory_stream</name><modifier>*</modifier></type> <name>memoryStream</name> <init>= <expr><operator>(</operator><name>drflac__memory_stream</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>memoryStream</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <operator>(</operator><name>drflac_int64</name><operator>)</operator><name><name>memoryStream</name><operator>-&gt;</operator><name>dataSize</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>origin</name> <operator>==</operator> <name>drflac_seek_origin_current</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>memoryStream</name><operator>-&gt;</operator><name>currentReadPos</name></name> <operator>+</operator> <name>offset</name> <operator>&lt;=</operator> <name><name>memoryStream</name><operator>-&gt;</operator><name>dataSize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>memoryStream</name><operator>-&gt;</operator><name>currentReadPos</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>offset</name> <operator>&lt;=</operator> <name><name>memoryStream</name><operator>-&gt;</operator><name>dataSize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>memoryStream</name><operator>-&gt;</operator><name>currentReadPos</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac__memory_stream</name></type> <name>memoryStream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>memoryStream</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStream</name><operator>.</operator><name>dataSize</name></name> <operator>=</operator> <name>dataSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStream</name><operator>.</operator><name>currentReadPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <call><name>drflac_open</name><argument_list>(<argument><expr><name>drflac__on_read_memory</name></expr></argument>, <argument><expr><name>drflac__on_seek_memory</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memoryStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>memoryStream</name></name> <operator>=</operator> <name>memoryStream</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drflac_container_ogg</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_oggbs</name><modifier>*</modifier></type> <name>oggbs</name> <init>= <expr><operator>(</operator><name>drflac_oggbs</name><operator>*</operator><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>_oggbs</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>memoryStream</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>memoryStream</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>pFlac</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_memory_with_metadata</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac__memory_stream</name></type> <name>memoryStream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>memoryStream</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStream</name><operator>.</operator><name>dataSize</name></name> <operator>=</operator> <name>dataSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStream</name><operator>.</operator><name>currentReadPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <call><name>drflac_open_with_metadata_private</name><argument_list>(<argument><expr><name>drflac__on_read_memory</name></expr></argument>, <argument><expr><name>drflac__on_seek_memory</name></expr></argument>, <argument><expr><name>onMeta</name></expr></argument>, <argument><expr><name>drflac_container_unknown</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memoryStream</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>memoryStream</name></name> <operator>=</operator> <name>memoryStream</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drflac_container_ogg</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_oggbs</name><modifier>*</modifier></type> <name>oggbs</name> <init>= <expr><operator>(</operator><name>drflac_oggbs</name><operator>*</operator><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>_oggbs</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oggbs</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>memoryStream</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pFlac</name><operator>-&gt;</operator><name>memoryStream</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>pFlac</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drflac_open_with_metadata_private</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>drflac_container_unknown</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_relaxed</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drflac_container</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drflac_open_with_metadata_private</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_with_metadata</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drflac_open_with_metadata_private</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>onMeta</name></expr></argument>, <argument><expr><name>drflac_container_unknown</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac</name><modifier>*</modifier></type> <name>drflac_open_with_metadata_relaxed</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drflac_meta_proc</name></type> <name>onMeta</name></decl></parameter>, <parameter><decl><type><name>drflac_container</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drflac_open_with_metadata_private</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>onMeta</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drflac_close</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>onRead</name></name> <operator>==</operator> <name>drflac__on_read_stdio</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drflac_container_ogg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_oggbs</name><modifier>*</modifier></type> <name>oggbs</name> <init>= <expr><operator>(</operator><name>drflac_oggbs</name><operator>*</operator><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>_oggbs</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>onRead</name></name> <operator>==</operator> <name>drflac__on_read_ogg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oggbs</name><operator>-&gt;</operator><name>onRead</name></name> <operator>==</operator> <name>drflac__on_read_stdio</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name><name>oggbs</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>drflac_uint64</name></type> <name>drflac__read_s32__misaligned</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>bufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channelCount</name> <init>= <expr><call><name>drflac__get_channel_count_from_channel_assignment</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>samplesRead</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name>samplesToRead</name> <operator>&lt;</operator> <name>channelCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>samplesToRead</name> <operator>&lt;=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalSamplesInFrame</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>blockSize</name></name> <operator>*</operator> <name>channelCount</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>samplesReadFromFrameSoFar</name> <init>= <expr><name>totalSamplesInFrame</name> <operator>-</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>channelIndex</name> <init>= <expr><name>samplesReadFromFrameSoFar</name> <operator>%</operator> <name>channelCount</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>nextSampleInFrame</name> <init>= <expr><name>samplesReadFromFrameSoFar</name> <operator>/</operator> <name>channelCount</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decodedSample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>DRFLAC_CHANNEL_ASSIGNMENT_LEFT_SIDE</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>channelIndex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>decodedSample</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pDecodedSamples</name><index>[<expr><name>nextSampleInFrame</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pDecodedSamples</name><index>[<expr><name>nextSampleInFrame</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>pDecodedSamples</name><index>[<expr><name>nextSampleInFrame</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>decodedSample</name> <operator>=</operator> <name>left</name> <operator>-</operator> <name>side</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_CHANNEL_ASSIGNMENT_RIGHT_SIDE</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>channelIndex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pDecodedSamples</name><index>[<expr><name>nextSampleInFrame</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>pDecodedSamples</name><index>[<expr><name>nextSampleInFrame</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>decodedSample</name> <operator>=</operator> <name>side</name> <operator>+</operator> <name>right</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>decodedSample</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pDecodedSamples</name><index>[<expr><name>nextSampleInFrame</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_CHANNEL_ASSIGNMENT_MID_SIDE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelIndex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pDecodedSamples</name><index>[<expr><name>nextSampleInFrame</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>side</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>pDecodedSamples</name><index>[<expr><name>nextSampleInFrame</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>mid</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>decodedSample</name> <operator>=</operator> <operator>(</operator><name>mid</name> <operator>+</operator> <name>side</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>pDecodedSamples</name><index>[<expr><name>nextSampleInFrame</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>side</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pDecodedSamples</name><index>[<expr><name>nextSampleInFrame</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>mid</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>decodedSample</name> <operator>=</operator> <operator>(</operator><name>mid</name> <operator>-</operator> <name>side</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_CHANNEL_ASSIGNMENT_INDEPENDENT</name></expr>:</case>

<default>default:</default>

<block>{<block_content>

<expr_stmt><expr><name>decodedSample</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pDecodedSamples</name><index>[<expr><name>nextSampleInFrame</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>channelIndex</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>decodedSample</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>decodedSample</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bufferOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bufferOut</name><operator>++</operator> <operator>=</operator> <name>decodedSample</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samplesRead</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>samplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_uint64</name></type> <name>drflac_read_s32</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>bufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>samplesRead</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>samplesToRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bufferOut</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__seek_forward_by_samples</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_and_decode_next_flac_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channelCount</name> <init>= <expr><call><name>drflac__get_channel_count_from_channel_assignment</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalSamplesInFrame</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>blockSize</name></name> <operator>*</operator> <name>channelCount</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>samplesReadFromFrameSoFar</name> <init>= <expr><name>totalSamplesInFrame</name> <operator>-</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>misalignedSampleCount</name> <init>= <expr><name>samplesReadFromFrameSoFar</name> <operator>%</operator> <name>channelCount</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>alignedSampleCountPerChannel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>firstAlignedSampleInFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>unusedBitsPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>alignedSamplesRead</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>misalignedSampleCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>misalignedSamplesRead</name> <init>= <expr><call><name>drflac__read_s32__misaligned</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>misalignedSampleCount</name></expr></argument>, <argument><expr><name>bufferOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>samplesRead</name> <operator>+=</operator> <name>misalignedSamplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesReadFromFrameSoFar</name> <operator>+=</operator> <name>misalignedSamplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bufferOut</name> <operator>+=</operator> <name>misalignedSamplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>misalignedSamplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>+=</operator> <name>misalignedSamplesRead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>alignedSampleCountPerChannel</name> <operator>=</operator> <name>samplesToRead</name> <operator>/</operator> <name>channelCount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alignedSampleCountPerChannel</name> <operator>&gt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>/</operator> <name>channelCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>alignedSampleCountPerChannel</name> <operator>=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>/</operator> <name>channelCount</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>firstAlignedSampleInFrame</name> <operator>=</operator> <name>samplesReadFromFrameSoFar</name> <operator>/</operator> <name>channelCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>unusedBitsPerSample</name> <operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>DRFLAC_CHANNEL_ASSIGNMENT_LEFT_SIDE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples0</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pDecodedSamples</name> <operator>+</operator> <name>firstAlignedSampleInFrame</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples1</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pDecodedSamples</name> <operator>+</operator> <name>firstAlignedSampleInFrame</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>alignedSampleCountPerChannel</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pDecodedSamples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pDecodedSamples1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name>left</name> <operator>-</operator> <name>side</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bufferOut</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufferOut</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_CHANNEL_ASSIGNMENT_RIGHT_SIDE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples0</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pDecodedSamples</name> <operator>+</operator> <name>firstAlignedSampleInFrame</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples1</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pDecodedSamples</name> <operator>+</operator> <name>firstAlignedSampleInFrame</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>alignedSampleCountPerChannel</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pDecodedSamples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pDecodedSamples1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name>right</name> <operator>+</operator> <name>side</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bufferOut</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufferOut</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_CHANNEL_ASSIGNMENT_MID_SIDE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples0</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pDecodedSamples</name> <operator>+</operator> <name>firstAlignedSampleInFrame</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples1</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pDecodedSamples</name> <operator>+</operator> <name>firstAlignedSampleInFrame</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>alignedSampleCountPerChannel</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pDecodedSamples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pDecodedSamples1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>mid</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufferOut</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>mid</name> <operator>+</operator> <name>side</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>unusedBitsPerSample</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufferOut</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>mid</name> <operator>-</operator> <name>side</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>unusedBitsPerSample</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_CHANNEL_ASSIGNMENT_INDEPENDENT</name></expr>:</case>

<default>default:</default>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples0</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pDecodedSamples</name> <operator>+</operator> <name>firstAlignedSampleInFrame</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples1</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pDecodedSamples</name> <operator>+</operator> <name>firstAlignedSampleInFrame</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>alignedSampleCountPerChannel</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bufferOut</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pDecodedSamples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufferOut</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name><name>pDecodedSamples1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>alignedSampleCountPerChannel</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>channelCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bufferOut</name><index>[<expr><operator>(</operator><name>i</name><operator>*</operator><name>channelCount</name><operator>)</operator><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drflac_int32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>pDecodedSamples</name><index>[<expr><name>firstAlignedSampleInFrame</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>alignedSamplesRead</name> <operator>=</operator> <name>alignedSampleCountPerChannel</name> <operator>*</operator> <name>channelCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesRead</name> <operator>+=</operator> <name>alignedSamplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesReadFromFrameSoFar</name> <operator>+=</operator> <name>alignedSamplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bufferOut</name> <operator>+=</operator> <name>alignedSamplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>alignedSamplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>+=</operator> <name>alignedSamplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>-=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>alignedSamplesRead</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>excessSamplesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesToRead</name> <operator>&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>excessSamplesRead</name> <operator>=</operator> <call><name>drflac__read_s32__misaligned</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>bufferOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>excessSamplesRead</name> <operator>=</operator> <call><name>drflac__read_s32__misaligned</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name></expr></argument>, <argument><expr><name>bufferOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>samplesRead</name> <operator>+=</operator> <name>excessSamplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesReadFromFrameSoFar</name> <operator>+=</operator> <name>excessSamplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bufferOut</name> <operator>+=</operator> <name>excessSamplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>excessSamplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>+=</operator> <name>excessSamplesRead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>samplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_uint64</name></type> <name>drflac_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4996</name><name>)</name></cpp:pragma> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wdeprecated-declarations"</cpp:literal></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>drflac_read_s32</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>framesToRead</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>drflac_uint64</name></type> <name>drflac_read_s16</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drflac_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalSamplesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4996</name><name>)</name></cpp:pragma> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wdeprecated-declarations"</cpp:literal></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name><name>samples32</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>samplesJustRead</name> <init>= <expr><call><name>drflac_read_s32</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">4096</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4096</literal></expr> </then><else>: <expr><name>samplesToRead</name></expr></else></ternary></expr></argument>, <argument><expr><name>samples32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesJustRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samplesJustRead</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pBufferOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drflac_int16</name><operator>)</operator><operator>(</operator><name><name>samples32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesJustRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesJustRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesJustRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_uint64</name></type> <name>drflac_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>drflac_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalPCMFramesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>framesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>iFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name><name>samples32</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>framesJustRead</name> <init>= <expr><call><name>drflac_read_pcm_frames_s32</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>framesToRead</name> <operator>&gt;</operator> <literal type="number">4096</literal><operator>/</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4096</literal><operator>/</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><name>framesToRead</name></expr></else></ternary></expr></argument>, <argument><expr><name>samples32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>framesJustRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>iFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iFrame</name> <operator>&lt;</operator> <name>framesJustRead</name></expr>;</condition> <incr><expr><operator>++</operator><name>iFrame</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>iChannel</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>iChannel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iChannel</name> <operator>&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iChannel</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>iSample</name> <init>= <expr><name>iFrame</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <name>iChannel</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pBufferOut</name><index>[<expr><name>iSample</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drflac_int16</name><operator>)</operator><operator>(</operator><name><name>samples32</name><index>[<expr><name>iSample</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>totalPCMFramesRead</name> <operator>+=</operator> <name>framesJustRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>framesToRead</name> <operator>-=</operator> <name>framesJustRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>framesJustRead</name> <operator>*</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalPCMFramesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_uint64</name></type> <name>drflac_read_f32</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalSamplesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4996</name><name>)</name></cpp:pragma> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wdeprecated-declarations"</cpp:literal></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name><name>samples32</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>samplesJustRead</name> <init>= <expr><call><name>drflac_read_s32</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">4096</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4096</literal></expr> </then><else>: <expr><name>samplesToRead</name></expr></else></ternary></expr></argument>, <argument><expr><name>samples32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesJustRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samplesJustRead</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pBufferOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>samples32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">2147483648.0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesJustRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesJustRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesJustRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static DRFLAC_INLINE void drflac_read_pcm_frames_f32__decode_left_side__reference(drflac* pFlac, drflac_uint64 frameCount, drflac_int32 unusedBitsPerSample, const drflac_int32* pInputSamples0, const drflac_int32* pInputSamples1, float* pOutputSamples)

{

drflac_uint64 i;

for (i = 0; i &lt; frameCount; ++i) {

int left = pInputSamples0[i] &lt;&lt; (unusedBitsPerSample + pFlac-&gt;currentFrame.subframes[0].wastedBitsPerSample);

int side = pInputSamples1[i] &lt;&lt; (unusedBitsPerSample + pFlac-&gt;currentFrame.subframes[1].wastedBitsPerSample);

int right = left - side;

pOutputSamples[i*2+0] = (float)(left / 2147483648.0);

pOutputSamples[i*2+1] = (float)(right / 2147483648.0);

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac_read_pcm_frames_f32__decode_left_side__scalar</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>unusedBitsPerSample</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOutputSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>frameCount4</name> <init>= <expr><name>frameCount</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>factor</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <literal type="number">2147483648.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>shift0</name> <init>= <expr><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>shift1</name> <init>= <expr><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount4</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>left0</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>left1</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>left2</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>left3</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>side0</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>side1</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>side2</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>side3</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>right0</name> <init>= <expr><name>left0</name> <operator>-</operator> <name>side0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>right1</name> <init>= <expr><name>left1</name> <operator>-</operator> <name>side1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>right2</name> <init>= <expr><name>left2</name> <operator>-</operator> <name>side2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>right3</name> <init>= <expr><name>left3</name> <operator>-</operator> <name>side3</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>left0</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>right0</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>left1</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>right1</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>left2</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>right2</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>left3</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>right3</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>frameCount4</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name>left</name> <operator>-</operator> <name>side</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>left</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>right</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac_read_pcm_frames_f32__decode_left_side__sse2</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>unusedBitsPerSample</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOutputSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>frameCount4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>&lt;=</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frameCount4</name> <operator>=</operator> <name>frameCount</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>factor</name> <operator>=</operator> <call><name>_mm_set1_ps</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">8388608.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift0</name> <operator>=</operator> <operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>shift1</name> <operator>=</operator> <operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount4</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>inputSample0</name> <init>= <expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><name>pInputSamples0</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>inputSample1</name> <init>= <expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><name>pInputSamples1</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>left</name> <init>= <expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>inputSample0</name></expr></argument>, <argument><expr><name>shift0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>side</name> <init>= <expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>inputSample1</name></expr></argument>, <argument><expr><name>shift1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>right</name> <init>= <expr><call><name>_mm_sub_epi32</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>side</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>leftf</name> <init>= <expr><call><name>_mm_mul_ps</name><argument_list>(<argument><expr><call><name>_mm_cvtepi32_ps</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>rightf</name> <init>= <expr><call><name>_mm_mul_ps</name><argument_list>(<argument><expr><call><name>_mm_cvtepi32_ps</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>frameCount4</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name>left</name> <operator>-</operator> <name>side</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>left</name> <operator>/</operator> <literal type="number">8388608.0f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>right</name> <operator>/</operator> <literal type="number">8388608.0f</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac_read_pcm_frames_f32__decode_left_side</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>unusedBitsPerSample</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOutputSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>drflac__gIsSSE2Supported</name> <operator>&amp;&amp;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drflac_read_pcm_frames_f32__decode_left_side__sse2</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>unusedBitsPerSample</name></expr></argument>, <argument><expr><name>pInputSamples0</name></expr></argument>, <argument><expr><name>pInputSamples1</name></expr></argument>, <argument><expr><name>pOutputSamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

drflac_read_pcm_frames_f32__decode_left_side__reference(pFlac, frameCount, unusedBitsPerSample, pInputSamples0, pInputSamples1, pOutputSamples);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>drflac_read_pcm_frames_f32__decode_left_side__scalar</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>unusedBitsPerSample</name></expr></argument>, <argument><expr><name>pInputSamples0</name></expr></argument>, <argument><expr><name>pInputSamples1</name></expr></argument>, <argument><expr><name>pOutputSamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static DRFLAC_INLINE void drflac_read_pcm_frames_f32__decode_right_side__reference(drflac* pFlac, drflac_uint64 frameCount, drflac_int32 unusedBitsPerSample, const drflac_int32* pInputSamples0, const drflac_int32* pInputSamples1, float* pOutputSamples)

{

drflac_uint64 i;

for (i = 0; i &lt; frameCount; ++i) {

int side = pInputSamples0[i] &lt;&lt; (unusedBitsPerSample + pFlac-&gt;currentFrame.subframes[0].wastedBitsPerSample);

int right = pInputSamples1[i] &lt;&lt; (unusedBitsPerSample + pFlac-&gt;currentFrame.subframes[1].wastedBitsPerSample);

int left = right + side;

pOutputSamples[i*2+0] = (float)(left / 2147483648.0);

pOutputSamples[i*2+1] = (float)(right / 2147483648.0);

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac_read_pcm_frames_f32__decode_right_side__scalar</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>unusedBitsPerSample</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOutputSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>frameCount4</name> <init>= <expr><name>frameCount</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>factor</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <literal type="number">2147483648.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>shift0</name> <init>= <expr><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>shift1</name> <init>= <expr><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount4</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>side0</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>side1</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>side2</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>side3</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>right0</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>right1</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>right2</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>right3</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>left0</name> <init>= <expr><name>right0</name> <operator>+</operator> <name>side0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>left1</name> <init>= <expr><name>right1</name> <operator>+</operator> <name>side1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>left2</name> <init>= <expr><name>right2</name> <operator>+</operator> <name>side2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>left3</name> <init>= <expr><name>right3</name> <operator>+</operator> <name>side3</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>left0</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>right0</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>left1</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>right1</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>left2</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>right2</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>left3</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>right3</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>frameCount4</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name>right</name> <operator>+</operator> <name>side</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>left</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>right</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac_read_pcm_frames_f32__decode_right_side__sse2</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>unusedBitsPerSample</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOutputSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>frameCount4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>&lt;=</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frameCount4</name> <operator>=</operator> <name>frameCount</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>factor</name> <operator>=</operator> <call><name>_mm_set1_ps</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">8388608.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift0</name> <operator>=</operator> <operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>shift1</name> <operator>=</operator> <operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount4</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>inputSample0</name> <init>= <expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><name>pInputSamples0</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>inputSample1</name> <init>= <expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><name>pInputSamples1</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>side</name> <init>= <expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>inputSample0</name></expr></argument>, <argument><expr><name>shift0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>right</name> <init>= <expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>inputSample1</name></expr></argument>, <argument><expr><name>shift1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>left</name> <init>= <expr><call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>side</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>leftf</name> <init>= <expr><call><name>_mm_mul_ps</name><argument_list>(<argument><expr><call><name>_mm_cvtepi32_ps</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>rightf</name> <init>= <expr><call><name>_mm_mul_ps</name><argument_list>(<argument><expr><call><name>_mm_cvtepi32_ps</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>frameCount4</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name>right</name> <operator>+</operator> <name>side</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>left</name> <operator>/</operator> <literal type="number">8388608.0f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>right</name> <operator>/</operator> <literal type="number">8388608.0f</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac_read_pcm_frames_f32__decode_right_side</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>unusedBitsPerSample</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOutputSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>drflac__gIsSSE2Supported</name> <operator>&amp;&amp;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drflac_read_pcm_frames_f32__decode_right_side__sse2</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>unusedBitsPerSample</name></expr></argument>, <argument><expr><name>pInputSamples0</name></expr></argument>, <argument><expr><name>pInputSamples1</name></expr></argument>, <argument><expr><name>pOutputSamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

drflac_read_pcm_frames_f32__decode_right_side__reference(pFlac, frameCount, unusedBitsPerSample, pInputSamples0, pInputSamples1, pOutputSamples);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>drflac_read_pcm_frames_f32__decode_right_side__scalar</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>unusedBitsPerSample</name></expr></argument>, <argument><expr><name>pInputSamples0</name></expr></argument>, <argument><expr><name>pInputSamples1</name></expr></argument>, <argument><expr><name>pOutputSamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static DRFLAC_INLINE void drflac_read_pcm_frames_f32__decode_mid_side__reference(drflac* pFlac, drflac_uint64 frameCount, drflac_int32 unusedBitsPerSample, const drflac_int32* pInputSamples0, const drflac_int32* pInputSamples1, float* pOutputSamples)

{

for (drflac_uint64 i = 0; i &lt; frameCount; ++i) {

int mid = pInputSamples0[i] &lt;&lt; pFlac-&gt;currentFrame.subframes[0].wastedBitsPerSample;

int side = pInputSamples1[i] &lt;&lt; pFlac-&gt;currentFrame.subframes[1].wastedBitsPerSample;

mid = (((drflac_uint32)mid) &lt;&lt; 1) | (side &amp; 0x01);

pOutputSamples[i*2+0] = (float)((((mid + side) &gt;&gt; 1) &lt;&lt; (unusedBitsPerSample)) / 2147483648.0);

pOutputSamples[i*2+1] = (float)((((mid - side) &gt;&gt; 1) &lt;&lt; (unusedBitsPerSample)) / 2147483648.0);

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac_read_pcm_frames_f32__decode_mid_side__scalar</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>unusedBitsPerSample</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOutputSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>frameCount4</name> <init>= <expr><name>frameCount</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>factor</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <literal type="number">2147483648.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name>unusedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount4</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp0L</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp1L</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp2L</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp3L</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp0R</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp1R</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp2R</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp3R</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mid0</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mid1</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mid2</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mid3</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side0</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side1</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side2</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side3</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mid0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>mid0</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side0</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mid1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>mid1</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side1</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mid2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>mid2</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side2</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mid3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>mid3</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side3</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0L</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid0</name> <operator>+</operator> <name>side0</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1L</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid1</name> <operator>+</operator> <name>side1</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2L</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid2</name> <operator>+</operator> <name>side2</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3L</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid3</name> <operator>+</operator> <name>side3</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0R</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid0</name> <operator>-</operator> <name>side0</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1R</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid1</name> <operator>-</operator> <name>side1</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2R</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid2</name> <operator>-</operator> <name>side2</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3R</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid3</name> <operator>-</operator> <name>side3</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp0L</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp0R</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp1L</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp1R</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp2L</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp2R</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp3L</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp3R</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount4</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp0L</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp1L</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp2L</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp3L</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp0R</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp1R</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp2R</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp3R</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mid0</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mid1</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mid2</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mid3</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side0</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side1</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side2</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side3</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mid0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>mid0</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side0</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mid1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>mid1</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side1</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mid2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>mid2</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side2</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mid3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>mid3</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side3</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0L</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid0</name> <operator>+</operator> <name>side0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1L</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid1</name> <operator>+</operator> <name>side1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2L</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid2</name> <operator>+</operator> <name>side2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3L</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid3</name> <operator>+</operator> <name>side3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0R</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid0</name> <operator>-</operator> <name>side0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1R</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid1</name> <operator>-</operator> <name>side1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2R</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid2</name> <operator>-</operator> <name>side2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3R</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mid3</name> <operator>-</operator> <name>side3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp0L</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp0R</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp1L</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp1R</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp2L</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp2R</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp3L</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>temp3R</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>frameCount4</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>mid</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>mid</name> <operator>+</operator> <name>side</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>unusedBitsPerSample</name><operator>)</operator> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>mid</name> <operator>-</operator> <name>side</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>unusedBitsPerSample</name><operator>)</operator> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac_read_pcm_frames_f32__decode_mid_side__sse2</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>unusedBitsPerSample</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOutputSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>frameCount4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>factor128</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drflac_assert</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>&lt;=</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frameCount4</name> <operator>=</operator> <name>frameCount</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>factor</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">8388608.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>factor128</name> <operator>=</operator> <call><name>_mm_set1_ps</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">8388608.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>unusedBitsPerSample</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount4</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>tempL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>tempR</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>leftf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>rightf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>inputSample0</name> <init>= <expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><name>pInputSamples0</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>inputSample1</name> <init>= <expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><name>pInputSamples1</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>mid</name> <init>= <expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>inputSample0</name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>side</name> <init>= <expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>inputSample1</name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(<argument><expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>side</name></expr></argument>, <argument><expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempL</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><name>side</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempR</name> <operator>=</operator> <call><name>_mm_sub_epi32</name><argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><name>side</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempL</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>tempL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>tempL</name></expr></argument>, <argument><expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x80000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempR</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>tempR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>tempR</name></expr></argument>, <argument><expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x80000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>leftf</name> <operator>=</operator> <call><name>_mm_mul_ps</name><argument_list>(<argument><expr><call><name>_mm_cvtepi32_ps</name><argument_list>(<argument><expr><name>tempL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>factor128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rightf</name> <operator>=</operator> <call><name>_mm_mul_ps</name><argument_list>(<argument><expr><call><name>_mm_cvtepi32_ps</name><argument_list>(<argument><expr><name>tempR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>factor128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>frameCount4</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>mid</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>mid</name> <operator>+</operator> <name>side</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>mid</name> <operator>-</operator> <name>side</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount4</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>inputSample0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>inputSample1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>mid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>side</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>tempL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>tempR</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>leftf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>rightf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>inputSample0</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><name>pInputSamples0</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inputSample1</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><name>pInputSamples1</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>inputSample0</name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>side</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>inputSample1</name></expr></argument>, <argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(<argument><expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>side</name></expr></argument>, <argument><expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempL</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><name>side</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempR</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><call><name>_mm_sub_epi32</name><argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><name>side</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>leftf</name> <operator>=</operator> <call><name>_mm_mul_ps</name><argument_list>(<argument><expr><call><name>_mm_cvtepi32_ps</name><argument_list>(<argument><expr><name>tempL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>factor128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rightf</name> <operator>=</operator> <call><name>_mm_mul_ps</name><argument_list>(<argument><expr><call><name>_mm_cvtepi32_ps</name><argument_list>(<argument><expr><name>tempR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>factor128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>leftf</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rightf</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>frameCount4</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>drflac_uint32</name><operator>)</operator><name>mid</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>side</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>mid</name> <operator>+</operator> <name>side</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>mid</name> <operator>-</operator> <name>side</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac_read_pcm_frames_f32__decode_mid_side</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>unusedBitsPerSample</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOutputSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>drflac__gIsSSE2Supported</name> <operator>&amp;&amp;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drflac_read_pcm_frames_f32__decode_mid_side__sse2</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>unusedBitsPerSample</name></expr></argument>, <argument><expr><name>pInputSamples0</name></expr></argument>, <argument><expr><name>pInputSamples1</name></expr></argument>, <argument><expr><name>pOutputSamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

drflac_read_pcm_frames_f32__decode_mid_side__reference(pFlac, frameCount, unusedBitsPerSample, pInputSamples0, pInputSamples1, pOutputSamples);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>drflac_read_pcm_frames_f32__decode_mid_side__scalar</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>unusedBitsPerSample</name></expr></argument>, <argument><expr><name>pInputSamples0</name></expr></argument>, <argument><expr><name>pInputSamples1</name></expr></argument>, <argument><expr><name>pOutputSamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static DRFLAC_INLINE void drflac_read_pcm_frames_f32__decode_independent_stereo__reference(drflac* pFlac, drflac_uint64 frameCount, drflac_int32 unusedBitsPerSample, const drflac_int32* pInputSamples0, const drflac_int32* pInputSamples1, float* pOutputSamples)

{

for (drflac_uint64 i = 0; i &lt; frameCount; ++i) {

pOutputSamples[i*2+0] = (float)((pInputSamples0[i] &lt;&lt; (unusedBitsPerSample + pFlac-&gt;currentFrame.subframes[0].wastedBitsPerSample)) / 2147483648.0);

pOutputSamples[i*2+1] = (float)((pInputSamples1[i] &lt;&lt; (unusedBitsPerSample + pFlac-&gt;currentFrame.subframes[1].wastedBitsPerSample)) / 2147483648.0);

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac_read_pcm_frames_f32__decode_independent_stereo__scalar</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>unusedBitsPerSample</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOutputSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>frameCount4</name> <init>= <expr><name>frameCount</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>factor</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <literal type="number">2147483648.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift0</name> <init>= <expr><operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift1</name> <init>= <expr><operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount4</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tempL0</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempL1</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempL2</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempL3</name> <init>= <expr><name><name>pInputSamples0</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempR0</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempR1</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempR2</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempR3</name> <init>= <expr><name><name>pInputSamples1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>tempL0</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>tempR0</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>tempL1</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>tempR1</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>tempL2</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>tempR2</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>tempL3</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>tempR3</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>frameCount4</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>pInputSamples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name><operator>)</operator> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>pInputSamples1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name><operator>)</operator> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac_read_pcm_frames_f32__decode_independent_stereo__sse2</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>unusedBitsPerSample</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOutputSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>frameCount4</name> <init>= <expr><name>frameCount</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>factor</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">8388608.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>factor128</name> <init>= <expr><call><name>_mm_set1_ps</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">8388608.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift0</name> <init>= <expr><operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift1</name> <init>= <expr><operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount4</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>inputSample0</name> <init>= <expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><name>pInputSamples0</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>inputSample1</name> <init>= <expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><name>pInputSamples1</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>i32L</name> <init>= <expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>inputSample0</name></expr></argument>, <argument><expr><name>shift0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>i32R</name> <init>= <expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>inputSample1</name></expr></argument>, <argument><expr><name>shift1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>f32L</name> <init>= <expr><call><name>_mm_mul_ps</name><argument_list>(<argument><expr><call><name>_mm_cvtepi32_ps</name><argument_list>(<argument><expr><name>i32L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>factor128</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128</name></type> <name>f32R</name> <init>= <expr><call><name>_mm_mul_ps</name><argument_list>(<argument><expr><call><name>_mm_cvtepi32_ps</name><argument_list>(<argument><expr><name>i32R</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>factor128</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f32L</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f32R</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f32L</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f32R</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f32L</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f32R</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f32L</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f32R</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>frameCount4</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>pInputSamples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift0</name><operator>)</operator> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOutputSamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>pInputSamples1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift1</name><operator>)</operator> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DRFLAC_INLINE</name> <name>void</name></type> <name>drflac_read_pcm_frames_f32__decode_independent_stereo</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>drflac_int32</name></type> <name>unusedBitsPerSample</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pInputSamples1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOutputSamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_SUPPORT_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>drflac__gIsSSE2Supported</name> <operator>&amp;&amp;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drflac_read_pcm_frames_f32__decode_independent_stereo__sse2</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>unusedBitsPerSample</name></expr></argument>, <argument><expr><name>pInputSamples0</name></expr></argument>, <argument><expr><name>pInputSamples1</name></expr></argument>, <argument><expr><name>pOutputSamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

drflac_read_pcm_frames_f32__decode_independent_stereo__reference(pFlac, frameCount, unusedBitsPerSample, pInputSamples0, pInputSamples1, pOutputSamples);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>drflac_read_pcm_frames_f32__decode_independent_stereo__scalar</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>unusedBitsPerSample</name></expr></argument>, <argument><expr><name>pInputSamples0</name></expr></argument>, <argument><expr><name>pInputSamples1</name></expr></argument>, <argument><expr><name>pOutputSamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>drflac_uint64</name></type> <name>drflac_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>framesRead</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>framesToRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pBufferOut</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drflac__seek_forward_by_pcm_frames</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>framesToRead</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>framesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>framesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drflac__read_and_decode_next_flac_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channelCount</name> <init>= <expr><call><name>drflac__get_channel_count_from_channel_assignment</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalFramesInPacket</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>blockSize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>framesReadFromPacketSoFar</name> <init>= <expr><name>totalFramesInPacket</name> <operator>-</operator> <operator>(</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name><operator>/</operator><name>channelCount</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>iFirstPCMFrame</name> <init>= <expr><name>framesReadFromPacketSoFar</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>unusedBitsPerSample</name> <init>= <expr><literal type="number">32</literal> <operator>-</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>frameCountThisIteration</name> <init>= <expr><name>framesToRead</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>samplesReadThisIteration</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frameCountThisIteration</name> <operator>&gt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>/</operator> <name>channelCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frameCountThisIteration</name> <operator>=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>/</operator> <name>channelCount</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelCount</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples0</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pDecodedSamples</name> <operator>+</operator> <name>iFirstPCMFrame</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drflac_int32</name><modifier>*</modifier></type> <name>pDecodedSamples1</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pDecodedSamples</name> <operator>+</operator> <name>iFirstPCMFrame</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>DRFLAC_CHANNEL_ASSIGNMENT_LEFT_SIDE</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac_read_pcm_frames_f32__decode_left_side</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>frameCountThisIteration</name></expr></argument>, <argument><expr><name>unusedBitsPerSample</name></expr></argument>, <argument><expr><name>pDecodedSamples0</name></expr></argument>, <argument><expr><name>pDecodedSamples1</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_CHANNEL_ASSIGNMENT_RIGHT_SIDE</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac_read_pcm_frames_f32__decode_right_side</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>frameCountThisIteration</name></expr></argument>, <argument><expr><name>unusedBitsPerSample</name></expr></argument>, <argument><expr><name>pDecodedSamples0</name></expr></argument>, <argument><expr><name>pDecodedSamples1</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_CHANNEL_ASSIGNMENT_MID_SIDE</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac_read_pcm_frames_f32__decode_mid_side</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>frameCountThisIteration</name></expr></argument>, <argument><expr><name>unusedBitsPerSample</name></expr></argument>, <argument><expr><name>pDecodedSamples0</name></expr></argument>, <argument><expr><name>pDecodedSamples1</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>DRFLAC_CHANNEL_ASSIGNMENT_INDEPENDENT</name></expr>:</case>

<default>default:</default>

<block>{<block_content>

<expr_stmt><expr><call><name>drflac_read_pcm_frames_f32__decode_independent_stereo</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>frameCountThisIteration</name></expr></argument>, <argument><expr><name>unusedBitsPerSample</name></expr></argument>, <argument><expr><name>pDecodedSamples0</name></expr></argument>, <argument><expr><name>pDecodedSamples1</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frameCountThisIteration</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>channelCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pBufferOut</name><index>[<expr><operator>(</operator><name>i</name><operator>*</operator><name>channelCount</name><operator>)</operator><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>pDecodedSamples</name><index>[<expr><name>iFirstPCMFrame</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>unusedBitsPerSample</name> <operator>+</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>subframes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>wastedBitsPerSample</name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2147483648.0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>samplesReadThisIteration</name> <operator>=</operator> <name>frameCountThisIteration</name> <operator>*</operator> <name>channelCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>framesRead</name> <operator>+=</operator> <name>frameCountThisIteration</name></expr>;</expr_stmt>

<expr_stmt><expr><name>framesReadFromPacketSoFar</name> <operator>+=</operator> <name>frameCountThisIteration</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesReadThisIteration</name></expr>;</expr_stmt>

<expr_stmt><expr><name>framesToRead</name> <operator>-=</operator> <name>frameCountThisIteration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>+=</operator> <name>samplesReadThisIteration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>-=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>samplesReadThisIteration</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>framesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_bool32</name></type> <name>drflac_seek_to_sample</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>sampleIndex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>firstFramePos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleIndex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>drflac__seek_to_first_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_bool32</name></type> <name>wasSuccessful</name> <init>= <expr><name>DRFLAC_FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleIndex</name> <operator>&gt;=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sampleIndex</name> <operator>=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>totalSampleCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleIndex</name> <operator>&gt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><name>sampleIndex</name> <operator>-</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>&gt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>=</operator> <name>sampleIndex</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>offsetAbs</name> <init>= <expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>-</operator> <name>sampleIndex</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>currentFrameSampleCount</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>blockSize</name></name> <operator>*</operator> <call><name>drflac__get_channel_count_from_channel_assignment</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>currentFrameSamplesConsumed</name> <init>= <expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><name>currentFrameSampleCount</name> <operator>-</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>currentFrameSamplesConsumed</name> <operator>&gt;</operator> <name>offsetAbs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>+=</operator> <name>offsetAbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>=</operator> <name>sampleIndex</name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drflac_container_ogg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>wasSuccessful</name> <operator>=</operator> <call><name>drflac_ogg__seek_to_sample</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>sampleIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>wasSuccessful</name> <operator>=</operator> <call><name>drflac__seek_to_sample__seek_table</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>sampleIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wasSuccessful</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wasSuccessful</name> <operator>=</operator> <call><name>drflac__seek_to_sample__brute_force</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>sampleIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>=</operator> <name>sampleIndex</name></expr>;</expr_stmt>

<return>return <expr><name>wasSuccessful</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>drflac_bool32</name></type> <name>drflac_seek_to_pcm_frame</name><parameter_list>(<parameter><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name></type> <name>pcmFrameIndex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>firstFramePos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmFrameIndex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>drflac__seek_to_first_frame</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_bool32</name></type> <name>wasSuccessful</name> <init>= <expr><name>DRFLAC_FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmFrameIndex</name> <operator>&gt;=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>totalPCMFrameCount</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pcmFrameIndex</name> <operator>=</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>totalPCMFrameCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmFrameIndex</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><name>pcmFrameIndex</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>&gt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>=</operator> <name>pcmFrameIndex</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>offsetAbs</name> <init>= <expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>-</operator> <name>pcmFrameIndex</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>currentFrameSampleCount</name> <init>= <expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>blockSize</name></name> <operator>*</operator> <call><name>drflac__get_channel_count_from_channel_assignment</name><argument_list>(<argument><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>header</name><operator>.</operator><name>channelAssignment</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint32</name></type> <name>currentFrameSamplesConsumed</name> <init>= <expr><operator>(</operator><name>drflac_uint32</name><operator>)</operator><operator>(</operator><name>currentFrameSampleCount</name> <operator>-</operator> <name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>currentFrameSamplesConsumed</name> <operator>&gt;</operator> <name>offsetAbs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentFrame</name><operator>.</operator><name>samplesRemaining</name></name> <operator>+=</operator> <name>offsetAbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>=</operator> <name>pcmFrameIndex</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pFlac</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drflac_container_ogg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>wasSuccessful</name> <operator>=</operator> <call><name>drflac_ogg__seek_to_sample</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>pcmFrameIndex</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>wasSuccessful</name> <operator>=</operator> <call><name>drflac__seek_to_sample__seek_table</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>pcmFrameIndex</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wasSuccessful</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wasSuccessful</name> <operator>=</operator> <call><name>drflac__seek_to_sample__brute_force</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>pcmFrameIndex</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pFlac</name><operator>-&gt;</operator><name>currentSample</name></name> <operator>=</operator> <name>pcmFrameIndex</name><operator>*</operator><name><name>pFlac</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<return>return <expr><name>wasSuccessful</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SIZE_MAX</name></cpp:macro> <cpp:value>SIZE_MAX</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRFLAC_64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SIZE_MAX</name></cpp:macro> <cpp:value>((drflac_uint64)0xFFFFFFFFFFFFFFFF)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_SIZE_MAX</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_DEFINE_FULL_READ_AND_CLOSE</name><parameter_list>(<parameter><type><name>extension</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static type* drflac__full_read_and_close_ ##extension (drflac* pFlac, unsigned int* channelsOut, unsigned int* sampleRateOut, drflac_uint64* totalPCMFrameCountOut){ type* pSampleData = NULL; drflac_uint64 totalPCMFrameCount; drflac_assert(pFlac != NULL); totalPCMFrameCount = pFlac-&gt;totalPCMFrameCount; if (totalPCMFrameCount == 0) { type buffer[4096]; drflac_uint64 pcmFramesRead; size_t sampleDataBufferSize = sizeof(buffer); pSampleData = (type*)DRFLAC_MALLOC(sampleDataBufferSize); if (pSampleData == NULL) { goto on_error; } while ((pcmFramesRead = (drflac_uint64)drflac_read_pcm_frames_##extension(pFlac, sizeof(buffer)/sizeof(buffer[0])/pFlac-&gt;channels, buffer)) &gt; 0) { if (((totalPCMFrameCount + pcmFramesRead) * pFlac-&gt;channels * sizeof(type)) &gt; sampleDataBufferSize) { type* pNewSampleData; sampleDataBufferSize *= 2; pNewSampleData = (type*)DRFLAC_REALLOC(pSampleData, sampleDataBufferSize); if (pNewSampleData == NULL) { DRFLAC_FREE(pSampleData); goto on_error; } pSampleData = pNewSampleData; } drflac_copy_memory(pSampleData + (totalPCMFrameCount*pFlac-&gt;channels), buffer, (size_t)(pcmFramesRead*pFlac-&gt;channels*sizeof(type))); totalPCMFrameCount += pcmFramesRead; } drflac_zero_memory(pSampleData + (totalPCMFrameCount*pFlac-&gt;channels), (size_t)(sampleDataBufferSize - totalPCMFrameCount*pFlac-&gt;channels*sizeof(type))); } else { drflac_uint64 dataSize = totalPCMFrameCount*pFlac-&gt;channels*sizeof(type); if (dataSize &gt; DRFLAC_SIZE_MAX) { goto on_error; } pSampleData = (type*)DRFLAC_MALLOC((size_t)dataSize); if (pSampleData == NULL) { goto on_error; } totalPCMFrameCount = drflac_read_pcm_frames_##extension(pFlac, pFlac-&gt;totalPCMFrameCount, pSampleData); } if (sampleRateOut) *sampleRateOut = pFlac-&gt;sampleRate; if (channelsOut) *channelsOut = pFlac-&gt;channels; if (totalPCMFrameCountOut) *totalPCMFrameCountOut = totalPCMFrameCount; drflac_close(pFlac); return pSampleData; on_error: drflac_close(pFlac); return NULL; }</cpp:value></cpp:define>

<macro><name>DRFLAC_DEFINE_FULL_READ_AND_CLOSE</name><argument_list>(<argument>s32</argument>, <argument>drflac_int32</argument>)</argument_list></macro>

<macro><name>DRFLAC_DEFINE_FULL_READ_AND_CLOSE</name><argument_list>(<argument>s16</argument>, <argument>drflac_int16</argument>)</argument_list></macro>

<macro><name>DRFLAC_DEFINE_FULL_READ_AND_CLOSE</name><argument_list>(<argument>f32</argument>, <argument>float</argument>)</argument_list></macro>

<function><type><name>drflac_int32</name><modifier>*</modifier></type> <name>drflac_open_and_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalPCMFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalPCMFrameCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <call><name>drflac_open</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drflac__full_read_and_close_s32</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>channelsOut</name></expr></argument>, <argument><expr><name>sampleRateOut</name></expr></argument>, <argument><expr><name>totalPCMFrameCountOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_int32</name><modifier>*</modifier></type> <name>drflac_open_and_decode_s32</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pResult</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>drflac_open_and_read_pcm_frames_s32</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <name>totalPCMFrameCount</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pResult</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_int16</name><modifier>*</modifier></type> <name>drflac_open_and_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalPCMFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalPCMFrameCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <call><name>drflac_open</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drflac__full_read_and_close_s16</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>channelsOut</name></expr></argument>, <argument><expr><name>sampleRateOut</name></expr></argument>, <argument><expr><name>totalPCMFrameCountOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_int16</name><modifier>*</modifier></type> <name>drflac_open_and_decode_s16</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int16</name><modifier>*</modifier></type> <name>pResult</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>drflac_open_and_read_pcm_frames_s16</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <name>totalPCMFrameCount</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pResult</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drflac_open_and_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalPCMFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalPCMFrameCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <call><name>drflac_open</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drflac__full_read_and_close_f32</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>channelsOut</name></expr></argument>, <argument><expr><name>sampleRateOut</name></expr></argument>, <argument><expr><name>totalPCMFrameCountOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drflac_open_and_decode_f32</name><parameter_list>(<parameter><decl><type><name>drflac_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drflac_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>pResult</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>drflac_open_and_read_pcm_frames_f32</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <name>totalPCMFrameCount</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pResult</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_FLAC_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>drflac_int32</name><modifier>*</modifier></type> <name>drflac_open_file_and_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalPCMFrameCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalPCMFrameCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <call><name>drflac_open_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drflac__full_read_and_close_s32</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_int32</name><modifier>*</modifier></type> <name>drflac_open_and_decode_file_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pResult</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>drflac_open_file_and_read_pcm_frames_s32</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <name>totalPCMFrameCount</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pResult</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_int16</name><modifier>*</modifier></type> <name>drflac_open_file_and_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalPCMFrameCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalPCMFrameCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <call><name>drflac_open_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drflac__full_read_and_close_s16</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_int16</name><modifier>*</modifier></type> <name>drflac_open_and_decode_file_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int16</name><modifier>*</modifier></type> <name>pResult</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>drflac_open_file_and_read_pcm_frames_s16</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <name>totalPCMFrameCount</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pResult</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drflac_open_file_and_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalPCMFrameCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalPCMFrameCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <call><name>drflac_open_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drflac__full_read_and_close_f32</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drflac_open_and_decode_file_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>pResult</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>drflac_open_file_and_read_pcm_frames_f32</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <name>totalPCMFrameCount</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pResult</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>drflac_int32</name><modifier>*</modifier></type> <name>drflac_open_memory_and_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalPCMFrameCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalPCMFrameCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <call><name>drflac_open_memory</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drflac__full_read_and_close_s32</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_int32</name><modifier>*</modifier></type> <name>drflac_open_and_decode_memory_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int32</name><modifier>*</modifier></type> <name>pResult</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>drflac_open_memory_and_read_pcm_frames_s32</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <name>totalPCMFrameCount</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pResult</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_int16</name><modifier>*</modifier></type> <name>drflac_open_memory_and_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalPCMFrameCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalPCMFrameCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <call><name>drflac_open_memory</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drflac__full_read_and_close_s16</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drflac_int16</name><modifier>*</modifier></type> <name>drflac_open_and_decode_memory_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_int16</name><modifier>*</modifier></type> <name>pResult</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>drflac_open_memory_and_read_pcm_frames_s16</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <name>totalPCMFrameCount</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pResult</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drflac_open_memory_and_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalPCMFrameCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac</name><modifier>*</modifier></type> <name>pFlac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalPCMFrameCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalPCMFrameCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pFlac</name> <operator>=</operator> <call><name>drflac_open_memory</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFlac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drflac__full_read_and_close_f32</name><argument_list>(<argument><expr><name>pFlac</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drflac_open_and_decode_memory_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drflac_uint64</name><modifier>*</modifier></type> <name>totalSampleCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>pResult</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>drflac_open_memory_and_read_pcm_frames_f32</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalPCMFrameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCountOut</name> <operator>=</operator> <name>totalPCMFrameCount</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pResult</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drflac_free</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSampleDataReturnedByOpenAndDecode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DRFLAC_FREE</name><argument_list>(<argument><expr><name>pSampleDataReturnedByOpenAndDecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drflac_init_vorbis_comment_iterator</name><parameter_list>(<parameter><decl><type><name>drflac_vorbis_comment_iterator</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>commentCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pComments</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>countRemaining</name></name> <operator>=</operator> <name>commentCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRunningData</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pComments</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>drflac_next_vorbis_comment</name><parameter_list>(<parameter><decl><type><name>drflac_vorbis_comment_iterator</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name><modifier>*</modifier></type> <name>pCommentLengthOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_int32</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pComment</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pCommentLengthOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pCommentLengthOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>countRemaining</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pRunningData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>drflac__le2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name><name>pIter</name><operator>-&gt;</operator><name>pRunningData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRunningData</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pComment</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pRunningData</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRunningData</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>countRemaining</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pCommentLengthOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pCommentLengthOut</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pComment</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drflac_init_cuesheet_track_iterator</name><parameter_list>(<parameter><decl><type><name>drflac_cuesheet_track_iterator</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>drflac_uint32</name></type> <name>trackCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pTrackData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>countRemaining</name></name> <operator>=</operator> <name>trackCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRunningData</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pTrackData</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>drflac_bool32</name></type> <name>drflac_next_cuesheet_track</name><parameter_list>(<parameter><decl><type><name>drflac_cuesheet_track_iterator</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>drflac_cuesheet_track</name><modifier>*</modifier></type> <name>pCuesheetTrack</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drflac_cuesheet_track</name></type> <name>cuesheetTrack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pRunningData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>offsetHi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drflac_uint64</name></type> <name>offsetLo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>countRemaining</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pRunningData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRFLAC_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pRunningData</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pRunningData</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offsetHi</name> <operator>=</operator> <call><name>drflac__be2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offsetLo</name> <operator>=</operator> <call><name>drflac__be2host_32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>drflac_uint32</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cuesheetTrack</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offsetLo</name> <operator>|</operator> <operator>(</operator><name>offsetHi</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cuesheetTrack</name><operator>.</operator><name>trackNumber</name></name> <operator>=</operator> <name><name>pRunningData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drflac_copy_memory</name><argument_list>(<argument><expr><name><name>cuesheetTrack</name><operator>.</operator><name>ISRC</name></name></expr></argument>, <argument><expr><name>pRunningData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cuesheetTrack</name><operator>.</operator><name>ISRC</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cuesheetTrack</name><operator>.</operator><name>isAudio</name></name> <operator>=</operator> <operator>(</operator><name><name>pRunningData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cuesheetTrack</name><operator>.</operator><name>preEmphasis</name></name> <operator>=</operator> <operator>(</operator><name><name>pRunningData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cuesheetTrack</name><operator>.</operator><name>indexCount</name></name> <operator>=</operator> <name><name>pRunningData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cuesheetTrack</name><operator>.</operator><name>pIndexPoints</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>drflac_cuesheet_track_index</name><operator>*</operator><operator>)</operator><name>pRunningData</name></expr>;</expr_stmt> <expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <name><name>cuesheetTrack</name><operator>.</operator><name>indexCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drflac_cuesheet_track_index</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRunningData</name></name> <operator>=</operator> <name>pRunningData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>countRemaining</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pCuesheetTrack</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pCuesheetTrack</name> <operator>=</operator> <name>cuesheetTrack</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DRFLAC_TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
