<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\raudio.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RL_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_MALLOC</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(sz)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RL_CALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_CALLOC</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>calloc(n,sz)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RL_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_FREE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(p)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_STDBOOL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><enum>enum <block>{ <decl><name>false</name></decl>, <decl><name>true</name></decl> }</block></enum></type> <name>bool</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_STDBOOL_H</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>Wave</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Wave</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>rAudioBuffer</name></name></type> <name>rAudioBuffer</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AudioStream</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>rAudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt> 

}</block></struct></type> <name>AudioStream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Sound</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioStream</name></type> <name>stream</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Sound</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Music</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>ctxType</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctxData</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>loopCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioStream</name></type> <name>stream</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Music</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>InitAudioDevice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>CloseAudioDevice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>bool</name></type> <name>IsAudioDeviceReady</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>SetMasterVolume</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>Wave</name></type> <name>LoadWave</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>Sound</name></type> <name>LoadSound</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>Sound</name></type> <name>LoadSoundFromWave</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>UpdateSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samplesCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>UnloadWave</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>UnloadSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>ExportWave</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>ExportWaveAsCode</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>PlaySound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>StopSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>PauseSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>ResumeSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>PlaySoundMulti</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>StopSoundMulti</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>int</name></type> <name>GetSoundsPlaying</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>bool</name></type> <name>IsSoundPlaying</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>SetSoundVolume</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>SetSoundPitch</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pitch</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>WaveFormat</name><parameter_list>(<parameter><decl><type><name>Wave</name> <modifier>*</modifier></type><name>wave</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sampleSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>Wave</name></type> <name>WaveCopy</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>WaveCrop</name><parameter_list>(<parameter><decl><type><name>Wave</name> <modifier>*</modifier></type><name>wave</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initSample</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>finalSample</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>float</name> <modifier>*</modifier></type><name>GetWaveData</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>Music</name></type> <name>LoadMusicStream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>UnloadMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>PlayMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>UpdateMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>StopMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>PauseMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>ResumeMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>bool</name></type> <name>IsMusicPlaying</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>SetMusicVolume</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>SetMusicPitch</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pitch</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>SetMusicLoopCount</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>float</name></type> <name>GetMusicTimeLength</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>float</name></type> <name>GetMusicTimePlayed</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>AudioStream</name></type> <name>InitAudioStream</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>UpdateAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samplesCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>CloseAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>bool</name></type> <name>IsAudioStreamProcessed</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>PlayAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>PauseAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>ResumeAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>bool</name></type> <name>IsAudioStreamPlaying</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>StopAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>SetAudioStreamVolume</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>SetAudioStreamPitch</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pitch</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>SetAudioStreamBufferSizeDefault</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
