<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\camera.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAMERA_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>Vector2</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

}</block></struct></type> <name>Vector2</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Vector3</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>z</name></decl>;</decl_stmt>

}</block></struct></type> <name>Vector3</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Camera3D</name> <block>{

<decl_stmt><decl><type><name>Vector3</name></type> <name>position</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>target</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>up</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>fovy</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Camera3D</name>;</typedef>

<typedef>typedef <type><name>Camera3D</name></type> <name>Camera</name>;</typedef> 

<typedef>typedef <type><enum>enum <block>{

<decl><name>CAMERA_CUSTOM</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CAMERA_FREE</name></decl>,

<decl><name>CAMERA_ORBITAL</name></decl>,

<decl><name>CAMERA_FIRST_PERSON</name></decl>,

<decl><name>CAMERA_THIRD_PERSON</name></decl>

}</block></enum></type> <name>CameraMode</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>CAMERA_PERSPECTIVE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CAMERA_ORTHOGRAPHIC</name></decl>

}</block></enum></type> <name>CameraType</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAMERA_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>SetCameraMode</name><parameter_list>(<parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>UpdateCamera</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>SetCameraPanControl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>panKey</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>SetCameraAltControl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>altKey</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>SetCameraSmoothZoomControl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>szoomKey</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>SetCameraMoveControls</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>frontKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backKey</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>rightKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leftKey</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>upKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>downKey</name></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAMERA_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEG2RAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEG2RAD</name></cpp:macro> <cpp:value>(PI/180.0f)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RAD2DEG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAD2DEG</name></cpp:macro> <cpp:value>(180.0f/PI)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_MOUSE_MOVE_SENSITIVITY</name></cpp:macro> <cpp:value>0.003f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name></cpp:macro> <cpp:value>1.5f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_FREE_MOUSE_SENSITIVITY</name></cpp:macro> <cpp:value>0.01f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_FREE_DISTANCE_MIN_CLAMP</name></cpp:macro> <cpp:value>0.3f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_FREE_DISTANCE_MAX_CLAMP</name></cpp:macro> <cpp:value>120.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_FREE_MIN_CLAMP</name></cpp:macro> <cpp:value>85.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_FREE_MAX_CLAMP</name></cpp:macro> <cpp:value>-85.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_FREE_SMOOTH_ZOOM_SENSITIVITY</name></cpp:macro> <cpp:value>0.05f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_FREE_PANNING_DIVIDER</name></cpp:macro> <cpp:value>5.1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_ORBITAL_SPEED</name></cpp:macro> <cpp:value>0.01f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_FIRST_PERSON_FOCUS_DISTANCE</name></cpp:macro> <cpp:value>25.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_FIRST_PERSON_MIN_CLAMP</name></cpp:macro> <cpp:value>89.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_FIRST_PERSON_MAX_CLAMP</name></cpp:macro> <cpp:value>-89.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_FIRST_PERSON_STEP_TRIGONOMETRIC_DIVIDER</name></cpp:macro> <cpp:value>5.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_FIRST_PERSON_STEP_DIVIDER</name></cpp:macro> <cpp:value>30.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_FIRST_PERSON_WAVING_DIVIDER</name></cpp:macro> <cpp:value>200.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_THIRD_PERSON_DISTANCE_CLAMP</name></cpp:macro> <cpp:value>1.2f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_THIRD_PERSON_MIN_CLAMP</name></cpp:macro> <cpp:value>5.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_THIRD_PERSON_MAX_CLAMP</name></cpp:macro> <cpp:value>-85.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_THIRD_PERSON_OFFSET</name></cpp:macro> <cpp:value>(Vector3){ 0.4f, 0.0f, 0.0f }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAYER_MOVEMENT_SENSITIVITY</name></cpp:macro> <cpp:value>20.0f</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>MOVE_FRONT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MOVE_BACK</name></decl>,

<decl><name>MOVE_RIGHT</name></decl>,

<decl><name>MOVE_LEFT</name></decl>,

<decl><name>MOVE_UP</name></decl>,

<decl><name>MOVE_DOWN</name></decl>

}</block></enum></type> <name>CameraMove</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>targetDistance</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>playerEyesPosition</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector2</name></type> <name>angle</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>moveControl</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>smoothZoomControl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>altControl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>panControl</name></decl>;</decl_stmt> 

}</block></struct></type> <name>CameraData</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>CameraData</name></type> <name>CAMERA</name> <init>= <expr><block>{ 

<expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>targetDistance</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>playerEyesPosition</name> <operator>=</operator> <literal type="number">1.85f</literal></expr>,

<expr><operator>.</operator><name>angle</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>moveControl</name> <operator>=</operator> <block>{ <expr><literal type="char">'W'</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'Q'</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>smoothZoomControl</name> <operator>=</operator> <literal type="number">341</literal></expr>,

<expr><operator>.</operator><name>altControl</name> <operator>=</operator> <literal type="number">342</literal></expr>,

<expr><operator>.</operator><name>panControl</name> <operator>=</operator> <literal type="number">2</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAMERA_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EnableCursor</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>DisableCursor</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>IsKeyDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>IsMouseButtonDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetMouseWheelMove</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Vector2</name></type> <name>GetMousePosition</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</return> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>SetCameraMode</name><parameter_list>(<parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector3</name></type> <name>v1</name> <init>= <expr><name><name>camera</name><operator>.</operator><name>position</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>v2</name> <init>= <expr><name><name>camera</name><operator>.</operator><name>target</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><name><name>v2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><name><name>v2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dz</name> <init>= <expr><name><name>v2</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>dx</name><operator>*</operator><name>dx</name> <operator>+</operator> <name>dy</name><operator>*</operator><name>dy</name> <operator>+</operator> <name>dz</name><operator>*</operator><name>dz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>atan2f</name><argument_list>(<argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>atan2f</name><argument_list>(<argument><expr><name>dy</name></expr></argument>, <argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>dx</name><operator>*</operator><name>dx</name> <operator>+</operator> <name>dz</name><operator>*</operator><name>dz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>playerEyesPosition</name></name> <operator>=</operator> <name><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>==</operator> <name>CAMERA_FIRST_PERSON</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>mode</name> <operator>==</operator> <name>CAMERA_THIRD_PERSON</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DisableCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>EnableCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateCamera</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>swingCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>previousMousePosition</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePositionDelta</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePosition</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mouseWheelMove</name> <init>= <expr><call><name>GetMouseWheelMove</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>panKey</name> <init>= <expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>panControl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>altKey</name> <init>= <expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>altControl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>szoomKey</name> <init>= <expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>smoothZoomControl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>direction</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>moveControl</name><index>[<expr><name>MOVE_FRONT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>moveControl</name><index>[<expr><name>MOVE_BACK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>moveControl</name><index>[<expr><name>MOVE_RIGHT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>moveControl</name><index>[<expr><name>MOVE_LEFT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>moveControl</name><index>[<expr><name>MOVE_UP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>,

<macro><name>IsKeyDown</name><argument_list>(<argument>CAMERA.moveControl[MOVE_DOWN]</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>mode</name></name> <operator>!=</operator> <name>CAMERA_CUSTOM</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>mousePositionDelta</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>mousePosition</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>previousMousePosition</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mousePositionDelta</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>mousePosition</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>previousMousePosition</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>previousMousePosition</name> <operator>=</operator> <name>mousePosition</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>mode</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>CAMERA_FREE</name></expr>:</case> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>&lt;</operator> <name>CAMERA_FREE_DISTANCE_MAX_CLAMP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mouseWheelMove</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>-=</operator> <operator>(</operator><name>mouseWheelMove</name><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>&gt;</operator> <name>CAMERA_FREE_DISTANCE_MAX_CLAMP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>=</operator> <name>CAMERA_FREE_DISTANCE_MAX_CLAMP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>==</operator> <name>CAMERA_FREE_DISTANCE_MAX_CLAMP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mouseWheelMove</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>mouseWheelMove</name><operator>*</operator><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>/</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>mouseWheelMove</name><operator>*</operator><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>/</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <name>mouseWheelMove</name><operator>*</operator><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>/</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>mouseWheelMove</name><operator>*</operator><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>/</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>mouseWheelMove</name><operator>*</operator><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>/</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <name>mouseWheelMove</name><operator>*</operator><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>/</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mouseWheelMove</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>-=</operator> <operator>(</operator><name>mouseWheelMove</name><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>&lt;</operator> <name>CAMERA_FREE_DISTANCE_MIN_CLAMP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>=</operator> <name>CAMERA_FREE_DISTANCE_MIN_CLAMP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>==</operator> <name>CAMERA_FREE_DISTANCE_MAX_CLAMP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mouseWheelMove</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>mouseWheelMove</name><operator>*</operator><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>/</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>mouseWheelMove</name><operator>*</operator><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>/</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <name>mouseWheelMove</name><operator>*</operator><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>/</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>mouseWheelMove</name><operator>*</operator><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>/</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>mouseWheelMove</name><operator>*</operator><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>/</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <name>mouseWheelMove</name><operator>*</operator><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>/</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mouseWheelMove</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>-=</operator> <operator>(</operator><name>mouseWheelMove</name><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>&lt;</operator> <name>CAMERA_FREE_DISTANCE_MIN_CLAMP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>=</operator> <name>CAMERA_FREE_DISTANCE_MIN_CLAMP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>panKey</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>altKey</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>szoomKey</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>+=</operator> <operator>(</operator><name><name>mousePositionDelta</name><operator>.</operator><name>y</name></name><operator>*</operator><name>CAMERA_FREE_SMOOTH_ZOOM_SENSITIVITY</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>mousePositionDelta</name><operator>.</operator><name>x</name></name><operator>*</operator><operator>-</operator><name>CAMERA_FREE_MOUSE_SENSITIVITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>mousePositionDelta</name><operator>.</operator><name>y</name></name><operator>*</operator><operator>-</operator><name>CAMERA_FREE_MOUSE_SENSITIVITY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name>CAMERA_FREE_MIN_CLAMP</name><operator>*</operator><name>DEG2RAD</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>CAMERA_FREE_MIN_CLAMP</name><operator>*</operator><name>DEG2RAD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name>CAMERA_FREE_MAX_CLAMP</name><operator>*</operator><name>DEG2RAD</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>CAMERA_FREE_MAX_CLAMP</name><operator>*</operator><name>DEG2RAD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>mousePositionDelta</name><operator>.</operator><name>x</name></name><operator>*</operator><name>CAMERA_FREE_MOUSE_SENSITIVITY</name><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name><name>mousePositionDelta</name><operator>.</operator><name>y</name></name><operator>*</operator><name>CAMERA_FREE_MOUSE_SENSITIVITY</name><operator>)</operator><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name><operator>/</operator><name>CAMERA_FREE_PANNING_DIVIDER</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>mousePositionDelta</name><operator>.</operator><name>y</name></name><operator>*</operator><name>CAMERA_FREE_MOUSE_SENSITIVITY</name><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name><operator>/</operator><name>CAMERA_FREE_PANNING_DIVIDER</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>mousePositionDelta</name><operator>.</operator><name>x</name></name><operator>*</operator><operator>-</operator><name>CAMERA_FREE_MOUSE_SENSITIVITY</name><operator>)</operator><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name><name>mousePositionDelta</name><operator>.</operator><name>y</name></name><operator>*</operator><name>CAMERA_FREE_MOUSE_SENSITIVITY</name><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name><operator>/</operator><name>CAMERA_FREE_PANNING_DIVIDER</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>+</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>-</operator><call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>CAMERA_ORBITAL</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>CAMERA_ORBITAL_SPEED</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>-=</operator> <operator>(</operator><name>mouseWheelMove</name><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>)</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>&lt;</operator> <name>CAMERA_THIRD_PERSON_DISTANCE_CLAMP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>=</operator> <name>CAMERA_THIRD_PERSON_DISTANCE_CLAMP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <literal type="number">0.0f</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>z</name></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>CAMERA_FIRST_PERSON</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_BACK</name></expr>]</index></name> <operator>-</operator>

<call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_FRONT</name></expr>]</index></name> <operator>-</operator>

<call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_LEFT</name></expr>]</index></name> <operator>+</operator>

<call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_RIGHT</name></expr>]</index></name><operator>)</operator><operator>/</operator><name>PLAYER_MOVEMENT_SENSITIVITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <operator>(</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_FRONT</name></expr>]</index></name> <operator>-</operator>

<call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_BACK</name></expr>]</index></name> <operator>+</operator>

<literal type="number">1.0f</literal><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_UP</name></expr>]</index></name> <operator>-</operator> <literal type="number">1.0f</literal><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_DOWN</name></expr>]</index></name><operator>)</operator><operator>/</operator><name>PLAYER_MOVEMENT_SENSITIVITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <operator>(</operator><call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_BACK</name></expr>]</index></name> <operator>-</operator>

<call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_FRONT</name></expr>]</index></name> <operator>+</operator>

<call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_LEFT</name></expr>]</index></name> <operator>-</operator>

<call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_RIGHT</name></expr>]</index></name><operator>)</operator><operator>/</operator><name>PLAYER_MOVEMENT_SENSITIVITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><name><name>mousePositionDelta</name><operator>.</operator><name>x</name></name><operator>*</operator><operator>-</operator><name>CAMERA_MOUSE_MOVE_SENSITIVITY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <operator>(</operator><name><name>mousePositionDelta</name><operator>.</operator><name>y</name></name><operator>*</operator><operator>-</operator><name>CAMERA_MOUSE_MOVE_SENSITIVITY</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name>CAMERA_FIRST_PERSON_MIN_CLAMP</name><operator>*</operator><name>DEG2RAD</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>CAMERA_FIRST_PERSON_MIN_CLAMP</name><operator>*</operator><name>DEG2RAD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name>CAMERA_FIRST_PERSON_MAX_CLAMP</name><operator>*</operator><name>DEG2RAD</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>CAMERA_FIRST_PERSON_MAX_CLAMP</name><operator>*</operator><name>DEG2RAD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Matrix</name></type> <name>translation</name> <init>= <expr><call><name>MatrixTranslate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name><operator>/</operator><name>CAMERA_FREE_PANNING_DIVIDER</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Matrix</name></type> <name>rotation</name> <init>= <macro><name>MatrixRotateXYZ</name><argument_list>(<argument>(Vector3){ PI*<literal type="number">2</literal> - CAMERA.angle.y</argument>, <argument>PI*<literal type="number">2</literal> - CAMERA.angle.x</argument>, <argument><literal type="number">0</literal> }</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Matrix</name></type> <name>transform</name> <init>= <expr><call><name>MatrixMultiply</name><argument_list>(<argument><expr><name>translation</name></expr></argument>, <argument><expr><name>rotation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>transform</name><operator>.</operator><name>m12</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>transform</name><operator>.</operator><name>m13</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>transform</name><operator>.</operator><name>m14</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>direction</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>swingCounter</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>CAMERA</name><operator>.</operator><name>playerEyesPosition</name></name> <operator>-</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>swingCounter</name><operator>/</operator><name>CAMERA_FIRST_PERSON_STEP_TRIGONOMETRIC_DIVIDER</name></expr></argument>)</argument_list></call><operator>/</operator><name>CAMERA_FIRST_PERSON_STEP_DIVIDER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>up</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>swingCounter</name><operator>/</operator><operator>(</operator><name>CAMERA_FIRST_PERSON_STEP_TRIGONOMETRIC_DIVIDER</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>/</operator><name>CAMERA_FIRST_PERSON_WAVING_DIVIDER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>up</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>-</operator><call><name>sinf</name><argument_list>(<argument><expr><name>swingCounter</name><operator>/</operator><operator>(</operator><name>CAMERA_FIRST_PERSON_STEP_TRIGONOMETRIC_DIVIDER</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>/</operator><name>CAMERA_FIRST_PERSON_WAVING_DIVIDER</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>CAMERA_THIRD_PERSON</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_BACK</name></expr>]</index></name> <operator>-</operator>

<call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_FRONT</name></expr>]</index></name> <operator>-</operator>

<call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_LEFT</name></expr>]</index></name> <operator>+</operator>

<call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_RIGHT</name></expr>]</index></name><operator>)</operator><operator>/</operator><name>PLAYER_MOVEMENT_SENSITIVITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <operator>(</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_FRONT</name></expr>]</index></name> <operator>-</operator>

<call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_BACK</name></expr>]</index></name> <operator>+</operator>

<literal type="number">1.0f</literal><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_UP</name></expr>]</index></name> <operator>-</operator> <literal type="number">1.0f</literal><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_DOWN</name></expr>]</index></name><operator>)</operator><operator>/</operator><name>PLAYER_MOVEMENT_SENSITIVITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <operator>(</operator><call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_BACK</name></expr>]</index></name> <operator>-</operator>

<call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_FRONT</name></expr>]</index></name> <operator>+</operator>

<call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_LEFT</name></expr>]</index></name> <operator>-</operator>

<call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>direction</name><index>[<expr><name>MOVE_RIGHT</name></expr>]</index></name><operator>)</operator><operator>/</operator><name>PLAYER_MOVEMENT_SENSITIVITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><name><name>mousePositionDelta</name><operator>.</operator><name>x</name></name><operator>*</operator><operator>-</operator><name>CAMERA_MOUSE_MOVE_SENSITIVITY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <operator>(</operator><name><name>mousePositionDelta</name><operator>.</operator><name>y</name></name><operator>*</operator><operator>-</operator><name>CAMERA_MOUSE_MOVE_SENSITIVITY</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name>CAMERA_THIRD_PERSON_MIN_CLAMP</name><operator>*</operator><name>DEG2RAD</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>CAMERA_THIRD_PERSON_MIN_CLAMP</name><operator>*</operator><name>DEG2RAD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name>CAMERA_THIRD_PERSON_MAX_CLAMP</name><operator>*</operator><name>DEG2RAD</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>CAMERA_THIRD_PERSON_MAX_CLAMP</name><operator>*</operator><name>DEG2RAD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>-=</operator> <operator>(</operator><name>mouseWheelMove</name><operator>*</operator><name>CAMERA_MOUSE_SCROLL_SENSITIVITY</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>&lt;</operator> <name>CAMERA_THIRD_PERSON_DISTANCE_CLAMP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name> <operator>=</operator> <name>CAMERA_THIRD_PERSON_DISTANCE_CLAMP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>z</name></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>CAMERA</name><operator>.</operator><name>targetDistance</name></name><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name><name>CAMERA</name><operator>.</operator><name>angle</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>CAMERA_CUSTOM</name></expr>:</case> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetCameraPanControl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>panKey</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>panControl</name></name> <operator>=</operator> <name>panKey</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetCameraAltControl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>altKey</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>altControl</name></name> <operator>=</operator> <name>altKey</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetCameraSmoothZoomControl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>szoomKey</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>smoothZoomControl</name></name> <operator>=</operator> <name>szoomKey</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetCameraMoveControls</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>frontKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rightKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leftKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>upKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>downKey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>moveControl</name><index>[<expr><name>MOVE_FRONT</name></expr>]</index></name> <operator>=</operator> <name>frontKey</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>moveControl</name><index>[<expr><name>MOVE_BACK</name></expr>]</index></name> <operator>=</operator> <name>backKey</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>moveControl</name><index>[<expr><name>MOVE_RIGHT</name></expr>]</index></name> <operator>=</operator> <name>rightKey</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>moveControl</name><index>[<expr><name>MOVE_LEFT</name></expr>]</index></name> <operator>=</operator> <name>leftKey</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>moveControl</name><index>[<expr><name>MOVE_UP</name></expr>]</index></name> <operator>=</operator> <name>upKey</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CAMERA</name><operator>.</operator><name>moveControl</name><index>[<expr><name>MOVE_DOWN</name></expr>]</index></name> <operator>=</operator> <name>downKey</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
