<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\mac-vth264\encoder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/darray.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-avc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CoreFoundation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;VideoToolbox/VideoToolbox.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;VideoToolbox/VTVideoEncoderList.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreMedia/CoreMedia.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/apple/cfstring-utils.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_LOG</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[VideoToolbox encoder]: " format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_LOG_ENCODER</name><parameter_list>(<parameter><type><name>encoder</name></type></parameter>, <parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[VideoToolbox %s: 'h264']: " format, obs_encoder_get_name(encoder), ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_BLOG</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VT_LOG_ENCODER(enc-&gt;encoder, level, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>double</name></type> <name>NSAppKitVersionNumber</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSAppKitVersionNumber10_8</name></cpp:macro> <cpp:value>1187</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLE_H264_ENC_ID_HW</name></cpp:macro> <cpp:value>"com.apple.videotoolbox.videoencoder.h264.gva"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLE_H264_ENC_ID_SW</name></cpp:macro> <cpp:value>"com.apple.videotoolbox.videoencoder.h264"</cpp:value></cpp:define>

<enum>enum <block>{ <decl><name>kCMFormatDescriptionBridgeError_InvalidParameter_</name> <init>= <expr><operator>-</operator><literal type="number">12712</literal></expr></init></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_appkit10_9_or_greater</name><parameter_list>()</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>floor</name><argument_list>(<argument><expr><name>NSAppKitVersionNumber</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>NSAppKitVersionNumber10_8</name></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>DARRAY</name><argument_list>(<argument>struct vt_encoder {

const char *name;

const char *disp_name;

const char *id;

const char *codec_name;

}</argument>)</argument_list></macro> <name>vt_encoders</name></expr>;</expr_stmt>

<struct>struct <name>vt_h264_encoder</name> <block>{

<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vt_encoder_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>keyint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fps_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fps_den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>limit_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rc_max_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rc_max_bitrate_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bframes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>obs_pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vt_pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>video_colorspace</name></name></type> <name>colorspace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fullrange</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTCompressionSessionRef</name></type> <name>session</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMSimpleQueueRef</name></type> <name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hw_enc</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro> <expr_stmt><expr><name>packet_data</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro> <expr_stmt><expr><name>extra_data</name></expr>;</expr_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_osstatus</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>log_level</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>OSStatus</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFErrorRef</name></type> <name>err</name> <init>= <expr><call><name>CFErrorCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>kCFErrorDomainOSStatus</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>str</name> <init>= <expr><call><name>CFErrorCopyDescription</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c_str</name> <operator>=</operator> <call><name>cfstr_copy_cstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c_str</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VT_BLOG</name><argument_list>(<argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"Error in %s: %s"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>c_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VT_LOG</name><argument_list>(<argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"Error in %s: %s"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>c_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>c_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CFStringRef</name></type> <name>obs_to_vt_profile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>profile</name></expr></argument>, <argument><expr><literal type="string">"baseline"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>kVTProfileLevel_H264_Baseline_AutoLevel</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>profile</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>kVTProfileLevel_H264_Main_AutoLevel</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>profile</name></expr></argument>, <argument><expr><literal type="string">"high"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>kVTProfileLevel_H264_High_AutoLevel</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>kVTProfileLevel_H264_Main_AutoLevel</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CFStringRef</name></type> <name>obs_to_vt_colorspace</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_colorspace</name></name></type> <name>cs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cs</name> <operator>==</operator> <name>VIDEO_CS_709</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>kCVImageBufferYCbCrMatrix_ITU_R_709_2</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>cs</name> <operator>==</operator> <name>VIDEO_CS_601</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>kCVImageBufferYCbCrMatrix_ITU_R_601_4</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_CHECK</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>code = c; if (code) { log_osstatus(LOG_ERROR, enc, #c, code); goto fail; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_CHECK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((code = (x)) != noErr) return code;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>session_set_prop_int</name><parameter_list>(<parameter><decl><type><name>VTCompressionSessionRef</name></type> <name>session</name></decl></parameter>,

<parameter><decl><type><name>CFStringRef</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>n</name> <init>= <expr><call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kCFNumberSInt32Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>code</name> <init>= <expr><call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>code</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>session_set_prop_str</name><parameter_list>(<parameter><decl><type><name>VTCompressionSessionRef</name></type> <name>session</name></decl></parameter>,

<parameter><decl><type><name>CFStringRef</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>s</name> <init>= <expr><call><name>CFStringCreateWithFileSystemRepresentation</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>code</name> <init>= <expr><call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>code</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>session_set_prop</name><parameter_list>(<parameter><decl><type><name>VTCompressionSessionRef</name></type> <name>session</name></decl></parameter>,

<parameter><decl><type><name>CFStringRef</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>CFTypeRef</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>session_set_bitrate</name><parameter_list>(<parameter><decl><type><name>VTCompressionSessionRef</name></type> <name>session</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>new_bitrate</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>limit_bitrate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>max_bitrate</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max_bitrate_window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SESSION_CHECK</name><argument_list>(<argument><expr><call><name>session_set_prop_int</name><argument_list>(

<argument><expr><name>session</name></expr></argument>, <argument><expr><name>kVTCompressionPropertyKey_AverageBitRate</name></expr></argument>,

<argument><expr><name>new_bitrate</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>limit_bitrate</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>cpb_size</name> <init>= <expr><name>max_bitrate</name> <operator>*</operator> <literal type="number">125</literal> <operator>*</operator> <name>max_bitrate_window</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>cf_cpb_size</name> <init>=

<expr><call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kCFNumberIntType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpb_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>cf_cpb_window_s</name> <init>= <expr><call><name>CFNumberCreate</name><argument_list>(

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kCFNumberFloatType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_bitrate_window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFMutableArrayRef</name></type> <name>rate_control</name> <init>= <expr><call><name>CFArrayCreateMutable</name><argument_list>(

<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>kCFTypeArrayCallBacks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFArrayAppendValue</name><argument_list>(<argument><expr><name>rate_control</name></expr></argument>, <argument><expr><name>cf_cpb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFArrayAppendValue</name><argument_list>(<argument><expr><name>rate_control</name></expr></argument>, <argument><expr><name>cf_cpb_window_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>session_set_prop</name><argument_list>(

<argument><expr><name>session</name></expr></argument>, <argument><expr><name>kVTCompressionPropertyKey_DataRateLimits</name></expr></argument>,

<argument><expr><name>rate_control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cf_cpb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cf_cpb_window_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>rate_control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>kVTPropertyNotSupportedErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>log_osstatus</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><literal type="string">"setting DataRateLimits on session"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>noErr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>noErr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>session_set_colorspace</name><parameter_list>(<parameter><decl><type><name>VTCompressionSessionRef</name></type> <name>session</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>video_colorspace</name></name></type> <name>cs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>matrix</name> <init>= <expr><call><name>obs_to_vt_colorspace</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>matrix</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SESSION_CHECK</name><argument_list>(<argument><expr><call><name>session_set_prop</name><argument_list>(

<argument><expr><name>session</name></expr></argument>, <argument><expr><name>kVTCompressionPropertyKey_ColorPrimaries</name></expr></argument>,

<argument><expr><name>kCVImageBufferColorPrimaries_ITU_R_709_2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SESSION_CHECK</name><argument_list>(<argument><expr><call><name>session_set_prop</name><argument_list>(

<argument><expr><name>session</name></expr></argument>, <argument><expr><name>kVTCompressionPropertyKey_TransferFunction</name></expr></argument>,

<argument><expr><name>kCVImageBufferTransferFunction_ITU_R_709_2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SESSION_CHECK</name><argument_list>(<argument><expr><call><name>session_set_prop</name><argument_list>(

<argument><expr><name>session</name></expr></argument>, <argument><expr><name>kVTCompressionPropertyKey_YCbCrMatrix</name></expr></argument>,

<argument><expr><name>matrix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>noErr</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SESSION_CHECK</name></cpp:undef>

<function><type><name>void</name></type> <name>sample_encoded_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>OSStatus</name></type> <name>status</name></decl></parameter>,

<parameter><decl><type><name>VTEncodeInfoFlags</name></type> <name>info_flags</name></decl></parameter>,

<parameter><decl><type><name>CMSampleBufferRef</name></type> <name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>info_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CMSimpleQueueRef</name></type> <name>queue</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>pixbuf</name> <init>= <expr><name>source</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRetain</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CMSimpleQueueEnqueue</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODER_ID</name></cpp:macro> <cpp:value>kVTVideoEncoderSpecification_EncoderID</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_HW_ACCEL</name></cpp:macro> <cpp:value>kVTVideoEncoderSpecification_EnableHardwareAcceleratedVideoEncoder</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUIRE_HW_ACCEL</name></cpp:macro> <cpp:value>kVTVideoEncoderSpecification_RequireHardwareAcceleratedVideoEncoder</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>CFMutableDictionaryRef</name></type>

<name>create_encoder_spec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vt_encoder_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>encoder_spec</name> <init>= <expr><call><name>CFDictionaryCreateMutable</name><argument_list>(

<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryKeyCallBacks</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryValueCallBacks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>id</name> <init>=

<expr><call><name>CFStringCreateWithFileSystemRepresentation</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vt_encoder_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFDictionaryAddValue</name><argument_list>(<argument><expr><name>encoder_spec</name></expr></argument>, <argument><expr><name>ENCODER_ID</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDictionaryAddValue</name><argument_list>(<argument><expr><name>encoder_spec</name></expr></argument>, <argument><expr><name>ENABLE_HW_ACCEL</name></expr></argument>, <argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDictionaryAddValue</name><argument_list>(<argument><expr><name>encoder_spec</name></expr></argument>, <argument><expr><name>REQUIRE_HW_ACCEL</name></expr></argument>, <argument><expr><name>kCFBooleanFalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>encoder_spec</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENCODER_ID</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>REQUIRE_HW_ACCEL</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENABLE_HW_ACCEL</name></cpp:undef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>CFMutableDictionaryRef</name></type>

<name>create_pixbuf_spec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>pixbuf_spec</name> <init>= <expr><call><name>CFDictionaryCreateMutable</name><argument_list>(

<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryKeyCallBacks</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryValueCallBacks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>n</name> <init>=

<expr><call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kCFNumberSInt32Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>vt_pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFDictionaryAddValue</name><argument_list>(<argument><expr><name>pixbuf_spec</name></expr></argument>, <argument><expr><name>kCVPixelBufferPixelFormatTypeKey</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kCFNumberSInt32Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDictionaryAddValue</name><argument_list>(<argument><expr><name>pixbuf_spec</name></expr></argument>, <argument><expr><name>kCVPixelBufferWidthKey</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kCFNumberSInt32Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDictionaryAddValue</name><argument_list>(<argument><expr><name>pixbuf_spec</name></expr></argument>, <argument><expr><name>kCVPixelBufferHeightKey</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pixbuf_spec</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>create_encoder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTCompressionSessionRef</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>encoder_spec</name> <init>= <expr><call><name>create_encoder_spec</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>vt_encoder_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>pixbuf_spec</name> <init>= <expr><call><name>create_pixbuf_spec</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>VTCompressionSessionCreate</name><argument_list>(

<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name>kCMVideoCodecType_H264</name></expr></argument>, <argument><expr><name>encoder_spec</name></expr></argument>, <argument><expr><name>pixbuf_spec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>sample_encoded_callback</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>encoder_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>pixbuf_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CFBooleanRef</name></type> <name>b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>VTSessionCopyProperty</name><argument_list>(

<argument><expr><name>s</name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>noErr</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>hw_enc</name></name> <operator>=</operator> <call><name>CFBooleanGetValue</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VT_BLOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"session created with hardware encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>hw_enc</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>session_set_prop_int</name><argument_list>(

<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration</name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>keyint</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>session_set_prop_int</name><argument_list>(

<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kVTCompressionPropertyKey_MaxKeyFrameInterval</name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>keyint</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>enc</name><operator>-&gt;</operator><name>fps_num</name></name> <operator>/</operator> <name><name>enc</name><operator>-&gt;</operator><name>fps_den</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>session_set_prop_int</name><argument_list>(

<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kVTCompressionPropertyKey_ExpectedFrameRate</name></expr></argument>,

<argument><expr><call><name>ceil</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>enc</name><operator>-&gt;</operator><name>fps_num</name></name> <operator>/</operator> <name><name>enc</name><operator>-&gt;</operator><name>fps_den</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>session_set_prop</name><argument_list>(

<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kVTCompressionPropertyKey_AllowFrameReordering</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>enc</name><operator>-&gt;</operator><name>bframes</name></name></expr> ?</condition><then> <expr><name>kCFBooleanTrue</name></expr> </then><else>: <expr><name>kCFBooleanFalse</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>session_set_prop</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kVTCompressionPropertyKey_RealTime</name></expr></argument>,

<argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>log_osstatus</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>,

<argument><expr><literal type="string">"setting "</literal>

<literal type="string">"kVTCompressionPropertyKey_RealTime, "</literal>

<literal type="string">"frame delay might be increased"</literal></expr></argument>,

<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>session_set_prop</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kVTCompressionPropertyKey_ProfileLevel</name></expr></argument>,

<argument><expr><call><name>obs_to_vt_profile</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>session_set_bitrate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>bitrate</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>limit_bitrate</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>rc_max_bitrate</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>rc_max_bitrate_window</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>session_set_colorspace</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>VTCompressionSessionPrepareToEncodeFrames</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>encoder_spec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>encoder_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pixbuf_spec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>pixbuf_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vt_h264_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VTCompressionSessionInvalidate</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>packet_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>extra_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_encoder_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VT_BLOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"settings:\n"</literal>

<literal type="string">"\tvt_encoder_id %s\n"</literal>

<literal type="string">"\tbitrate: %d (kbps)\n"</literal>

<literal type="string">"\tfps_num: %d\n"</literal>

<literal type="string">"\tfps_den: %d\n"</literal>

<literal type="string">"\twidth: %d\n"</literal>

<literal type="string">"\theight: %d\n"</literal>

<literal type="string">"\tkeyint: %d (s)\n"</literal>

<literal type="string">"\tlimit_bitrate: %s\n"</literal>

<literal type="string">"\trc_max_bitrate: %d (kbps)\n"</literal>

<literal type="string">"\trc_max_bitrate_window: %f (s)\n"</literal>

<literal type="string">"\thw_enc: %s\n"</literal>

<literal type="string">"\tprofile: %s\n"</literal></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>vt_encoder_id</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>bitrate</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fps_num</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fps_den</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>keyint</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>enc</name><operator>-&gt;</operator><name>limit_bitrate</name></name></expr> ?</condition><then> <expr><literal type="string">"on"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>rc_max_bitrate</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>rc_max_bitrate_window</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>enc</name><operator>-&gt;</operator><name>hw_enc</name></name></expr> ?</condition><then> <expr><literal type="string">"on"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name><name>enc</name><operator>-&gt;</operator><name>profile</name></name></expr>

</then><else>: <expr><literal type="string">"default"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vt_h264_video_info</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>video_scale_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>VIDEO_FORMAT_I420</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>obs_pix_fmt</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>vt_pix_fmt</name></name> <operator>=</operator>

<ternary><condition><expr><name><name>enc</name><operator>-&gt;</operator><name>fullrange</name></name></expr>

?</condition><then> <expr><name>kCVPixelFormatType_420YpCbCr8PlanarFullRange</name></expr>

</then><else>: <expr><name>kCVPixelFormatType_420YpCbCr8Planar</name></expr></else></ternary></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>VIDEO_FORMAT_I444</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VT_BLOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"I444 color format not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>obs_pix_fmt</name></name> <operator>=</operator> <name>VIDEO_FORMAT_NV12</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>vt_pix_fmt</name></name> <operator>=</operator>

<ternary><condition><expr><name><name>enc</name><operator>-&gt;</operator><name>fullrange</name></name></expr>

?</condition><then> <expr><name>kCVPixelFormatType_420YpCbCr8BiPlanarFullRange</name></expr>

</then><else>: <expr><name>kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>obs_pix_fmt</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name> <init>= <expr><call><name>obs_encoder_video</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_output_info</name></name> <modifier>*</modifier></type><name>voi</name> <init>= <expr><call><name>video_output_get_info</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>video_scale_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><operator>.</operator><name>format</name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>format</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>fullrange</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>range</name></name> <operator>==</operator> <name>VIDEO_RANGE_FULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vt_h264_video_info</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>obs_encoder_get_width</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>obs_encoder_get_height</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>fps_num</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>fps_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>fps_den</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>fps_den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>keyint</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"keyint_sec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>limit_bitrate</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"limit_bitrate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>rc_max_bitrate</name></name> <operator>=</operator> <call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"max_bitrate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>rc_max_bitrate_window</name></name> <operator>=</operator>

<call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"max_bitrate_window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>bframes</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bframes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vt_h264_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>old_bitrate</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>bitrate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>old_limit_bitrate</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>limit_bitrate</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update_params</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_bitrate</name> <operator>==</operator> <name><name>enc</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>&amp;&amp;</operator>

<name>old_limit_bitrate</name> <operator>==</operator> <name><name>enc</name><operator>-&gt;</operator><name>limit_bitrate</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>code</name> <init>= <expr><call><name>session_set_bitrate</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>bitrate</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>limit_bitrate</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>rc_max_bitrate</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>rc_max_bitrate_window</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VT_BLOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"failed to set bitrate to session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VTSessionCopyProperty</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_AverageBitRate</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>session_bitrate</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFNumberGetValue</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>kCFNumberIntType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>session_bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>session_bitrate</name> <operator>==</operator> <name>old_bitrate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VT_BLOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"failed to update current session "</literal>

<literal type="string">" bitrate from %d-&gt;%d"</literal></expr></argument>,

<argument><expr><name>old_bitrate</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dump_encoder_info</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vt_h264_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vt_encoder_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vt_h264_encoder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>encoder</name></name> <operator>=</operator> <name>encoder</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>vt_encoder_id</name></name> <operator>=</operator> <name>vt_encoder_id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_params</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>CMSimpleQueueCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>create_encoder</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dump_encoder_info</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>enc</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>vt_h264_destroy</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vt_h264_create_hw</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vt_h264_create</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>APPLE_H264_ENC_ID_HW</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vt_h264_create_sw</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vt_h264_create</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>APPLE_H264_ENC_ID_SW</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>annexb_startcode</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>packet_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>darray_push_back_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>packet_put_startcode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>packet_put</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>annexb_startcode</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <name>size</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>convert_block_nals_to_annexb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>,

<parameter><decl><type><name>CMBlockBufferRef</name></type> <name>block</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nal_length_bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>block_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block_buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CMBlockBufferGetDataPointer</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block_size</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>block_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_remaining</name> <init>= <expr><name>block_size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>bytes_remaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nal_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nal_length_bytes</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nal_size</name> <operator>=</operator> <name><name>block_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>nal_length_bytes</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nal_size</name> <operator>=</operator> <call><name>CFSwapInt16BigToHost</name><argument_list>(

<argument><expr><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>block_buf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>nal_length_bytes</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nal_size</name> <operator>=</operator> <call><name>CFSwapInt32BigToHost</name><argument_list>(

<argument><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>block_buf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>bytes_remaining</name> <operator>-=</operator> <name>nal_length_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_buf</name> <operator>+=</operator> <name>nal_length_bytes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_remaining</name> <operator>&lt;</operator> <name>nal_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VT_BLOG</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid nal block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>packet_put_startcode</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>packet_put</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>block_buf</name></expr></argument>, <argument><expr><name>nal_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_remaining</name> <operator>-=</operator> <name>nal_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_buf</name> <operator>+=</operator> <name>nal_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>handle_keyframe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name></decl></parameter>,

<parameter><decl><type><name>CMFormatDescriptionRef</name></type> <name>format_desc</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>param_count</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>extra_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>param_size</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>param_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>CMVideoFormatDescriptionGetH264ParameterSetAtIndex</name><argument_list>(

<argument><expr><name>format_desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>log_osstatus</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>,

<argument><expr><literal type="string">"getting NAL parameter "</literal>

<literal type="string">"at index"</literal></expr></argument>,

<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>packet_put_startcode</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>packet_put</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>param_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>extra_data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>packet_put</name><argument_list>(<argument><expr><name>extra_data</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>convert_sample_to_annexb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>extra_data</name></decl></parameter>,

<parameter><decl><type><name>CMSampleBufferRef</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>keyframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMFormatDescriptionRef</name></type> <name>format_desc</name> <init>=

<expr><call><name>CMSampleBufferGetFormatDescription</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>param_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nal_length_bytes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>CMVideoFormatDescriptionGetH264ParameterSetAtIndex</name><argument_list>(

<argument><expr><name>format_desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nal_length_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>kCMFormatDescriptionBridgeError_InvalidParameter_</name> <operator>||</operator>

<name>code</name> <operator>==</operator> <name>kCMFormatDescriptionError_InvalidParameter</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VT_BLOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"assuming 2 parameter sets "</literal>

<literal type="string">"and 4 byte NAL length header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>param_count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_length_bytes</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>log_osstatus</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>,

<argument><expr><literal type="string">"getting parameter count from sample"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keyframe</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>handle_keyframe</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>format_desc</name></expr></argument>, <argument><expr><name>param_count</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>extra_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>CMBlockBufferRef</name></type> <name>block</name> <init>= <expr><call><name>CMSampleBufferGetDataBuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>convert_block_nals_to_annexb</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>nal_length_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_sample_keyframe</name><parameter_list>(<parameter><decl><type><name>CMSampleBufferRef</name></type> <name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>attachments</name> <init>=

<expr><call><name>CMSampleBufferGetSampleAttachmentsArray</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>attachments</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>attachment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFBooleanRef</name></type> <name>has_dependencies</name></decl>;</decl_stmt>

<expr_stmt><expr><name>attachment</name> <operator>=</operator>

<operator>(</operator><name>CFDictionaryRef</name><operator>)</operator><call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>attachments</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>has_dependencies</name> <operator>=</operator> <operator>(</operator><name>CFBooleanRef</name><operator>)</operator><call><name>CFDictionaryGetValue</name><argument_list>(

<argument><expr><name>attachment</name></expr></argument>, <argument><expr><name>kCMSampleAttachmentKey_DependsOnOthers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>has_dependencies</name> <operator>==</operator> <name>kCFBooleanFalse</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_sample</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>CMSampleBufferRef</name></type> <name>buffer</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>CMTime</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMTime</name></type> <name>pts</name> <init>= <expr><call><name>CMSampleBufferGetPresentationTimeStamp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMTime</name></type> <name>dts</name> <init>= <expr><call><name>CMSampleBufferGetDecodeTimeStamp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>CMTimeMultiplyByFloat64</name><argument_list>(<argument><expr><name>pts</name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>Float64</name><operator>)</operator><name><name>enc</name><operator>-&gt;</operator><name>fps_num</name></name> <operator>/</operator> <name><name>enc</name><operator>-&gt;</operator><name>fps_den</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dts</name> <operator>=</operator> <call><name>CMTimeMultiplyByFloat64</name><argument_list>(<argument><expr><name>dts</name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>Float64</name><operator>)</operator><name><name>enc</name><operator>-&gt;</operator><name>fps_num</name></name> <operator>/</operator> <name><name>enc</name><operator>-&gt;</operator><name>fps_den</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>bframes</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dts</name> <operator>=</operator> <call><name>CMTimeSubtract</name><argument_list>(<argument><expr><name>dts</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>keyframe</name> <init>= <expr><call><name>is_sample_keyframe</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>packet_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>extra_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>extra_data</name><operator>.</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>extra_data</name> <operator>=</operator> <operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>extra_data</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>convert_sample_to_annexb</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>packet_data</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name>extra_data</name></expr></argument>,

<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>keyframe</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBS_ENCODER_VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>CMTimeGetSeconds</name><argument_list>(<argument><expr><name>pts</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>CMTimeGetSeconds</name><argument_list>(<argument><expr><name>dts</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>packet_data</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>packet_data</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>=</operator> <name>keyframe</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>packet_data</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>start</name> <operator>+</operator> <name><name>enc</name><operator>-&gt;</operator><name>packet_data</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>obs_avc_find_startcode</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><operator>(</operator><name>start</name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_NAL_SLICE_IDR</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>OBS_NAL_SLICE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>prev_type</name> <init>= <expr><operator>(</operator><name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_NAL_SLICE_IDR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>OBS_NAL_PRIORITY_HIGHEST</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_NAL_SLICE</name> <operator>&amp;&amp;</operator>

<name>prev_type</name> <operator>!=</operator> <name>OBS_NAL_PRIORITY_DISPOSABLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>OBS_NAL_PRIORITY_HIGH</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>prev_type</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>obs_avc_find_startcode</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>get_cached_pixel_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>CVPixelBufferRef</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferPoolRef</name></type> <name>pool</name> <init>=

<expr><call><name>VTCompressionSessionGetPixelBufferPool</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>kCVReturnError</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>pixbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>CVPixelBufferPoolCreatePixelBuffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pixbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>matrix</name> <init>= <expr><call><name>obs_to_vt_colorspace</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CVBufferSetAttachment</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><name>kCVImageBufferYCbCrMatrixKey</name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>,

<argument><expr><name>kCVAttachmentMode_ShouldPropagate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CVBufferSetAttachment</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><name>kCVImageBufferColorPrimariesKey</name></expr></argument>,

<argument><expr><name>kCVImageBufferColorPrimaries_ITU_R_709_2</name></expr></argument>,

<argument><expr><name>kCVAttachmentMode_ShouldPropagate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CVBufferSetAttachment</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><name>kCVImageBufferTransferFunctionKey</name></expr></argument>,

<argument><expr><name>kCVImageBufferTransferFunction_ITU_R_709_2</name></expr></argument>,

<argument><expr><name>kCVAttachmentMode_ShouldPropagate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>pixbuf</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>fail</name>:</label>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vt_h264_encode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>received_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMTime</name></type> <name>dur</name> <init>= <expr><call><name>CMTimeMake</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fps_den</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fps_num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMTime</name></type> <name>off</name> <init>= <expr><call><name>CMTimeMultiply</name><argument_list>(<argument><expr><name>dur</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMTime</name></type> <name>pts</name> <init>= <expr><call><name>CMTimeMultiply</name><argument_list>(<argument><expr><name>dur</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>pixbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_cached_pixel_buffer</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pixbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VT_BLOG</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to create pixel buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>CVPixelBufferLockBaseAddress</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>CVPixelBufferGetBaseAddressOfPlane</name><argument_list>(

<argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>plane_linesize</name> <init>=

<expr><call><name>CVPixelBufferGetBytesPerRowOfPlane</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>plane_height</name> <init>= <expr><call><name>CVPixelBufferGetHeightOfPlane</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>plane_height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>plane_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>CVPixelBufferUnlockBaseAddress</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STATUS_CHECK</name><argument_list>(<argument><expr><call><name>VTCompressionSessionEncodeFrame</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>,

<argument><expr><name>dur</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CMSampleBufferRef</name></type> <name>buffer</name> <init>=

<expr><operator>(</operator><name>CMSampleBufferRef</name><operator>)</operator><call><name>CMSimpleQueueDequeue</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>received_packet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><call><name>parse_sample</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STATUS_CHECK</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CFNUM_INT</name></cpp:undef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vt_h264_extra_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vt_h264_encoder</name></name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><operator>(</operator>struct <name>vt_h264_encoder</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>extra_data</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>extra_data</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>extra_data</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vt_h264_getname_hw</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"VTH264EncHW"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vt_h264_getname_sw</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"VTH264EncSW"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_VT_ENCODER</name></cpp:macro> <cpp:value>obs_module_text("VTEncoder")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_BITRATE</name></cpp:macro> <cpp:value>obs_module_text("Bitrate")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_USE_MAX_BITRATE</name></cpp:macro> <cpp:value>obs_module_text("UseMaxBitrate")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MAX_BITRATE</name></cpp:macro> <cpp:value>obs_module_text("MaxBitrate")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MAX_BITRATE_WINDOW</name></cpp:macro> <cpp:value>obs_module_text("MaxBitrateWindow")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_KEYINT_SEC</name></cpp:macro> <cpp:value>obs_module_text("KeyframeIntervalSec")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_PROFILE</name></cpp:macro> <cpp:value>obs_module_text("Profile")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_NONE</name></cpp:macro> <cpp:value>obs_module_text("None")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_DEFAULT</name></cpp:macro> <cpp:value>obs_module_text("DefaultEncoder")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_BFRAMES</name></cpp:macro> <cpp:value>obs_module_text("UseBFrames")</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>limit_bitrate_modified</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>use_max_bitrate</name> <init>= <expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"limit_bitrate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"max_bitrate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>use_max_bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"max_bitrate_window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>use_max_bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>vt_h264_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>, <argument><expr><name>TEXT_BITRATE</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument>,

<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_int_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" Kbps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"limit_bitrate"</literal></expr></argument>,

<argument><expr><name>TEXT_USE_MAX_BITRATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>limit_bitrate_modified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"max_bitrate"</literal></expr></argument>, <argument><expr><name>TEXT_MAX_BITRATE</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>,

<argument><expr><literal type="number">10000000</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_int_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" Kbps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_float</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"max_bitrate_window"</literal></expr></argument>,

<argument><expr><name>TEXT_MAX_BITRATE_WINDOW</name></expr></argument>, <argument><expr><literal type="number">0.10f</literal></expr></argument>, <argument><expr><literal type="number">10.0f</literal></expr></argument>, <argument><expr><literal type="number">0.25f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"keyint_sec"</literal></expr></argument>, <argument><expr><name>TEXT_KEYINT_SEC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument>, <argument><expr><name>TEXT_PROFILE</name></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_NONE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"baseline"</literal></expr></argument>, <argument><expr><literal type="string">"baseline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"high"</literal></expr></argument>, <argument><expr><literal type="string">"high"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"bframes"</literal></expr></argument>, <argument><expr><name>TEXT_BFRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vt_h264_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>, <argument><expr><literal type="number">2500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"limit_bitrate"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"max_bitrate"</literal></expr></argument>, <argument><expr><literal type="number">2500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"max_bitrate_window"</literal></expr></argument>, <argument><expr><literal type="number">1.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"keyint_sec"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bframes"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<macro><name>OBS_DECLARE_MODULE</name><argument_list>()</argument_list></macro>

<macro><name>OBS_MODULE_USE_DEFAULT_LOCALE</name><argument_list>(<argument><literal type="string">"mac-h264"</literal></argument>, <argument><literal type="string">"en-US"</literal></argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>encoder_list_create</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>encoder_list</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VTCopyVideoEncoderList</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoder_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CFIndex</name></type> <name>size</name> <init>= <expr><call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>encoder_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>CFIndex</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>encoder_dict</name> <init>=

<expr><call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>encoder_list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_DICTSTR</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CFStringRef name##_ref = CFDictionaryGetValue(encoder_dict, key); CFIndex name##_len = CFStringGetLength(name##_ref); char *name = bzalloc(name##_len + 1); CFStringGetFileSystemRepresentation(name##_ref, name, name##_len);</cpp:value></cpp:define>

<expr_stmt><expr><call><name>VT_DICTSTR</name><argument_list>(<argument><expr><name>kVTVideoEncoderList_CodecName</name></expr></argument>, <argument><expr><name>codec_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"H.264"</literal></expr></argument>, <argument><expr><name>codec_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>codec_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VT_DICTSTR</name><argument_list>(<argument><expr><name>kVTVideoEncoderList_EncoderName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VT_DICTSTR</name><argument_list>(<argument><expr><name>kVTVideoEncoderList_EncoderID</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VT_DICTSTR</name><argument_list>(<argument><expr><name>kVTVideoEncoderList_DisplayName</name></expr></argument>, <argument><expr><name>disp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vt_encoder</name></name></type> <name>enc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>name</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr>,

<expr><operator>.</operator><name>disp_name</name> <operator>=</operator> <name>disp_name</name></expr>,

<expr><operator>.</operator><name>codec_name</name> <operator>=</operator> <name>codec_name</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>vt_encoders</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VT_DICTSTR</name></cpp:undef>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>encoder_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>encoder_list_destroy</name><parameter_list>()</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vt_encoders</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>vt_encoders</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>vt_encoders</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>vt_encoders</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>vt_encoders</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>disp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>vt_encoders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>register_encoders</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder_info</name></name></type> <name>info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_ENCODER_VIDEO</name></expr>,

<expr><operator>.</operator><name>codec</name> <operator>=</operator> <literal type="string">"h264"</literal></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>vt_h264_destroy</name></expr>,

<expr><operator>.</operator><name>encode</name> <operator>=</operator> <name>vt_h264_encode</name></expr>,

<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>vt_h264_update</name></expr>,

<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>vt_h264_properties</name></expr>,

<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>vt_h264_defaults</name></expr>,

<expr><operator>.</operator><name>get_video_info</name> <operator>=</operator> <name>vt_h264_video_info</name></expr>,

<expr><operator>.</operator><name>get_extra_data</name> <operator>=</operator> <name>vt_h264_extra_data</name></expr>,

<expr><operator>.</operator><name>caps</name> <operator>=</operator> <name>OBS_ENCODER_CAP_DYN_BITRATE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vt_encoders</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>vt_encoders</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name>APPLE_H264_ENC_ID_HW</name></expr></argument>)</argument_list></call> <operator>==</operator>

<literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="string">"vt_h264_hw"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>get_name</name></name> <operator>=</operator> <name>vt_h264_getname_hw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>create</name></name> <operator>=</operator> <name>vt_h264_create_hw</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_encoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>vt_encoders</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>,

<argument><expr><name>APPLE_H264_ENC_ID_SW</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="string">"vt_h264_sw"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>get_name</name></name> <operator>=</operator> <name>vt_h264_getname_sw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>create</name></name> <operator>=</operator> <name>vt_h264_create_sw</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_encoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_module_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_appkit10_9_or_greater</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VT_LOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Not adding VideoToolbox H264 encoder; "</literal>

<literal type="string">"AppKit must be version 10.9 or greater"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>encoder_list_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>register_encoders</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VT_LOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Adding VideoToolbox H264 encoders"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_module_unload</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>encoder_list_destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
