<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-outputs\net-if.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WINSOCK_DEPRECATED_NO_WARNINGS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net-if.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_log</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[net if] " format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_WARNING, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_INFO, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_DEBUG, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>netif_saddr_data_push_back</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>netif_saddr_data</name></name> <modifier>*</modifier></type><name>sd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>adapter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>netif_saddr_item</name></name></type> <name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>full_name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip_dup</name> <init>= <expr><call><name>bstrdup</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>adapter</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>adapter</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>full_name</name></expr></argument>, <argument><expr><literal type="string">"[%s] %s"</literal></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>full_name</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>full_name</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>ip_dup</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>addrs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>netif_convert_to_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>byte_address</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><name><name>byte_address</name><operator>-&gt;</operator><name>ss_family</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>temp_char</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>family</name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>byte_address</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name><operator>)</operator></expr></argument>,

<argument><expr><name>temp_char</name></expr></argument>, <argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>family</name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>byte_address</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name><operator>)</operator></expr></argument>,

<argument><expr><name>temp_char</name></expr></argument>, <argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>InetNtopA</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>SOCKADDR_IN</name> <operator>*</operator><operator>)</operator><name>byte_address</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name><operator>)</operator></expr></argument>,

<argument><expr><name>temp_char</name></expr></argument>, <argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>InetNtopA</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>SOCKADDR_IN6</name> <operator>*</operator><operator>)</operator><name>byte_address</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name><operator>)</operator></expr></argument>,

<argument><expr><name>temp_char</name></expr></argument>, <argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>temp_char</name></expr></argument>, <argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>netif_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>copy_source</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>netif_saddr_data</name></name> <modifier>*</modifier></type><name>saddr_d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>adapter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>temp_char</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sa</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>copy_source</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>copy_source</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>copy_source</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>copy_source</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>netif_convert_to_string</name><argument_list>(<argument><expr><name>temp_char</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netif_saddr_data_push_back</name><argument_list>(<argument><expr><name>saddr_d</name></expr></argument>, <argument><expr><name>temp_char</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>netif_log_saddrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>netif_saddr_data</name></name> <modifier>*</modifier></type><name>sd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sd</name><operator>-&gt;</operator><name>addrs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"\t\t%s"</literal></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>addrs</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>netif_str_to_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>addr_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ipv6</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>addr_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ipv6</name> <operator>=</operator> <operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>=</operator> <ternary><condition><expr><name>ipv6</name></expr> ?</condition><then> <expr><name>AF_INET6</name></expr> </then><else>: <expr><name>AF_INET</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>addr_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>WSAStringToAddressA</name><argument_list>(<argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>ss_family</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPSOCKADDR</name><operator>)</operator><name>out</name></expr></argument>, <argument><expr><name>addr_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Could not parse address, error code: %d"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>out</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ss_family</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>addr_len</name> <operator>=</operator> <ternary><condition><expr><name>ipv6</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>

</then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_loopback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>n</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"lo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"lo0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>netif_get_addrs_nix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>netif_saddr_data</name></name> <modifier>*</modifier></type><name>ifaddrs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifaddr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ifa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>family</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getifaddrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifaddr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"getifaddrs() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ifa</name> <operator>=</operator> <name>ifaddr</name></expr>;</init> <condition><expr><name>ifa</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ifa</name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifa_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>is_loopback</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>family</name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>family</name> <operator>==</operator> <name>AF_INET</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>family</name> <operator>==</operator> <name>AF_INET6</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>getnameinfo</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>family</name> <operator>==</operator> <name>AF_INET</name><operator>)</operator></expr>

?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>

</then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></argument>,

<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NI_MAXHOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"getnameinfo() failed: %s"</literal></expr></argument>,

<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>netif_push</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>, <argument><expr><name>ifaddrs</name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>freeifaddrs</name><argument_list>(<argument><expr><name>ifaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>PIP_ADAPTER_ADDRESSES</name></type> <name>get_adapters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PIP_ADAPTER_ADDRESSES</name></type> <name>adapter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>out_buf_len</name> <init>= <expr><literal type="number">16384</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name> <init>= <expr><name>GAA_FLAG_SKIP_ANYCAST</name> <operator>|</operator> <name>GAA_FLAG_SKIP_MULTICAST</name> <operator>|</operator>

<name>GAA_FLAG_SKIP_DNS_SERVER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_tries</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>adapter</name> <operator>=</operator> <operator>(</operator><name>IP_ADAPTER_ADDRESSES</name> <operator>*</operator><operator>)</operator><call><name>bmalloc</name><argument_list>(<argument><expr><name>out_buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>adapter</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GetAdaptersAddresses</name><argument_list>(<argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>out_buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ERROR_BUFFER_OVERFLOW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>adapter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>ERROR_BUFFER_OVERFLOW</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name>max_tries</name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NO_ERROR</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>ERROR_NO_DATA</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>LPSTR</name></type> <name>msg_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>adapter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FormatMessageA</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name> <operator>|</operator>

<name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator>

<name>FORMAT_MESSAGE_IGNORE_INSERTS</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,

<argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_NEUTRAL</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator><operator>&amp;</operator><name>msg_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Call to GetAdaptersAddresses failed: %s (%d)"</literal></expr></argument>,

<argument><expr><name>msg_buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>msg_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>adapter</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>netif_get_addrs_win32</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>netif_saddr_data</name></name> <modifier>*</modifier></type><name>ifaddrs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PIP_ADAPTER_ADDRESSES</name></type> <name>adapter</name> <init>= <expr><call><name>get_adapters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIP_ADAPTER_UNICAST_ADDRESS</name></type> <name>unicast</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIP_ADAPTER_ADDRESSES</name></type> <name>cur_adap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SOCKET_ADDRESS</name></type> <name>socket_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>family</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>adapter</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>cur_adap</name> <operator>=</operator> <name>adapter</name></expr>;</init> <condition><expr><operator>!</operator><operator>!</operator><name>cur_adap</name></expr>;</condition> <incr><expr><name>cur_adap</name> <operator>=</operator> <name><name>cur_adap</name><operator>-&gt;</operator><name>Next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>adap_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_adap</name><operator>-&gt;</operator><name>OperStatus</name></name> <operator>!=</operator> <name>IfOperStatusUp</name> <operator>||</operator>

<name><name>cur_adap</name><operator>-&gt;</operator><name>IfType</name></name> <operator>==</operator> <name>IF_TYPE_SOFTWARE_LOOPBACK</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_wcs_to_utf8_ptr</name><argument_list>(<argument><expr><name><name>cur_adap</name><operator>-&gt;</operator><name>FriendlyName</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>adap_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unicast</name> <operator>=</operator> <name><name>cur_adap</name><operator>-&gt;</operator><name>FirstUnicastAddress</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><operator>!</operator><name>unicast</name></expr>;</condition> <incr><expr><name>unicast</name> <operator>=</operator> <name><name>unicast</name><operator>-&gt;</operator><name>Next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>socket_addr</name> <operator>=</operator> <name><name>unicast</name><operator>-&gt;</operator><name>Address</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>family</name> <operator>=</operator> <name><name>socket_addr</name><operator>.</operator><name>lpSockaddr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>netif_push</name><argument_list>(<argument><expr><name><name>socket_addr</name><operator>.</operator><name>lpSockaddr</name></name></expr></argument>, <argument><expr><name>ifaddrs</name></expr></argument>,

<argument><expr><name>adap_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>adap_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>netif_get_addrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>netif_saddr_data</name></name> <modifier>*</modifier></type><name>ifaddrs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>ifaddrs</name><operator>-&gt;</operator><name>addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>netif_get_addrs_win32</name><argument_list>(<argument><expr><name>ifaddrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>netif_get_addrs_nix</name><argument_list>(<argument><expr><name>ifaddrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
