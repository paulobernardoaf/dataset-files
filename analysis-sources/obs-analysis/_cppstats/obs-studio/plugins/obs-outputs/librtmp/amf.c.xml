<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-outputs\librtmp\amf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtmp_sys.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"amf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytes.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AMFObjectProperty</name></type> <name>AMFProp_Invalid</name> <init>= <expr><block>{ <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><name>AMF_INVALID</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AMFObject</name></type> <name>AMFObj_Invalid</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>AV_empty</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>unsigned</name> <name>short</name></type>

<name>AMF_DecodeInt16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>

<name>AMF_DecodeInt24</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>

<name>AMF_DecodeInt32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AMF_DecodeString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>bv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>bv</name><operator>-&gt;</operator><name>av_len</name></name> <operator>=</operator> <call><name>AMF_DecodeInt16</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bv</name><operator>-&gt;</operator><name>av_val</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>bv</name><operator>-&gt;</operator><name>av_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AMF_DecodeLongString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>bv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>bv</name><operator>-&gt;</operator><name>av_len</name></name> <operator>=</operator> <call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bv</name><operator>-&gt;</operator><name>av_val</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>bv</name><operator>-&gt;</operator><name>av_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <literal type="number">4</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>double</name></type>

<name>AMF_DecodeNumber</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>dVal</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FLOAT_WORD_ORDER</name> <operator>==</operator> <name>__BYTE_ORDER</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__BIG_ENDIAN</name></expr></cpp:if>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dVal</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__LITTLE_ENDIAN</name></expr></cpp:elif>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ci</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>co</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ci</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>co</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dVal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__LITTLE_ENDIAN</name></expr></cpp:if> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ci</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>co</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ci</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>co</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dVal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ci</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>co</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ci</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>co</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dVal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>dVal</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>AMF_DecodeBoolean</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>*</operator><name>data</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>AMF_EncodeInt16</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>nVal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output</name><operator>+</operator><literal type="number">2</literal> <operator>&gt;</operator> <name>outend</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>nVal</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nVal</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><name>output</name><operator>+</operator><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>AMF_EncodeInt24</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output</name><operator>+</operator><literal type="number">3</literal> <operator>&gt;</operator> <name>outend</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>nVal</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>nVal</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nVal</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<return>return <expr><name>output</name><operator>+</operator><literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>AMF_EncodeInt32</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output</name><operator>+</operator><literal type="number">4</literal> <operator>&gt;</operator> <name>outend</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>nVal</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>nVal</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>nVal</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nVal</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><name>output</name><operator>+</operator><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>AMF_EncodeString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type><name>bv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bv</name><operator>-&gt;</operator><name>av_len</name></name> <operator>&lt;</operator> <literal type="number">65536</literal> <operator>&amp;&amp;</operator> <name>output</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>bv</name><operator>-&gt;</operator><name>av_len</name></name> <operator>&gt;</operator> <name>outend</name><operator>)</operator> <operator>||</operator>

<name>output</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>bv</name><operator>-&gt;</operator><name>av_len</name></name> <operator>&gt;</operator> <name>outend</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bv</name><operator>-&gt;</operator><name>av_len</name></name> <operator>&lt;</operator> <literal type="number">65536</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>output</name><operator>++</operator> <operator>=</operator> <name>AMF_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>AMF_EncodeInt16</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outend</name></expr></argument>, <argument><expr><name><name>bv</name><operator>-&gt;</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>output</name><operator>++</operator> <operator>=</operator> <name>AMF_LONG_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outend</name></expr></argument>, <argument><expr><name><name>bv</name><operator>-&gt;</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>bv</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>bv</name><operator>-&gt;</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>+=</operator> <name><name>bv</name><operator>-&gt;</operator><name>av_len</name></name></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>AMF_EncodeNumber</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dVal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">8</literal> <operator>&gt;</operator> <name>outend</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>output</name><operator>++</operator> <operator>=</operator> <name>AMF_NUMBER</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FLOAT_WORD_ORDER</name> <operator>==</operator> <name>__BYTE_ORDER</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__BIG_ENDIAN</name></expr></cpp:if>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dVal</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__LITTLE_ENDIAN</name></expr></cpp:elif>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ci</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>co</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ci</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dVal</name></expr>;</expr_stmt>

<expr_stmt><expr><name>co</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>output</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__LITTLE_ENDIAN</name></expr></cpp:if> 

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ci</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>co</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ci</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dVal</name></expr>;</expr_stmt>

<expr_stmt><expr><name>co</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>output</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ci</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>co</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ci</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dVal</name></expr>;</expr_stmt>

<expr_stmt><expr><name>co</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>output</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>ci</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>output</name><operator>+</operator><literal type="number">8</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>AMF_EncodeBoolean</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bVal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output</name><operator>+</operator><literal type="number">2</literal> <operator>&gt;</operator> <name>outend</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>output</name><operator>++</operator> <operator>=</operator> <name>AMF_BOOLEAN</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>output</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><name>bVal</name></expr> ?</condition><then> <expr><literal type="number">0x01</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>AMF_EncodeNamedString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type><name>strName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type><name>strValue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output</name><operator>+</operator><literal type="number">2</literal><operator>+</operator><name><name>strName</name><operator>-&gt;</operator><name>av_len</name></name> <operator>&gt;</operator> <name>outend</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>AMF_EncodeInt16</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outend</name></expr></argument>, <argument><expr><name><name>strName</name><operator>-&gt;</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>strName</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>strName</name><operator>-&gt;</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>+=</operator> <name><name>strName</name><operator>-&gt;</operator><name>av_len</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outend</name></expr></argument>, <argument><expr><name>strValue</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>AMF_EncodeNamedNumber</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type><name>strName</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dVal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output</name><operator>+</operator><literal type="number">2</literal><operator>+</operator><name><name>strName</name><operator>-&gt;</operator><name>av_len</name></name> <operator>&gt;</operator> <name>outend</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>AMF_EncodeInt16</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outend</name></expr></argument>, <argument><expr><name><name>strName</name><operator>-&gt;</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>strName</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>strName</name><operator>-&gt;</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>+=</operator> <name><name>strName</name><operator>-&gt;</operator><name>av_len</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outend</name></expr></argument>, <argument><expr><name>dVal</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>AMF_EncodeNamedBoolean</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outend</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type><name>strName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bVal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output</name><operator>+</operator><literal type="number">2</literal><operator>+</operator><name><name>strName</name><operator>-&gt;</operator><name>av_len</name></name> <operator>&gt;</operator> <name>outend</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>AMF_EncodeInt16</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outend</name></expr></argument>, <argument><expr><name><name>strName</name><operator>-&gt;</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>strName</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>strName</name><operator>-&gt;</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>+=</operator> <name><name>strName</name><operator>-&gt;</operator><name>av_len</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>AMF_EncodeBoolean</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outend</name></expr></argument>, <argument><expr><name>bVal</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AMFProp_GetName</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <name><name>prop</name><operator>-&gt;</operator><name>p_name</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AMFProp_SetName</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name></name> <operator>=</operator> <operator>*</operator><name>name</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>AMFDataType</name></type>

<name>AMFProp_GetType</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type>

<name>AMFProp_GetNumber</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>AMFProp_GetBoolean</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AMFProp_GetString</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_aval</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>AV_empty</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AMFProp_GetObject</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>, <parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name>AMFObj_Invalid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>AMFProp_IsValid</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>!=</operator> <name>AMF_INVALID</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>AMFProp_Encode</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBufEnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_INVALID</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>!=</operator> <name>AMF_NULL</name> <operator>&amp;&amp;</operator> <name>pBuffer</name> <operator>+</operator> <name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>pBufEnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>!=</operator> <name>AMF_NULL</name> <operator>&amp;&amp;</operator> <name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pBuffer</name><operator>++</operator> <operator>=</operator> <name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pBuffer</name><operator>++</operator> <operator>=</operator> <name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>+=</operator> <name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AMF_NUMBER</name></expr>:</case>

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>pBufEnd</name></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_BOOLEAN</name></expr>:</case>

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <call><name>AMF_EncodeBoolean</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>pBufEnd</name></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_STRING</name></expr>:</case>

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>pBufEnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_aval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_NULL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>pBuffer</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;=</operator> <name>pBufEnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pBuffer</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_OBJECT</name></expr>:</case>

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <call><name>AMF_Encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>pBufEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_ECMA_ARRAY</name></expr>:</case>

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <call><name>AMF_EncodeEcmaArray</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>pBufEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_STRICT_ARRAY</name></expr>:</case>

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <call><name>AMF_EncodeArray</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>pBufEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, invalid type. %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<return>return <expr><name>pBuffer</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMF3_INTEGER_MAX</name></cpp:macro> <cpp:value>268435455</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMF3_INTEGER_MIN</name></cpp:macro> <cpp:value>-268435456</cpp:value></cpp:define>

<function><type><name>int</name></type>

<name>AMF3ReadInteger</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>valp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>&lt;&lt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>AMF3_INTEGER_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>-=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>&lt;&lt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>AMF3ReadString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>AMF3ReadInteger</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ref</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>refIndex</name> <init>= <expr><operator>(</operator><name>ref</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,

<argument><expr><literal type="string">"%s, string reference, index: %d, not supported, ignoring!"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>refIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>av_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nSize</name> <init>= <expr><operator>(</operator><name>ref</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>av_val</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>av_len</name></name> <operator>=</operator> <name>nSize</name></expr>;</expr_stmt>

<return>return <expr><name>len</name> <operator>+</operator> <name>nSize</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>AMF3Prop_Decode</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nSize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bDecodeName</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nOriginalSize</name> <init>= <expr><name>nSize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMF3DataType</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>pBuffer</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"empty buffer/no buffer pointer!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bDecodeName</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AVal</name></type> <name>name</name> <init>= <expr><name>AV_empty</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nRes</name> <init>= <expr><call><name>AMF3ReadString</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>.</operator><name>av_len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>nRes</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nRes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>+=</operator> <name>nRes</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>*</operator><name>pBuffer</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name><operator>--</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AMF3_UNDEFINED</name></expr>:</case>

<case>case <expr><name>AMF3_NULL</name></expr>:</case>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF3_FALSE</name></expr>:</case>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_BOOLEAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF3_TRUE</name></expr>:</case>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_BOOLEAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF3_INTEGER</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>AMF3ReadInteger</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF3_DOUBLE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>=</operator> <call><name>AMF_DecodeNumber</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF3_STRING</name></expr>:</case>

<case>case <expr><name>AMF3_XML_DOC</name></expr>:</case>

<case>case <expr><name>AMF3_XML</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>AMF3ReadString</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_aval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF3_DATE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>AMF3ReadInteger</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nIndex</name> <init>= <expr><operator>(</operator><name>res</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"AMF3_DATE reference: %d, not supported!"</literal></expr></argument>, <argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>=</operator> <call><name>AMF_DecodeNumber</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_NUMBER</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF3_OBJECT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nRes</name> <init>= <expr><call><name>AMF3_Decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nRes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nRes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_OBJECT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF3_ARRAY</name></expr>:</case>

<case>case <expr><name>AMF3_BYTE_ARRAY</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s - AMF3 unknown/unsupported datatype 0x%02x, @%p"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>pBuffer</name><operator>)</operator></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>nOriginalSize</name> <operator>-</operator> <name>nSize</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>AMFProp_Decode</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nSize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bDecodeName</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nOriginalSize</name> <init>= <expr><name>nSize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nRes</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>pBuffer</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Empty buffer/no buffer pointer!"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bDecodeName</name> <operator>&amp;&amp;</operator> <name>nSize</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,

<argument><expr><literal type="string">"%s: Not enough data for decoding with name, less than 4 bytes!"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bDecodeName</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>nNameSize</name> <init>= <expr><call><name>AMF_DecodeInt16</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nNameSize</name> <operator>&gt;</operator> <name>nSize</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,

<argument><expr><literal type="string">"%s: Name size out of range: namesize (%d) &gt; len (%d) - 2"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>nNameSize</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_DecodeString</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <literal type="number">2</literal> <operator>+</operator> <name>nNameSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name>nNameSize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nSize</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <operator>*</operator><name>pBuffer</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AMF_NUMBER</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>=</operator> <call><name>AMF_DecodeNumber</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_BOOLEAN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>AMF_DecodeBoolean</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_STRING</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>nStringSize</name> <init>= <expr><call><name>AMF_DecodeInt16</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>nStringSize</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_DecodeString</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_aval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>nStringSize</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF_OBJECT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nRes</name> <init>= <expr><call><name>AMF_Decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nRes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nRes</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF_MOVIECLIP</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF_MOVIECLIP reserved!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF_NULL</name></expr>:</case>

<case>case <expr><name>AMF_UNDEFINED</name></expr>:</case>

<case>case <expr><name>AMF_UNSUPPORTED</name></expr>:</case>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_REFERENCE</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF_REFERENCE not supported!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF_ECMA_ARRAY</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nRes</name> <operator>=</operator> <call><name>AMF_Decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>, <argument><expr><name>pBuffer</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>nSize</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nRes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nRes</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF_OBJECT_END</name></expr>:</case>

<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF_STRICT_ARRAY</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nArrayLen</name> <init>= <expr><call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nRes</name> <operator>=</operator> <call><name>AMF_DecodeArray</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>, <argument><expr><name>pBuffer</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>nSize</name></expr></argument>,

<argument><expr><name>nArrayLen</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nRes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nRes</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF_DATE</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"AMF_DATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>=</operator> <call><name>AMF_DecodeNumber</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_UTCoffset</name></name> <operator>=</operator> <call><name>AMF_DecodeInt16</name><argument_list>(<argument><expr><name>pBuffer</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF_LONG_STRING</name></expr>:</case>

<case>case <expr><name>AMF_XML_DOC</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nStringSize</name> <init>= <expr><call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>nStringSize</name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_DecodeLongString</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_aval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>nStringSize</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_LONG_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_STRING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF_RECORDSET</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF_RECORDSET reserved!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF_TYPED_OBJECT</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF_TYPED_OBJECT not supported!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AMF_AVMPLUS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nRes</name> <init>= <expr><call><name>AMF3_Decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nRes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nRes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_OBJECT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s - unknown datatype 0x%02x, @%p"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name></expr></argument>, <argument><expr><name>pBuffer</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>nOriginalSize</name> <operator>-</operator> <name>nSize</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AMFProp_Dump</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>strRes</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_INVALID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Property: INVALID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Property: NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>prop</name><operator>-&gt;</operator><name>p_name</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>name</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <literal type="string">"no-name."</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"no-name."</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>.</operator><name>av_len</name></name> <operator>&gt;</operator> <literal type="number">18</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>name</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <literal type="number">18</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>strRes</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"Name: %18.*s, "</literal></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_OBJECT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Property: &lt;%sOBJECT&gt;"</literal></expr></argument>, <argument><expr><name>strRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_Dump</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_ECMA_ARRAY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Property: &lt;%sECMA_ARRAY&gt;"</literal></expr></argument>, <argument><expr><name>strRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_Dump</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_STRICT_ARRAY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Property: &lt;%sSTRICT_ARRAY&gt;"</literal></expr></argument>, <argument><expr><name>strRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_Dump</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AMF_NUMBER</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"NUMBER:\t%.2f"</literal></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_BOOLEAN</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"BOOLEAN:\t%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>!=</operator> <literal type="number">0.0</literal></expr> ?</condition><then> <expr><literal type="string">"TRUE"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_STRING</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"STRING:\t%.*s"</literal></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_aval</name><operator>.</operator><name>av_len</name></name></expr></argument>,

<argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_aval</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_DATE</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"DATE:\ttimestamp: %.2f, UTC offset: %d"</literal></expr></argument>,

<argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_UTCoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"INVALID TYPE 0x%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Property: &lt;%s%s&gt;"</literal></expr></argument>, <argument><expr><name>strRes</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AMFProp_Reset</name><parameter_list>(<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_OBJECT</name> <operator>||</operator> <name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_ECMA_ARRAY</name> <operator>||</operator> <name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_STRICT_ARRAY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AMF_Reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_aval</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_aval</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>AMF_Encode</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBufEnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pBuffer</name><operator>+</operator><literal type="number">4</literal> <operator>&gt;=</operator> <name>pBufEnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pBuffer</name><operator>++</operator> <operator>=</operator> <name>AMF_OBJECT</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>AMFProp_Encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>o_props</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>pBufEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF_Encode - failed to encode property in index %d"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pBuffer</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name>pBufEnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <call><name>AMF_EncodeInt24</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>pBufEnd</name></expr></argument>, <argument><expr><name>AMF_OBJECT_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pBuffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>AMF_EncodeEcmaArray</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBufEnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pBuffer</name><operator>+</operator><literal type="number">4</literal> <operator>&gt;=</operator> <name>pBufEnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pBuffer</name><operator>++</operator> <operator>=</operator> <name>AMF_ECMA_ARRAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>pBufEnd</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>AMFProp_Encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>o_props</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>pBufEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF_Encode - failed to encode property in index %d"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pBuffer</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name>pBufEnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <call><name>AMF_EncodeInt24</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>pBufEnd</name></expr></argument>, <argument><expr><name>AMF_OBJECT_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pBuffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>AMF_EncodeArray</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBufEnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pBuffer</name><operator>+</operator><literal type="number">4</literal> <operator>&gt;=</operator> <name>pBufEnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pBuffer</name><operator>++</operator> <operator>=</operator> <name>AMF_STRICT_ARRAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>pBufEnd</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>AMFProp_Encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>o_props</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>pBufEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF_Encode - failed to encode property in index %d"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>pBuffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>AMF_DecodeArray</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nSize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nArrayLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bDecodeName</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nOriginalSize</name> <init>= <expr><name>nSize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bError</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>o_props</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>nArrayLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObjectProperty</name></type> <name>prop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nRes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nArrayLen</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bError</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nRes</name> <operator>=</operator> <call><name>AMFProp_Decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>, <argument><expr><name>bDecodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nRes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bError</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nRes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>+=</operator> <name>nRes</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_AddProp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>bError</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>nOriginalSize</name> <operator>-</operator> <name>nSize</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>AMF3_Decode</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bAMFData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nOriginalSize</name> <init>= <expr><name>nSize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>o_props</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bAMFData</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pBuffer</name> <operator>!=</operator> <name>AMF3_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>,

<argument><expr><literal type="string">"AMF3 Object encapsulated in AMF stream does not start with AMF3_OBJECT!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pBuffer</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>AMF3ReadInteger</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ref</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>objectIndex</name> <init>= <expr><operator>(</operator><name>ref</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Object reference, index: %d"</literal></expr></argument>, <argument><expr><name>objectIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>classRef</name> <init>= <expr><operator>(</operator><name>ref</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMF3ClassDef</name></type> <name>cd</name> <init>= <expr><block>{ <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFObjectProperty</name></type> <name>prop</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>classRef</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>classIndex</name> <init>= <expr><operator>(</operator><name>classRef</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Class reference: %d"</literal></expr></argument>, <argument><expr><name>classIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>classExtRef</name> <init>= <expr><operator>(</operator><name>classRef</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cdnum</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cd</name><operator>.</operator><name>cd_externalizable</name></name> <operator>=</operator> <operator>(</operator><name>classExtRef</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>.</operator><name>cd_dynamic</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>classExtRef</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cdnum</name> <operator>=</operator> <name>classExtRef</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>AMF3ReadString</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cd</name><operator>.</operator><name>cd_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,

<argument><expr><literal type="string">"Class name: %s, externalizable: %d, dynamic: %d, classMembers: %d"</literal></expr></argument>,

<argument><expr><name><name>cd</name><operator>.</operator><name>cd_name</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>cd_externalizable</name></name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>cd_dynamic</name></name></expr></argument>,

<argument><expr><name><name>cd</name><operator>.</operator><name>cd_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cdnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>AVal</name></type> <name>memberName</name> <init>= <expr><name>AV_empty</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<label><name>invalid</name>:</label>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, invalid class encoding!"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nOriginalSize</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>AMF3ReadString</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memberName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Member: %s"</literal></expr></argument>, <argument><expr><name><name>memberName</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF3CD_AddProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memberName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>.</operator><name>cd_externalizable</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nRes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>name</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_ATTRIBUTE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Externalizable, TODO check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nRes</name> <operator>=</operator> <call><name>AMF3Prop_Decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nRes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, failed to decode AMF3 property!"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nRes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>+=</operator> <name>nRes</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>AMFProp_SetName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_AddProp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nRes</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cd</name><operator>.</operator><name>cd_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nRes</name> <operator>=</operator> <call><name>AMF3Prop_Decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nRes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, failed to decode AMF3 property!"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AMFProp_SetName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><call><name>AMF3CD_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_AddProp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>+=</operator> <name>nRes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nRes</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>.</operator><name>cd_dynamic</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nRes</name> <operator>=</operator> <call><name>AMF3Prop_Decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_AddProp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>+=</operator> <name>nRes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nRes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>prop</name><operator>.</operator><name>p_name</name><operator>.</operator><name>av_len</name></name></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"class object!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>nOriginalSize</name> <operator>-</operator> <name>nSize</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>AMF_Decode</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bDecodeName</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nOriginalSize</name> <init>= <expr><name>nSize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bError</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>o_props</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObjectProperty</name></type> <name>prop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nRes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;=</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>AMF_DecodeInt24</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AMF_OBJECT_END</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bError</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bError</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>,

<argument><expr><literal type="string">"DECODING ERROR, IGNORING BYTES UNTIL NEXT KNOWN PATTERN!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nSize</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pBuffer</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nRes</name> <operator>=</operator> <call><name>AMFProp_Decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>, <argument><expr><name>bDecodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nRes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bError</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nRes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bError</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pBuffer</name> <operator>+=</operator> <name>nRes</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_AddProp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>bError</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>nOriginalSize</name> <operator>-</operator> <name>nSize</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AMF_AddProp</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>o_props</name></name> <operator>=</operator>

<call><name>realloc</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>o_props</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AMFObjectProperty</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>o_props</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AMFObjectProperty</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>AMF_CountProp</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AMFObjectProperty</name> <modifier>*</modifier></type>

<name>AMF_GetProp</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nIndex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nIndex</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>o_props</name><index>[<expr><name>nIndex</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>o_props</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>p_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>o_props</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>AMFObjectProperty</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>AMFProp_Invalid</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AMF_Dump</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"(object begin)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>AMFProp_Dump</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>o_props</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"(object end)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AMF_Reset</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>AMFProp_Reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>o_props</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>o_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>o_props</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AMF3CD_AddProp</name><parameter_list>(<parameter><decl><type><name>AMF3ClassDef</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cd</name><operator>-&gt;</operator><name>cd_num</name></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_props</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_props</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>cd</name><operator>-&gt;</operator><name>cd_num</name></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_props</name><index>[<expr><name><name>cd</name><operator>-&gt;</operator><name>cd_num</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>prop</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>AVal</name> <modifier>*</modifier></type>

<name>AMF3CD_GetProp</name><parameter_list>(<parameter><decl><type><name>AMF3ClassDef</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nIndex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nIndex</name> <operator>&gt;=</operator> <name><name>cd</name><operator>-&gt;</operator><name>cd_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>AVal</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>AV_empty</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>cd_props</name><index>[<expr><name>nIndex</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

</unit>
