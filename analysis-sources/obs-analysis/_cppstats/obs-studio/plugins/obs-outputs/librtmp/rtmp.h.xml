<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-outputs\librtmp\rtmp.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_CRYPTO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYPTO</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4996</name><name>)</name></cpp:pragma> 

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4244</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"amf.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/version.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MBEDTLS_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x02040000</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/net_sockets.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/net.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/ssl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/ctr_drbg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/entropy.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>my_dhm_P</name></cpp:macro> <cpp:value>"E4004C1F94182000103D883A448B3F80" "2CE4B44A83301270002C20D0321CFD00" "11CCEF784C26A400F43DFB901BCA7538" "F2C6B176001CF5A0FD16D2C48B1D0C1C" "F6AC8E1DA6BCC3B4E1F96B0564965300" "FFA1D0B601EB2800F489AA512C4B248C" "01F76949A60BB7F00A40B1EAB64BDD48" "E8A700D60B7F1200FA8E77B0A979DABF"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>my_dhm_G</name></cpp:macro> <cpp:value>"4"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_SET_SESSION</name><parameter_list>(<parameter><type><name>S</name></type></parameter>,<parameter><type><name>resume</name></type></parameter>,<parameter><type><name>timeout</name></type></parameter>,<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_ssl_set_session(S,ctx)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>tls_ctx</name>

<block>{

<decl_stmt><decl><type><name>mbedtls_entropy_context</name></type> <name>entropy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_ctr_drbg_context</name></type> <name>ctr_drbg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_ssl_config</name></type> <name>conf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_ssl_session</name></type> <name>ssn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>cacert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_net_context</name></type> <name>net</name></decl>;</decl_stmt>

}</block></struct></type> <name>tls_ctx</name>;</typedef>

<typedef>typedef <type><name>tls_ctx</name> <modifier>*</modifier></type><name>TLS_CTX</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_client</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s = malloc(sizeof(mbedtls_ssl_context));mbedtls_ssl_init(s);mbedtls_ssl_setup(s, &amp;ctx-&gt;conf);mbedtls_ssl_config_defaults(&amp;ctx-&gt;conf, MBEDTLS_SSL_IS_CLIENT, MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT);mbedtls_ssl_conf_authmode(&amp;ctx-&gt;conf, MBEDTLS_SSL_VERIFY_REQUIRED);mbedtls_ssl_conf_rng(&amp;ctx-&gt;conf, mbedtls_ctr_drbg_random, &amp;ctx-&gt;ctr_drbg)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_setfd</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>fd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_ssl_set_bio(s, fd, mbedtls_net_send, mbedtls_net_recv, NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_connect</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_ssl_handshake(s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_accept</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_ssl_handshake(s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_read</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_ssl_read(s,(unsigned char *)b,l)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_write</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_ssl_write(s,(unsigned char *)b,l)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_shutdown</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_ssl_close_notify(s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_close</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_ssl_free(s); free(s)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLARSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;polarssl/version.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;polarssl/net.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;polarssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;polarssl/havege.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>POLARSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x01010000</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>havege_random</name></cpp:macro> <cpp:value>havege_rand</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>POLARSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x01020000</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_SET_SESSION</name><parameter_list>(<parameter><type><name>S</name></type></parameter>,<parameter><type><name>resume</name></type></parameter>,<parameter><type><name>timeout</name></type></parameter>,<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ssl_set_session(S,ctx)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_SET_SESSION</name><parameter_list>(<parameter><type><name>S</name></type></parameter>,<parameter><type><name>resume</name></type></parameter>,<parameter><type><name>timeout</name></type></parameter>,<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ssl_set_session(S,resume,timeout,ctx)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>tls_ctx</name>

<block>{

<decl_stmt><decl><type><name>havege_state</name></type> <name>hs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssl_session</name></type> <name>ssn</name></decl>;</decl_stmt>

}</block></struct></type> <name>tls_ctx</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_CTX</name></cpp:macro> <cpp:value>tls_ctx *</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_client</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s = malloc(sizeof(ssl_context)); ssl_init(s);ssl_set_endpoint(s, SSL_IS_CLIENT); ssl_set_authmode(s, SSL_VERIFY_NONE);ssl_set_rng(s, havege_random, &amp;ctx-&gt;hs);ssl_set_ciphersuites(s, ssl_default_ciphersuites);SSL_SET_SESSION(s, 1, 600, &amp;ctx-&gt;ssn)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_setfd</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>fd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ssl_set_bio(s, net_recv, &amp;fd, net_send, &amp;fd)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_connect</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ssl_handshake(s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_accept</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ssl_handshake(s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_read</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ssl_read(s,(unsigned char *)b,l)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_write</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ssl_write(s,(unsigned char *)b,l)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_shutdown</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ssl_close_notify(s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_close</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ssl_free(s); free(s)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gnutls/gnutls.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>tls_ctx</name>

<block>{

<decl_stmt><decl><type><name>gnutls_certificate_credentials_t</name></type> <name>cred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_priority_t</name></type> <name>prios</name></decl>;</decl_stmt>

}</block></struct></type> <name>tls_ctx</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_CTX</name></cpp:macro> <cpp:value>tls_ctx *</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_client</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gnutls_init((gnutls_session_t *)(&amp;s), GNUTLS_CLIENT); gnutls_priority_set(s, ctx-&gt;prios); gnutls_credentials_set(s, GNUTLS_CRD_CERTIFICATE, ctx-&gt;cred)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_setfd</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>fd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gnutls_transport_set_ptr(s, (gnutls_transport_ptr_t)(long)fd)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_connect</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gnutls_handshake(s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_accept</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gnutls_handshake(s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_read</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gnutls_record_recv(s,b,l)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_write</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gnutls_record_send(s,b,l)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_shutdown</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gnutls_bye(s, GNUTLS_SHUT_RDWR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_close</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gnutls_deinit(s)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_CTX</name></cpp:macro> <cpp:value>SSL_CTX *</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_client</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s = SSL_new(ctx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_setfd</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>fd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SSL_set_fd(s,fd)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_connect</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SSL_connect(s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_accept</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SSL_accept(s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_read</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SSL_read(s,b,l)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_write</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SSL_write(s,b,l)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_shutdown</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SSL_shutdown(s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_close</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SSL_free(s)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ONLY_MD5</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cencode.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_DIGEST_LENGTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>

<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_LIB_VERSION</name></cpp:macro> <cpp:value>0x020300</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_FEATURE_HTTP</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_FEATURE_ENC</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_FEATURE_SSL</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_FEATURE_MFP</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_FEATURE_WRITE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_FEATURE_HTTP2</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PROTOCOL_UNDEFINED</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PROTOCOL_RTMP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PROTOCOL_RTMPE</name></cpp:macro> <cpp:value>RTMP_FEATURE_ENC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PROTOCOL_RTMPT</name></cpp:macro> <cpp:value>RTMP_FEATURE_HTTP</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PROTOCOL_RTMPS</name></cpp:macro> <cpp:value>RTMP_FEATURE_SSL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PROTOCOL_RTMPTE</name></cpp:macro> <cpp:value>(RTMP_FEATURE_HTTP|RTMP_FEATURE_ENC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PROTOCOL_RTMPTS</name></cpp:macro> <cpp:value>(RTMP_FEATURE_HTTP|RTMP_FEATURE_SSL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PROTOCOL_RTMFP</name></cpp:macro> <cpp:value>RTMP_FEATURE_MFP</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_DEFAULT_CHUNKSIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_BUFFER_CACHE_SIZE</name></cpp:macro> <cpp:value>(16*1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_CHANNELS</name></cpp:macro> <cpp:value>65600</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>RTMPProtocolStringsLower</name><index>[]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>RTMP_DefaultFlashVer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>RTMP_ctrlC</name></decl>;</decl_stmt>

<function_decl><type><name>uint32_t</name></type> <name>RTMP_GetTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_CHUNK_SIZE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_BYTES_READ_REPORT</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_CONTROL</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_SERVER_BW</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_CLIENT_BW</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_AUDIO</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_VIDEO</name></cpp:macro> <cpp:value>0x09</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_FLEX_STREAM_SEND</name></cpp:macro> <cpp:value>0x0F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_FLEX_SHARED_OBJECT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_FLEX_MESSAGE</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_INFO</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_SHARED_OBJECT</name></cpp:macro> <cpp:value>0x13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_INVOKE</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_TYPE_FLASH_VIDEO</name></cpp:macro> <cpp:value>0x16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_MAX_HEADER_SIZE</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_SIZE_LARGE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_SIZE_MEDIUM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_SIZE_SMALL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PACKET_SIZE_MINIMUM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>RTMPChunk</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>c_headerSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c_chunkSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c_chunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>c_header</name><index>[<expr><name>RTMP_MAX_HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>RTMPChunk</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RTMPPacket</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>m_headerType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>m_packetType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>m_hasAbsTimestamp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>m_nChannel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_nTimeStamp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>m_nInfoField2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_nBodySize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_nBytesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMPChunk</name> <modifier>*</modifier></type><name>m_chunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m_body</name></decl>;</decl_stmt>

}</block></struct></type> <name>RTMPPacket</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RTMPSockBuf</name>

<block>{

<decl_stmt><decl><type><name>SOCKET</name></type> <name>sb_socket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sb_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sb_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>sb_buf</name><index>[<expr><name>RTMP_BUFFER_CACHE_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sb_timedout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sb_ssl</name></decl>;</decl_stmt>

}</block></struct></type> <name>RTMPSockBuf</name>;</typedef>

<function_decl><type><name>void</name></type> <name>RTMPPacket_Reset</name><parameter_list>(<parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMPPacket_Dump</name><parameter_list>(<parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMPPacket_Alloc</name><parameter_list>(<parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMPPacket_Free</name><parameter_list>(<parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMPPacket_IsReady</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;m_nBytesRead == (a)-&gt;m_nBodySize)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>RTMP_Stream</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>playpath</name></decl>;</decl_stmt>

}</block></struct></type> <name>RTMP_Stream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RTMP_LNK</name>

<block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_MAX_STREAMS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<decl_stmt><decl><type><name>RTMP_Stream</name></type> <name><name>streams</name><index>[<expr><name>RTMP_MAX_STREAMS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nStreams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curStreamIdx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>playingStreams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>hostname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>sockshost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>tcUrl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>swfUrl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>pageUrl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>app</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>auth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>flashVer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>subscribepath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>usherToken</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>pubUser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>pubPasswd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFObject</name></type> <name>extras</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>edepth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seekTime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stopTime</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_LF_AUTH</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_LF_LIVE</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_LF_SWFV</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_LF_PLST</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_LF_BUFX</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_LF_FTCU</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>lFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>swfAge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PUB_NAME</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PUB_RESP</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PUB_ALLOC</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PUB_CLEAN</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_PUB_CLATE</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>pFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>socksport</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_SWF_HASHLEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dh</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rc4keyIn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rc4keyOut</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>SWFSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>SWFHash</name><index>[<expr><name>RTMP_SWF_HASHLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>SWFVerificationResponse</name><index>[<expr><name>RTMP_SWF_HASHLEN</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>RTMP_LNK</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RTMP_READ</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buflen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>dataType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_READ_HEADER</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_READ_RESUME</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_READ_NO_IGNORE</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_READ_GOTKF</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_READ_GOTFLVK</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_READ_SEEKING</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int8_t</name></type> <name>status</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_READ_COMPLETE</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_READ_ERROR</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_READ_EOF</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_READ_IGNORE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>initialFrameType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nResumeTS</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>metaHeader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>initialFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nMetaHeaderSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nInitialFrameSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nIgnoredFrameCounter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nIgnoredFlvFrameCounter</name></decl>;</decl_stmt>

}</block></struct></type> <name>RTMP_READ</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RTMP_METHOD</name>

<block>{

<decl_stmt><decl><type><name>AVal</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

}</block></struct></type> <name>RTMP_METHOD</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RTMP_BINDINFO</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>addrLen</name></decl>;</decl_stmt>

}</block></struct></type> <name>RTMP_BINDINFO</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>CUSTOMSEND</name>)<parameter_list>(<parameter><decl><type><name>RTMPSockBuf</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>RTMP</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>m_inChunkSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_outChunkSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_nBWCheckCounter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_nBytesIn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_nBytesInSent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_nBufferMS</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_stream_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>m_mediaChannel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_mediaStamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_pauseStamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_pausing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_nServerBW</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_nClientBW</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>m_nClientBW2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>m_bPlaying</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>m_bSendEncoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>m_bSendCounter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>m_bUseNagle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>m_bCustomSend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>m_customSendParam</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUSTOMSEND</name></type> <name>m_customSendFunc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMP_BINDINFO</name></type> <name>m_bindIP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>m_bSendChunkSizeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_numInvokes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_numCalls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMP_METHOD</name> <modifier>*</modifier></type><name>m_methodCalls</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>m_channelsAllocatedIn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_channelsAllocatedOut</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMPPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>m_vecChannelsIn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMPPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>m_vecChannelsOut</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>m_channelTimestamp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>m_fAudioCodecs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>m_fVideoCodecs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>m_fEncoding</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>m_fDuration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>m_msgCounter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>m_polling</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_resplen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_unackd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>m_clientID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMP_READ</name></type> <name>m_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>m_write</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMPSockBuf</name></type> <name>m_sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMP_LNK</name></type> <name>Link</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>connect_time_ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_error_code</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>TLS_CTX</name></type> <name>RTMP_TLS_ctx</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>RTMP</name>;</typedef>

<function_decl><type><name>int</name></type> <name>RTMP_ParseURL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>protocol</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>app</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMP_ParsePlaypath</name><parameter_list>(<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMP_SetBufferMS</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMP_UpdateBufferMS</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_SetOpt</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_SetupURL</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_AddStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>playpath</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMP_SetupStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>,

<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>port</name></decl></parameter>,

<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>sockshost</name></decl></parameter>,

<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>playpath</name></decl></parameter>,

<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>tcUrl</name></decl></parameter>,

<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>swfUrl</name></decl></parameter>,

<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>pageUrl</name></decl></parameter>,

<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>app</name></decl></parameter>,

<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>auth</name></decl></parameter>,

<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>swfSHA256Hash</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>swfSize</name></decl></parameter>,

<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>flashVer</name></decl></parameter>,

<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>subscribepath</name></decl></parameter>,

<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>usherToken</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dStart</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dStop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bLiveStream</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_Connect</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>sockaddr</name>;</struct_decl>

<function_decl><type><name>int</name></type> <name>RTMP_Connect0</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>svc</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_Connect1</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_ReadPacket</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_SendPacket</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queue</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_SendChunk</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPChunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_IsConnected</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SOCKET</name></type> <name>RTMP_Socket</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_IsTimedout</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>double</name></type> <name>RTMP_GetDuration</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_ToggleStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_ConnectStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seekTime</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_ReconnectStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seekTime</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMP_DeleteStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_GetNextMediaPacket</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_ClientPacket</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMP_Init</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMP_Close</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RTMP</name> <modifier>*</modifier></type><name>RTMP_Alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMP_TLS_Free</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMP_Free</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMP_EnableWrite</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_LibVersion</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMP_UserInterrupt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>int</name></type> <name>RTMP_SendCtrl</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>nType</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nObject</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nTime</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_SendPause</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>DoPause</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dTime</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_Pause</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>DoPause</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_FindFirstMatchingProperty</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMPSockBuf_Fill</name><parameter_list>(<parameter><decl><type><name>RTMPSockBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMPSockBuf_Send</name><parameter_list>(<parameter><decl><type><name>RTMPSockBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMPSockBuf_Close</name><parameter_list>(<parameter><decl><type><name>RTMPSockBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_SendCreateStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_SendSeek</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dTime</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_SendServerBW</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_SendClientBW</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RTMP_DropRequest</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>freeit</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_Read</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>RTMP_Write</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_HASHSWF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>RTMP_HashSWF</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>age</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
