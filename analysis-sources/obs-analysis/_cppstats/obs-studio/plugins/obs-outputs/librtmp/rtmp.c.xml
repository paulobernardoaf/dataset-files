<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-outputs\librtmp\rtmp.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ONLY_MD5</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtmp_sys.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSG_NOSIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_NOSIGNAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wdeprecated-declarations"</cpp:literal></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Security/Security.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/ctr_drbg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/base64.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_DIGEST_LENGTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLARSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;polarssl/havege.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;polarssl/md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;polarssl/base64.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_DIGEST_LENGTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>my_dhm_P</name> <init>=

<expr><literal type="string">"E4004C1F94182000103D883A448B3F80"</literal> \

<literal type="string">"2CE4B44A83301270002C20D0321CFD00"</literal> \

<literal type="string">"11CCEF784C26A400F43DFB901BCA7538"</literal> \

<literal type="string">"F2C6B176001CF5A0FD16D2C48B1D0C1C"</literal> \

<literal type="string">"F6AC8E1DA6BCC3B4E1F96B0564965300"</literal> \

<literal type="string">"FFA1D0B601EB2800F489AA512C4B248C"</literal> \

<literal type="string">"01F76949A60BB7F00A40B1EAB64BDD48"</literal> \

<literal type="string">"E8A700D60B7F1200FA8E77B0A979DABF"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>my_dhm_G</name> <init>= <expr><literal type="string">"4"</literal></expr></init></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gnutls/gnutls.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_DIGEST_LENGTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/base64.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/md5.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rc4.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/bio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/buffer.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_SIG_SIZE</name></cpp:macro> <cpp:value>1536</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_LARGE_HEADER_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>packetSize</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>RTMP_ctrlC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>RTMPProtocolStrings</name><index>[]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"RTMP"</literal></expr>,

<expr><literal type="string">"RTMPT"</literal></expr>,

<expr><literal type="string">"RTMPE"</literal></expr>,

<expr><literal type="string">"RTMPTE"</literal></expr>,

<expr><literal type="string">"RTMPS"</literal></expr>,

<expr><literal type="string">"RTMPTS"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"RTMFP"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>RTMPProtocolStringsLower</name><index>[]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"rtmp"</literal></expr>,

<expr><literal type="string">"rtmpt"</literal></expr>,

<expr><literal type="string">"rtmpe"</literal></expr>,

<expr><literal type="string">"rtmpte"</literal></expr>,

<expr><literal type="string">"rtmps"</literal></expr>,

<expr><literal type="string">"rtmpts"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"rtmfp"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>RTMPT_cmds</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"open"</literal></expr>,

<expr><literal type="string">"send"</literal></expr>,

<expr><literal type="string">"idle"</literal></expr>,

<expr><literal type="string">"close"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>RTMPT_OPEN</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><name>RTMPT_SEND</name></decl>, <decl><name>RTMPT_IDLE</name></decl>, <decl><name>RTMPT_CLOSE</name></decl>

}</block></enum></type> <name>RTMPTCmd</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DumpMetaData</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>HandShake</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>FP9HandShake</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SocksNegotiate</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendConnectPacket</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendCheckBW</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendCheckBWResult</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>txn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendDeleteStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dStreamId</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendFCSubscribe</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>subscribepath</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendPlay</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendBytesReceived</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendUsherToken</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>usherToken</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendFCUnpublish</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

static int SendBGHasStream(RTMP *r, double dId, AVal *playpath);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>HandleInvoke</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>body</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nBodySize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>HandleMetadata</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>body</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>HandleChangeChunkSize</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>HandleAudio</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>HandleVideo</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>HandleCtrl</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>HandleServerBW</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>HandleClientBW</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ReadN</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>WriteN</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecodeTEA</name><parameter_list>(<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>HTTP_Post</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPTCmd</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>HTTP_read</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fill</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>clk_tck</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"handshake.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>uint32_t</name></type>

<name>RTMP_GetTime</name><parameter_list>()</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><call><name>timeGetTime</name><argument_list>()</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>tms</name></name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clk_tck</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>clk_tck</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_CLK_TCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>times</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <name>clk_tck</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>socketerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FormatMessageA</name> <argument_list>(<argument><expr><name>FORMAT_MESSAGE_FROM_SYSTEM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buff</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>buff</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>buff</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>err</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"unknown error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buff</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMP_UserInterrupt</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>RTMP_ctrlC</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMPPacket_Reset</name><parameter_list>(<parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m_headerType</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m_packetType</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m_nBytesRead</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMPPacket_Alloc</name><parameter_list>(<parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_BITS</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>-</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nSize</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m_body</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m_nBytesRead</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMPPacket_Free</name><parameter_list>(<parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>m_body</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m_body</name></name> <operator>-</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m_body</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMPPacket_Dump</name><parameter_list>(<parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,

<argument><expr><literal type="string">"RTMP PACKET: packet type: 0x%02x. channel: 0x%02x. info 1: %d info 2: %d. Body size: %u. body: 0x%02x"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m_packetType</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>m_nInfoField2</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>m_body</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>m_body</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_LibVersion</name><parameter_list>()</parameter_list>

<block>{<block_content>

<return>return <expr><name>RTMP_LIB_VERSION</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMP_TLS_LoadCerts</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>cacert</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mbedtls_x509_crt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crt_init</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>HCERTSTORE</name></type> <name>hCertStore</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PCCERT_CONTEXT</name></type> <name>pCertContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hCertStore</name> <operator>=</operator> <call><name>CertOpenSystemStore</name><argument_list>(<argument><expr><operator>(</operator><name>HCRYPTPROV</name><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="string">L"ROOT"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>pCertContext</name> <operator>=</operator> <call><name>CertEnumCertificatesInStore</name><argument_list>(<argument><expr><name>hCertStore</name></expr></argument>, <argument><expr><name>pCertContext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mbedtls_x509_crt_parse_der</name><argument_list>(<argument><expr><name>chain</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pCertContext</name><operator>-&gt;</operator><name>pbCertEncoded</name></name></expr></argument>,

<argument><expr><name><name>pCertContext</name><operator>-&gt;</operator><name>cbCertEncoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CertFreeCertificateContext</name><argument_list>(<argument><expr><name>pCertContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CertCloseStore</name><argument_list>(<argument><expr><name>hCertStore</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>SecKeychainRef</name></type> <name>keychain_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>search_settings_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>result_ref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SecKeychainOpen</name><argument_list>(<argument><expr><literal type="string">"/System/Library/Keychains/SystemRootCertificates.keychain"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>keychain_ref</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>errSecSuccess</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>search_settings_ref</name> <operator>=</operator> <call><name>CFDictionaryCreateMutable</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>search_settings_ref</name></expr></argument>, <argument><expr><name>kSecClass</name></expr></argument>, <argument><expr><name>kSecClassCertificate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>search_settings_ref</name></expr></argument>, <argument><expr><name>kSecMatchLimit</name></expr></argument>, <argument><expr><name>kSecMatchLimitAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>search_settings_ref</name></expr></argument>, <argument><expr><name>kSecReturnRef</name></expr></argument>, <argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>search_settings_ref</name></expr></argument>, <argument><expr><name>kSecMatchSearchList</name></expr></argument>,

<argument><expr><call><name>CFArrayCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>keychain_ref</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SecItemCopyMatching</name><argument_list>(<argument><expr><name>search_settings_ref</name></expr></argument>, <argument><expr><operator>(</operator><name>CFTypeRef</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>result_ref</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>errSecSuccess</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>CFIndex</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>result_ref</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>SecCertificateRef</name></type> <name>item_ref</name> <init>= <expr><operator>(</operator><name>SecCertificateRef</name><operator>)</operator>

<call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>result_ref</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDataRef</name></type> <name>data_ref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data_ref</name> <operator>=</operator> <call><name>SecCertificateCopyData</name><argument_list>(<argument><expr><name>item_ref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mbedtls_x509_crt_parse_der</name><argument_list>(<argument><expr><name>chain</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>CFDataGetBytePtr</name><argument_list>(<argument><expr><name>data_ref</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>CFDataGetLength</name><argument_list>(<argument><expr><name>data_ref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>data_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>keychain_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><call><name>mbedtls_x509_crt_parse_path</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><literal type="string">"/etc/ssl/certs/"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_x509_crt_parse_path: Couldn't parse "</literal>

<literal type="string">"/etc/ssl/certs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_ca_chain</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>, <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"RTMP_TLS_LoadCerts: Failed to load "</literal>

<literal type="string">"root certificate chains, RTMPS connections will likely "</literal>

<literal type="string">"fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>cacert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMP_TLS_Init</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>pers</name> <init>= <expr><literal type="string">"RTMP_TLS"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tls_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_config_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ctr_drbg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>ctr_drbg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_entropy_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>entropy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ctr_drbg_seed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>ctr_drbg</name></name></expr></argument>,

<argument><expr><name>mbedtls_entropy_func</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>entropy</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pers</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_TLS_LoadCerts</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLARSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><name>RTMP_TLS_ctx</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tls_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>havege_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>hs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_SSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><call><name>gnutls_global_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RTMP_TLS_ctx</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tls_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_certificate_allocate_credentials</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_priority_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>prios</name></name></expr></argument>, <argument><expr><literal type="string">"NORMAL"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_certificate_set_x509_trust_file</name><argument_list>(<argument><expr><name><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>,

<argument><expr><literal type="string">"ca.pem"</literal></expr></argument>, <argument><expr><name>GNUTLS_X509_FMT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_SSL</name></expr></argument>)</argument_list></call></expr></cpp:elif> 

<expr_stmt><expr><call><name>SSL_load_error_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_library_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OpenSSL_add_all_digests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RTMP_TLS_ctx</name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><call><name>SSLv23_method</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>RTMP_TLS_ctx</name></expr></argument>, <argument><expr><name>SSL_OP_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_default_verify_paths</name><argument_list>(<argument><expr><name>RTMP_TLS_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMP_TLS_Free</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_config_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ctr_drbg_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>ctr_drbg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_entropy_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>entropy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>cacert</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>cacert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>cacert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>cacert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>RTMP</name> <modifier>*</modifier></type>

<name>RTMP_Alloc</name><parameter_list>()</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTMP</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMP_Free</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>RTMP_TLS_Free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMP_Init</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTMP</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_inChunkSize</name></name> <operator>=</operator> <name>RTMP_DEFAULT_CHUNKSIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_outChunkSize</name></name> <operator>=</operator> <name>RTMP_DEFAULT_CHUNKSIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_bSendChunkSizeInfo</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nBufferMS</name></name> <operator>=</operator> <literal type="number">30000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nClientBW</name></name> <operator>=</operator> <literal type="number">2500000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nClientBW2</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nServerBW</name></name> <operator>=</operator> <literal type="number">2500000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_fAudioCodecs</name></name> <operator>=</operator> <literal type="number">3191.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_fVideoCodecs</name></name> <operator>=</operator> <literal type="number">252.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>curStreamIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>swfAge</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RTMP_TLS_Init</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMP_EnableWrite</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>|=</operator> <name>RTMP_FEATURE_WRITE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>double</name></type>

<name>RTMP_GetDuration</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>m_fDuration</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_IsConnected</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SOCKET</name></type>

<name>RTMP_Socket</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_IsTimedout</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_timedout</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMP_SetBufferMS</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nBufferMS</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMP_UpdateBufferMS</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_SendCtrl</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_stream_id</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_nBufferMS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OSS</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSS</name></cpp:macro> <cpp:value>"WIN"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSS</name></cpp:macro> <cpp:value>"SOL"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSS</name></cpp:macro> <cpp:value>"MAC"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSS</name></cpp:macro> <cpp:value>"LNX"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSS</name></cpp:macro> <cpp:value>"GNU"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_VERSTR</name></cpp:macro> <cpp:value>OSS " 10,0,32,18"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>DEFAULT_FLASH_VER</name><index>[]</index></name> <init>= <expr><name>DEF_VERSTR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVal</name></type> <name>RTMP_DefaultFlashVer</name> <init>=

<expr><block>{ <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>DEFAULT_FLASH_VER</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DEFAULT_FLASH_VER</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>SocksSetup</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>sockshost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sockshost</name><operator>-&gt;</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>socksport</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>sockshost</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>sockshost</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>socksport</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hostname</name><index>[<expr><name>socksport</name> <operator>-</operator> <name><name>sockshost</name><operator>-&gt;</operator><name>av_val</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>sockshost</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>hostname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>sockshost</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>socksport</name></name> <operator>=</operator> <ternary><condition><expr><name>socksport</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>socksport</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1080</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Connecting via SOCKS proxy: %s:%d"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>sockshost</name><operator>.</operator><name>av_val</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>socksport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>sockshost</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>sockshost</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>socksport</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>parseAMF</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>av</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObjectProperty</name></type> <name>prop</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>av</name><operator>-&gt;</operator><name>av_val</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_BOOLEAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_vu</name><operator>.</operator><name>p_aval</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_vu</name><operator>.</operator><name>p_aval</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <name><name>av</name><operator>-&gt;</operator><name>av_len</name></name> <operator>-</operator> <operator>(</operator><name>p</name><operator>-</operator><name>arg</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_OBJECT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>depth</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>depth</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_name</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name><operator>+</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_name</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name>arg</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_BOOLEAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_vu</name><operator>.</operator><name>p_aval</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_vu</name><operator>.</operator><name>p_aval</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <name><name>av</name><operator>-&gt;</operator><name>av_len</name></name> <operator>-</operator> <operator>(</operator><name>p</name><operator>-</operator><name>arg</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>p_type</name></name> <operator>=</operator> <name>AMF_OBJECT</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>depth</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>o2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>*</operator><name>depth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>o2</name> <operator>=</operator> <operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>o_props</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <name>o2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_AddProp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>.</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>depth</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>RTMP_SetupURL</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>RTMP_ParseURL</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name> <operator>&lt;</operator> <name>url</name> <operator>+</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name> <operator>+</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name> <operator>-</operator> <name>url</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_len</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name> <operator>+</operator>

<sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"rtmpte://:65535/"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><literal type="string">"%s://%.*s:%d/%.*s"</literal></expr></argument>,

<argument><expr><name><name>RTMPProtocolStringsLower</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_val</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>port</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>lFlags</name></name> <operator>|=</operator> <name>RTMP_LF_FTCU</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>lFlags</name></name> <operator>&amp;</operator> <name>RTMP_LF_SWFV</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>swfUrl</name><operator>.</operator><name>av_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_HASHSWF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RTMP_HashSWF</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>swfUrl</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFSize</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFHash</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>swfAge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>FALSE</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SocksSetup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>sockshost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_SSL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>port</name></name> <operator>=</operator> <literal type="number">443</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_HTTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>port</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>port</name></name> <operator>=</operator> <literal type="number">1935</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>RTMP_AddStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>playpath</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>pp</name> <init>= <expr><block>{ <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>playpath</name></expr>, <expr><name>playpath</name><operator>?</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>playpath</name></expr></argument>)</argument_list></call><operator>:</operator><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_ParsePlaypath</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name></expr>]</index></name><operator>.</operator><name>playpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>add_addr_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen_hint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>socket_error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>av_val</name><index>[<expr><name><name>host</name><operator>-&gt;</operator><name>av_len</name></name></expr>]</index></name> <operator>||</operator> <name><name>host</name><operator>-&gt;</operator><name>av_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v6</name> <init>= <expr><name><name>host</name><operator>-&gt;</operator><name>av_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hostname</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>av_len</name></name><operator>+</operator><literal type="number">1</literal> <operator>-</operator> <name>v6</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>av_val</name></name> <operator>+</operator> <name>v6</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>av_len</name></name> <operator>-</operator> <name>v6</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hostname</name><index>[<expr><name><name>host</name><operator>-&gt;</operator><name>av_len</name></name> <operator>-</operator> <name>v6</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>host</name><operator>-&gt;</operator><name>av_val</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>addrlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>portStr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>portStr</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>portStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gai_strerrorA</name></cpp:macro> <cpp:value>gai_strerror</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not resolve %s: %s (%d)"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>gai_strerrorA</name><argument_list>(<argument><expr><call><name>GetSockError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetSockError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>socket_error</name> <operator>=</operator> <call><name>GetSockError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<goto>goto <name>finish</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>result</name></expr>;</init> <condition><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>addrlen_hint</name> <operator>||</operator> <name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>==</operator> <name>addrlen_hint</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>addrlen</name> <operator>=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>addrlen</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>result</name></expr>;</init> <condition><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>addrlen_hint</name> <operator>||</operator> <name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>==</operator> <name>addrlen_hint</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>addrlen</name> <operator>=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_UNSPEC</name> <operator>||</operator> <operator>*</operator><name>addrlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>socket_error</name> <operator>=</operator> <name>WSANO_DATA</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__FreeBSD__</name></expr></cpp:elif>

<expr_stmt><expr><operator>*</operator><name>socket_error</name> <operator>=</operator> <name>ENOATTR</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>*</operator><name>socket_error</name> <operator>=</operator> <name>ENODATA</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not resolve server '%s': no valid address found"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<goto>goto <name>finish</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>

<if_stmt><if>if <condition>(<expr><name>hostname</name> <operator>!=</operator> <name><name>host</name><operator>-&gt;</operator><name>av_val</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_TIMEDOUT</name></cpp:macro> <cpp:value>WSAETIMEDOUT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_CONNREFUSED</name></cpp:macro> <cpp:value>WSAECONNREFUSED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_ACCES</name></cpp:macro> <cpp:value>WSAEACCES</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_TIMEDOUT</name></cpp:macro> <cpp:value>ETIMEDOUT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_CONNREFUSED</name></cpp:macro> <cpp:value>ECONNREFUSED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_ACCES</name></cpp:macro> <cpp:value>EACCES</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>RTMP_Connect0</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type> <name>service</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>on</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_timedout</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_fDuration</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name> <operator>=</operator> <call><name>WSASocket</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WSA_FLAG_OVERLAPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_NOSIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>setsockopt</name><argument_list>(<argument>r-&gt;m_sb.sb_socket</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_NOSIGPIPE</argument>, <argument>&amp;(int){ <literal type="number">1</literal> }</argument>, <argument>sizeof(int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_bindIP</name><operator>.</operator><name>addrLen</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_bindIP</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_bindIP</name><operator>.</operator><name>addrLen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>GetSockError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, failed to bind socket: %s (%d)"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>socketerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>last_error_code</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>connect_start</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>GetSockError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>E_CONNREFUSED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s is offline. Try a different server (ECONNREFUSED)."</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <name>E_ACCES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"The connection is being blocked by a firewall or other security software (EACCES)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <name>E_TIMEDOUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"The connection timed out. Try a different server, or check that the connection is not being blocked by a firewall or other security software (ETIMEDOUT)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, failed to connect socket: %s (%d)"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>socketerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>last_error_code</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>connect_time_ms</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>os_gettime_ns</name><argument_list>()</argument_list></call> <operator>-</operator> <name>connect_start</name><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>socksport</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s ... SOCKS negotiation"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SocksNegotiate</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, SOCKS negotiation failed."</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, failed to create socket. Error: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><call><name>GetSockError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>SET_RCVTIMEO</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name>

<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVTIMEO</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, Setting socket timeout to %ds failed!"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_bUseNagle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>on</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_Connect1</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_SSL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>TLS_client</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>mbedtls_net_context</name> <modifier>*</modifier></type><name>server_fd</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>RTMP_TLS_ctx</name><operator>-&gt;</operator><name>net</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>server_fd</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TLS_setfd</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_ssl</name></name></expr></argument>, <argument><expr><name>server_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><name>MBEDTLS_SSL_MAX_HOST_NAME_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_len</name></name> <operator>&gt;=</operator> <name>MBEDTLS_SSL_MAX_HOST_NAME_LEN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hostname</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mbedtls_ssl_set_hostname</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_ssl</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>TLS_setfd</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_ssl</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>connect_return</name> <init>= <expr><call><name>TLS_connect</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_ssl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>connect_return</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>last_error_code</name></name> <operator>=</operator> <name>connect_return</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>connect_return</name> <operator>==</operator> <name>MBEDTLS_ERR_X509_CERT_VERIFY_FAILED</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>verify_result</name> <init>= <expr><call><name>mbedtls_ssl_get_verify_result</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_ssl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>verify_result</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>err</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mbedtls_x509_crt_verify_info</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>verify_result</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unknown error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, Cert verify failed: %d (%s)"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>verify_result</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>connect_return</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>connect_return</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, TLS_Connect failed: -0x%x"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>connect_return</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, no SSL/TLS support"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_HTTP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_msgCounter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HTTP_Post</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>RTMPT_OPEN</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HTTP_read</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_msgCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, Could not connect for handshake"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_msgCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, ... connected, handshaking"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HandShake</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, handshake failed."</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, handshaked"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SendConnectPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, RTMP connect failed."</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_Connect</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HOSTENT</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>service</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>addrlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>addrlen_hint</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>socket_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>gethostbyname</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name> <operator>&amp;&amp;</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>WSAHOST_NOT_FOUND</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>last_error_code</name></name> <operator>=</operator> <name>WSAHOST_NOT_FOUND</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"RTMP_Connect: Connection test failed. This error is likely caused by Comodo Internet Security running OBS in sandbox mode. Please add OBS to the Comodo automatic sandbox exclusion list, restart OBS and try again (11001)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>service</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_bindIP</name><operator>.</operator><name>addrLen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>addrlen_hint</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_bindIP</name><operator>.</operator><name>addrLen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>socksport</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_addr_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>sockshost</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>socksport</name></name></expr></argument>, <argument><expr><name>addrlen_hint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socket_error</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>last_error_code</name></name> <operator>=</operator> <name>socket_error</name></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_addr_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name>addrlen_hint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socket_error</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>last_error_code</name></name> <operator>=</operator> <name>socket_error</name></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTMP_Connect0</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>service</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_bSendCounter</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_Connect1</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SocksNegotiate</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>service</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>addrlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>socket_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>service</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_addr_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>socket_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>service</name><operator>)</operator><operator>.</operator><name><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>packet</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, 

<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>port</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>,

<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>port</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>,

<expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>, <expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>,

<expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>, <expr><operator>(</operator><name>char</name><operator>)</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>WriteN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><sizeof>sizeof <name>packet</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReadN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>packet</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">90</literal></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, SOCKS returned error code %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>packet</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_ConnectStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seekTime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>seekTime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>seekTime</name></name> <operator>=</operator> <name>seekTime</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_mediaChannel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_bPlaying</name></name> <operator>&amp;&amp;</operator> <call><name>RTMP_IsConnected</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RTMP_ReadPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RTMPPacket_IsReady</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_AUDIO</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_VIDEO</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_INFO</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>, <argument><expr><literal type="string">"Received FLV packet before play()! Ignoring."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMPPacket_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_ClientPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMPPacket_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>m_bPlaying</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_ReconnectStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seekTime</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_DeleteStream</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>streamIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_SendCreateStream</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_ConnectStream</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>seekTime</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_ToggleStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RTMP_IsTimedout</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>RTMP_READ_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>RTMP_SendPause</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_pauseStamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>RTMP_SendPause</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_pauseStamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMP_DeleteStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_stream_id</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_bPlaying</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendFCUnpublish</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>streamIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SendDeleteStream</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_stream_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_GetNextMediaPacket</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bHasMediaPacket</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name>bHasMediaPacket</name> <operator>&amp;&amp;</operator> <call><name>RTMP_IsConnected</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>RTMP_ReadPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTMPPacket_IsReady</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr>)</condition>

<block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bHasMediaPacket</name> <operator>=</operator> <call><name>RTMP_ClientPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bHasMediaPacket</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMPPacket_Free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name> <operator>&lt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_mediaStamp</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bHasMediaPacket</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,

<argument><expr><literal type="string">"Skipped type: %02X, size: %d, TS: %d ms, abs TS: %d, pause: %d ms"</literal></expr></argument>,

<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_packetType</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>,

<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_hasAbsTimestamp</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_mediaStamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>RTMPPacket_Free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>bHasMediaPacket</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_bPlaying</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_timedout</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_pauseStamp</name></name> <operator>=</operator> <ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>m_mediaChannel</name></name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedIn</name></name></expr> ?</condition><then>

<expr><name><name>r</name><operator>-&gt;</operator><name>m_channelTimestamp</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>m_mediaChannel</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bHasMediaPacket</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_ClientPacket</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bHasMediaPacket</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_packetType</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>RTMP_PACKET_TYPE_CHUNK_SIZE</name></expr>:</case>

<expr_stmt><expr><call><name>HandleChangeChunkSize</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RTMP_PACKET_TYPE_BYTES_READ_REPORT</name></expr>:</case>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, received: bytes read report"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RTMP_PACKET_TYPE_CONTROL</name></expr>:</case>

<expr_stmt><expr><call><name>HandleCtrl</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RTMP_PACKET_TYPE_SERVER_BW</name></expr>:</case>

<expr_stmt><expr><call><name>HandleServerBW</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RTMP_PACKET_TYPE_CLIENT_BW</name></expr>:</case>

<expr_stmt><expr><call><name>HandleClientBW</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RTMP_PACKET_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><call><name>HandleAudio</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bHasMediaPacket</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_mediaChannel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_mediaChannel</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_mediaStamp</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>RTMP_PACKET_TYPE_VIDEO</name></expr>:</case>

<expr_stmt><expr><call><name>HandleVideo</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bHasMediaPacket</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_mediaChannel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_mediaChannel</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_mediaStamp</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>RTMP_PACKET_TYPE_FLEX_STREAM_SEND</name></expr>:</case>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,

<argument><expr><literal type="string">"%s, flex stream send, size %u bytes, not supported, ignoring"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RTMP_PACKET_TYPE_FLEX_SHARED_OBJECT</name></expr>:</case>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,

<argument><expr><literal type="string">"%s, flex shared object, size %u bytes, not supported, ignoring"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RTMP_PACKET_TYPE_FLEX_MESSAGE</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,

<argument><expr><literal type="string">"%s, flex message, size %u bytes, not fully supported"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

RTMP_LIB_AMFObject obj;

int nRes = obj.Decode(packet.m_body+1, packet.m_nBodySize-1);

if(nRes &lt; 0)

{

RTMP_Log(RTMP_LOGERROR, "%s, error decoding AMF3 packet", __FUNCTION__);

}

obj.Dump();

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>HandleInvoke</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bHasMediaPacket</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>RTMP_PACKET_TYPE_INFO</name></expr>:</case>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, received: notify %u bytes"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HandleMetadata</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bHasMediaPacket</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>RTMP_PACKET_TYPE_SHARED_OBJECT</name></expr>:</case>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, shared object, not supported, ignoring"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RTMP_PACKET_TYPE_INVOKE</name></expr>:</case>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, received: invoke %u bytes"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HandleInvoke</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bHasMediaPacket</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>RTMP_PACKET_TYPE_FLASH_VIDEO</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nTimeStamp</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">11</literal> <operator>&lt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dataSize</name> <init>= <expr><call><name>AMF_DecodeInt24</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <name>dataSize</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>, <argument><expr><literal type="string">"Stream corrupt?!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x12</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>HandleMetadata</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_body</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nTimeStamp</name> <operator>=</operator> <call><name>AMF_DecodeInt24</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nTimeStamp</name> <operator>|=</operator> <operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>m_body</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <operator>(</operator><literal type="number">11</literal> <operator>+</operator> <name>dataSize</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_mediaStamp</name></name> <operator>=</operator> <name>nTimeStamp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bHasMediaPacket</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, unknown packet type received: 0x%02x"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_packetType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

<return>return <expr><name>bHasMediaPacket</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RTMP_NETSTACK_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type><name>netstackdump</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type><name>netstackdump_read</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ReadN</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nOriginalSize</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>avail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_timedout</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nRead</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_HTTP</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>refill</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_resplen</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_size</name></name> <operator>&lt;</operator> <literal type="number">13</literal> <operator>||</operator> <name>refill</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_unackd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>HTTP_Post</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>RTMPT_IDLE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTMPSockBuf_Fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_timedout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>HTTP_read</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, No valid HTTP response found"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>refill</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>refill</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_resplen</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMPSockBuf_Fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>avail</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_resplen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>avail</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_resplen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>avail</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RTMPSockBuf_Fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_timedout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>avail</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nRead</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&lt;</operator> <name>avail</name><operator>)</operator></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>avail</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_start</name></name></expr></argument>, <argument><expr><name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_start</name></name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_size</name></name> <operator>-=</operator> <name>nRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nBytes</name> <operator>=</operator> <name>nRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nBytesIn</name></name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_bSendCounter</name></name>

<operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_nBytesIn</name></name> <operator>&gt;</operator> <operator>(</operator> <name><name>r</name><operator>-&gt;</operator><name>m_nBytesInSent</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>m_nClientBW</name></name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SendBytesReceived</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RTMP_NETSTACK_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>, <argument><expr><name>netstackdump_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>nBytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, RTMP socket closed by peer"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_HTTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_resplen</name></name> <operator>-=</operator> <name>nBytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyIn</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RC4_encrypt</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyIn</name></name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>nBytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>nBytes</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>nOriginalSize</name> <operator>-</operator> <name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>WriteN</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>encrypted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>RTMP_BUFFER_CACHE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyOut</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>encrypted</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>encrypted</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>encrypted</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RC4_encrypt2</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyOut</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nBytes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_HTTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nBytes</name> <operator>=</operator> <call><name>HTTP_Post</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>RTMPT_SEND</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_bCustomSend</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_customSendFunc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nBytes</name> <operator>=</operator> <call><name><name>r</name><operator>-&gt;</operator><name>m_customSendFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_customSendParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nBytes</name> <operator>=</operator> <call><name>RTMPSockBuf_Send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nBytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sockerr</name> <init>= <expr><call><name>GetSockError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, RTMP send error %d (%d bytes)"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name>sockerr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sockerr</name> <operator>==</operator> <name>EINTR</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>RTMP_ctrlC</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>last_error_code</name></name> <operator>=</operator> <name>sockerr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nBytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>nBytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>nBytes</name></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>encrypted</name> <operator>&amp;&amp;</operator> <name>encrypted</name> <operator>!=</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>encrypted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAVC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const AVal av_##x = AVC(#x)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>flashVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>swfUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>pageUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>tcUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>fpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>capabilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>audioCodecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>videoCodecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>videoFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>objectEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>secureToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>secureTokenResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>nonprivate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendConnectPacket</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_bSendChunkSizeInfo</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_LARGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_CHUNK_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_outChunkSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_LARGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_OBJECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNamedString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_app</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_WRITE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNamedString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_nonprivate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>flashVer</name><operator>.</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNamedString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_flashVer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>flashVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>swfUrl</name><operator>.</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNamedString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_swfUrl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>swfUrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNamedString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_tcUrl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_WRITE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNamedBoolean</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_fpad</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNamedNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_capabilities</name></expr></argument>, <argument><expr><literal type="number">15.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNamedNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_audioCodecs</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_fAudioCodecs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNamedNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_videoCodecs</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_fVideoCodecs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNamedNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_videoFunction</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pageUrl</name><operator>.</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNamedString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_pageUrl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pageUrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_fEncoding</name></name> <operator>!=</operator> <literal type="number">0.0</literal> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>m_bSendEncoding</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNamedNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_objectEncoding</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_fEncoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name>pend</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_OBJECT_END</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>auth</name><operator>.</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeBoolean</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>lFlags</name></name> <operator>&amp;</operator> <name>RTMP_LF_AUTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>extras</name><operator>.</operator><name>o_num</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>extras</name><operator>.</operator><name>o_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMFProp_Encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>extras</name><operator>.</operator><name>o_props</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

SAVC(bgHasStream);

static int

SendBGHasStream(RTMP *r, double dId, AVal *playpath)

{

RTMPPacket packet;

char pbuf[1024], *pend = pbuf + sizeof(pbuf);

char *enc;

packet.m_forceChannel = FALSE;

packet.m_nChannel = 0x03; 

packet.m_headerType = RTMP_PACKET_SIZE_MEDIUM;

packet.m_packetType = RTMP_PACKET_TYPE_INVOKE;

packet.m_nTimeStamp = 0;

packet.m_nInfoField2 = 0;

packet.m_hasAbsTimestamp = 0;

packet.m_body = pbuf + RTMP_MAX_HEADER_SIZE;

enc = packet.m_body;

enc = AMF_EncodeString(enc, pend, &amp;av_bgHasStream);

enc = AMF_EncodeNumber(enc, pend, dId);

*enc++ = AMF_NULL;

enc = AMF_EncodeString(enc, pend, playpath);

if (enc == NULL)

return FALSE;

packet.m_nBodySize = enc - packet.m_body;

return RTMP_SendPacket(r, &amp;packet, TRUE);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>createStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>

<name>RTMP_SendCreateStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_createStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>FCSubscribe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendFCSubscribe</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>subscribepath</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"FCSubscribe: %s"</literal></expr></argument>, <argument><expr><name><name>subscribepath</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_FCSubscribe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>subscribepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Authenticate_UsherToken</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Authenticate.UsherToken"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendUsherToken</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>usherToken</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"UsherToken: %s"</literal></expr></argument>, <argument><expr><name><name>usherToken</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Authenticate_UsherToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>usherToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>releaseStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendReleaseStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_releaseStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>streamIdx</name></expr>]</index></name><operator>.</operator><name>playpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>FCPublish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendFCPublish</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_FCPublish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>streamIdx</name></expr>]</index></name><operator>.</operator><name>playpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>FCUnpublish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendFCUnpublish</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_FCUnpublish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>streamIdx</name></expr>]</index></name><operator>.</operator><name>playpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>publish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>live</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendPublish</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_LARGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>streamIdx</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_publish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>streamIdx</name></expr>]</index></name><operator>.</operator><name>playpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_live</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>deleteStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendDeleteStream</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dStreamId</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_deleteStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>dStreamId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>

<name>RTMP_SendPause</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>DoPause</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iTime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeBoolean</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>DoPause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>iTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, %d, pauseTime=%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>DoPause</name></expr></argument>, <argument><expr><name>iTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>RTMP_Pause</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>DoPause</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>DoPause</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_pauseStamp</name></name> <operator>=</operator> <ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>m_mediaChannel</name></name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedIn</name></name></expr> ?</condition><then>

<expr><name><name>r</name><operator>-&gt;</operator><name>m_channelTimestamp</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>m_mediaChannel</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>RTMP_SendPause</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DoPause</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_pauseStamp</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>seek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>

<name>RTMP_SendSeek</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iTime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_seek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>iTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>RTMP_READ_SEEKING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nResumeTS</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_SendServerBW</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_LARGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_SERVER_BW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_nServerBW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_SendClientBW</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_LARGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_CLIENT_BW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_nClientBW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_nClientBW2</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendBytesReceived</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_BYTES_READ_REPORT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_nBytesIn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nBytesInSent</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_nBytesIn</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>_checkbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendCheckBW</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_LARGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av__checkbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendCheckBWResult</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>txn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0x16</literal> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>m_nBWCheckCounter</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av__result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>m_nBWCheckCounter</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>ping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>pong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendPong</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>txn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0x16</literal> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>m_nBWCheckCounter</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_pong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>play</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendPlay</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_LARGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>streamIdx</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_play</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>++</operator><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, seekTime=%d, stopTime=%d, sending play: %s"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>seekTime</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>stopTime</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>streamIdx</name></expr>]</index></name><operator>.</operator><name><name>playpath</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>streamIdx</name></expr>]</index></name><operator>.</operator><name>playpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>lFlags</name></name> <operator>&amp;</operator> <name>RTMP_LF_LIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>seekTime</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>seekTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>stopTime</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>stopTime</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>seekTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>set_playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendPlaylist</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_LARGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>streamIdx</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_set_playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_ECMA_ARRAY</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_OBJECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNamedString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>streamIdx</name></expr>]</index></name><operator>.</operator><name>playpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name>pend</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_OBJECT_END</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SendSecureTokenResponse</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_secureTokenResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeNumber</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>enc</name><operator>++</operator> <operator>=</operator> <name>AMF_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_SendCtrl</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>nType</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nObject</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nTime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>pbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"sending ctrl. type: 0x%04x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>nType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>=</operator> <name>RTMP_PACKET_TYPE_CONTROL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nInfoField2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_body</name></name> <operator>=</operator> <name>pbuf</name> <operator>+</operator> <name>RTMP_MAX_HEADER_SIZE</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>nType</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x03</literal></expr>:</case>

<expr_stmt><expr><name>nSize</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<break>break;</break> 

<case>case <expr><literal type="number">0x1A</literal></expr>:</case>

<expr_stmt><expr><name>nSize</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break> 

<case>case <expr><literal type="number">0x1B</literal></expr>:</case>

<expr_stmt><expr><name>nSize</name> <operator>=</operator> <literal type="number">44</literal></expr>;</expr_stmt>

<break>break;</break> 

<default>default:</default>

<expr_stmt><expr><name>nSize</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name> <operator>=</operator> <name>nSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>AMF_EncodeInt16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>nType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nType</name> <operator>==</operator> <literal type="number">0x1B</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFVerificationResponse</name></name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Sending SWFVerification response: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_LogHex</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>packet</name><operator>.</operator><name>m_body</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>nType</name> <operator>==</operator> <literal type="number">0x1A</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>nObject</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>nObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>nTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>AV_erase</name><parameter_list>(<parameter><decl><type><name>RTMP_METHOD</name> <modifier>*</modifier></type><name>vals</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>freeit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>freeit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>num</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vals</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMP_DropRequest</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>freeit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>AV_erase</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>freeit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>AV_queue</name><parameter_list>(<parameter><decl><type><name>RTMP_METHOD</name> <modifier>*</modifier><modifier>*</modifier></type><name>vals</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>av</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>vals</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><operator>*</operator><name>vals</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>num</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RTMP_METHOD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>av</name><operator>-&gt;</operator><name>av_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>av</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>av</name><operator>-&gt;</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name><name>av</name><operator>-&gt;</operator><name>av_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>vals</name><operator>)</operator><index>[<expr><operator>*</operator><name>num</name></expr>]</index><operator>.</operator><name>num</name> <operator>=</operator> <name>txn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>vals</name><operator>)</operator><index>[<expr><operator>*</operator><name>num</name></expr>]</index><operator>.</operator><name><name>name</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <name><name>av</name><operator>-&gt;</operator><name>av_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>vals</name><operator>)</operator><index>[<expr><operator>(</operator><operator>*</operator><name>num</name><operator>)</operator><operator>++</operator></expr>]</index><operator>.</operator><name><name>name</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>AV_clear</name><parameter_list>(<parameter><decl><type><name>RTMP_METHOD</name> <modifier>*</modifier></type><name>vals</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_ONLY_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>b64enc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>maxsize</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>size_t</name></type> <name>osize</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>mbedtls_base64_encode</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>output</name></expr></argument>, <argument><expr><name>maxsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>osize</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>osize</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLARSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>size_t</name></type> <name>buf_size</name> <init>= <expr><name>maxsize</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>base64_encode</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_size</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>buf_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><call><name>BASE64_ENCODE_RAW_LENGTH</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>maxsize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>base64_encode_raw</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>output</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ONLY_MD5</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;=</operator> <name>maxsize</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>base64_encodestate</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>base64_init_encodestate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>+=</operator> <call><name>base64_encode_block</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>input</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>base64_encode_blockend</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bmem</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BUF_MEM</name> <modifier>*</modifier></type><name>bptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b64</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_f_base64</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bmem</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b64</name> <operator>=</operator> <call><name>BIO_push</name><argument_list>(<argument><expr><name>b64</name></expr></argument>, <argument><expr><name>bmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_write</name><argument_list>(<argument><expr><name>b64</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BIO_flush</name><argument_list>(<argument><expr><name>b64</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>BIO_get_mem_ptr</name><argument_list>(<argument><expr><name>b64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>bptr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>bptr</name><operator>-&gt;</operator><name>length</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name><name>bptr</name><operator>-&gt;</operator><name>length</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>BIO_free_all</name><argument_list>(<argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>mbedtls_md5_context</name></type> <name>MD5_CTX</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MBEDTLS_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x02070000</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Init</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_md5_init(ctx); mbedtls_md5_starts_ret(ctx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Update</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>,<parameter><type><name>data</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_md5_update_ret(ctx,(unsigned char *)data,len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Final</name><parameter_list>(<parameter><type><name>dig</name></type></parameter>,<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_md5_finish_ret(ctx,dig); mbedtls_md5_free(ctx)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Init</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_md5_init(ctx); mbedtls_md5_starts(ctx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Update</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>,<parameter><type><name>data</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_md5_update(ctx,(unsigned char *)data,len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Final</name><parameter_list>(<parameter><type><name>dig</name></type></parameter>,<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_md5_finish(ctx,dig); mbedtls_md5_free(ctx)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLARSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_CTX</name></cpp:macro> <cpp:value>md5_context</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Init</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>md5_starts(ctx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Update</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>,<parameter><type><name>data</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>md5_update(ctx,(unsigned char *)data,len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Final</name><parameter_list>(<parameter><type><name>dig</name></type></parameter>,<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>md5_finish(ctx,dig)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<typedef>typedef <type><name><name>struct</name> <name>md5_ctx</name></name></type> <name>MD5_CTX</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Init</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>md5_init(ctx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Update</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>,<parameter><type><name>data</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>md5_update(ctx,len,data)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Final</name><parameter_list>(<parameter><type><name>dig</name></type></parameter>,<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>md5_digest(ctx,MD5_DIGEST_LENGTH,dig)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_authmod_adobe</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"authmod=adobe"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_authmod_llnw</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"authmod=llnw"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hexenc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>inbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>len</name><operator>--</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>*</operator><name>inbuf</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>AValChr</name><parameter_list>(<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>av</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>av</name><operator>-&gt;</operator><name>av_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>av</name><operator>-&gt;</operator><name>av_val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>av</name><operator>-&gt;</operator><name>av_val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>PublisherAuth</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token_in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md5sum_val</name><index>[<expr><name>MD5_DIGEST_LENGTH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MD5_CTX</name></type> <name>md5ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>challenge2_data</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESPONSE_LEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHALLENGE2_LEN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SALTED2_LEN</name></cpp:macro> <cpp:value>(32+8+8+8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B64DIGEST_LEN</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B64INT_LEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXHASH_LEN</name></cpp:macro> <cpp:value>(2*MD5_DIGEST_LENGTH)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>response</name><index>[<expr><name>RESPONSE_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>challenge2</name><index>[<expr><name>CHALLENGE2_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>salted2</name><index>[<expr><name>SALTED2_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>pubToken</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>description</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>av_authmod_adobe</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>description</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><literal type="string">"code=403 need auth"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>av_authmod_adobe</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, wrong pubUser &amp; pubPasswd for publisher auth"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_CLEAN</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubUser</name><operator>.</operator><name>av_len</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubPasswd</name><operator>.</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubUser</name><operator>.</operator><name>av_len</name></name> <operator>+</operator> <name><name>av_authmod_adobe</name><operator>.</operator><name>av_len</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pubToken</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><literal type="string">"?%s&amp;user=%s"</literal></expr></argument>,

<argument><expr><name><name>av_authmod_adobe</name><operator>.</operator><name>av_val</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubUser</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, pubToken1: %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_NAME</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, need to set pubUser &amp; pubPasswd for publisher auth"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_CLEAN</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>token_in</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>description</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><literal type="string">"?reason=needauth"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>par</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>orig_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>user</name></decl>, <decl><type ref="prev"/><name>salt</name></decl>, <decl><type ref="prev"/><name>opaque</name></decl>, <decl><type ref="prev"/><name>challenge</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opaque</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <name><name>challenge</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <name><name>salt</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <name><name>user</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opaque</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name><name>challenge</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name><name>salt</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name><name>user</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>orig_ptr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>token_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ptr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>val</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aptr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>aptr</name><operator>-&gt;</operator><name>av_len</name></name> <operator>=</operator> <name>par</name> <operator>-</operator> <name><name>aptr</name><operator>-&gt;</operator><name>av_val</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>user</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <operator>&amp;</operator><name>user</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>salt</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <operator>&amp;</operator><name>salt</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="string">"opaque"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>opaque</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <operator>&amp;</operator><name>opaque</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="string">"challenge"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>challenge</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <operator>&amp;</operator><name>challenge</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, par:\"%s\" = val:\"%s\""</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>aptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>aptr</name><operator>-&gt;</operator><name>av_len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>aptr</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MD5_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name><name>user</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>user</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name><name>salt</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>salt</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubPasswd</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubPasswd</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Final</name><argument_list>(<argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, md5(%s%s%s) =&gt;"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name><name>user</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>salt</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubPasswd</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_LogHexString</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><name>MD5_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>b64enc</name><argument_list>(<argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><name>MD5_DIGEST_LENGTH</name></expr></argument>, <argument><expr><name>salted2</name></expr></argument>, <argument><expr><name>SALTED2_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, b64(md5_1) = %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>salted2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>challenge2_data</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>b64enc</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>challenge2_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>challenge2</name></expr></argument>, <argument><expr><name>CHALLENGE2_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, b64(%d) = %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>challenge2_data</name></expr></argument>, <argument><expr><name>challenge2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name>salted2</name></expr></argument>, <argument><expr><name>B64DIGEST_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opaque</name><operator>.</operator><name>av_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name><name>opaque</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>opaque</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>challenge</name><operator>.</operator><name>av_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name><name>challenge</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>challenge</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name>challenge2</name></expr></argument>, <argument><expr><name>B64INT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Final</name><argument_list>(<argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, md5(%s%s%s) =&gt;"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name>salted2</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opaque</name><operator>.</operator><name>av_len</name></name></expr> ?</condition><then> <expr><name><name>opaque</name><operator>.</operator><name>av_val</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>challenge2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_LogHexString</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><name>MD5_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>b64enc</name><argument_list>(<argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><name>MD5_DIGEST_LENGTH</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>RESPONSE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, b64(md5_2) = %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>+</operator> <name>B64INT_LEN</name> <operator>+</operator> <name>B64DIGEST_LEN</name> <operator>+</operator> <name><name>opaque</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pubToken</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>,

<argument><expr><literal type="string">"&amp;challenge=%s&amp;response=%s&amp;opaque=%s"</literal></expr></argument>,

<argument><expr><name>challenge2</name></expr></argument>,

<argument><expr><name>response</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opaque</name><operator>.</operator><name>av_len</name></name></expr> ?</condition><then> <expr><name><name>opaque</name><operator>.</operator><name>av_val</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, pubToken2: %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>orig_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_RESP</name><operator>|</operator><name>RTMP_PUB_CLATE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>description</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><literal type="string">"?reason=authfailed"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, Authentication failed: wrong password"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_CLEAN</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>description</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><literal type="string">"?reason=nosuchuser"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, Authentication failed: no such user"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_CLEAN</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, Authentication failed: unknown auth mode: %s"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>description</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_CLEAN</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name> <operator>+</operator> <name><name>pubToken</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>pubToken</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name> <operator>+=</operator> <name><name>pubToken</name><operator>.</operator><name>av_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>&amp;</operator> <name>RTMP_PUB_ALLOC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name> <operator>+</operator> <name><name>pubToken</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>pubToken</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name> <operator>+=</operator> <name><name>pubToken</name><operator>.</operator><name>av_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>&amp;</operator> <name>RTMP_PUB_ALLOC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_ALLOC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, new app: %.*s tcUrl: %.*s playpath: %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>curStreamIdx</name></name></expr>]</index></name><operator>.</operator><name><name>playpath</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>description</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>av_authmod_llnw</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>description</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><literal type="string">"code=403 need auth"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>av_authmod_llnw</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, wrong pubUser &amp; pubPasswd for publisher auth"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_CLEAN</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubUser</name><operator>.</operator><name>av_len</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubPasswd</name><operator>.</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubUser</name><operator>.</operator><name>av_len</name></name> <operator>+</operator> <name><name>av_authmod_llnw</name><operator>.</operator><name>av_len</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pubToken</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><literal type="string">"?%s&amp;user=%s"</literal></expr></argument>,

<argument><expr><name><name>av_authmod_llnw</name><operator>.</operator><name>av_val</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubUser</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, pubToken1: %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_NAME</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, need to set pubUser &amp; pubPasswd for publisher auth"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_CLEAN</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>token_in</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>description</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><literal type="string">"?reason=needauth"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>orig_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>par</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hash1</name><index>[<expr><name>HEXHASH_LEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hash2</name><index>[<expr><name>HEXHASH_LEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hash3</name><index>[<expr><name>HEXHASH_LEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>user</name></decl>, <decl><type ref="prev"/><name>nonce</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>apptmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>authmod</name><index>[]</index></name> <init>= <expr><literal type="string">"llnw"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>realm</name><index>[]</index></name> <init>= <expr><literal type="string">"live"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>method</name><index>[]</index></name> <init>= <expr><literal type="string">"publish"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>qop</name><index>[]</index></name> <init>= <expr><literal type="string">"auth"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>nchex</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>cnonce</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nonce</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <name><name>user</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nonce</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name><name>user</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>orig_ptr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>token_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ptr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>val</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aptr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>aptr</name><operator>-&gt;</operator><name>av_len</name></name> <operator>=</operator> <name>par</name> <operator>-</operator> <name><name>aptr</name><operator>-&gt;</operator><name>av_val</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>user</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <operator>&amp;</operator><name>user</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="string">"nonce"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>nonce</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <operator>&amp;</operator><name>nonce</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, par:\"%s\" = val:\"%s\""</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>aptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>aptr</name><operator>-&gt;</operator><name>av_len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>aptr</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>nchex</name></expr></argument>, <argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cnonce</name></expr></argument>, <argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name><name>user</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>user</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>realm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>realm</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubPasswd</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubPasswd</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Final</name><argument_list>(<argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, md5(%s:%s:%s) =&gt;"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name><name>user</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name>realm</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pubPasswd</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_LogHexString</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><name>MD5_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hexenc</name><argument_list>(<argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><name>MD5_DIGEST_LENGTH</name></expr></argument>, <argument><expr><name>hash1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>apptmp</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>AValChr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>apptmp</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>apptmp</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name><name>apptmp</name><operator>.</operator><name>av_val</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MD5_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>method</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><literal type="string">":/"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name><name>apptmp</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>apptmp</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AValChr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>apptmp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><literal type="string">"/_definst_"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"/_definst_"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MD5_Final</name><argument_list>(<argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, md5(%s:/%.*s) =&gt;"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name>method</name></expr></argument>, <argument><expr><name><name>apptmp</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>apptmp</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_LogHexString</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><name>MD5_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hexenc</name><argument_list>(<argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><name>MD5_DIGEST_LENGTH</name></expr></argument>, <argument><expr><name>hash2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name>hash1</name></expr></argument>, <argument><expr><name>HEXHASH_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name><name>nonce</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>nonce</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name>nchex</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nchex</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name>cnonce</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cnonce</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>qop</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>qop</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>, <argument><expr><name>hash2</name></expr></argument>, <argument><expr><name>HEXHASH_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD5_Final</name><argument_list>(<argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, md5(%s:%s:%s:%s:%s:%s) =&gt;"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name>hash1</name></expr></argument>, <argument><expr><name><name>nonce</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name>nchex</name></expr></argument>, <argument><expr><name>cnonce</name></expr></argument>, <argument><expr><name>qop</name></expr></argument>, <argument><expr><name>hash2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_LogHexString</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><name>MD5_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hexenc</name><argument_list>(<argument><expr><name>md5sum_val</name></expr></argument>, <argument><expr><name>MD5_DIGEST_LENGTH</name></expr></argument>, <argument><expr><name>hash3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">64</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>authmod</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name><name>user</name><operator>.</operator><name>av_len</name></name> <operator>+</operator> <name><name>nonce</name><operator>.</operator><name>av_len</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cnonce</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nchex</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name>HEXHASH_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>,

<argument><expr><literal type="string">"&amp;nonce=%s&amp;cnonce=%s&amp;nc=%s&amp;response=%s"</literal></expr></argument>,

<argument><expr><name><name>nonce</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name>cnonce</name></expr></argument>, <argument><expr><name>nchex</name></expr></argument>, <argument><expr><name>hash3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pubToken</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, pubToken2: %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_RESP</name><operator>|</operator><name>RTMP_PUB_CLATE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>orig_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>description</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><literal type="string">"?reason=authfail"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, Authentication failed"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_CLEAN</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>description</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><literal type="string">"?reason=nosuchuser"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, Authentication failed: no such user"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_CLEAN</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, Authentication failed: unknown auth mode: %s"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>description</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_CLEAN</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name> <operator>+</operator> <name><name>pubToken</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>pubToken</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name> <operator>+=</operator> <name><name>pubToken</name><operator>.</operator><name>av_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>&amp;</operator> <name>RTMP_PUB_ALLOC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name> <operator>+</operator> <name><name>pubToken</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>pubToken</name><operator>.</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name> <operator>+=</operator> <name><name>pubToken</name><operator>.</operator><name>av_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>&amp;</operator> <name>RTMP_PUB_ALLOC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pubToken</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_ALLOC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, new app: %.*s tcUrl: %.*s playpath: %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>curStreamIdx</name></name></expr>]</index></name><operator>.</operator><name><name>playpath</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>onBWDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>onFCSubscribe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>onFCUnsubscribe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>_onbwcheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>_onbwdone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>onStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>playlist_ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Failed</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Failed"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Play_Failed</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Play.Failed"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Play_StreamNotFound</name> <init>=

<expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Play.StreamNotFound"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetConnection_Connect_InvalidApp</name> <init>=

<expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetConnection.Connect.InvalidApp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Play_Start</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Play.Start"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Play_Complete</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Play.Complete"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Play_Stop</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Play.Stop"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Seek_Notify</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Seek.Notify"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Pause_Notify</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Pause.Notify"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Play_PublishNotify</name> <init>=

<expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Play.PublishNotify"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Play_UnpublishNotify</name> <init>=

<expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Play.UnpublishNotify"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Publish_Start</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Publish.Start"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Publish_Rejected</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Publish.Rejected"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_NetStream_Publish_Denied</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"NetStream.Publish.Denied"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>HandleInvoke</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>body</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nBodySize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObject</name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>txn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nRes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>body</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x02</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>, <argument><expr><literal type="string">"%s, Sanity failed. no string method in invoke packet"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nRes</name> <operator>=</operator> <call><name>AMF_Decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>nBodySize</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nRes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, error decoding invoke packet"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_Dump</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMFProp_GetString</name><argument_list>(<argument><expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>AMFProp_GetNumber</name><argument_list>(<argument><expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, server invoking &lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>method</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>method</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av__result</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AVal</name></type> <name>methodInvoked</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>txn</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>methodInvoked</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_erase</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>methodInvoked</name><operator>.</operator><name>av_val</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, received result id %f without matching request"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>leave</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, received result for method call &lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name><name>methodInvoked</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>methodInvoked</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_connect</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>token</name><operator>.</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObjectProperty</name></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTMP_FindFirstMatchingProperty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_secureToken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DecodeTEA</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>token</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>.</operator><name>p_vu</name><operator>.</operator><name>p_aval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SendSecureTokenResponse</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>.</operator><name>p_vu</name><operator>.</operator><name>p_aval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_WRITE</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendReleaseStream</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendFCPublish</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_SendServerBW</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_SendCtrl</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_SendCreateStream</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_WRITE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>usherToken</name><operator>.</operator><name>av_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendUsherToken</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>usherToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>subscribepath</name><operator>.</operator><name>av_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendFCSubscribe</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>subscribepath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>lFlags</name></name> <operator>&amp;</operator> <name>RTMP_LF_LIVE</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendFCSubscribe</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>playpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>methodInvoked</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_createStream</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>AMFProp_GetNumber</name><argument_list>(<argument><expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>curStreamIdx</name></name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_WRITE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendPublish</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>curStreamIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>lFlags</name></name> <operator>&amp;</operator> <name>RTMP_LF_PLST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendPlaylist</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>curStreamIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SendPlay</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>curStreamIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_SendCtrl</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_nBufferMS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>curStreamIdx</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>methodInvoked</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_play</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>methodInvoked</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_publish</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_bPlaying</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>playingStreams</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>methodInvoked</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>method</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_onBWDone</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_nBWCheckCounter</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendCheckBW</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>method</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_onFCSubscribe</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>method</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_onFCUnsubscribe</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>method</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_ping</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SendPong</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>method</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av__onbwcheck</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SendCheckBWResult</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>method</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av__onbwdone</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av__checkbw</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AV_erase</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>method</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av__error</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_ONLY_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>AVal</name></type> <name>methodInvoked</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_WRITE</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>==</operator> <name>txn</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>methodInvoked</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_erase</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>methodInvoked</name><operator>.</operator><name>av_val</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, received result id %f without matching request"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>leave</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, received error for method call &lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name><name>methodInvoked</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>methodInvoked</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_connect</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObject</name></type> <name>obj2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>description</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AMFProp_GetObject</name><argument_list>(<argument><expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMFProp_GetString</name><argument_list>(<argument><expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_code</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMFProp_GetString</name><argument_list>(<argument><expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_level</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMFProp_GetString</name><argument_list>(<argument><expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_description</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, error description: %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>description</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PublisherAuth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>description</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>&amp;</operator> <name>RTMP_PUB_CLATE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>|=</operator> <name>RTMP_PUB_CLEAN</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTMP_Connect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>RTMP_ConnectStream</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<goto>goto <name>leave</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"rtmp server sent error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>methodInvoked</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"rtmp server sent error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>method</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_close</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"rtmp server requested close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_ONLY_MD5</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

if ((r-&gt;Link.protocol &amp; RTMP_FEATURE_WRITE) &amp;&amp;

!(r-&gt;Link.pFlags &amp; RTMP_PUB_CLEAN) &amp;&amp;

( !(r-&gt;Link.pFlags &amp; RTMP_PUB_NAME) ||

!(r-&gt;Link.pFlags &amp; RTMP_PUB_RESP) ||

(r-&gt;Link.pFlags &amp; RTMP_PUB_CLATE) ) )

{

if(r-&gt;Link.pFlags &amp; RTMP_PUB_CLATE)

r-&gt;Link.pFlags |= RTMP_PUB_CLEAN;

RTMP_Log(RTMP_LOGERROR, "authenticating publisher");

if (!RTMP_Connect(r, NULL) || !RTMP_ConnectStream(r, 0))

goto leave;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>method</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_onStatus</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObject</name></type> <name>obj2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>description</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AMFProp_GetObject</name><argument_list>(<argument><expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMFProp_GetString</name><argument_list>(<argument><expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_code</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMFProp_GetString</name><argument_list>(<argument><expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_level</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMFProp_GetString</name><argument_list>(<argument><expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_description</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, onStatus: %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>code</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Failed</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Play_Failed</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Play_StreamNotFound</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetConnection_Connect_InvalidApp</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Publish_Rejected</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Publish_Denied</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_stream_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>description</name><operator>.</operator><name>av_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s:\n%s (%s)"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>code</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>description</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s:\n%s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>code</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Play_Start</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Play_PublishNotify</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_bPlaying</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_play</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AV_erase</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Publish_Start</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_bPlaying</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_publish</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AV_erase</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Play_Complete</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Play_Stop</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Play_UnpublishNotify</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Seek_Notify</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>RTMP_READ_SEEKING</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_NetStream_Pause_Notify</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_SendPause</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_pauseStamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>method</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_playlist_ready</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_set_playlist</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AV_erase</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

</block_content>}</block></else></if_stmt>

<label><name>leave</name>:</label>

<expr_stmt><expr><call><name>AMF_Reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_FindFirstMatchingProperty</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>prop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_OBJECT</name> <operator>||</operator> <name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_ECMA_ARRAY</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RTMP_FindFirstMatchingProperty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_FindPrefixProperty</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVal</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name> <operator>&gt;</operator> <name><name>name</name><operator>-&gt;</operator><name>av_len</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>prop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name> <operator>==</operator> <name>AMF_OBJECT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RTMP_FindPrefixProperty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>DumpMetaData</name><parameter_list>(<parameter><decl><type><name>AMFObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObjectProperty</name> <modifier>*</modifier></type><name>prop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>o_num</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>prop</name> <operator>=</operator> <call><name>AMF_GetProp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AMF_OBJECT</name></expr>:</case>

<case>case <expr><name>AMF_ECMA_ARRAY</name></expr>:</case>

<case>case <expr><name>AMF_STRICT_ARRAY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGINFO</name></expr></argument>, <argument><expr><literal type="string">"%.*s:"</literal></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DumpMetaData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_NUMBER</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_BOOLEAN</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name> <operator>!=</operator> <literal type="number">0.</literal></expr> ?</condition><then> <expr><literal type="string">"TRUE"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AMF_STRING</name></expr>:</case>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_aval</name><operator>.</operator><name>av_len</name></name></expr></argument>,

<argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_aval</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AMF_DATE</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"timestamp:%.2f"</literal></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"INVALID TYPE 0x%02x"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>prop</name><operator>-&gt;</operator><name>p_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGINFO</name></expr></argument>, <argument><expr><literal type="string">" %-22.*s%s"</literal></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_len</name></name></expr></argument>,

<argument><expr><name><name>prop</name><operator>-&gt;</operator><name>p_name</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>onMetaData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVC</name><argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>HandleMetadata</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>body</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObject</name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVal</name></type> <name>metastring</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nRes</name> <init>= <expr><call><name>AMF_Decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nRes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, error decoding meta data packet"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_Dump</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMFProp_GetString</name><argument_list>(<argument><expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>metastring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metastring</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_onMetaData</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObjectProperty</name></type> <name>prop</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGINFO</name></expr></argument>, <argument><expr><literal type="string">"Metadata:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DumpMetaData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTMP_FindFirstMatchingProperty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_duration</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_fDuration</name></name> <operator>=</operator> <name><name>prop</name><operator>.</operator><name>p_vu</name><operator>.</operator><name>p_number</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTMP_FindPrefixProperty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_video</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>dataType</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTMP_FindPrefixProperty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_audio</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>dataType</name></name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_Reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>HandleChangeChunkSize</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_inChunkSize</name></name> <operator>=</operator> <call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, received: chunk size change to %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_inChunkSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>HandleAudio</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>packet</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>HandleVideo</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>packet</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>HandleCtrl</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>nType</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nType</name> <operator>=</operator> <call><name>AMF_DecodeInt16</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, received ctrl. type: %d, len: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>nType</name></expr></argument>,

<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>nType</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, Stream Begin %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, Stream EOF %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, Stream Dry %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, Stream IsRecorded %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, Ping %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_SendCtrl</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0x07</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">31</literal></expr>:</case>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, Stream BufferEmpty %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>lFlags</name></name> <operator>&amp;</operator> <name>RTMP_LF_BUFX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_pauseStamp</name></name> <operator>=</operator> <ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>m_mediaChannel</name></name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedIn</name></name></expr> ?</condition><then>

<expr><name><name>r</name><operator>-&gt;</operator><name>m_channelTimestamp</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>m_mediaChannel</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_SendPause</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_pauseStamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_SendPause</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_pauseStamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_pausing</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, Stream BufferReady %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, Stream xx %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nType</name> <operator>==</operator> <literal type="number">0x1A</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, SWFVerification ping received: "</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_body</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x01</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>,

<argument><expr><literal type="string">"%s: SWFVerification Type %d request not supported! Patches welcome..."</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>SWFSize</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_SendCtrl</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0x1B</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>,

<argument><expr><literal type="string">"%s: Ignoring SWFVerification request, use --swfVfy!"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>,

<argument><expr><literal type="string">"%s: Ignoring SWFVerification request, no CRYPTO support!"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>HandleServerBW</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nServerBW</name></name> <operator>=</operator> <call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: server BW = %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_nServerBW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>HandleClientBW</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nClientBW</name></name> <operator>=</operator> <call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nClientBW2</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_body</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nClientBW2</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: client BW = %d %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_nClientBW</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_nClientBW2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>DecodeInt32LE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>EncodeInt32LE</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nVal</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nVal</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>nVal</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nVal</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>nVal</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nVal</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>nVal</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_ReadPacket</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hbuf</name><index>[<expr><name>RTMP_MAX_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>hbuf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nSize</name></decl>, <decl><type ref="prev"/><name>hSize</name></decl>, <decl><type ref="prev"/><name>nToRead</name></decl>, <decl><type ref="prev"/><name>nChunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extendedTimestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG2</name></expr></argument>, <argument><expr><literal type="string">"%s: fd=%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReadN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>hbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, failed to read RTMP packet header"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_headerType</name></name> <operator>=</operator> <operator>(</operator><name><name>hbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>=</operator> <operator>(</operator><name><name>hbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>header</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ReadN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>hbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, failed to read RTMP packet header 2nd byte"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>=</operator> <name><name>hbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>header</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReadN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>hbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, failed to read RTMP packet header 3nd byte"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>hbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>hbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, m_nChannel: %0x"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nSize</name> <operator>=</operator> <name><name>packetSize</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_headerType</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>&gt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedIn</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>timestamp</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_channelTimestamp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMPPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>packets</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTMPPacket</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timestamp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_channelTimestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>packets</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_channelTimestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name></name> <operator>=</operator> <name>packets</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timestamp</name> <operator>||</operator> <operator>!</operator><name>packets</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedIn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_channelTimestamp</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedIn</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedIn</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedIn</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTMPPacket</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedIn</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedIn</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>==</operator> <name>RTMP_LARGE_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_hasAbsTimestamp</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>nSize</name> <operator>&lt;</operator> <name>RTMP_LARGE_HEADER_SIZE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTMPPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nSize</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ReadN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nSize</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, failed to read RTMP packet header. type: %x"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>hbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hSize</name> <operator>=</operator> <name>nSize</name> <operator>+</operator> <operator>(</operator><name>header</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>hbuf</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <call><name>AMF_DecodeInt24</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>=</operator> <call><name>AMF_DecodeInt24</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBytesRead</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_packetType</name></name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nInfoField2</name></name> <operator>=</operator> <call><name>DecodeInt32LE</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>extendedTimestamp</name> <operator>=</operator> <operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name> <operator>==</operator> <literal type="number">0xffffff</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>extendedTimestamp</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ReadN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>header</name> <operator>+</operator> <name>nSize</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, failed to read extended timestamp"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hSize</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_LogHexString</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG2</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>hbuf</name></expr></argument>, <argument><expr><name>hSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTMPPacket_Alloc</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, failed to allocate packet"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_headerType</name></name> <operator>=</operator> <operator>(</operator><name><name>hbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nToRead</name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nBytesRead</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nChunk</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_inChunkSize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nToRead</name> <operator>&lt;</operator> <name>nChunk</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nChunk</name> <operator>=</operator> <name>nToRead</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_chunk</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_chunk</name><operator>-&gt;</operator><name>c_headerSize</name></name> <operator>=</operator> <name>hSize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_chunk</name><operator>-&gt;</operator><name>c_header</name></name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><name>hSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_chunk</name><operator>-&gt;</operator><name>c_chunk</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nBytesRead</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_chunk</name><operator>-&gt;</operator><name>c_chunkSize</name></name> <operator>=</operator> <name>nChunk</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReadN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nBytesRead</name></name></expr></argument>, <argument><expr><name>nChunk</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nChunk</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, failed to read RTMP packet body. len: %u"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_LogHexString</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG2</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nBytesRead</name></name></expr></argument>, <argument><expr><name>nChunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBytesRead</name></name> <operator>+=</operator> <name>nChunk</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTMPPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTMPPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>extendedTimestamp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name><operator>-&gt;</operator><name>m_nTimeStamp</name> <operator>=</operator> <literal type="number">0xffffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTMPPacket_IsReady</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>packet</name><operator>-&gt;</operator><name>m_hasAbsTimestamp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelTimestamp</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_channelTimestamp</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name><operator>-&gt;</operator><name>m_body</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name><operator>-&gt;</operator><name>m_nBytesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name><operator>-&gt;</operator><name>m_hasAbsTimestamp</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>HandShake</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>FP9HandShake</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>uptime</name></decl>, <decl><type ref="prev"/><name>suptime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bMatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>clientbuf</name><index>[<expr><name>RTMP_SIG_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>clientsig</name> <init>= <expr><name>clientbuf</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>serversig</name><index>[<expr><name>RTMP_SIG_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>clientbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>uptime</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>RTMP_GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>clientsig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uptime</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientsig</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RTMP_SIG_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>clientsig</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RTMP_SIG_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>clientsig</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">256</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>clientbuf</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReadN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Type Answer : %02X"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name><name>clientbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: Type mismatch: client sent %d, server answered %d"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>clientbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReadN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>serversig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RTMP_SIG_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>suptime</name></expr></argument>, <argument><expr><name>serversig</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>suptime</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>suptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Server Uptime : %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>suptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: FMS Version : %d.%d.%d.%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,

<argument><expr><name><name>serversig</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>serversig</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>serversig</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>serversig</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>serversig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReadN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>serversig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RTMP_SIG_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bMatch</name> <operator>=</operator> <operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>serversig</name></expr></argument>, <argument><expr><name>clientsig</name></expr></argument>, <argument><expr><name>RTMP_SIG_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bMatch</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>, <argument><expr><literal type="string">"%s, client signature does not match!"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>FP9HandShake</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>RTMP_SendChunk</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPChunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wrote</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hbuf</name><index>[<expr><name>RTMP_MAX_HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG2</name></expr></argument>, <argument><expr><literal type="string">"%s: fd=%d, size=%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>,

<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>c_chunkSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_LogHexString</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG2</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>chunk</name><operator>-&gt;</operator><name>c_header</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>c_headerSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>c_chunkSize</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>c_chunk</name></name> <operator>-</operator> <name><name>chunk</name><operator>-&gt;</operator><name>c_headerSize</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_LogHexString</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG2</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>chunk</name><operator>-&gt;</operator><name>c_chunk</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>c_chunkSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hbuf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>c_headerSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>c_header</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>c_headerSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wrote</name> <operator>=</operator> <call><name>WriteN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>c_headerSize</name></name> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>c_chunkSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>c_headerSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>wrote</name> <operator>=</operator> <call><name>WriteN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>c_header</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>c_headerSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>wrote</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMP_SendPacket</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>RTMPPacket</name> <modifier>*</modifier></type><name>prevPacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hSize</name></decl>, <decl><type ref="prev"/><name>cSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>header</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hend</name></decl>, <decl><type ref="prev"/><name><name>hbuf</name><index>[<expr><name>RTMP_MAX_HEADER_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>toff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nChunkSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>&gt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedOut</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMPPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>packets</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTMPPacket</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>packets</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedOut</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name></name> <operator>=</operator> <name>packets</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedOut</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTMPPacket</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedOut</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedOut</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prevPacket</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prevPacket</name> <operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_headerType</name></name> <operator>!=</operator> <name>RTMP_PACKET_SIZE_LARGE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prevPacket</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>==</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name>

<operator>&amp;&amp;</operator> <name><name>prevPacket</name><operator>-&gt;</operator><name>m_packetType</name></name> <operator>==</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_packetType</name></name>

<operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_headerType</name></name> <operator>==</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_SMALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prevPacket</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name> <operator>==</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name>

<operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_headerType</name></name> <operator>==</operator> <name>RTMP_PACKET_SIZE_SMALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MINIMUM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>prevPacket</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_headerType</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"sanity failed!! trying to send header of type: 0x%02x."</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>packet</name><operator>-&gt;</operator><name>m_headerType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nSize</name> <operator>=</operator> <name><name>packetSize</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_headerType</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hSize</name> <operator>=</operator> <name>nSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name> <operator>-</operator> <name>last</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>header</name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>-</operator> <name>nSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hend</name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>header</name> <operator>=</operator> <name>hbuf</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hend</name> <operator>=</operator> <name>hbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>&gt;</operator> <literal type="number">319</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cSize</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cSize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cSize</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>header</name> <operator>-=</operator> <name>cSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hSize</name> <operator>+=</operator> <name>cSize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>&gt;=</operator> <literal type="number">0xffffff</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>header</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hSize</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hptr</name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_headerType</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>cSize</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>|=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>hptr</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cSize</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>-</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>hptr</name><operator>++</operator> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cSize</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>hptr</name><operator>++</operator> <operator>=</operator> <name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>hptr</name> <operator>=</operator> <call><name>AMF_EncodeInt24</name><argument_list>(<argument><expr><name>hptr</name></expr></argument>, <argument><expr><name>hend</name></expr></argument>, <argument><expr><ternary><condition><expr><name>t</name> <operator>&gt;</operator> <literal type="number">0xffffff</literal></expr> ?</condition><then> <expr><literal type="number">0xffffff</literal></expr> </then><else>: <expr><name>t</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>hptr</name> <operator>=</operator> <call><name>AMF_EncodeInt24</name><argument_list>(<argument><expr><name>hptr</name></expr></argument>, <argument><expr><name>hend</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>hptr</name><operator>++</operator> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_packetType</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hptr</name> <operator>+=</operator> <call><name>EncodeInt32LE</name><argument_list>(<argument><expr><name>hptr</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>m_nInfoField2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>&gt;=</operator> <literal type="number">0xffffff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hptr</name> <operator>=</operator> <call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><name>hptr</name></expr></argument>, <argument><expr><name>hend</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nSize</name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nChunkSize</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_outChunkSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG2</name></expr></argument>, <argument><expr><literal type="string">"%s: fd=%d, size=%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>,

<argument><expr><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_HTTP</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>chunks</name> <init>= <expr><operator>(</operator><name>nSize</name><operator>+</operator><name>nChunkSize</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>nChunkSize</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>chunks</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tlen</name> <operator>=</operator> <name>chunks</name> <operator>*</operator> <operator>(</operator><name>cSize</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>nSize</name> <operator>+</operator> <name>hSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tbuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tbuf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>toff</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>nSize</name> <operator>+</operator> <name>hSize</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wrote</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;</operator> <name>nChunkSize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nChunkSize</name> <operator>=</operator> <name>nSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_LogHexString</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG2</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>hSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_LogHexString</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG2</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>nChunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tbuf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>toff</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>nChunkSize</name> <operator>+</operator> <name>hSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>toff</name> <operator>+=</operator> <name>nChunkSize</name> <operator>+</operator> <name>hSize</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>wrote</name> <operator>=</operator> <call><name>WriteN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>nChunkSize</name> <operator>+</operator> <name>hSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wrote</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nChunkSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <name>nChunkSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>header</name> <operator>=</operator> <name>buffer</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hSize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cSize</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>header</name> <operator>-=</operator> <name>cSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hSize</name> <operator>+=</operator> <name>cSize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>header</name> <operator>=</operator> <operator>(</operator><literal type="number">0xc0</literal> <operator>|</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cSize</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>-</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cSize</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>tbuf</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wrote</name> <init>= <expr><call><name>WriteN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>toff</name><operator>-</operator><name>tbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wrote</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_INVOKE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AVal</name></type> <name>method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_DecodeString</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Invoking %s"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>queue</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>txn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>method</name><operator>.</operator><name>av_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>txn</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>AMF_DecodeNumber</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>method</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTMPPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>m_nChannel</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTMPPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>RTMP_Close</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTMP_IsConnected</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendFCUnpublish</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SendDeleteStream</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_val</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>HTTP_Post</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>RTMPT_CLOSE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMPSockBuf_Close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_stream_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nBWCheckCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nBytesIn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_nBytesInSent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RTMP_READ_HEADER</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>dataType</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nResumeTS</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nIgnoredFrameCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nIgnoredFlvFrameCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_write</name><operator>.</operator><name>m_nBytesRead</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMPPacket_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedIn</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMPPacket_Free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsIn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_channelTimestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_channelTimestamp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedIn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedOut</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_vecChannelsOut</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_channelsAllocatedOut</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_clear</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_methodCalls</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_numCalls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_numInvokes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_bPlaying</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>playingStreams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_msgCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_resplen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_unackd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>lFlags</name></name> <operator>&amp;</operator> <name>RTMP_LF_FTCU</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>lFlags</name></name> <operator>^=</operator> <name>RTMP_LF_FTCU</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_bindIP</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_bindIP</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_bCustomSend</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_customSendFunc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_customSendParam</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_ONLY_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_WRITE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>&amp;</operator> <name>RTMP_PUB_CLEAN</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>playpath</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>playpath</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>curStreamIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>protocol</name></name> <operator>&amp;</operator> <name>RTMP_FEATURE_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>&amp;</operator> <name>RTMP_PUB_CLEAN</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>pFlags</name></name> <operator>&amp;</operator> <name>RTMP_PUB_ALLOC</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>app</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>tcUrl</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>dh</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MDH_free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>dh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>dh</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyIn</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RC4_free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyIn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyIn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyOut</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RC4_free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>rc4keyOut</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>playpath</name><operator>.</operator><name>av_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>playpath</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>curStreamIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>nStreams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMPSockBuf_Fill</name><parameter_list>(<parameter><decl><type><name>RTMPSockBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nBytes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sb</name><operator>-&gt;</operator><name>sb_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_start</name></name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>sb_buf</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nBytes</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_buf</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>sb</name><operator>-&gt;</operator><name>sb_size</name></name> <operator>-</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>sb_start</name></name> <operator>-</operator> <name><name>sb</name><operator>-&gt;</operator><name>sb_buf</name></name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>sb_ssl</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nBytes</name> <operator>=</operator> <call><name>TLS_read</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_ssl</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_start</name></name> <operator>+</operator> <name><name>sb</name><operator>-&gt;</operator><name>sb_size</name></name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>nBytes</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_start</name></name> <operator>+</operator> <name><name>sb</name><operator>-&gt;</operator><name>sb_size</name></name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>, <argument><expr><name>MSG_NOSIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nBytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_size</name></name> <operator>+=</operator> <name>nBytes</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>nBytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"%s, remote host closed connection"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sockerr</name> <init>= <expr><call><name>GetSockError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sockerr</name> <operator>==</operator> <name>EWOULDBLOCK</name> <operator>||</operator> <name>sockerr</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>RTMP_LOGDEBUG</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>RTMP_LOGERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%s, recv returned %d. GetSockError(): %d (%s)"</literal></expr></argument>,

<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>, <argument><expr><name>sockerr</name></expr></argument>, <argument><expr><call><name>socketerror</name><argument_list>(<argument><expr><name>sockerr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sockerr</name> <operator>==</operator> <name>EINTR</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>RTMP_ctrlC</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sockerr</name> <operator>==</operator> <name>EWOULDBLOCK</name> <operator>||</operator> <name>sockerr</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_timedout</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nBytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></while>

<return>return <expr><name>nBytes</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMPSockBuf_Send</name><parameter_list>(<parameter><decl><type><name>RTMPSockBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RTMP_NETSTACK_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>netstackdump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>sb_ssl</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>TLS_write</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_ssl</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>MSG_NOSIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>RTMPSockBuf_Close</name><parameter_list>(<parameter><decl><type><name>RTMPSockBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>sb_ssl</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TLS_shutdown</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TLS_close</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_ssl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>sb_socket</name></name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_socket</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX2BIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&amp;0x40)?((a)&amp;0xf)+9:((a)&amp;0xf))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>DecodeTEA</name><parameter_list>(<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>v</name></decl>, <decl><type ref="prev"/><name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>DELTA</name> <init>= <expr><literal type="number">0x9e3779b9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>key</name><operator>-&gt;</operator><name>av_val</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><name><name>key</name><operator>-&gt;</operator><name>av_len</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><name><name>key</name><operator>-&gt;</operator><name>av_len</name></name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>|=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>v</name><operator>++</operator> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>u</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name><name>text</name><operator>-&gt;</operator><name>av_len</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>text</name><operator>-&gt;</operator><name>av_val</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>out</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><call><name>HEX2BIN</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>HEX2BIN</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><call><name>HEX2BIN</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>HEX2BIN</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><call><name>HEX2BIN</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>HEX2BIN</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><call><name>HEX2BIN</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>HEX2BIN</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>v</name><operator>++</operator> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>out</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MX</name></cpp:macro> <cpp:value>(((z&gt;&gt;5)^(y&lt;&lt;2)) + ((y&gt;&gt;3)^(z&lt;&lt;4))) ^ ((sum^y) + (k[(p&amp;3)^e]^z));</cpp:value></cpp:define>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>v</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">52</literal> <operator>/</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name>q</name> <operator>*</operator> <name>DELTA</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>sum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>v</name><index>[<expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <name><name>v</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-=</operator> <name>MX</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>v</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name>MX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>DELTA</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>text</name><operator>-&gt;</operator><name>av_len</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>text</name><operator>-&gt;</operator><name>av_val</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>av_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>HTTP_Post</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTMPTCmd</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>hbuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hlen</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>hbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"POST /%s%s/%d HTTP/1.1\r\n"</literal>

<literal type="string">"Host: %.*s:%d\r\n"</literal>

<literal type="string">"Accept: */*\r\n"</literal>

<literal type="string">"User-Agent: Shockwave Flash\r\n"</literal>

<literal type="string">"Connection: Keep-Alive\r\n"</literal>

<literal type="string">"Cache-Control: no-cache\r\n"</literal>

<literal type="string">"Content-type: application/x-fcs\r\n"</literal>

<literal type="string">"Content-length: %d\r\n\r\n"</literal></expr></argument>, <argument><expr><name><name>RTMPT_cmds</name><index>[<expr><name>cmd</name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_val</name></name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_val</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_msgCounter</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_len</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_val</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMPSockBuf_Send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name></name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hlen</name> <operator>=</operator> <call><name>RTMPSockBuf_Send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_msgCounter</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_unackd</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>hlen</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>HTTP_read</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fill</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hlen</name></decl>;</decl_stmt>

<label><name>restart</name>:</label>

<if_stmt><if>if <condition>(<expr><name>fill</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMPSockBuf_Fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_size</name></name> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fill</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>restart</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_start</name></name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.1 200 "</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_start</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_size</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_start</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n\r\n"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fill</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>restart</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_start</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"HTTP/1.1 200"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"Content-"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>ptr</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"length:"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hlen</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name><operator>+</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>ptr</name><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"\r\n\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_val</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>hlen</name></expr></else></ternary><operator>)</operator> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_start</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_size</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fill</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>restart</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_size</name></name> <operator>-=</operator> <name>ptr</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_start</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_unackd</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_val</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_len</name></name> <operator>=</operator> <name>hlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_val</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>hlen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_val</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_val</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>hlen</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_clientID</name><operator>.</operator><name>av_val</name><index>[<expr><name>hlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_polling</name></name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_resplen</name></name> <operator>=</operator> <name>hlen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_start</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_size</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_IGNORED_FRAMES</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Read_1_Packet</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>prevTagSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rtnGetNextMediaPacket</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>RTMP_READ_EOF</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMPPacket</name></type> <name>packet</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>recopy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nTimeStamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rtnGetNextMediaPacket</name> <operator>=</operator> <call><name>RTMP_GetNextMediaPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>rtnGetNextMediaPacket</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>packetBody</name> <init>= <expr><name><name>packet</name><operator>.</operator><name>m_body</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nPacketLen</name> <init>= <expr><name><name>packet</name><operator>.</operator><name>m_nBodySize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rtnGetNextMediaPacket</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,

<argument><expr><literal type="string">"Got Play.Complete or Play.Stop from server. "</literal>

<literal type="string">"Assuming stream is complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_COMPLETE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>dataType</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_AUDIO</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_VIDEO</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <name>nPacketLen</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"ignoring too small video packet: size: %d"</literal></expr></argument>,

<argument><expr><name>nPacketLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_IGNORE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_AUDIO</name> <operator>&amp;&amp;</operator> <name>nPacketLen</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"ignoring too small audio packet: size: %d"</literal></expr></argument>,

<argument><expr><name>nPacketLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_IGNORE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RTMP_READ_SEEKING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_IGNORE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"type: %02X, size: %d, TS: %d ms, abs TS: %d"</literal></expr></argument>,

<argument><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name></expr></argument>, <argument><expr><name>nPacketLen</name></expr></argument>, <argument><expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name></expr></argument>,

<argument><expr><name><name>packet</name><operator>.</operator><name>m_hasAbsTimestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"frametype: %02X"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>packetBody</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RTMP_READ_RESUME</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nMetaHeaderSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_INFO</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFObject</name></type> <name>metaObj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nRes</name> <init>=

<expr><call><name>AMF_Decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaObj</name></expr></argument>, <argument><expr><name>packetBody</name></expr></argument>, <argument><expr><name>nPacketLen</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nRes</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AVal</name></type> <name>metastring</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AMFProp_GetString</name><argument_list>(<argument><expr><call><name>AMF_GetProp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaObj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>metastring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AVMATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metastring</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_onMetaData</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nMetaHeaderSize</name></name> <operator>!=</operator> <name>nPacketLen</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>memcmp</name>

<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>metaHeader</name></name></expr></argument>, <argument><expr><name>packetBody</name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nMetaHeaderSize</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_ERROR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_Reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>RTMP_READ_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nInitialFrameSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>initialFrameType</name></name>

<operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nInitialFrameSize</name></name> <operator>==</operator> <name>nPacketLen</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name>

<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>initialFrame</name></name></expr></argument>, <argument><expr><name>packetBody</name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nInitialFrameSize</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"Checked keyframe successfully!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>RTMP_READ_GOTKF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_IGNORE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_FLASH_VIDEO</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">11</literal> <operator>&lt;</operator> <name>nPacketLen</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dataSize</name> <init>=

<expr><call><name>AMF_DecodeInt24</name><argument_list>(<argument><expr><name>packetBody</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>AMF_DecodeInt24</name><argument_list>(<argument><expr><name>packetBody</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ts</name> <operator>|=</operator> <operator>(</operator><name><name>packetBody</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,

<argument><expr><literal type="string">"keyframe search: FLV Packet: type %02X, dataSize: %d, timeStamp: %d ms"</literal></expr></argument>,

<argument><expr><name><name>packetBody</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>packetBody</name><index>[<expr><name>pos</name></expr> ]</index></name> <operator>==</operator>

<name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>initialFrameType</name></name></expr>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nResumeTS</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,

<argument><expr><literal type="string">"Found keyframe with resume-keyframe timestamp!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nInitialFrameSize</name></name> <operator>!=</operator> <name>dataSize</name>

<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>initialFrame</name></name></expr></argument>,

<argument><expr><name>packetBody</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator>

<name>nInitialFrameSize</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>,

<argument><expr><literal type="string">"FLV Stream: Keyframe doesn't match!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>RTMP_READ_GOTFLVK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <name>dataSize</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>nPacketLen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>,

<argument><expr><literal type="string">"Non skipable packet since it doesn't end with chunk, stream corrupt!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>packetBody</name> <operator>+=</operator> <operator>(</operator><name>pos</name> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <name>dataSize</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nPacketLen</name> <operator>-=</operator> <operator>(</operator><name>pos</name> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <name>dataSize</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<goto>goto <name>stopKeyframeSearch</name>;</goto>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nResumeTS</name></name> <operator>&lt;</operator> <name>ts</name></expr>)</condition>

<block>{<block_content>

<goto>goto <name>stopKeyframeSearch</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <operator>(</operator><literal type="number">11</literal> <operator>+</operator> <name>dataSize</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nResumeTS</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>,

<argument><expr><literal type="string">"First packet does not contain keyframe, all "</literal>

<literal type="string">"timestamps are smaller than the keyframe "</literal>

<literal type="string">"timestamp; probably the resume seek failed?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>stopKeyframeSearch</name>:</label>

<empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RTMP_READ_GOTFLVK</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>,

<argument><expr><literal type="string">"Couldn't find the seeked keyframe in this chunk!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_IGNORE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>RTMP_READ_GOTKF</name><operator>|</operator><name>RTMP_READ_GOTFLVK</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <operator>(</operator><name>RTMP_READ_GOTKF</name><operator>|</operator><name>RTMP_READ_GOTFLVK</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RTMP_READ_GOTKF</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>!=</operator> <name>RTMP_PACKET_TYPE_FLASH_VIDEO</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>,

<argument><expr><literal type="string">"Stream does not start with requested frame, ignoring data... "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nIgnoredFrameCounter</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nIgnoredFrameCounter</name></name> <operator>&gt;</operator> <name>MAX_IGNORED_FRAMES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_ERROR</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_IGNORE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RTMP_READ_GOTFLVK</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_FLASH_VIDEO</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>,

<argument><expr><literal type="string">"Stream does not start with requested FLV frame, ignoring data... "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nIgnoredFlvFrameCounter</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nIgnoredFlvFrameCounter</name></name> <operator>&gt;</operator> <name>MAX_IGNORED_FRAMES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_ERROR</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_IGNORE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RTMP_READ_NO_IGNORE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>!=</operator> <name>RTMP_PACKET_TYPE_FLASH_VIDEO</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_IGNORE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>RTMP_READ_NO_IGNORE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>nPacketLen</name> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_AUDIO</name>

<operator>||</operator> <name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_VIDEO</name>

<operator>||</operator> <name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_INFO</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">11</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>!=</operator> <name>RTMP_PACKET_TYPE_FLASH_VIDEO</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>buflen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>, <argument><expr><literal type="string">"Couldn't allocate memory!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_ERROR</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>recopy</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_AUDIO</name>

<operator>||</operator> <name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_VIDEO</name>

<operator>||</operator> <name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_INFO</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nTimeStamp</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nResumeTS</name></name> <operator>+</operator> <name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevTagSize</name> <operator>=</operator> <literal type="number">11</literal> <operator>+</operator> <name>nPacketLen</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_packetType</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>AMF_EncodeInt24</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>nPacketLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if(packet.m_packetType == RTMP_PACKET_TYPE_VIDEO)

{

if((packetBody[0] &amp; 0x0f) == 7) 

{

uint8_t packetType = *(packetBody+1);

uint32_t ts = AMF_DecodeInt24(packetBody+2); 

int32_t cts = (ts+0xff800000)^0xff800000;

RTMP_Log(RTMP_LOGDEBUG, "cts : %d\n", cts);

nTimeStamp -= cts;

CRTMP::EncodeInt24(packetBody+2, 0);

}

RTMP_Log(RTMP_LOGDEBUG, "VIDEO: nTimeStamp: 0x%08X (%d)\n", nTimeStamp, nTimeStamp);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>AMF_EncodeInt24</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>nTimeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>nTimeStamp</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>AMF_EncodeInt24</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>packetBody</name></expr></argument>, <argument><expr><name>nPacketLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>nPacketLen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_FLASH_VIDEO</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nTimeStamp</name> <operator>=</operator> <call><name>AMF_DecodeInt24</name><argument_list>(<argument><expr><name>packetBody</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nTimeStamp</name> <operator>|=</operator> <operator>(</operator><name><name>packetBody</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name> <operator>-</operator> <name>nTimeStamp</name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>nResumeTS</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">11</literal> <operator>&lt;</operator> <name>nPacketLen</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dataSize</name> <init>= <expr><call><name>AMF_DecodeInt24</name><argument_list>(<argument><expr><name>packetBody</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nTimeStamp</name> <operator>=</operator> <call><name>AMF_DecodeInt24</name><argument_list>(<argument><expr><name>packetBody</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nTimeStamp</name> <operator>|=</operator> <operator>(</operator><name><name>packetBody</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nTimeStamp</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_EncodeInt24</name><argument_list>(<argument><expr><name>ptr</name><operator>+</operator><name>pos</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>nTimeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>nTimeStamp</name><operator>&gt;&gt;</operator><literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>dataType</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>packetBody</name> <operator>+</operator> <name>pos</name><operator>)</operator> <operator>==</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>*</operator><operator>(</operator><name>packetBody</name> <operator>+</operator> <name>pos</name><operator>)</operator> <operator>==</operator> <literal type="number">0x09</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <name>dataSize</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>nPacketLen</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <name>dataSize</name> <operator>&gt;</operator> <name>nPacketLen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGERROR</name></expr></argument>,

<argument><expr><literal type="string">"Wrong data size (%u), stream corrupted, aborting!"</literal></expr></argument>,

<argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RTMP_READ_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>, <argument><expr><literal type="string">"No tagSize found, appending!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prevTagSize</name> <operator>=</operator> <name>dataSize</name> <operator>+</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <name>dataSize</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>,

<argument><expr><name>prevTagSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>prevTagSize</name> <operator>=</operator>

<call><name>AMF_DecodeInt32</name><argument_list>(<argument><expr><name>packetBody</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>,

<argument><expr><literal type="string">"FLV Packet: type %02X, dataSize: %u, tagSize: %u, timeStamp: %u ms"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>packetBody</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>prevTagSize</name></expr></argument>,

<argument><expr><name>nTimeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>prevTagSize</name> <operator>!=</operator> <operator>(</operator><name>dataSize</name> <operator>+</operator> <literal type="number">11</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>,

<argument><expr><literal type="string">"Tag and data size are not consitent, writing tag size according to dataSize+11: %d"</literal></expr></argument>,

<argument><expr><name>dataSize</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>prevTagSize</name> <operator>=</operator> <name>dataSize</name> <operator>+</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <name>dataSize</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>,

<argument><expr><name>prevTagSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>prevTagSize</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>m_packetType</name></name> <operator>!=</operator> <name>RTMP_PACKET_TYPE_FLASH_VIDEO</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AMF_EncodeInt32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>prevTagSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>lFlags</name></name> <operator>&amp;</operator> <name>RTMP_LF_LIVE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>packet</name><operator>.</operator><name>m_nTimeStamp</name></name></expr> </then><else>: <expr><name>nTimeStamp</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>rtnGetNextMediaPacket</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMPPacket_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>recopy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>ret</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>buflen</name><operator>)</operator></expr> ?</condition><then> <expr><name>buflen</name></expr> </then><else>: <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>ret</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>bufpos</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buflen</name></name> <operator>=</operator> <name>ret</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>flvHeader</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'V'</literal></expr>, <expr><literal type="number">0x01</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, 

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x09</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADERBUF</name></cpp:macro> <cpp:value>(128*1024)</cpp:value></cpp:define>

<function><type><name>int</name></type>

<name>RTMP_Read</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>fail</name>:</label>

<switch>switch <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>status</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>RTMP_READ_EOF</name></expr>:</case>

<case>case <expr><name>RTMP_READ_COMPLETE</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>RTMP_READ_ERROR</name></expr>:</case> 

<expr_stmt><expr><call><name>SetSockError</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RTMP_READ_HEADER</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RTMP_READ_RESUME</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mybuf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>HEADERBUF</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>mybuf</name> <operator>+</operator> <name>HEADERBUF</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>mybuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buflen</name></name> <operator>=</operator> <name>HEADERBUF</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mybuf</name></expr></argument>, <argument><expr><name>flvHeader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flvHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>flvHeader</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buflen</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>flvHeader</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>flvHeader</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>timestamp</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nRead</name> <operator>=</operator> <call><name>Read_1_Packet</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nRead</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>nRead</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>&lt;</operator> <name>mybuf</name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>&gt;</operator> <name>end</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>mybuf</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>mybuf</name></expr></argument>, <argument><expr><name>cnt</name> <operator>+</operator> <name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mybuf</name><operator>+</operator><name>cnt</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>mybuf</name><operator>+</operator><name>cnt</name><operator>+</operator><name>nRead</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buflen</name></name> <operator>-=</operator> <name>nRead</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>dataType</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>mybuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>dataType</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buflen</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>-</operator> <name>mybuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>mybuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>bufpos</name></name> <operator>=</operator> <name>mybuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>RTMP_READ_HEADER</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RTMP_READ_SEEKING</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>bufpos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nRead</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buflen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nRead</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nRead</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>bufpos</name></name></expr></argument>, <argument><expr><name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buflen</name></name> <operator>-=</operator> <name>nRead</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buflen</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>bufpos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>bufpos</name></name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>nRead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nRead</name> <operator>=</operator> <call><name>Read_1_Packet</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nRead</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>nRead</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>nRead</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>m_read</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>nRead</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>total</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVal</name></type> <name>av_setDataFrame</name> <init>= <expr><call><name>AVC</name><argument_list>(<argument><expr><literal type="string">"@setDataFrame"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>RTMP_Write</name><parameter_list>(<parameter><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>m_write</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pend</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s2</name> <init>= <expr><name>size</name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>m_nChannel</name></name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>m_nInfoField2</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>streams</name><index>[<expr><name>streamIdx</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>s2</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>m_nBytesRead</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>)</condition>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>-=</operator> <literal type="number">13</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>m_packetType</name></name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>=</operator> <call><name>AMF_DecodeInt24</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name> <operator>=</operator> <call><name>AMF_DecodeInt24</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name> <operator>|=</operator> <operator>*</operator><name>buf</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>-=</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_AUDIO</name>

<operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_VIDEO</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>m_nTimeStamp</name></name><operator>)</operator> <operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_INFO</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_LARGE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_INFO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>m_headerType</name></name> <operator>=</operator> <name>RTMP_PACKET_SIZE_MEDIUM</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTMPPacket_Alloc</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Log</name><argument_list>(<argument><expr><name>RTMP_LOGDEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s, failed to allocate packet"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>m_body</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <name>enc</name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>m_packetType</name></name> <operator>==</operator> <name>RTMP_PACKET_TYPE_INFO</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>AMF_EncodeString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_setDataFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>m_nBytesRead</name></name> <operator>=</operator> <name>enc</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>m_body</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>m_body</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>m_nBytesRead</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>m_nBodySize</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>m_nBytesRead</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>m_nBytesRead</name></name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>-=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>m_nBytesRead</name></name> <operator>==</operator> <name><name>pkt</name><operator>-&gt;</operator><name>m_nBodySize</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>RTMP_SendPacket</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMPPacket_Free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>m_nBytesRead</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>size</name><operator>+</operator><name>s2</name></expr>;</return>

</block_content>}</block></function>

</unit>
