<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-outputs\librtmp\md5.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((z) ^ ((x) &amp; ((y) ^ (z))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((y) ^ ((z) &amp; ((x) ^ (y))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) ^ (y) ^ (z))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((y) ^ ((x) | ~(z)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEP</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a) += f((b), (c), (d)) + (x) + (t); (a) = (((a) &lt;&lt; (s)) | (((a) &amp; 0xffffffff) &gt;&gt; (32 - (s)))); (a) += (b);</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__vax__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(MD5_u32plus *)&amp;ptr[(n) * 4])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SET(n)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;block[(n)] = (MD5_u32plus)ptr[(n) * 4] | ((MD5_u32plus)ptr[(n) * 4 + 1] &lt;&lt; 8) | ((MD5_u32plus)ptr[(n) * 4 + 2] &lt;&lt; 16) | ((MD5_u32plus)ptr[(n) * 4 + 3] &lt;&lt; 24))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;block[(n)])</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>body</name><parameter_list>(<parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MD5_u32plus</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MD5_u32plus</name></type> <name>saved_a</name></decl>, <decl><type ref="prev"/><name>saved_b</name></decl>, <decl><type ref="prev"/><name>saved_c</name></decl>, <decl><type ref="prev"/><name>saved_d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>d</name></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>saved_a</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_b</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_d</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>SET(<literal type="number">0</literal>)</argument>, <argument><literal type="number">0xd76aa478</literal></argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>SET(<literal type="number">1</literal>)</argument>, <argument><literal type="number">0xe8c7b756</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>SET(<literal type="number">2</literal>)</argument>, <argument><literal type="number">0x242070db</literal></argument>, <argument><literal type="number">17</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>SET(<literal type="number">3</literal>)</argument>, <argument><literal type="number">0xc1bdceee</literal></argument>, <argument><literal type="number">22</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>SET(<literal type="number">4</literal>)</argument>, <argument><literal type="number">0xf57c0faf</literal></argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>SET(<literal type="number">5</literal>)</argument>, <argument><literal type="number">0x4787c62a</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>SET(<literal type="number">6</literal>)</argument>, <argument><literal type="number">0xa8304613</literal></argument>, <argument><literal type="number">17</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>SET(<literal type="number">7</literal>)</argument>, <argument><literal type="number">0xfd469501</literal></argument>, <argument><literal type="number">22</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>SET(<literal type="number">8</literal>)</argument>, <argument><literal type="number">0x698098d8</literal></argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>SET(<literal type="number">9</literal>)</argument>, <argument><literal type="number">0x8b44f7af</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>SET(<literal type="number">10</literal>)</argument>, <argument><literal type="number">0xffff5bb1</literal></argument>, <argument><literal type="number">17</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>SET(<literal type="number">11</literal>)</argument>, <argument><literal type="number">0x895cd7be</literal></argument>, <argument><literal type="number">22</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>SET(<literal type="number">12</literal>)</argument>, <argument><literal type="number">0x6b901122</literal></argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>SET(<literal type="number">13</literal>)</argument>, <argument><literal type="number">0xfd987193</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>SET(<literal type="number">14</literal>)</argument>, <argument><literal type="number">0xa679438e</literal></argument>, <argument><literal type="number">17</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>SET(<literal type="number">15</literal>)</argument>, <argument><literal type="number">0x49b40821</literal></argument>, <argument><literal type="number">22</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">1</literal>)</argument>, <argument><literal type="number">0xf61e2562</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">6</literal>)</argument>, <argument><literal type="number">0xc040b340</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">11</literal>)</argument>, <argument><literal type="number">0x265e5a51</literal></argument>, <argument><literal type="number">14</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">0</literal>)</argument>, <argument><literal type="number">0xe9b6c7aa</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">5</literal>)</argument>, <argument><literal type="number">0xd62f105d</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">10</literal>)</argument>, <argument><literal type="number">0x02441453</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">15</literal>)</argument>, <argument><literal type="number">0xd8a1e681</literal></argument>, <argument><literal type="number">14</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">4</literal>)</argument>, <argument><literal type="number">0xe7d3fbc8</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">9</literal>)</argument>, <argument><literal type="number">0x21e1cde6</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">14</literal>)</argument>, <argument><literal type="number">0xc33707d6</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">3</literal>)</argument>, <argument><literal type="number">0xf4d50d87</literal></argument>, <argument><literal type="number">14</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">8</literal>)</argument>, <argument><literal type="number">0x455a14ed</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">13</literal>)</argument>, <argument><literal type="number">0xa9e3e905</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">2</literal>)</argument>, <argument><literal type="number">0xfcefa3f8</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">7</literal>)</argument>, <argument><literal type="number">0x676f02d9</literal></argument>, <argument><literal type="number">14</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">12</literal>)</argument>, <argument><literal type="number">0x8d2a4c8a</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">5</literal>)</argument>, <argument><literal type="number">0xfffa3942</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">8</literal>)</argument>, <argument><literal type="number">0x8771f681</literal></argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">11</literal>)</argument>, <argument><literal type="number">0x6d9d6122</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">14</literal>)</argument>, <argument><literal type="number">0xfde5380c</literal></argument>, <argument><literal type="number">23</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">1</literal>)</argument>, <argument><literal type="number">0xa4beea44</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">4</literal>)</argument>, <argument><literal type="number">0x4bdecfa9</literal></argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">7</literal>)</argument>, <argument><literal type="number">0xf6bb4b60</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">10</literal>)</argument>, <argument><literal type="number">0xbebfbc70</literal></argument>, <argument><literal type="number">23</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">13</literal>)</argument>, <argument><literal type="number">0x289b7ec6</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">0</literal>)</argument>, <argument><literal type="number">0xeaa127fa</literal></argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">3</literal>)</argument>, <argument><literal type="number">0xd4ef3085</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">6</literal>)</argument>, <argument><literal type="number">0x04881d05</literal></argument>, <argument><literal type="number">23</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">9</literal>)</argument>, <argument><literal type="number">0xd9d4d039</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">12</literal>)</argument>, <argument><literal type="number">0xe6db99e5</literal></argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">15</literal>)</argument>, <argument><literal type="number">0x1fa27cf8</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">2</literal>)</argument>, <argument><literal type="number">0xc4ac5665</literal></argument>, <argument><literal type="number">23</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">0</literal>)</argument>, <argument><literal type="number">0xf4292244</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">7</literal>)</argument>, <argument><literal type="number">0x432aff97</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">14</literal>)</argument>, <argument><literal type="number">0xab9423a7</literal></argument>, <argument><literal type="number">15</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">5</literal>)</argument>, <argument><literal type="number">0xfc93a039</literal></argument>, <argument><literal type="number">21</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">12</literal>)</argument>, <argument><literal type="number">0x655b59c3</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">3</literal>)</argument>, <argument><literal type="number">0x8f0ccc92</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">10</literal>)</argument>, <argument><literal type="number">0xffeff47d</literal></argument>, <argument><literal type="number">15</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">1</literal>)</argument>, <argument><literal type="number">0x85845dd1</literal></argument>, <argument><literal type="number">21</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">8</literal>)</argument>, <argument><literal type="number">0x6fa87e4f</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">15</literal>)</argument>, <argument><literal type="number">0xfe2ce6e0</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">6</literal>)</argument>, <argument><literal type="number">0xa3014314</literal></argument>, <argument><literal type="number">15</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">13</literal>)</argument>, <argument><literal type="number">0x4e0811a1</literal></argument>, <argument><literal type="number">21</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">4</literal>)</argument>, <argument><literal type="number">0xf7537e82</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">11</literal>)</argument>, <argument><literal type="number">0xbd3af235</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">2</literal>)</argument>, <argument><literal type="number">0x2ad7d2bb</literal></argument>, <argument><literal type="number">15</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>I</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">9</literal>)</argument>, <argument><literal type="number">0xeb86d391</literal></argument>, <argument><literal type="number">21</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>saved_a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>+=</operator> <name>saved_b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>saved_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>saved_d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>size</name> <operator>-=</operator> <literal type="number">64</literal></expr>)</condition>;</do>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>MD5_Init</name><parameter_list>(<parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <literal type="number">0xefcdab89</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <literal type="number">0x98badcfe</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>MD5_Update</name><parameter_list>(<parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MD5_u32plus</name></type> <name>saved_lo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>used</name></decl>, <decl><type ref="prev"/><name>free</name></decl>;</decl_stmt>

<expr_stmt><expr><name>saved_lo</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>=</operator> <operator>(</operator><name>saved_lo</name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1fffffff</literal><operator>)</operator> <operator>&lt;</operator> <name>saved_lo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <name>saved_lo</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>used</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>free</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>used</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>free</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>used</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>used</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>free</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>free</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>body</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>body</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>&amp;=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>MD5_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>used</name></decl>, <decl><type ref="prev"/><name>free</name></decl>;</decl_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>used</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>free</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>used</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>free</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>used</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>body</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>free</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>used</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>free</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">57</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">58</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">59</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">60</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">61</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">62</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>body</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>a</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>a</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>a</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>d</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>d</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>d</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>d</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
