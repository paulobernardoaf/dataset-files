<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-outputs\rtmp-stream.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtmp-stream.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SEC_TO_NSEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC_TO_NSEC</name></cpp:macro> <cpp:value>1000000000ULL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSEC_TO_USEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSEC_TO_USEC</name></cpp:macro> <cpp:value>1000ULL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSEC_TO_NSEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSEC_TO_NSEC</name></cpp:macro> <cpp:value>1000000ULL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBR_INC_TIMER</name></cpp:macro> <cpp:value>(30ULL * SEC_TO_NSEC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBR_TRIGGER_USEC</name></cpp:macro> <cpp:value>(200ULL * MSEC_TO_USEC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_ESTIMATE_DURATION_MS</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ESTIMATE_DURATION_MS</name></cpp:macro> <cpp:value>2000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rtmp_stream_getname</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"RTMPStream"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_rtmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name>RTMP_LOGWARNING</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blogva</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>num_buffered_packets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>free_packets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_packets</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_packets</name> <operator>=</operator> <call><name>num_buffered_packets</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_packets</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"Freeing %d remaining packets"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>num_packets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>packets</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>packet</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_encoder_packet_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>stopping</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>os_event_try</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stop_event</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EAGAIN</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>connecting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>connecting</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>disconnected</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>disconnected</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtmp_stream_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stopping</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>connecting</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>connecting</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>active</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>connecting</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>connect_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>stop_ts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stop_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>active</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_sem_post</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_output_end_data_capture</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_TLS_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_packets</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>encoder_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>bind_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_event_destroy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stop_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_sem_destroy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST_FRAMEDROPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>droptest_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>dbr_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>dbr_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_event_destroy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_space_available_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_event_destroy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_has_data_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_event_destroy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>socket_available_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_event_destroy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_thread_signaled_exit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>write_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>write_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>write_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>rtmp_stream_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rtmp_stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_LogSetCallback</name><argument_list>(<argument><expr><name>log_rtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_LogSetLevel</name><argument_list>(<argument><expr><name>RTMP_LOGWARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_event_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>stop_event</name></name></expr></argument>, <argument><expr><name>OS_EVENT_TYPE_MANUAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>write_buf_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to initialize write buffer mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>dbr_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to initialize dbr mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_event_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>buffer_space_available_event</name></name></expr></argument>,

<argument><expr><name>OS_EVENT_TYPE_AUTO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to initialize write buffer event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_event_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>buffer_has_data_event</name></name></expr></argument>, <argument><expr><name>OS_EVENT_TYPE_AUTO</name></expr></argument>)</argument_list></call> <operator>!=</operator>

<literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to initialize data buffer event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_event_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>socket_available_event</name></name></expr></argument>,

<argument><expr><name>OS_EVENT_TYPE_AUTO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to initialize socket buffer event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_event_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>send_thread_signaled_exit</name></name></expr></argument>,

<argument><expr><name>OS_EVENT_TYPE_MANUAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to initialize socket exit event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>stream</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>rtmp_stream_destroy</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtmp_stream_stop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stopping</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ts</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>connecting</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>connect_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>stop_ts</name></name> <operator>=</operator> <name>ts</name> <operator>/</operator> <literal type="number">1000ULL</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>shutdown_timeout_ts</name></name> <operator>=</operator>

<name>ts</name> <operator>+</operator>

<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>max_shutdown_time_sec</name></name> <operator>*</operator> <literal type="number">1000000000ULL</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>active</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stop_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>stop_ts</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_sem_post</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>obs_output_signal_stop</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>OBS_OUTPUT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_rtmp_str</name><parameter_list>(<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><operator>(</operator><name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>av_val</name></name> <operator>=</operator> <ternary><condition><expr><name>valid</name></expr> ?</condition><then> <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>av_len</name></name> <operator>=</operator> <ternary><condition><expr><name>valid</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_rtmp_dstr</name><parameter_list>(<parameter><decl><type><name>AVal</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><operator>!</operator><call><name>dstr_is_empty</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>av_val</name></name> <operator>=</operator> <ternary><condition><expr><name>valid</name></expr> ?</condition><then> <expr><name><name>str</name><operator>-&gt;</operator><name>array</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>av_len</name></name> <operator>=</operator> <ternary><condition><expr><name>valid</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>get_next_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>new_packet</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>packets</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>encoder_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_packet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_packet</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>discard_recv_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>rtmp</name> <init>= <expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><ternary><condition><expr><name>size</name> <operator>&gt;</operator> <literal type="number">512</literal></expr> ?</condition><then> <expr><literal type="number">512</literal></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name><name>rtmp</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name><name>rtmp</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_log</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"recv error: %d (%d bytes)"</literal></expr></argument>,

<argument><expr><name>error</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST_FRAMEDROPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>droptest_cap_data_rate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>droptest_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>TEST_FRAMEDROPS_WITH_BITRATE_SHORTCUTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>check_elapsed</name> <init>= <expr><name>ts</name> <operator>-</operator> <name><name>stream</name><operator>-&gt;</operator><name>droptest_last_key_check</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>check_elapsed</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">200ULL</literal> <operator>*</operator> <name>MSEC_TO_NSEC</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bitrate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>droptest_last_key_check</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetAsyncKeyState</name><argument_list>(<argument><expr><name>VK_NUMPAD0</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>droptest_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>GetAsyncKeyState</name><argument_list>(<argument><expr><name>VK_NUMPAD1</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>GetAsyncKeyState</name><argument_list>(<argument><expr><name>VK_NUMPAD2</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>GetAsyncKeyState</name><argument_list>(<argument><expr><name>VK_NUMPAD3</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <literal type="number">3000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>GetAsyncKeyState</name><argument_list>(<argument><expr><name>VK_NUMPAD4</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <literal type="number">4000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>GetAsyncKeyState</name><argument_list>(<argument><expr><name>VK_NUMPAD5</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>GetAsyncKeyState</name><argument_list>(<argument><expr><name>VK_NUMPAD6</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <literal type="number">6000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>GetAsyncKeyState</name><argument_list>(<argument><expr><name>VK_NUMPAD7</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <literal type="number">7000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>GetAsyncKeyState</name><argument_list>(<argument><expr><name>VK_NUMPAD8</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <literal type="number">8000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>GetAsyncKeyState</name><argument_list>(<argument><expr><name>VK_NUMPAD9</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <literal type="number">9000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitrate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>droptest_max</name></name> <operator>=</operator> <operator>(</operator><name>bitrate</name> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>droptest_max</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>droptest_max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>droptest_max</name></name> <operator>=</operator> <name>DROPTEST_MAX_BYTES</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>droptest_info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>droptest_size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>droptest_info</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>circlebuf_peek_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>droptest_info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>droptest_size</name></name> <operator>&gt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>droptest_max</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>elapsed</name> <init>= <expr><name>ts</name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>ts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&lt;</operator> <literal type="number">1000000000ULL</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>elapsed</name> <operator>=</operator> <literal type="number">1000000000ULL</literal> <operator>-</operator> <name>elapsed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_sleepto_ns</name><argument_list>(<argument><expr><name>ts</name> <operator>+</operator> <name>elapsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>droptest_size</name></name> <operator>&gt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>droptest_max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>droptest_info</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>droptest_size</name></name> <operator>-=</operator> <name><name>info</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>socket_queue_data</name><parameter_list>(<parameter><decl><type><name>RTMPSockBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<label><name>retry_send</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTMP_IsConnected</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>write_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>write_buf_len</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>write_buf_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>write_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_event_wait</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_space_available_event</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<goto>goto <name>retry_send</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>write_buf</name></name> <operator>+</operator> <name><name>stream</name><operator>-&gt;</operator><name>write_buf_len</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>write_buf_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>write_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_has_data_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_header</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>recv_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <name>RTMP_MAX_STREAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>new_socket_loop</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctlsocket</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>,

<argument><expr><operator>(</operator><name>u_long</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>recv_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>recv_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>recv_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>discard_recv_data</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>recv_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flv_packet_mux</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_header</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>stream</name><operator>-&gt;</operator><name>start_dts_offset</name></name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>is_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST_FRAMEDROPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>droptest_cap_data_rate</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>RTMP_Write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_header</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_encoder_packet_release</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>total_bytes_sent</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>send_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>can_shutdown_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cur_time</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>timeout</name> <init>= <expr><name>cur_time</name> <operator>&gt;=</operator> <name><name>stream</name><operator>-&gt;</operator><name>shutdown_timeout_ts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"Stream shutdown timeout reached (%d second(s))"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>max_shutdown_time_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>timeout</name> <operator>||</operator> <name><name>packet</name><operator>-&gt;</operator><name>sys_dts_usec</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>stop_ts</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_output_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>last_error_code</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>WSAETIMEDOUT</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"ConnectionTimedOut"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WSAEACCES</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"PermissionDenied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WSAECONNABORTED</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"ConnectionAborted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WSAECONNRESET</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"ConnectionReset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WSAHOST_NOT_FOUND</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"HostNotFound"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WSANO_DATA</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"NoData"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WSAEADDRNOTAVAIL</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"AddressNotAvailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<switch>switch <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>last_error_code</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ETIMEDOUT</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"ConnectionTimedOut"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EACCES</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"PermissionDenied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ECONNABORTED</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"ConnectionAborted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ECONNRESET</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"ConnectionReset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HOST_NOT_FOUND</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"HostNotFound"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NO_DATA</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"NoData"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EADDRNOTAVAIL</name></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"AddressNotAvailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>last_error_code</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">0x2700</literal></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"SSLCertVerifyFailed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">0x7680</literal></expr>:</case>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Failed to load root certificates for a secure TLS connection."</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<literal type="string">" Check you have an up to date root certificate bundle in /etc/ssl/certs."</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_output_set_last_error</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dbr_add_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dbr_frame</name></name> <modifier>*</modifier></type><name>back</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dbr_frame</name></name></type> <name>front</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>dur</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>dbr_frames</name></name></expr></argument>, <argument><expr><name>back</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>back</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_peek_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>dbr_frames</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>front</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>front</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_data_size</name></name> <operator>+=</operator> <name><name>back</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dur</name> <operator>=</operator> <operator>(</operator><name><name>back</name><operator>-&gt;</operator><name>send_end</name></name> <operator>-</operator> <name><name>front</name><operator>.</operator><name>send_beg</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dur</name> <operator>&gt;=</operator> <name>MAX_ESTIMATE_DURATION_MS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_data_size</name></name> <operator>-=</operator> <name><name>front</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>dbr_frames</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>front</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_est_bitrate</name></name> <operator>=</operator>

<ternary><condition><expr><operator>(</operator><name>dur</name> <operator>&gt;=</operator> <name>MIN_ESTIMATE_DURATION_MS</name><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>stream</name><operator>-&gt;</operator><name>dbr_data_size</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <name>dur</name><operator>)</operator></expr>

</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_est_bitrate</name></name> <operator>*=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_est_bitrate</name></name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_est_bitrate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_est_bitrate</name></name> <operator>-=</operator> <name><name>stream</name><operator>-&gt;</operator><name>audio_bitrate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_est_bitrate</name></name> <operator>&lt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_est_bitrate</name></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dbr_set_bitrate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>send_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_set_thread_name</name><argument_list>(<argument><expr><literal type="string">"rtmp-stream: send_thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>os_sem_wait</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_sem</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dbr_frame</name></name></type> <name>dbr_frame</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stopping</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>stop_ts</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_next_packet</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stopping</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>can_shutdown_stream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_encoder_packet_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>sent_headers</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>send_headers</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>disconnected</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dbr_frame</name><operator>.</operator><name>send_beg</name></name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbr_frame</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>send_packet</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>packet</name><operator>.</operator><name>track_idx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>disconnected</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dbr_frame</name><operator>.</operator><name>send_end</name></name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>dbr_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbr_add_frame</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbr_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>dbr_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>bool</name></type> <name>encode_error</name> <init>= <expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>encode_error</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>disconnected</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"Disconnected from %s"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encode_error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"Encoder error, disconnecting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"User stopped the stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>new_socket_loop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_thread_signaled_exit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_has_data_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>socket_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>socket_thread_active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_bCustomSend</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_output_error</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stopping</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_detach</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_output_signal_stop</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>OBS_OUTPUT_DISCONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encode_error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_output_signal_stop</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>OBS_OUTPUT_ENCODE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>obs_output_end_data_capture</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free_packets</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_event_reset</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stop_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>sent_headers</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_enabled</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name> <operator>!=</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_orig_bitrate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_orig_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbr_set_bitrate</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>send_meta_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>meta_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>meta_data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <call><name>flv_meta_data</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta_data_size</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>RTMP_Write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>meta_data</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>meta_data_size</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>meta_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>send_audio_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>aencoder</name> <init>= <expr><call><name>obs_output_get_audio_encoder</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>packet</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_ENCODER_AUDIO</name></expr>,

<expr><operator>.</operator><name>timebase_den</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aencoder</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_encoder_get_extra_data</name><argument_list>(<argument><expr><name>aencoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>packet</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>bmemdup</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>packet</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>send_packet</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>send_video_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>vencoder</name> <init>= <expr><call><name>obs_output_get_video_encoder</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>packet</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_ENCODER_VIDEO</name></expr>, <expr><operator>.</operator><name>timebase_den</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>keyframe</name> <operator>=</operator> <name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_encoder_get_extra_data</name><argument_list>(<argument><expr><name>vencoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>obs_parse_avc_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>send_packet</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>send_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>sent_headers</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>next</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>send_audio_header</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>send_video_header</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>send_audio_header</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>reset_semaphore</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>os_sem_destroy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>os_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>send_sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>socklen_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_SENDBUF_SIZE</name></cpp:macro> <cpp:value>65535</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>adjust_sndbuf_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cur_sendbuf_size</name> <init>= <expr><name>new_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>int_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDBUF</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cur_sendbuf_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_sendbuf_size</name> <operator>&lt;</operator> <name>new_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_sendbuf_size</name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDBUF</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cur_sendbuf_size</name></expr></argument>, <argument><expr><name>int_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>next</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>adjust_sndbuf_size</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>MIN_SENDBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>reset_semaphore</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>send_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>send_thread</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to create send thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OBS_OUTPUT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>new_socket_loop</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>last_error_code</name></name> <operator>=</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>last_error_code</name></name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to set non-blocking socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OBS_OUTPUT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_event_reset</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_thread_signaled_exit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"New socket loop enabled by user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>low_latency_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"Low latency mode enabled by user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>write_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>write_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_bitrate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>vencoder</name> <init>= <expr><call><name>obs_output_get_video_encoder</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vencoder</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>obs_encoder_get_settings</name><argument_list>(<argument><expr><name>vencoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>params</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bitrate</name> <init>=

<expr><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitrate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Video encoder didn't return a "</literal>

<literal type="string">"valid bitrate, new network "</literal>

<literal type="string">"code may function poorly. "</literal>

<literal type="string">"Low latency mode disabled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>low_latency_mode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>total_bitrate</name> <operator>+=</operator> <name>bitrate</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>aencoder</name> <init>=

<expr><call><name>obs_output_get_audio_encoder</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>aencoder</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>obs_encoder_get_settings</name><argument_list>(<argument><expr><name>aencoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>params</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bitrate</name> <init>=

<expr><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitrate</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <literal type="number">160</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total_bitrate</name> <operator>+=</operator> <name>bitrate</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ideal_buffer_size</name> <init>= <expr><name>total_bitrate</name> <operator>*</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ideal_buffer_size</name> <operator>&lt;</operator> <literal type="number">131072</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ideal_buffer_size</name> <operator>=</operator> <literal type="number">131072</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>write_buf_size</name></name> <operator>=</operator> <name>ideal_buffer_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>write_buf</name></name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><name>ideal_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>socket_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>socket_thread_windows</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"New socket loop not supported on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OBS_OUTPUT_ERROR</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to create socket thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OBS_OUTPUT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>socket_thread_active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_bCustomSend</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_customSendFunc</name></name> <operator>=</operator> <name>socket_queue_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_customSendParam</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>send_meta_data</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Disconnected while attempting to connect to "</literal>

<literal type="string">"server."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_output_error</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OBS_OUTPUT_DISCONNECTED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>obs_output_begin_data_capture</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OBS_OUTPUT_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>win32_log_interface_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>rtmp</name> <init>= <expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MIB_IPFORWARDROW</name></type> <name>route</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dest_addr</name></decl>, <decl><type ref="prev"/><name>source_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HOSTENT</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rtmp</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_len</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>rtmp</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_val</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hostname</name><index>[<expr><name><name>rtmp</name><operator>-&gt;</operator><name>Link</name><operator>.</operator><name>hostname</name><operator>.</operator><name>av_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>gethostbyname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dest_addr</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rtmp</name><operator>-&gt;</operator><name>m_bindIP</name><operator>.</operator><name>addrLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>source_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>rtmp</name><operator>-&gt;</operator><name>m_bindIP</name><operator>.</operator><name>addr</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>source_addr</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>rtmp</name><operator>-&gt;</operator><name>m_bindIP</name><operator>.</operator><name>addr</name></name><operator>)</operator>

<operator>.</operator><name><name>sin_addr</name><operator>.</operator><name>S_un</name><operator>.</operator><name>S_addr</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetBestRoute</name><argument_list>(<argument><expr><name>dest_addr</name></expr></argument>, <argument><expr><name>source_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>route</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>MIB_IFROW</name></type> <name>row</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>row</name><operator>.</operator><name>dwIndex</name></name> <operator>=</operator> <name><name>route</name><operator>.</operator><name>dwForwardIfIndex</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetIfEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>speed</name> <init>= <expr><name><name>row</name><operator>.</operator><name>dwSpeed</name></name> <operator>/</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>other</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>row</name><operator>.</operator><name>dwType</name></name> <operator>==</operator> <name>IF_TYPE_ETHERNET_CSMACD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"ethernet"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>row</name><operator>.</operator><name>dwType</name></name> <operator>==</operator> <name>IF_TYPE_IEEE80211</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"802.11"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>other</name></expr></argument>, <argument><expr><literal type="string">"type %lu"</literal></expr></argument>, <argument><expr><name><name>row</name><operator>.</operator><name>dwType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"Interface: %s (%s, %lu mbps)"</literal></expr></argument>, <argument><expr><name><name>row</name><operator>.</operator><name>bDescr</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>,

<argument><expr><name>speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>try_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>dstr_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"URL is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OBS_OUTPUT_BAD_PATH</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"Connecting to RTMP URL %s..."</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>Link</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>Link</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>last_error_code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTMP_SetupURL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OBS_OUTPUT_BAD_PATH</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_EnableWrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>encoder_name</name></name></expr></argument>, <argument><expr><literal type="string">"FMLE/3.0 (compatible; FMSc/1.0)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_rtmp_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>Link</name><operator>.</operator><name>pubUser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_rtmp_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>Link</name><operator>.</operator><name>pubPasswd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_rtmp_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>Link</name><operator>.</operator><name>flashVer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>encoder_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>Link</name><operator>.</operator><name>swfUrl</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>Link</name><operator>.</operator><name>tcUrl</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dstr_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>bind_ip</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>dstr_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>bind_ip</name></name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_bindIP</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_bindIP</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>netif_str_to_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_bindIP</name><operator>.</operator><name>addr</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_bindIP</name><operator>.</operator><name>addrLen</name></name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>bind_ip</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_bindIP</name><operator>.</operator><name>addrLen</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ipv6</name> <init>= <expr><name>len</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"Binding to IPv%d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>ipv6</name></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RTMP_AddStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name> <init>=

<expr><call><name>obs_output_get_audio_encoder</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoder_name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>encoder_name</name> <operator>=</operator> <call><name>obs_encoder_get_name</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_AddStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>, <argument><expr><name>encoder_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_outChunkSize</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_bSendChunkSizeInfo</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>m_bUseNagle</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>win32_log_interface_type</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTMP_Connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_output_error</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OBS_OUTPUT_CONNECT_FAILED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTMP_ConnectStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OBS_OUTPUT_INVALID_STREAM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"Connection to %s successful"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>init_send</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bind_ip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>drop_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>drop_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>caps</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stopping</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free_packets</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>service</name> <operator>=</operator> <call><name>obs_output_get_service</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>service</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>disconnected</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>encode_error</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>total_bytes_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dropped_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>min_priority</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>got_first_video</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>settings</name> <operator>=</operator> <call><name>obs_output_get_settings</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>obs_service_get_url</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><call><name>obs_service_get_key</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><call><name>obs_service_get_username</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>password</name></name></expr></argument>, <argument><expr><call><name>obs_service_get_password</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_depad</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_depad</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>drop_b</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>OPT_DROP_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>drop_p</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>OPT_PFRAME_DROP_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>max_shutdown_time_sec</name></name> <operator>=</operator>

<operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>OPT_MAX_SHUTDOWN_TIME_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>venc</name> <init>= <expr><call><name>obs_output_get_video_encoder</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>aenc</name> <init>= <expr><call><name>obs_output_get_audio_encoder</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>vsettings</name> <init>= <expr><call><name>obs_encoder_get_settings</name><argument_list>(<argument><expr><name>venc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>asettings</name> <init>= <expr><call><name>obs_encoder_get_settings</name><argument_list>(<argument><expr><name>aenc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>dbr_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>audio_bitrate</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>asettings</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_orig_bitrate</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>vsettings</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_orig_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_est_bitrate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_inc_bitrate</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_orig_bitrate</name></name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_inc_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_enabled</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>OPT_DYN_BITRATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>caps</name> <operator>=</operator> <call><name>obs_encoder_get_caps</name><argument_list>(<argument><expr><name>venc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>caps</name> <operator>&amp;</operator> <name>OBS_ENCODER_CAP_DYN_BITRATE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_enabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_output_get_delay</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_enabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"Dynamic bitrate enabled. Dropped frames begone!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>vsettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>asettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>drop_p</name> <operator>&lt;</operator> <operator>(</operator><name>drop_b</name> <operator>+</operator> <literal type="number">200</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>drop_p</name> <operator>=</operator> <name>drop_b</name> <operator>+</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>drop_threshold_usec</name></name> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <name>drop_b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pframe_drop_threshold_usec</name></name> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <name>drop_p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bind_ip</name> <operator>=</operator> <call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>OPT_BIND_IP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>bind_ip</name></name></expr></argument>, <argument><expr><name>bind_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>new_socket_loop</name></name> <operator>=</operator>

<call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>OPT_NEWSOCKETLOOP_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>low_latency_mode</name></name> <operator>=</operator>

<call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>OPT_LOWLATENCY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>connect_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_set_thread_name</name><argument_list>(<argument><expr><literal type="string">"rtmp-stream: connect_thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_connect</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_output_signal_stop</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>OBS_OUTPUT_BAD_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>try_connect</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>OBS_OUTPUT_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_output_signal_stop</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"Connection to %s failed: %d"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stopping</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pthread_detach</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>connect_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>connecting</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rtmp_stream_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_can_begin_data_capture</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_initialize_encoders</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>connecting</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>connect_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>connect_thread</name></expr></argument>,

<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>add_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>encoder_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>num_buffered_packets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>packets</name><operator>.</operator><name>size</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>encoder_packet</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drop_frames</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>highest_priority</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pframes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>pframes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name>new_buf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_frames_dropped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>start_packets</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>num_buffered_packets</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>circlebuf_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>encoder_packet</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>packets</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>packet</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_AUDIO</name> <operator>||</operator>

<name><name>packet</name><operator>.</operator><name>drop_priority</name></name> <operator>&gt;=</operator> <name>highest_priority</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>num_frames_dropped</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_encoder_packet_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>packets</name></name> <operator>=</operator> <name>new_buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>min_priority</name></name> <operator>&lt;</operator> <name>highest_priority</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>min_priority</name></name> <operator>=</operator> <name>highest_priority</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_frames_dropped</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dropped_frames</name></name> <operator>+=</operator> <name>num_frames_dropped</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"Dropped %s, prev packet count: %d, new packet count: %d"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><name>start_packets</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>num_buffered_packets</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>find_first_video_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>packets</name><operator>.</operator><name>size</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>cur</name> <init>=

<expr><call><name>circlebuf_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_VIDEO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>first</name> <operator>=</operator> <operator>*</operator><name>cur</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>dbr_bitrate_lowered</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>prev_bitrate</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_prev_bitrate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>est_bitrate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>new_bitrate</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_est_bitrate</name></name> <operator>&amp;&amp;</operator>

<name><name>stream</name><operator>-&gt;</operator><name>dbr_est_bitrate</name></name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>dbr_frames</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_frames</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>est_bitrate</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_est_bitrate</name></name> <operator>/</operator> <literal type="number">100</literal> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>est_bitrate</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>est_bitrate</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (prev_bitrate &amp;&amp; est_bitrate) {

if (prev_bitrate &lt; est_bitrate) {

blog(LOG_INFO, "going back to prev bitrate: "

"prev_bitrate (%d) &lt; est_bitrate (%d)",

prev_bitrate,

est_bitrate);

new_bitrate = prev_bitrate;

} else {

new_bitrate = est_bitrate;

}

new_bitrate = est_bitrate;

} else if (prev_bitrate) {

new_bitrate = prev_bitrate;

info("going back to prev bitrate");

} else if (est_bitrate) {

new_bitrate = est_bitrate;

} else {

return false;

}

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>est_bitrate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_bitrate</name> <operator>=</operator> <name>est_bitrate</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prev_bitrate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_bitrate</name> <operator>=</operator> <name>prev_bitrate</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"going back to prev bitrate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_bitrate</name> <operator>==</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_prev_bitrate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name> <operator>=</operator> <name>new_bitrate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_inc_timeout</name></name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call> <operator>+</operator> <name>DBR_INC_TIMER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"bitrate decreased to: %ld"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dbr_set_bitrate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>vencoder</name> <init>= <expr><call><name>obs_output_get_video_encoder</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name> <init>= <expr><call><name>obs_encoder_get_settings</name><argument_list>(<argument><expr><name>vencoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_encoder_update</name><argument_list>(<argument><expr><name>vencoder</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dbr_inc_bitrate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_prev_bitrate</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name> <operator>+=</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_inc_bitrate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name> <operator>&gt;=</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_orig_bitrate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_orig_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"bitrate increased to: %ld, done"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_orig_bitrate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_inc_timeout</name></name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call> <operator>+</operator> <name>DBR_INC_TIMER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"bitrate increased to: %ld, waiting"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_cur_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_to_drop_frames</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pframes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>buffer_duration_usec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_packets</name> <init>= <expr><call><name>num_buffered_packets</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><name>pframes</name></expr> ?</condition><then> <expr><literal type="string">"p-frames"</literal></expr> </then><else>: <expr><literal type="string">"b-frames"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>priority</name> <init>= <expr><ternary><condition><expr><name>pframes</name></expr> ?</condition><then> <expr><name>OBS_NAL_PRIORITY_HIGHEST</name></expr>

</then><else>: <expr><name>OBS_NAL_PRIORITY_HIGH</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>drop_threshold</name> <init>= <expr><ternary><condition><expr><name>pframes</name></expr> ?</condition><then> <expr><name><name>stream</name><operator>-&gt;</operator><name>pframe_drop_threshold_usec</name></name></expr>

</then><else>: <expr><name><name>stream</name><operator>-&gt;</operator><name>drop_threshold_usec</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pframes</name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_enabled</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_inc_timeout</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name><name>stream</name><operator>-&gt;</operator><name>dbr_inc_timeout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_inc_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbr_inc_bitrate</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbr_set_bitrate</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_packets</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pframes</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>congestion</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_first_video_packet</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buffer_duration_usec</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>last_dts_usec</name></name> <operator>-</operator> <name><name>first</name><operator>.</operator><name>dts_usec</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pframes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>congestion</name></name> <operator>=</operator>

<operator>(</operator><name>float</name><operator>)</operator><name>buffer_duration_usec</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>drop_threshold</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>dbr_enabled</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>bitrate_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pframes</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>buffer_duration_usec</name> <operator>&gt;=</operator> <name>DBR_TRIGGER_USEC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>dbr_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitrate_changed</name> <operator>=</operator> <call><name>dbr_bitrate_lowered</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>dbr_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitrate_changed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"buffer_duration_msec: %"</literal> <name>PRId64</name></expr></argument>,

<argument><expr><name>buffer_duration_usec</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbr_set_bitrate</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer_duration_usec</name> <operator>&gt;</operator> <name>drop_threshold</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"buffer_duration_usec: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>buffer_duration_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drop_frames</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>, <argument><expr><name>pframes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>add_video_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>check_to_drop_frames</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_to_drop_frames</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>drop_priority</name></name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>min_priority</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>dropped_frames</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>min_priority</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>last_dts_usec</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>dts_usec</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>add_packet</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtmp_stream_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>new_packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>added_packet</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>disconnected</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>active</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>packet</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>encode_error</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_sem_post</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>got_first_video</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>start_dts_offset</name></name> <operator>=</operator>

<call><name>get_ms_time</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>got_first_video</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_parse_avc_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_packet</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>obs_encoder_packet_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_packet</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>disconnected</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>added_packet</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_VIDEO</name><operator>)</operator></expr>

?</condition><then> <expr><call><name>add_video_packet</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_packet</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>add_packet</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_packet</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>packets_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>added_packet</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_sem_post</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>send_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_encoder_packet_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtmp_stream_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>defaults</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>, <argument><expr><name>OPT_DROP_THRESHOLD</name></expr></argument>, <argument><expr><literal type="number">700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>, <argument><expr><name>OPT_PFRAME_DROP_THRESHOLD</name></expr></argument>, <argument><expr><literal type="number">900</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>, <argument><expr><name>OPT_MAX_SHUTDOWN_TIME_SEC</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>, <argument><expr><name>OPT_BIND_IP</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>, <argument><expr><name>OPT_NEWSOCKETLOOP_ENABLED</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>, <argument><expr><name>OPT_LOWLATENCY_ENABLED</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>rtmp_stream_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>netif_saddr_data</name></name></type> <name>addrs</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>OPT_DROP_THRESHOLD</name></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"RTMPStream.DropThreshold"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>,

<argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>OPT_BIND_IP</name></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"RTMPStream.BindIP"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Default"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netif_get_addrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>addrs</name><operator>.</operator><name>addrs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>netif_saddr_item</name></name></type> <name>item</name> <init>= <expr><name><name>addrs</name><operator>.</operator><name>addrs</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>netif_saddr_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>OPT_NEWSOCKETLOOP_ENABLED</name></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"RTMPStream.NewSocketLoop"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>OPT_LOWLATENCY_ENABLED</name></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"RTMPStream.LowLatencyMode"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>rtmp_stream_total_bytes_sent</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>total_bytes_sent</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtmp_stream_dropped_frames</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>dropped_frames</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>rtmp_stream_congestion</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>new_socket_loop</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>write_buf_len</name></name> <operator>/</operator>

<operator>(</operator><name>float</name><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>write_buf_size</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name><name>stream</name><operator>-&gt;</operator><name>min_priority</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><name><name>stream</name><operator>-&gt;</operator><name>congestion</name></name></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtmp_stream_connect_time</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rtmp_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>rtmp</name><operator>.</operator><name>connect_time_ms</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_output_info</name></name></type> <name>rtmp_output_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"rtmp_output"</literal></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>OBS_OUTPUT_AV</name> <operator>|</operator> <name>OBS_OUTPUT_ENCODED</name> <operator>|</operator> <name>OBS_OUTPUT_SERVICE</name> <operator>|</operator>

<name>OBS_OUTPUT_MULTI_TRACK</name></expr>,

<expr><operator>.</operator><name>encoded_video_codecs</name> <operator>=</operator> <literal type="string">"h264"</literal></expr>,

<expr><operator>.</operator><name>encoded_audio_codecs</name> <operator>=</operator> <literal type="string">"aac"</literal></expr>,

<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>rtmp_stream_getname</name></expr>,

<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>rtmp_stream_create</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>rtmp_stream_destroy</name></expr>,

<expr><operator>.</operator><name>start</name> <operator>=</operator> <name>rtmp_stream_start</name></expr>,

<expr><operator>.</operator><name>stop</name> <operator>=</operator> <name>rtmp_stream_stop</name></expr>,

<expr><operator>.</operator><name>encoded_packet</name> <operator>=</operator> <name>rtmp_stream_data</name></expr>,

<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>rtmp_stream_defaults</name></expr>,

<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>rtmp_stream_properties</name></expr>,

<expr><operator>.</operator><name>get_total_bytes</name> <operator>=</operator> <name>rtmp_stream_total_bytes_sent</name></expr>,

<expr><operator>.</operator><name>get_congestion</name> <operator>=</operator> <name>rtmp_stream_congestion</name></expr>,

<expr><operator>.</operator><name>get_connect_time_ms</name> <operator>=</operator> <name>rtmp_stream_connect_time</name></expr>,

<expr><operator>.</operator><name>get_dropped_frames</name> <operator>=</operator> <name>rtmp_stream_dropped_frames</name></expr>,

}</block></expr></init></decl>;</decl_stmt></block_content></block></function>

</unit>
