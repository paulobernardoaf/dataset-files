<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-filters\expander-filter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;media-io/audio-math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/circlebuf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threading.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_log</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[expander: '%s'] " format, obs_source_get_name(cd-&gt;context), ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_WARNING, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_INFO, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_DEBUG, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_RATIO</name></cpp:macro> <cpp:value>"ratio"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_THRESHOLD</name></cpp:macro> <cpp:value>"threshold"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ATTACK_TIME</name></cpp:macro> <cpp:value>"attack_time"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_RELEASE_TIME</name></cpp:macro> <cpp:value>"release_time"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_OUTPUT_GAIN</name></cpp:macro> <cpp:value>"output_gain"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_DETECTOR</name></cpp:macro> <cpp:value>"detector"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_PRESETS</name></cpp:macro> <cpp:value>"presets"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MT_</name></cpp:macro> <cpp:value>obs_module_text</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_RATIO</name></cpp:macro> <cpp:value>MT_("expander.Ratio")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_THRESHOLD</name></cpp:macro> <cpp:value>MT_("expander.Threshold")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_ATTACK_TIME</name></cpp:macro> <cpp:value>MT_("expander.AttackTime")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_RELEASE_TIME</name></cpp:macro> <cpp:value>MT_("expander.ReleaseTime")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_OUTPUT_GAIN</name></cpp:macro> <cpp:value>MT_("expander.OutputGain")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_DETECTOR</name></cpp:macro> <cpp:value>MT_("expander.Detector")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_PEAK</name></cpp:macro> <cpp:value>MT_("expander.Peak")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_RMS</name></cpp:macro> <cpp:value>MT_("expander.RMS")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_NONE</name></cpp:macro> <cpp:value>MT_("expander.None")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_PRESETS</name></cpp:macro> <cpp:value>MT_("expander.Presets")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_PRESETS_EXP</name></cpp:macro> <cpp:value>MT_("expander.Presets.Expander")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_PRESETS_GATE</name></cpp:macro> <cpp:value>MT_("expander.Presets.Gate")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_RATIO</name></cpp:macro> <cpp:value>1.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RATIO</name></cpp:macro> <cpp:value>20.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_THRESHOLD_DB</name></cpp:macro> <cpp:value>-60.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_THRESHOLD_DB</name></cpp:macro> <cpp:value>0.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_OUTPUT_GAIN_DB</name></cpp:macro> <cpp:value>-32.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OUTPUT_GAIN_DB</name></cpp:macro> <cpp:value>32.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_ATK_RLS_MS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RLS_MS</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ATK_MS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_AUDIO_BUF_MS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_IN_S</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_IN_S_F</name></cpp:macro> <cpp:value>((float)MS_IN_S)</cpp:value></cpp:define>

<struct>struct <name>expander_data</name> <block>{

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>envelope_buf</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>envelope_buf_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ratio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>attack_gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>release_gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>output_gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>envelope</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>slope</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>detector</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>runave</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_gate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>runaverage</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>runaverage_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>gaindB</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>gaindB_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>gaindB_buf</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>env_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>env_in_len</name></decl>;</decl_stmt>

}</block>;</struct>

<enum>enum <block>{ <decl><name>RMS_DETECT</name></decl>,

<decl><name>RMS_STILLWELL_DETECT</name></decl>,

<decl><name>PEAK_DETECT</name></decl>,

<decl><name>NO_DETECT</name></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resize_env_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>expander_data</name></name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<call><name>brealloc</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resize_runaverage_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>expander_data</name></name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>runaverage_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>runaverage</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>brealloc</name><argument_list>(

<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>runaverage</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>runaverage_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resize_env_in_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>expander_data</name></name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>env_in_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>env_in</name></name> <operator>=</operator> <call><name>brealloc</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>env_in</name></name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>env_in_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resize_gaindB_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>expander_data</name></name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<call><name>brealloc</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>gain_coefficient</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>expf</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>sample_rate</name> <operator>*</operator> <name>time</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expander_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Expander"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expander_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>presets</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_PRESETS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_expander_preset</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>presets</name></expr></argument>, <argument><expr><literal type="string">"gate"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_expander_preset</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_PRESETS</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>is_expander_preset</name></expr> ?</condition><then> <expr><literal type="string">"expander"</literal></expr> </then><else>: <expr><literal type="string">"gate"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_RATIO</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>is_expander_preset</name></expr> ?</condition><then> <expr><literal type="number">2.0</literal></expr> </then><else>: <expr><literal type="number">10.0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_THRESHOLD</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">40.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_ATTACK_TIME</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_RELEASE_TIME</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>is_expander_preset</name></expr> ?</condition><then> <expr><literal type="number">50</literal></expr> </then><else>: <expr><literal type="number">125</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_OUTPUT_GAIN</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_DETECTOR</name></expr></argument>, <argument><expr><literal type="string">"RMS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expander_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>expander_data</name></name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>presets</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_PRESETS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>presets</name></expr></argument>, <argument><expr><literal type="string">"expander"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cd</name><operator>-&gt;</operator><name>is_gate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_clear</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_PRESETS</name></expr></argument>, <argument><expr><literal type="string">"expander"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expander_defaults</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>is_gate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>presets</name></expr></argument>, <argument><expr><literal type="string">"gate"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cd</name><operator>-&gt;</operator><name>is_gate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_clear</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_PRESETS</name></expr></argument>, <argument><expr><literal type="string">"gate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expander_defaults</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>is_gate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>sample_rate</name> <init>=

<expr><call><name>audio_output_get_sample_rate</name><argument_list>(<argument><expr><call><name>obs_get_audio</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_channels</name> <init>= <expr><call><name>audio_output_get_channels</name><argument_list>(<argument><expr><call><name>obs_get_audio</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>attack_time_ms</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_ATTACK_TIME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>release_time_ms</name> <init>=

<expr><operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_RELEASE_TIME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>output_gain_db</name> <init>=

<expr><operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_OUTPUT_GAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>ratio</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_RATIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>threshold</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>attack_gain</name></name> <operator>=</operator>

<call><name>gain_coefficient</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>attack_time_ms</name> <operator>/</operator> <name>MS_IN_S_F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>release_gain</name></name> <operator>=</operator>

<call><name>gain_coefficient</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>release_time_ms</name> <operator>/</operator> <name>MS_IN_S_F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>output_gain</name></name> <operator>=</operator> <call><name>db_to_mul</name><argument_list>(<argument><expr><name>output_gain_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>=</operator> <name>num_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name>sample_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>slope</name></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name><name>cd</name><operator>-&gt;</operator><name>ratio</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>detect_mode</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S_DETECTOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>detect_mode</name></expr></argument>, <argument><expr><literal type="string">"RMS"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>detector</name></name> <operator>=</operator> <name>RMS_DETECT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>detect_mode</name></expr></argument>, <argument><expr><literal type="string">"peak"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>detector</name></name> <operator>=</operator> <name>PEAK_DETECT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sample_len</name> <init>= <expr><name>sample_rate</name> <operator>*</operator> <name>DEFAULT_AUDIO_BUF_MS</name> <operator>/</operator> <name>MS_IN_S</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>resize_env_buffer</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>sample_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>runaverage_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>resize_runaverage_buffer</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>sample_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>env_in_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>resize_env_in_buffer</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>sample_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>resize_gaindB_buffer</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>sample_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>expander_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>expander_data</name></name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>expander_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>runave</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>is_gate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>presets</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_PRESETS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>presets</name></expr></argument>, <argument><expr><literal type="string">"gate"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>is_gate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>expander_update</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expander_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>expander_data</name></name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>runaverage</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>env_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>analyze_envelope</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>expander_data</name></name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>num_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf_len</name></name> <operator>&lt;</operator> <name>num_samples</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>resize_env_buffer</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>num_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>runaverage_len</name></name> <operator>&lt;</operator> <name>num_samples</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>resize_runaverage_buffer</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>num_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>env_in_len</name></name> <operator>&lt;</operator> <name>num_samples</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>resize_env_in_buffer</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>num_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>rmscoef</name> <init>= <expr><call><name>exp2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">100.0f</literal> <operator>/</operator> <name><name>cd</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>num_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>runaverage</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>num_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>runaverage</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>env_in</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>env_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>chan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>chan</name> <operator>&lt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>chan</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>samples</name><index>[<expr><name>chan</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>envelope_buf</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name><index>[<expr><name>chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>runave</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>runaverage</name><index>[<expr><name>chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>env_in</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>env_in</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>detector</name></name> <operator>==</operator> <name>RMS_DETECT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>runave</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name>rmscoef</name> <operator>*</operator> <name><name>cd</name><operator>-&gt;</operator><name>runave</name><index>[<expr><name>chan</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>rmscoef</name><operator>)</operator> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><name><name>samples</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>env_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><call><name>fmaxf</name><argument_list>(<argument><expr><name><name>runave</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_samples</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>runave</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name>rmscoef</name> <operator>*</operator> <name><name>runave</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>rmscoef</name><operator>)</operator> <operator>*</operator>

<call><name>powf</name><argument_list>(<argument><expr><name><name>samples</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>env_in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name><name>runave</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>detector</name></name> <operator>==</operator> <name>PEAK_DETECT</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_samples</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>runave</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><name><name>samples</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>env_in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>samples</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>runave</name><index>[<expr><name>chan</name></expr>]</index></name> <operator>=</operator> <name><name>runave</name><index>[<expr><name>num_samples</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_samples</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>envelope_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>fmaxf</name><argument_list>(<argument><expr><name><name>envelope_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>env_in</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope</name><index>[<expr><name>chan</name></expr>]</index></name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>num_samples</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>process_expansion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>expander_data</name></name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>num_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>attack_gain</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>attack_gain</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>release_gain</name> <init>= <expr><name><name>cd</name><operator>-&gt;</operator><name>release_gain</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB_len</name></name> <operator>&lt;</operator> <name>num_samples</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>resize_gaindB_buffer</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>num_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>num_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>chan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>chan</name> <operator>&lt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>chan</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_samples</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>env_db</name> <init>= <expr><call><name>mul_to_db</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>envelope_buf</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>gain</name> <init>=

<expr><ternary><condition><expr><name><name>cd</name><operator>-&gt;</operator><name>threshold</name></name> <operator>-</operator> <name>env_db</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>

?</condition><then> <expr><call><name>fmaxf</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>slope</name></name> <operator>*</operator> <operator>(</operator><name><name>cd</name><operator>-&gt;</operator><name>threshold</name></name> <operator>-</operator>

<name>env_db</name><operator>)</operator></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">60.0f</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gain</name> <operator>&gt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name>attack_gain</name> <operator>*</operator>

<name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>attack_gain</name><operator>)</operator> <operator>*</operator> <name>gain</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name>release_gain</name> <operator>*</operator>

<name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>release_gain</name><operator>)</operator> <operator>*</operator> <name>gain</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gain</name> <operator>&gt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>gaindB_buf</name><index>[<expr><name>chan</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name>attack_gain</name> <operator>*</operator>

<name><name>cd</name><operator>-&gt;</operator><name>gaindB_buf</name><index>[<expr><name>chan</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>attack_gain</name><operator>)</operator> <operator>*</operator> <name>gain</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name>release_gain</name> <operator>*</operator>

<name><name>cd</name><operator>-&gt;</operator><name>gaindB_buf</name><index>[<expr><name>chan</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>release_gain</name><operator>)</operator> <operator>*</operator> <name>gain</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>db_to_mul</name><argument_list>(<argument><expr><call><name>fminf</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>samples</name><index>[<expr><name>chan</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>gain</name> <operator>*</operator> <name><name>cd</name><operator>-&gt;</operator><name>output_gain</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>gaindB_buf</name><index>[<expr><name>chan</name></expr>]</index></name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>gaindB</name><index>[<expr><name>chan</name></expr>]</index><index>[<expr><name>num_samples</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>obs_audio_data</name></name> <modifier>*</modifier></type>

<name>expander_filter_audio</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>obs_audio_data</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>expander_data</name></name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>num_samples</name> <init>= <expr><name><name>audio</name><operator>-&gt;</operator><name>frames</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_samples</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>audio</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>audio</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>analyze_envelope</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>num_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>process_expansion</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>num_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>audio</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>presets_changed</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>expander_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>presets</name> <init>= <expr><call><name>obs_properties_add_list</name><argument_list>(

<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_PRESETS</name></expr></argument>, <argument><expr><name>TEXT_PRESETS</name></expr></argument>, <argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>presets</name></expr></argument>, <argument><expr><name>TEXT_PRESETS_EXP</name></expr></argument>, <argument><expr><literal type="string">"expander"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>presets</name></expr></argument>, <argument><expr><name>TEXT_PRESETS_GATE</name></expr></argument>, <argument><expr><literal type="string">"gate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>presets</name></expr></argument>, <argument><expr><name>presets_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_float_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_RATIO</name></expr></argument>, <argument><expr><name>TEXT_RATIO</name></expr></argument>,

<argument><expr><name>MIN_RATIO</name></expr></argument>, <argument><expr><name>MAX_RATIO</name></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_float_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_float_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_THRESHOLD</name></expr></argument>, <argument><expr><name>TEXT_THRESHOLD</name></expr></argument>,

<argument><expr><name>MIN_THRESHOLD_DB</name></expr></argument>, <argument><expr><name>MAX_THRESHOLD_DB</name></expr></argument>,

<argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_float_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" dB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_int_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_ATTACK_TIME</name></expr></argument>,

<argument><expr><name>TEXT_ATTACK_TIME</name></expr></argument>, <argument><expr><name>MIN_ATK_RLS_MS</name></expr></argument>,

<argument><expr><name>MAX_ATK_MS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_int_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_int_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_RELEASE_TIME</name></expr></argument>,

<argument><expr><name>TEXT_RELEASE_TIME</name></expr></argument>, <argument><expr><name>MIN_ATK_RLS_MS</name></expr></argument>,

<argument><expr><name>MAX_RLS_MS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_int_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_float_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_OUTPUT_GAIN</name></expr></argument>,

<argument><expr><name>TEXT_OUTPUT_GAIN</name></expr></argument>,

<argument><expr><name>MIN_OUTPUT_GAIN_DB</name></expr></argument>,

<argument><expr><name>MAX_OUTPUT_GAIN_DB</name></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_float_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" dB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>detect</name> <init>= <expr><call><name>obs_properties_add_list</name><argument_list>(

<argument><expr><name>props</name></expr></argument>, <argument><expr><name>S_DETECTOR</name></expr></argument>, <argument><expr><name>TEXT_DETECTOR</name></expr></argument>, <argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>detect</name></expr></argument>, <argument><expr><name>TEXT_RMS</name></expr></argument>, <argument><expr><literal type="string">"RMS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>detect</name></expr></argument>, <argument><expr><name>TEXT_PEAK</name></expr></argument>, <argument><expr><literal type="string">"peak"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>expander_filter</name> <init>= <expr><block>{

<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"expander_filter"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_FILTER</name></expr>,

<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_AUDIO</name></expr>,

<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>expander_name</name></expr>,

<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>expander_create</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>expander_destroy</name></expr>,

<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>expander_update</name></expr>,

<expr><operator>.</operator><name>filter_audio</name> <operator>=</operator> <name>expander_filter_audio</name></expr>,

<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>expander_defaults</name></expr>,

<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>expander_properties</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
