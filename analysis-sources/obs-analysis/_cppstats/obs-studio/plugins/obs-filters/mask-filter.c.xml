<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-filters\mask-filter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/vec2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/vec4.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/image-file.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_TYPE</name></cpp:macro> <cpp:value>"type"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_IMAGE_PATH</name></cpp:macro> <cpp:value>"image_path"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_COLOR</name></cpp:macro> <cpp:value>"color"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_OPACITY</name></cpp:macro> <cpp:value>"opacity"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_STRETCH</name></cpp:macro> <cpp:value>"stretch"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_TYPE</name></cpp:macro> <cpp:value>obs_module_text("Type")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_IMAGE_PATH</name></cpp:macro> <cpp:value>obs_module_text("Path")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_COLOR</name></cpp:macro> <cpp:value>obs_module_text("Color")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_OPACITY</name></cpp:macro> <cpp:value>obs_module_text("Opacity")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_STRETCH</name></cpp:macro> <cpp:value>obs_module_text("StretchImage")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_PATH_IMAGES</name></cpp:macro> <cpp:value>obs_module_text("BrowsePath.Images")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_PATH_ALL_FILES</name></cpp:macro> <cpp:value>obs_module_text("BrowsePath.AllFiles")</cpp:value></cpp:define>

<struct>struct <name>mask_filter_data</name> <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>image_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>image_file_timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>update_time_elapsed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_image_file_t</name></type> <name>image</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>lock_aspect</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>time_t</name></type> <name>get_modified_timestamp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stats</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_stat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>stats</name><operator>.</operator><name>st_mtime</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mask_filter_get_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"MaskFilter"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mask_filter_image_unload</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mask_filter_data</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_image_file_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mask_filter_image_load</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mask_filter_data</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>mask_filter_image_unload</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>image_file</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>image_file_timestamp</name></name> <operator>=</operator> <call><name>get_modified_timestamp</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_image_file_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>image</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>update_time_elapsed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_image_file_init_texture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>texture</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mask_filter_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mask_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_IMAGE_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>effect_file</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>color</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_COLOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opacity</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_OPACITY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>effect_path</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>image_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>image_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>image_file</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>opacity</name><operator>)</operator> <operator>*</operator> <literal type="number">2.55</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec4_from_rgba</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mask_filter_image_load</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>lock_aspect</name></name> <operator>=</operator> <operator>!</operator><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_STRETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>effect_path</name> <operator>=</operator> <call><name>obs_module_file</name><argument_list>(<argument><expr><name>effect_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_effect_destroy</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <call><name>gs_effect_create_from_file</name><argument_list>(<argument><expr><name>effect_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>effect_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mask_filter_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_TYPE</name></expr></argument>,

<argument><expr><literal type="string">"mask_color_filter.effect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_COLOR</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_OPACITY</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILTER_EXTENSIONS</name></cpp:macro> <cpp:value>" (*.bmp *.jpg *.jpeg *.tga *.gif *.png)"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>mask_filter_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>filter_str</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_str</name></expr></argument>, <argument><expr><name>TEXT_PATH_IMAGES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_str</name></expr></argument>, <argument><expr><name>IMAGE_FILTER_EXTENSIONS</name> <literal type="string">";;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_str</name></expr></argument>, <argument><expr><name>TEXT_PATH_ALL_FILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_str</name></expr></argument>, <argument><expr><literal type="string">" (*.*)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_TYPE</name></expr></argument>, <argument><expr><name>TEXT_TYPE</name></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"MaskBlendType.MaskColor"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"mask_color_filter.effect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"MaskBlendType.MaskAlpha"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"mask_alpha_filter.effect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(

<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"MaskBlendType.BlendMultiply"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"blend_mul_filter.effect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(

<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"MaskBlendType.BlendAddition"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"blend_add_filter.effect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(

<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"MaskBlendType.BlendSubtraction"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"blend_sub_filter.effect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_path</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_IMAGE_PATH</name></expr></argument>, <argument><expr><name>TEXT_IMAGE_PATH</name></expr></argument>,

<argument><expr><name>OBS_PATH_FILE</name></expr></argument>, <argument><expr><name><name>filter_str</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_color</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_COLOR</name></expr></argument>, <argument><expr><name>TEXT_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_int_slider</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_OPACITY</name></expr></argument>, <argument><expr><name>TEXT_OPACITY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SETTING_STRETCH</name></expr></argument>, <argument><expr><name>TEXT_STRETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mask_filter_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mask_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>=

<expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mask_filter_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_update</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>filter</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mask_filter_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mask_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>image_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>image_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_effect_destroy</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_image_file_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mask_filter_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mask_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>update_time_elapsed</name></name> <operator>+=</operator> <name>seconds</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>update_time_elapsed</name></name> <operator>&gt;=</operator> <literal type="number">1.0f</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>get_modified_timestamp</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>image_file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>update_time_elapsed</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>image_file_timestamp</name></name> <operator>!=</operator> <name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mask_filter_image_load</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>is_animated_gif</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cur_time</name> <init>= <expr><call><name>obs_get_video_frame_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>last_time</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_image_file_tick</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>image</name></name></expr></argument>,

<argument><expr><name>cur_time</name> <operator>-</operator> <name><name>filter</name><operator>-&gt;</operator><name>last_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_image_file_update_texture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mask_filter_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mask_filter_data</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>obs_filter_get_target</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>add_val</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>mul_val</name> <init>= <expr><block>{<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name> <operator>||</operator> <operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>target</name></name> <operator>||</operator> <operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_source_skip_video_filter</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>lock_aspect</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>source_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>mask_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>mask_temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>source_aspect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mask_aspect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>size_to_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fix</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>source_size</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_source_get_base_width</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source_size</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_source_get_base_height</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mask_size</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>gs_texture_get_width</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mask_size</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>gs_texture_get_height</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>source_aspect</name> <operator>=</operator> <name><name>source_size</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name><name>source_size</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask_aspect</name> <operator>=</operator> <name><name>mask_size</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name><name>mask_size</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size_to_x</name> <operator>=</operator> <operator>(</operator><name>source_aspect</name> <operator>&lt;</operator> <name>mask_aspect</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fix</name> <operator>=</operator> <ternary><condition><expr><name>size_to_x</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>source_size</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name><name>mask_size</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name><name>source_size</name><operator>.</operator><name>y</name></name> <operator>/</operator> <name><name>mask_size</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_mulf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_size</name></expr></argument>, <argument><expr><name>fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_div</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mul_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_mulf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_size</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_mulf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask_temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_size</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>add_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_neg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>add_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_div</name><argument_list>(<argument><expr><operator>&amp;</operator><name>add_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_process_filter_begin</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>GS_RGBA</name></expr></argument>,

<argument><expr><name>OBS_ALLOW_DIRECT_RENDERING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_effect_set_vec4</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"mul_val"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_effect_set_vec2</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mul_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="string">"add_val"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_effect_set_vec2</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_process_filter_end</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>mask_filter</name> <init>= <expr><block>{

<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"mask_filter"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_FILTER</name></expr>,

<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name></expr>,

<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>mask_filter_get_name</name></expr>,

<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>mask_filter_create</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>mask_filter_destroy</name></expr>,

<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>mask_filter_update</name></expr>,

<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>mask_filter_defaults</name></expr>,

<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>mask_filter_properties</name></expr>,

<expr><operator>.</operator><name>video_tick</name> <operator>=</operator> <name>mask_filter_tick</name></expr>,

<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>mask_filter_render</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
