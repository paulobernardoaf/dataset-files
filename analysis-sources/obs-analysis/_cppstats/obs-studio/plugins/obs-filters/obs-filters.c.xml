<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-filters\obs-filters.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-filters-config.h"</cpp:file></cpp:include>

<macro><name>OBS_DECLARE_MODULE</name><argument_list>()</argument_list></macro>

<macro><name>OBS_MODULE_USE_DEFAULT_LOCALE</name><argument_list>(<argument><literal type="string">"obs-filters"</literal></argument>, <argument><literal type="string">"en-US"</literal></argument>)</argument_list></macro>

<function><type><name>MODULE_EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_module_description</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="string">"OBS core filters"</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>mask_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>crop_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>gain_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>color_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>scale_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>scroll_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>gpu_delay_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>color_key_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>color_grade_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>sharpness_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>chroma_key_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>async_delay_filter</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SPEEXDSP_ENABLED</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>noise_suppress_filter</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>invert_polarity_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>noise_gate_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>compressor_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>limiter_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>expander_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>luma_key_filter</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>obs_module_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>crop_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gain_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>color_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scale_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scroll_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gpu_delay_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>color_key_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>color_grade_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sharpness_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chroma_key_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>async_delay_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SPEEXDSP_ENABLED</name></expr></cpp:if>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>noise_suppress_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>invert_polarity_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>noise_gate_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compressor_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>limiter_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>expander_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>luma_key_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
