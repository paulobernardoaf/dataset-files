<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-ffmpeg\ffmpeg-mux\ffmpeg-mux.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro> <cpp:value>__inline</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffmpeg-mux.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavformat/avformat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVCODEC_VERSION_MAJOR</name> <operator>&gt;=</operator> <literal type="number">58</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEC_FLAG_GLOBAL_H</name></cpp:macro> <cpp:value>AV_CODEC_FLAG_GLOBAL_HEADER</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEC_FLAG_GLOBAL_H</name></cpp:macro> <cpp:value>CODEC_FLAG_GLOBAL_HEADER</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>resize_buf</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>capacity</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>resize_buf_resize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>resize_buf</name></name> <modifier>*</modifier></type><name>rb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rb</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>capx2</name> <init>= <expr><name><name>rb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_cap</name> <init>= <expr><ternary><condition><expr><name>capx2</name> <operator>&gt;</operator> <name>size</name></expr> ?</condition><then> <expr><name>capx2</name></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>rb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>new_cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>new_cap</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>resize_buf_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>resize_buf</name></name> <modifier>*</modifier></type><name>rb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>main_params</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tracks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vcodec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vbitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fps_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fps_den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acodec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>muxer_settings</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>audio_params</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>abitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>header</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>ffmpeg_mux</name> <block>{

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>video_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>audio_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>main_params</name></name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>audio_params</name></name> <modifier>*</modifier></type><name>audio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>header</name></name></type> <name>video_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>header</name></name> <modifier>*</modifier></type><name>audio_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_audio_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>error</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>header_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_avformat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_NOFILE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_close</name><argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avformat_free_context</name><argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>audio_streams</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>audio_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>audio_streams</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>num_audio_streams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ffmpeg_mux_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_write_trailer</name><argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free_avformat</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>header_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ffm</name><operator>-&gt;</operator><name>video_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>audio_header</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>header_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ffm</name><operator>-&gt;</operator><name>audio_header</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>audio_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>audio</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ffm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_opt_str</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>p_argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><operator>*</operator><name>p_argc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><operator>*</operator><name>p_argv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Missing expected option: '%s'\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_argc</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_argv</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_opt_int</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>p_argv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_str</name><argument_list>(<argument><expr><name>p_argc</name></expr></argument>, <argument><expr><name>p_argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>i</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_audio_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_params</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_str</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"audio track name"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_int</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>abitrate</name></name></expr></argument>, <argument><expr><literal type="string">"audio bitrate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_int</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="string">"audio sample rate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_int</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><literal type="string">"audio channels"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_params</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>main_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>audio_params</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_audio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>audio_params</name></name> <modifier>*</modifier></type><name>audio</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_str</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"file name"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_int</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>has_video</name></name></expr></argument>, <argument><expr><literal type="string">"video track count"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_int</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><literal type="string">"audio track count"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>params</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Invalid number of video tracks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>tracks</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Invalid number of audio tracks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>has_video</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>params</name><operator>-&gt;</operator><name>tracks</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Must have at least 1 audio track or 1 video track\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>has_video</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_str</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>vcodec</name></name></expr></argument>, <argument><expr><literal type="string">"video codec"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_int</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>vbitrate</name></name></expr></argument>,

<argument><expr><literal type="string">"video bitrate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_int</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="string">"video width"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_int</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="string">"video height"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_int</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>fps_num</name></name></expr></argument>, <argument><expr><literal type="string">"video fps num"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_int</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>fps_den</name></name></expr></argument>, <argument><expr><literal type="string">"video fps den"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>tracks</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_opt_str</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>acodec</name></name></expr></argument>, <argument><expr><literal type="string">"audio codec"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>audio</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>audio</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>params</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>params</name><operator>-&gt;</operator><name>tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_audio_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_audio</name> <operator>=</operator> <name>audio</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_opt_str</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>muxer_settings</name></name></expr></argument>, <argument><expr><literal type="string">"muxer settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>new_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>avcodec_descriptor_get_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find encoder '%s'\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Couldn't create encoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>stream</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Couldn't create stream for encoder '%s'\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>stream</name><operator>)</operator><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_video_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>extradata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>new_stream</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ffm</name><operator>-&gt;</operator><name>video_stream</name></name></expr></argument>, <argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vcodec</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>video_codec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>video_header</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>extradata</name> <operator>=</operator> <call><name>av_memdup</name><argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>video_header</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>video_header</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>context</name> <operator>=</operator> <name><name>ffm</name><operator>-&gt;</operator><name>video_stream</name><operator>-&gt;</operator><name>codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vbitrate</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>extradata</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>ffm</name><operator>-&gt;</operator><name>video_header</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator>

<operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>fps_den</name></name></expr>, <expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>fps_num</name></name></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>video_stream</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>video_stream</name><operator>-&gt;</operator><name>avg_frame_rate</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_GLOBALHEADER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CODEC_FLAG_GLOBAL_H</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_audio_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>extradata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>new_stream</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>acodec</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>audio_codec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>audio_streams</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>audio</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>, <expr><name><name>ffm</name><operator>-&gt;</operator><name>audio</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>sample_rate</name></expr>}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>audio_header</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>extradata</name> <operator>=</operator> <call><name>av_memdup</name><argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>audio_header</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,

<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>audio_header</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>context</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>ffm</name><operator>-&gt;</operator><name>audio</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>abitrate</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>ffm</name><operator>-&gt;</operator><name>audio</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>ffm</name><operator>-&gt;</operator><name>audio</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>sample_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>extradata</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>ffm</name><operator>-&gt;</operator><name>audio_header</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator>

<call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <call><name>av_get_channel_layout</name><argument_list>(<argument><expr><literal type="string">"quad"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <call><name>av_get_channel_layout</name><argument_list>(<argument><expr><literal type="string">"4.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_GLOBALHEADER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CODEC_FLAG_GLOBAL_H</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>num_audio_streams</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_streams</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>has_video</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>create_video_stream</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>tracks</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>audio_streams</name></name> <operator>=</operator>

<call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>tracks</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>create_audio_stream</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ffm</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ffm</name><operator>-&gt;</operator><name>num_audio_streams</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ffmpeg_mux_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ffm_packet_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FFM_PACKET_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ffm</name><operator>-&gt;</operator><name>video_header</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ffm</name><operator>-&gt;</operator><name>audio_header</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>safe_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vdata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>vdata</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>total</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>in_size</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>in_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>in_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>total</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ffmpeg_mux_get_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ffm_packet_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>safe_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>safe_read</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>info</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffmpeg_mux_header</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ffmpeg_mux_get_extra_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>has_video</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ffmpeg_mux_get_header</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ffmpeg_mux_get_header</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4996</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>open_output_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVOutputFormat</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>oformat</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>format</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_NOFILE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>file</name></name></expr></argument>,

<argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Couldn't open '%s', %s"</literal></expr></argument>,

<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FFM_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>file</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>filename</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_dict_parse_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>muxer_settings</name></name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>,

<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse muxer settings: %s\n%s"</literal></expr></argument>,

<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>muxer_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_dict_count</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Using muxer settings:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>entry</name></expr></argument>,

<argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\t%s=%s"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_write_header</name><argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error opening '%s': %s"</literal></expr></argument>, <argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>file</name></name></expr></argument>,

<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">22</literal></expr> ?</condition><then> <expr><name>FFM_UNSUPPORTED</name></expr> </then><else>: <expr><name>FFM_ERROR</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FFM_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ffmpeg_mux_init_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVOutputFormat</name> <modifier>*</modifier></type><name>output_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output_format</name> <operator>=</operator> <call><name>av_guess_format</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>output_format</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find an appropriate muxer for '%s'\n"</literal></expr></argument>,

<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FFM_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_alloc_output_context2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ffm</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>output_format</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Couldn't initialize output context: %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FFM_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>video_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_streams</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_avformat</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FFM_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_output_file</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>FFM_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_avformat</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FFM_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ffmpeg_mux_init_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ffm</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ffm</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FFM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>tracks</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>audio_header</name></name> <operator>=</operator>

<call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>header</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>ffm</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVCODEC_VERSION_INT</name> <operator>&lt;</operator> <call><name>AV_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">58</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>av_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ffmpeg_mux_get_extra_data</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FFM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ffmpeg_mux_init_context</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ffmpeg_mux_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ffmpeg_mux_init_internal</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>FFM_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffmpeg_mux_free</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ffm</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ffm_packet_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FFM_PACKET_VIDEO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ffm</name><operator>-&gt;</operator><name>video_stream</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>ffm</name><operator>-&gt;</operator><name>video_stream</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <name><name>ffm</name><operator>-&gt;</operator><name>num_audio_streams</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>ffm</name><operator>-&gt;</operator><name>audio_streams</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>AVStream</name> <modifier>*</modifier></type><name>get_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>rescale_ts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>get_stream</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>av_rescale_q_rnd</name><argument_list>(<argument><expr><name>val</name> <operator>/</operator> <name><name>stream</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>,

<argument><expr><name>AV_ROUND_NEAR_INF</name> <operator>|</operator> <name>AV_ROUND_PASS_MINMAX</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ffmpeg_mux_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name> <modifier>*</modifier></type><name>ffm</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ffm_packet_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>get_index</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>packet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>stream_index</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <call><name>rescale_ts</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <call><name>rescale_ts</name><argument_list>(<argument><expr><name>ffm</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>packet</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>av_interleaved_write_frame</name><argument_list>(<argument><expr><name><name>ffm</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>wmain</name><argument_list>(<argument><expr><name>int</name> <name>argc</name></expr></argument>, <argument><expr><name>wchar_t</name> <operator>*</operator><name><name>argv_w</name><index>[]</index></name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>int</name> main<argument_list>(<argument><expr><name>int</name> <name>argc</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name><name>argv</name><index>[]</index></name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ffm_packet_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ffmpeg_mux</name></name></type> <name>ffm</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>resize_buf</name></name></type> <name>rb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fail</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetErrorMode</name><argument_list>(<argument><expr><name>SEM_FAILCRITICALERRORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>argc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name><name>argv_w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>argv_w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>argv_w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>_setmode</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IONBF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffmpeg_mux_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ffm</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>FFM_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Couldn't initialize muxer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name>fail</name> <operator>&amp;&amp;</operator> <call><name>safe_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>resize_buf_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>safe_read</name><argument_list>(<argument><expr><name><name>rb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>info</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffmpeg_mux_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ffm</name></expr></argument>, <argument><expr><name><name>rb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fail</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ffmpeg_mux_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ffm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>resize_buf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

</unit>
