<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-ffmpeg\external\nvEncodeAPI.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_STDINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__int32</name></type> <name>int32_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int32</name></type> <name>uint32_t</name>;</typedef>

<typedef>typedef <type><name>__int64</name></type> <name>int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>uint64_t</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>int8_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uint8_t</name>;</typedef>

<typedef>typedef <type><name>short</name></type> <name>int16_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>uint16_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENCAPI</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>

<typedef>typedef <type><name>RECT</name></type> <name>NVENC_RECT</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENCAPI</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>Data1</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>Data2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>Data3</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>Data4</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>GUID</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><struct>struct <name>_NVENC_RECT</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>left</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>top</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>right</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bottom</name></decl>;</decl_stmt> 

}</block></struct></type> <name>NVENC_RECT</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>NV_ENC_INPUT_PTR</name>;</typedef> 

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>NV_ENC_OUTPUT_PTR</name>;</typedef> 

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>NV_ENC_REGISTERED_PTR</name>;</typedef> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENCAPI_MAJOR_VERSION</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENCAPI_MINOR_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENCAPI_VERSION</name></cpp:macro> <cpp:value>(NVENCAPI_MAJOR_VERSION | (NVENCAPI_MINOR_VERSION &lt;&lt; 24))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENCAPI_STRUCT_VERSION</name><parameter_list>(<parameter><type><name>ver</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)NVENCAPI_VERSION | ((ver)&lt;&lt;16) | (0x7 &lt;&lt; 28))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENC_INFINITE_GOPLENGTH</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_MAX_SEQ_HDR_LEN</name></cpp:macro> <cpp:value>(512)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_CODEC_H264_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0x6bc82762</literal></expr>, <expr><literal type="number">0x4e63</literal></expr>, <expr><literal type="number">0x4ca4</literal></expr>, <expr><block>{ <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0xbf</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_CODEC_HEVC_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0x790cdc88</literal></expr>, <expr><literal type="number">0x4522</literal></expr>, <expr><literal type="number">0x4d7b</literal></expr>, <expr><block>{ <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x3</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_CODEC_PROFILE_AUTOSELECT_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0xbfd6f8e7</literal></expr>, <expr><literal type="number">0x233c</literal></expr>, <expr><literal type="number">0x4341</literal></expr>, <expr><block>{ <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0xf4</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_H264_PROFILE_BASELINE_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0x727bcaa</literal></expr>, <expr><literal type="number">0x78c4</literal></expr>, <expr><literal type="number">0x4c83</literal></expr>, <expr><block>{ <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x6a</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_H264_PROFILE_MAIN_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0x60b5c1d4</literal></expr>, <expr><literal type="number">0x67fe</literal></expr>, <expr><literal type="number">0x4790</literal></expr>, <expr><block>{ <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x6d</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_H264_PROFILE_HIGH_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0xe7cbc309</literal></expr>, <expr><literal type="number">0x4f7a</literal></expr>, <expr><literal type="number">0x4b89</literal></expr>, <expr><block>{ <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x10</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_H264_PROFILE_HIGH_444_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0x7ac663cb</literal></expr>, <expr><literal type="number">0xa598</literal></expr>, <expr><literal type="number">0x4960</literal></expr>, <expr><block>{ <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x52</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_H264_PROFILE_STEREO_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0x40847bf5</literal></expr>, <expr><literal type="number">0x33f7</literal></expr>, <expr><literal type="number">0x4601</literal></expr>, <expr><block>{ <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xb7</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_H264_PROFILE_SVC_TEMPORAL_SCALABILTY</name> <init>=

<expr><block>{ <expr><literal type="number">0xce788d20</literal></expr>, <expr><literal type="number">0xaaa9</literal></expr>, <expr><literal type="number">0x4318</literal></expr>, <expr><block>{ <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x36</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_H264_PROFILE_PROGRESSIVE_HIGH_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0xb405afac</literal></expr>, <expr><literal type="number">0xf32b</literal></expr>, <expr><literal type="number">0x417b</literal></expr>, <expr><block>{ <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x78</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_H264_PROFILE_CONSTRAINED_HIGH_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0xaec1bd87</literal></expr>, <expr><literal type="number">0xe85b</literal></expr>, <expr><literal type="number">0x48f2</literal></expr>, <expr><block>{ <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x72</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_HEVC_PROFILE_MAIN_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0xb514c39a</literal></expr>, <expr><literal type="number">0xb55b</literal></expr>, <expr><literal type="number">0x40fa</literal></expr>, <expr><block>{ <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xec</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_HEVC_PROFILE_MAIN10_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0xfa4d2b6c</literal></expr>, <expr><literal type="number">0x3a5b</literal></expr>, <expr><literal type="number">0x411a</literal></expr>, <expr><block>{ <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xe5</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_HEVC_PROFILE_FREXT_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0x51ec32b5</literal></expr>, <expr><literal type="number">0x1b4c</literal></expr>, <expr><literal type="number">0x453c</literal></expr>, <expr><block>{ <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x41</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_PRESET_DEFAULT_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0xb2dfb705</literal></expr>, <expr><literal type="number">0x4ebd</literal></expr>, <expr><literal type="number">0x4c49</literal></expr>, <expr><block>{ <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_PRESET_HP_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0x60e4c59f</literal></expr>, <expr><literal type="number">0xe846</literal></expr>, <expr><literal type="number">0x4484</literal></expr>, <expr><block>{ <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xf6</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_PRESET_HQ_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0x34dba71d</literal></expr>, <expr><literal type="number">0xa77b</literal></expr>, <expr><literal type="number">0x4b8f</literal></expr>, <expr><block>{ <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x12</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_PRESET_BD_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0x82e3e450</literal></expr>, <expr><literal type="number">0xbdbb</literal></expr>, <expr><literal type="number">0x4e40</literal></expr>, <expr><block>{ <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x32</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_PRESET_LOW_LATENCY_DEFAULT_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0x49df21c5</literal></expr>, <expr><literal type="number">0x6dfa</literal></expr>, <expr><literal type="number">0x4feb</literal></expr>, <expr><block>{ <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x26</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_PRESET_LOW_LATENCY_HQ_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0xc5f733b9</literal></expr>, <expr><literal type="number">0xea97</literal></expr>, <expr><literal type="number">0x4cf9</literal></expr>, <expr><block>{ <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x5</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_PRESET_LOW_LATENCY_HP_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0x67082a44</literal></expr>, <expr><literal type="number">0x4bad</literal></expr>, <expr><literal type="number">0x48fa</literal></expr>, <expr><block>{ <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0x58</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_PRESET_LOSSLESS_DEFAULT_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0xd5bfb716</literal></expr>, <expr><literal type="number">0xc604</literal></expr>, <expr><literal type="number">0x44e7</literal></expr>, <expr><block>{ <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xf</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xac</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>NV_ENC_PRESET_LOSSLESS_HP_GUID</name> <init>=

<expr><block>{ <expr><literal type="number">0x149998e7</literal></expr>, <expr><literal type="number">0x2364</literal></expr>, <expr><literal type="number">0x411d</literal></expr>, <expr><block>{ <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x9</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>_NV_ENC_PARAMS_FRAME_FIELD_MODE</name>

<block>{

<decl><name>NV_ENC_PARAMS_FRAME_FIELD_MODE_FRAME</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, 

<decl><name>NV_ENC_PARAMS_FRAME_FIELD_MODE_FIELD</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>, 

<decl><name>NV_ENC_PARAMS_FRAME_FIELD_MODE_MBAFF</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl> 

}</block></enum></type> <name>NV_ENC_PARAMS_FRAME_FIELD_MODE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_PARAMS_RC_MODE</name>

<block>{

<decl><name>NV_ENC_PARAMS_RC_CONSTQP</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>NV_ENC_PARAMS_RC_VBR</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>NV_ENC_PARAMS_RC_CBR</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, 

<decl><name>NV_ENC_PARAMS_RC_CBR_LOWDELAY_HQ</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>, 

<decl><name>NV_ENC_PARAMS_RC_CBR_HQ</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>, 

<decl><name>NV_ENC_PARAMS_RC_VBR_HQ</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl> 

}</block></enum></type> <name>NV_ENC_PARAMS_RC_MODE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_EMPHASIS_MAP_LEVEL</name>

<block>{

<decl><name>NV_ENC_EMPHASIS_MAP_LEVEL_0</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>NV_ENC_EMPHASIS_MAP_LEVEL_1</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>NV_ENC_EMPHASIS_MAP_LEVEL_2</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, 

<decl><name>NV_ENC_EMPHASIS_MAP_LEVEL_3</name> <init>= <expr><literal type="number">0x3</literal></expr></init></decl>, 

<decl><name>NV_ENC_EMPHASIS_MAP_LEVEL_4</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>, 

<decl><name>NV_ENC_EMPHASIS_MAP_LEVEL_5</name> <init>= <expr><literal type="number">0x5</literal></expr></init></decl> 

}</block></enum></type> <name>NV_ENC_EMPHASIS_MAP_LEVEL</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_QP_MAP_MODE</name>

<block>{

<decl><name>NV_ENC_QP_MAP_DISABLED</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>NV_ENC_QP_MAP_EMPHASIS</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>NV_ENC_QP_MAP_DELTA</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, 

<decl><name>NV_ENC_QP_MAP</name> <init>= <expr><literal type="number">0x3</literal></expr></init></decl>, 

}</block></enum></type> <name>NV_ENC_QP_MAP_MODE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_PARAMS_RC_VBR_MINQP</name></cpp:macro> <cpp:value>(NV_ENC_PARAMS_RC_MODE)0x4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_PARAMS_RC_2_PASS_QUALITY</name></cpp:macro> <cpp:value>NV_ENC_PARAMS_RC_CBR_LOWDELAY_HQ</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_PARAMS_RC_2_PASS_FRAMESIZE_CAP</name></cpp:macro> <cpp:value>NV_ENC_PARAMS_RC_CBR_HQ</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_PARAMS_RC_2_PASS_VBR</name></cpp:macro> <cpp:value>NV_ENC_PARAMS_RC_VBR_HQ</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_PARAMS_RC_CBR2</name></cpp:macro> <cpp:value>NV_ENC_PARAMS_RC_CBR</cpp:value></cpp:define> 

<typedef>typedef <type><enum>enum <name>_NV_ENC_PIC_STRUCT</name>

<block>{

<decl><name>NV_ENC_PIC_STRUCT_FRAME</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, 

<decl><name>NV_ENC_PIC_STRUCT_FIELD_TOP_BOTTOM</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>, 

<decl><name>NV_ENC_PIC_STRUCT_FIELD_BOTTOM_TOP</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl> 

}</block></enum></type> <name>NV_ENC_PIC_STRUCT</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_PIC_TYPE</name>

<block>{

<decl><name>NV_ENC_PIC_TYPE_P</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>NV_ENC_PIC_TYPE_B</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, 

<decl><name>NV_ENC_PIC_TYPE_I</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>, 

<decl><name>NV_ENC_PIC_TYPE_IDR</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>, 

<decl><name>NV_ENC_PIC_TYPE_BI</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>, 

<decl><name>NV_ENC_PIC_TYPE_SKIPPED</name> <init>= <expr><literal type="number">0x05</literal></expr></init></decl>, 

<decl><name>NV_ENC_PIC_TYPE_INTRA_REFRESH</name> <init>= <expr><literal type="number">0x06</literal></expr></init></decl>, 

<decl><name>NV_ENC_PIC_TYPE_UNKNOWN</name> <init>= <expr><literal type="number">0xFF</literal></expr></init></decl> 

}</block></enum></type> <name>NV_ENC_PIC_TYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_MV_PRECISION</name>

<block>{

<decl><name>NV_ENC_MV_PRECISION_DEFAULT</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>NV_ENC_MV_PRECISION_FULL_PEL</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, 

<decl><name>NV_ENC_MV_PRECISION_HALF_PEL</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>, 

<decl><name>NV_ENC_MV_PRECISION_QUARTER_PEL</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl> 

}</block></enum></type> <name>NV_ENC_MV_PRECISION</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_BUFFER_FORMAT</name>

<block>{

<decl><name>NV_ENC_BUFFER_FORMAT_UNDEFINED</name> <init>= <expr><literal type="number">0x00000000</literal></expr></init></decl>, 

<decl><name>NV_ENC_BUFFER_FORMAT_NV12</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>, 

<decl><name>NV_ENC_BUFFER_FORMAT_YV12</name> <init>= <expr><literal type="number">0x00000010</literal></expr></init></decl>, 

<decl><name>NV_ENC_BUFFER_FORMAT_IYUV</name> <init>= <expr><literal type="number">0x00000100</literal></expr></init></decl>, 

<decl><name>NV_ENC_BUFFER_FORMAT_YUV444</name> <init>= <expr><literal type="number">0x00001000</literal></expr></init></decl>, 

<decl><name>NV_ENC_BUFFER_FORMAT_YUV420_10BIT</name> <init>= <expr><literal type="number">0x00010000</literal></expr></init></decl>, 

<decl><name>NV_ENC_BUFFER_FORMAT_YUV444_10BIT</name> <init>= <expr><literal type="number">0x00100000</literal></expr></init></decl>, 

<decl><name>NV_ENC_BUFFER_FORMAT_ARGB</name> <init>= <expr><literal type="number">0x01000000</literal></expr></init></decl>, 

<decl><name>NV_ENC_BUFFER_FORMAT_ARGB10</name> <init>= <expr><literal type="number">0x02000000</literal></expr></init></decl>, 

<decl><name>NV_ENC_BUFFER_FORMAT_AYUV</name> <init>= <expr><literal type="number">0x04000000</literal></expr></init></decl>, 

<decl><name>NV_ENC_BUFFER_FORMAT_ABGR</name> <init>= <expr><literal type="number">0x10000000</literal></expr></init></decl>, 

<decl><name>NV_ENC_BUFFER_FORMAT_ABGR10</name> <init>= <expr><literal type="number">0x20000000</literal></expr></init></decl>, 

}</block></enum></type> <name>NV_ENC_BUFFER_FORMAT</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_BUFFER_FORMAT_NV12_PL</name></cpp:macro> <cpp:value>NV_ENC_BUFFER_FORMAT_NV12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_BUFFER_FORMAT_YV12_PL</name></cpp:macro> <cpp:value>NV_ENC_BUFFER_FORMAT_YV12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_BUFFER_FORMAT_IYUV_PL</name></cpp:macro> <cpp:value>NV_ENC_BUFFER_FORMAT_IYUV</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_BUFFER_FORMAT_YUV444_PL</name></cpp:macro> <cpp:value>NV_ENC_BUFFER_FORMAT_YUV444</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_NV_ENC_LEVEL</name>

<block>{

<decl><name>NV_ENC_LEVEL_AUTOSELECT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_1</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_1b</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_11</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_12</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_13</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_2</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_21</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_22</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_3</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_31</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_32</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_4</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_41</name> <init>= <expr><literal type="number">41</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_42</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_5</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_51</name> <init>= <expr><literal type="number">51</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_H264_52</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_HEVC_1</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_HEVC_2</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_HEVC_21</name> <init>= <expr><literal type="number">63</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_HEVC_3</name> <init>= <expr><literal type="number">90</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_HEVC_31</name> <init>= <expr><literal type="number">93</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_HEVC_4</name> <init>= <expr><literal type="number">120</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_HEVC_41</name> <init>= <expr><literal type="number">123</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_HEVC_5</name> <init>= <expr><literal type="number">150</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_HEVC_51</name> <init>= <expr><literal type="number">153</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_HEVC_52</name> <init>= <expr><literal type="number">156</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_HEVC_6</name> <init>= <expr><literal type="number">180</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_HEVC_61</name> <init>= <expr><literal type="number">183</literal></expr></init></decl>,

<decl><name>NV_ENC_LEVEL_HEVC_62</name> <init>= <expr><literal type="number">186</literal></expr></init></decl>,

<decl><name>NV_ENC_TIER_HEVC_MAIN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>NV_ENC_TIER_HEVC_HIGH</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>

}</block></enum></type> <name>NV_ENC_LEVEL</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NVENCSTATUS</name>

<block>{

<decl><name>NV_ENC_SUCCESS</name></decl>,

<decl><name>NV_ENC_ERR_NO_ENCODE_DEVICE</name></decl>,

<decl><name>NV_ENC_ERR_UNSUPPORTED_DEVICE</name></decl>,

<decl><name>NV_ENC_ERR_INVALID_ENCODERDEVICE</name></decl>,

<decl><name>NV_ENC_ERR_INVALID_DEVICE</name></decl>,

<decl><name>NV_ENC_ERR_DEVICE_NOT_EXIST</name></decl>,

<decl><name>NV_ENC_ERR_INVALID_PTR</name></decl>,

<decl><name>NV_ENC_ERR_INVALID_EVENT</name></decl>,

<decl><name>NV_ENC_ERR_INVALID_PARAM</name></decl>,

<decl><name>NV_ENC_ERR_INVALID_CALL</name></decl>,

<decl><name>NV_ENC_ERR_OUT_OF_MEMORY</name></decl>,

<decl><name>NV_ENC_ERR_ENCODER_NOT_INITIALIZED</name></decl>,

<decl><name>NV_ENC_ERR_UNSUPPORTED_PARAM</name></decl>,

<decl><name>NV_ENC_ERR_LOCK_BUSY</name></decl>,

<decl><name>NV_ENC_ERR_NOT_ENOUGH_BUFFER</name></decl>,

<decl><name>NV_ENC_ERR_INVALID_VERSION</name></decl>,

<decl><name>NV_ENC_ERR_MAP_FAILED</name></decl>,

<decl><name>NV_ENC_ERR_NEED_MORE_INPUT</name></decl>,

<decl><name>NV_ENC_ERR_ENCODER_BUSY</name></decl>,

<decl><name>NV_ENC_ERR_EVENT_NOT_REGISTERD</name></decl>,

<decl><name>NV_ENC_ERR_GENERIC</name></decl>,

<decl><name>NV_ENC_ERR_INCOMPATIBLE_CLIENT_KEY</name></decl>,

<decl><name>NV_ENC_ERR_UNIMPLEMENTED</name></decl>,

<decl><name>NV_ENC_ERR_RESOURCE_REGISTER_FAILED</name></decl>,

<decl><name>NV_ENC_ERR_RESOURCE_NOT_REGISTERED</name></decl>,

<decl><name>NV_ENC_ERR_RESOURCE_NOT_MAPPED</name></decl>,

}</block></enum></type> <name>NVENCSTATUS</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_PIC_FLAGS</name>

<block>{

<decl><name>NV_ENC_PIC_FLAG_FORCEINTRA</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>NV_ENC_PIC_FLAG_FORCEIDR</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, 

<decl><name>NV_ENC_PIC_FLAG_OUTPUT_SPSPPS</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>, 

<decl><name>NV_ENC_PIC_FLAG_EOS</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>, 

}</block></enum></type> <name>NV_ENC_PIC_FLAGS</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_MEMORY_HEAP</name>

<block>{

<decl><name>NV_ENC_MEMORY_HEAP_AUTOSELECT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>NV_ENC_MEMORY_HEAP_VID</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>NV_ENC_MEMORY_HEAP_SYSMEM_CACHED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>NV_ENC_MEMORY_HEAP_SYSMEM_UNCACHED</name> <init>= <expr><literal type="number">3</literal></expr></init></decl> 

}</block></enum></type> <name>NV_ENC_MEMORY_HEAP</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_BFRAME_REF_MODE</name>

<block>{

<decl><name>NV_ENC_BFRAME_REF_MODE_DISABLED</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>NV_ENC_BFRAME_REF_MODE_EACH</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>NV_ENC_BFRAME_REF_MODE_MIDDLE</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, 

}</block></enum></type> <name>NV_ENC_BFRAME_REF_MODE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_H264_ENTROPY_CODING_MODE</name>

<block>{

<decl><name>NV_ENC_H264_ENTROPY_CODING_MODE_AUTOSELECT</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>NV_ENC_H264_ENTROPY_CODING_MODE_CABAC</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>NV_ENC_H264_ENTROPY_CODING_MODE_CAVLC</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl> 

}</block></enum></type> <name>NV_ENC_H264_ENTROPY_CODING_MODE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_H264_BDIRECT_MODE</name>

<block>{

<decl><name>NV_ENC_H264_BDIRECT_MODE_AUTOSELECT</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>NV_ENC_H264_BDIRECT_MODE_DISABLE</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>NV_ENC_H264_BDIRECT_MODE_TEMPORAL</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, 

<decl><name>NV_ENC_H264_BDIRECT_MODE_SPATIAL</name> <init>= <expr><literal type="number">0x3</literal></expr></init></decl> 

}</block></enum></type> <name>NV_ENC_H264_BDIRECT_MODE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_H264_FMO_MODE</name>

<block>{

<decl><name>NV_ENC_H264_FMO_AUTOSELECT</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>NV_ENC_H264_FMO_ENABLE</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>NV_ENC_H264_FMO_DISABLE</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, 

}</block></enum></type> <name>NV_ENC_H264_FMO_MODE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_H264_ADAPTIVE_TRANSFORM_MODE</name>

<block>{

<decl><name>NV_ENC_H264_ADAPTIVE_TRANSFORM_AUTOSELECT</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>NV_ENC_H264_ADAPTIVE_TRANSFORM_DISABLE</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>NV_ENC_H264_ADAPTIVE_TRANSFORM_ENABLE</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, 

}</block></enum></type> <name>NV_ENC_H264_ADAPTIVE_TRANSFORM_MODE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_STEREO_PACKING_MODE</name>

<block>{

<decl><name>NV_ENC_STEREO_PACKING_MODE_NONE</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>NV_ENC_STEREO_PACKING_MODE_CHECKERBOARD</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>NV_ENC_STEREO_PACKING_MODE_COLINTERLEAVE</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, 

<decl><name>NV_ENC_STEREO_PACKING_MODE_ROWINTERLEAVE</name> <init>= <expr><literal type="number">0x3</literal></expr></init></decl>, 

<decl><name>NV_ENC_STEREO_PACKING_MODE_SIDEBYSIDE</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>, 

<decl><name>NV_ENC_STEREO_PACKING_MODE_TOPBOTTOM</name> <init>= <expr><literal type="number">0x5</literal></expr></init></decl>, 

<decl><name>NV_ENC_STEREO_PACKING_MODE_FRAMESEQ</name> <init>= <expr><literal type="number">0x6</literal></expr></init></decl> 

}</block></enum></type> <name>NV_ENC_STEREO_PACKING_MODE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_INPUT_RESOURCE_TYPE</name>

<block>{

<decl><name>NV_ENC_INPUT_RESOURCE_TYPE_DIRECTX</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>NV_ENC_INPUT_RESOURCE_TYPE_CUDADEVICEPTR</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>NV_ENC_INPUT_RESOURCE_TYPE_CUDAARRAY</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, 

<decl><name>NV_ENC_INPUT_RESOURCE_TYPE_OPENGL_TEX</name> <init>= <expr><literal type="number">0x3</literal></expr></init></decl> 

}</block></enum></type> <name>NV_ENC_INPUT_RESOURCE_TYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_DEVICE_TYPE</name>

<block>{

<decl><name>NV_ENC_DEVICE_TYPE_DIRECTX</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>NV_ENC_DEVICE_TYPE_CUDA</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>NV_ENC_DEVICE_TYPE_OPENGL</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl> 

}</block></enum></type> <name>NV_ENC_DEVICE_TYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_CAPS</name>

<block>{

<decl><name>NV_ENC_CAPS_NUM_MAX_BFRAMES</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORTED_RATECONTROL_MODES</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_FIELD_ENCODING</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_MONOCHROME</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_FMO</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_QPELMV</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_BDIRECT_MODE</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_CABAC</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_ADAPTIVE_TRANSFORM</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_RESERVED</name></decl>,

<decl><name>NV_ENC_CAPS_NUM_MAX_TEMPORAL_LAYERS</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_HIERARCHICAL_PFRAMES</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_HIERARCHICAL_BFRAMES</name></decl>,

<decl><name>NV_ENC_CAPS_LEVEL_MAX</name></decl>,

<decl><name>NV_ENC_CAPS_LEVEL_MIN</name></decl>,

<decl><name>NV_ENC_CAPS_SEPARATE_COLOUR_PLANE</name></decl>,

<decl><name>NV_ENC_CAPS_WIDTH_MAX</name></decl>,

<decl><name>NV_ENC_CAPS_HEIGHT_MAX</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_TEMPORAL_SVC</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_DYN_RES_CHANGE</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_DYN_BITRATE_CHANGE</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_DYN_FORCE_CONSTQP</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_DYN_RCMODE_CHANGE</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_SUBFRAME_READBACK</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_CONSTRAINED_ENCODING</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_INTRA_REFRESH</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_CUSTOM_VBV_BUF_SIZE</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_DYNAMIC_SLICE_MODE</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_REF_PIC_INVALIDATION</name></decl>,

<decl><name>NV_ENC_CAPS_PREPROC_SUPPORT</name></decl>,

<decl><name>NV_ENC_CAPS_ASYNC_ENCODE_SUPPORT</name></decl>,

<decl><name>NV_ENC_CAPS_MB_NUM_MAX</name></decl>,

<decl><name>NV_ENC_CAPS_MB_PER_SEC_MAX</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_YUV444_ENCODE</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_LOSSLESS_ENCODE</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_SAO</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_MEONLY_MODE</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_LOOKAHEAD</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_TEMPORAL_AQ</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_10BIT_ENCODE</name></decl>,

<decl><name>NV_ENC_CAPS_NUM_MAX_LTR_FRAMES</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_WEIGHTED_PREDICTION</name></decl>,

<decl><name>NV_ENC_CAPS_DYNAMIC_QUERY_ENCODER_CAPACITY</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_BFRAME_REF_MODE</name></decl>,

<decl><name>NV_ENC_CAPS_SUPPORT_EMPHASIS_LEVEL_MAP</name></decl>,

<decl><name>NV_ENC_CAPS_EXPOSED_COUNT</name></decl>

}</block></enum></type> <name>NV_ENC_CAPS</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_NV_ENC_HEVC_CUSIZE</name>

<block>{

<decl><name>NV_ENC_HEVC_CUSIZE_AUTOSELECT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>NV_ENC_HEVC_CUSIZE_8x8</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>NV_ENC_HEVC_CUSIZE_16x16</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>NV_ENC_HEVC_CUSIZE_32x32</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>NV_ENC_HEVC_CUSIZE_64x64</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

}</block></enum></type><name>NV_ENC_HEVC_CUSIZE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENC_CAPS_PARAM</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_CAPS</name></type> <name>capsToQuery</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name><index>[<expr><literal type="number">62</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_CAPS_PARAM</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_CAPS_PARAM_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_CREATE_INPUT_BUFFER</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_MEMORY_HEAP</name></type> <name>memoryHeap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_BUFFER_FORMAT</name></type> <name>bufferFmt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_INPUT_PTR</name></type> <name>inputBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pSysMemBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">57</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">63</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_CREATE_INPUT_BUFFER</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_CREATE_INPUT_BUFFER_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_CREATE_BITSTREAM_BUFFER</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_MEMORY_HEAP</name></type> <name>memoryHeap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_OUTPUT_PTR</name></type> <name>bitstreamBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>bitstreamBufferPtr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">58</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_CREATE_BITSTREAM_BUFFER</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_CREATE_BITSTREAM_BUFFER_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_MVECTOR</name>

<block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name>mvx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name>mvy</name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_MVECTOR</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENC_H264_MV_DATA</name>

<block>{

<decl_stmt><decl><type><name>NV_ENC_MVECTOR</name></type> <name><name>mv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>mbType</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>partitionType</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>reserved</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mbCost</name></decl>;</decl_stmt>

}</block></struct></type> <name>NV_ENC_H264_MV_DATA</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENC_HEVC_MV_DATA</name>

<block>{

<decl_stmt><decl><type><name>NV_ENC_MVECTOR</name></type> <name><name>mv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>cuType</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>cuSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>partitionMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>lastCUInCTB</name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_HEVC_MV_DATA</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENC_CREATE_MV_BUFFER</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_OUTPUT_PTR</name></type> <name>mvBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">63</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_CREATE_MV_BUFFER</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_CREATE_MV_BUFFER_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_QP</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>qpInterP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>qpInterB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>qpIntra</name></decl>;</decl_stmt>

}</block></struct></type> <name>NV_ENC_QP</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENC_RC_PARAMS</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_PARAMS_RC_MODE</name></type> <name>rateControlMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_QP</name></type> <name>constQP</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>averageBitRate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxBitRate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>vbvBufferSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>vbvInitialDelay</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableMinQP</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableMaxQP</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableInitialRCQP</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableAQ</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reservedBitField1</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableLookahead</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>disableIadapt</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>disableBadapt</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableTemporalAQ</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>zeroReorderDelay</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableNonRefP</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>strictGOPTarget</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>aqStrength</name> <range>:<expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reservedBitFields</name> <range>:<expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_QP</name></type> <name>minQP</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_QP</name></type> <name>maxQP</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_QP</name></type> <name>initialRCQP</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>temporallayerIdxMask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>temporalLayerQP</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>targetQuality</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>targetQualityLSB</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>lookaheadDepth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_QP_MAP_MODE</name></type> <name>qpMapMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>NV_ENC_RC_PARAMS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_RC_PARAMS_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_CONFIG_H264_VUI_PARAMETERS</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>overscanInfoPresentFlag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>overscanInfo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>videoSignalTypePresentFlag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>videoFormat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>videoFullRangeFlag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>colourDescriptionPresentFlag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>colourPrimaries</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>transferCharacteristics</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>colourMatrix</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>chromaSampleLocationFlag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>chromaSampleLocationTop</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>chromaSampleLocationBot</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitstreamRestrictionFlag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type><name>NV_ENC_CONFIG_H264_VUI_PARAMETERS</name>;</typedef>

<typedef>typedef <type><name>NV_ENC_CONFIG_H264_VUI_PARAMETERS</name></type> <name>NV_ENC_CONFIG_HEVC_VUI_PARAMETERS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>numCandsPerBlk16x16</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>numCandsPerBlk16x8</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>numCandsPerBlk8x16</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>numCandsPerBlk8x8</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name> <range>: <expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NVENC_EXTERNAL_ME_HINT</name>

<block>{

<decl_stmt><decl><type><name>int32_t</name></type> <name>mvx</name> <range>: <expr><literal type="number">12</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>mvy</name> <range>: <expr><literal type="number">10</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>refidx</name> <range>: <expr><literal type="number">5</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>dir</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>partType</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>lastofPart</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>lastOfMB</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

}</block></struct></type> <name>NVENC_EXTERNAL_ME_HINT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENC_CONFIG_H264</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableTemporalSVC</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableStereoMVC</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hierarchicalPFrames</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hierarchicalBFrames</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>outputBufferingPeriodSEI</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>outputPictureTimingSEI</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>outputAUD</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>disableSPSPPS</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>outputFramePackingSEI</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>outputRecoveryPointSEI</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableIntraRefresh</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableConstrainedEncoding</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>repeatSPSPPS</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableVFR</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableLTR</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>qpPrimeYZeroTransformBypassFlag</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>useConstrainedIntraPred</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reservedBitFields</name> <range>:<expr><literal type="number">15</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>level</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>idrPeriod</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>separateColourPlaneFlag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>disableDeblockingFilterIDC</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>numTemporalLayers</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>spsId</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ppsId</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_H264_ADAPTIVE_TRANSFORM_MODE</name></type> <name>adaptiveTransformMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_H264_FMO_MODE</name></type> <name>fmoMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_H264_BDIRECT_MODE</name></type> <name>bdirectMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_H264_ENTROPY_CODING_MODE</name></type> <name>entropyCodingMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_STEREO_PACKING_MODE</name></type> <name>stereoMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>intraRefreshPeriod</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>intraRefreshCnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxNumRefFrames</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sliceMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sliceModeData</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_CONFIG_H264_VUI_PARAMETERS</name></type> <name>h264VUIParameters</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrNumFrames</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrTrustMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>chromaFormatIDC</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxTemporalLayers</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_BFRAME_REF_MODE</name></type> <name>useBFramesAsRef</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">269</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_CONFIG_H264</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENC_CONFIG_HEVC</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>level</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tier</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_HEVC_CUSIZE</name></type> <name>minCUSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_HEVC_CUSIZE</name></type> <name>maxCUSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>useConstrainedIntraPred</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>disableDeblockAcrossSliceBoundary</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>outputBufferingPeriodSEI</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>outputPictureTimingSEI</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>outputAUD</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableLTR</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>disableSPSPPS</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>repeatSPSPPS</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableIntraRefresh</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>chromaFormatIDC</name> <range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixelBitDepthMinus8</name> <range>:<expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name> <range>:<expr><literal type="number">18</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>idrPeriod</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>intraRefreshPeriod</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>intraRefreshCnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxNumRefFramesInDPB</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrNumFrames</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>vpsId</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>spsId</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ppsId</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sliceMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sliceModeData</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxTemporalLayersMinus1</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_CONFIG_HEVC_VUI_PARAMETERS</name></type> <name>hevcVUIParameters</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrTrustMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">217</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_CONFIG_HEVC</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENC_CONFIG_H264_MEONLY</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>disablePartition16x16</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>disablePartition8x16</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>disablePartition16x8</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>disablePartition8x8</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>disableIntraSearch</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bStereoEnable</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name> <range>:<expr><literal type="number">26</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name> <index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_CONFIG_H264_MEONLY</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENC_CONFIG_HEVC_MEONLY</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name> <index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_CONFIG_HEVC_MEONLY</name>;</typedef>

<typedef>typedef <type><union>union <name>_NV_ENC_CODEC_CONFIG</name>

<block>{

<decl_stmt><decl><type><name>NV_ENC_CONFIG_H264</name></type> <name>h264Config</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_CONFIG_HEVC</name></type> <name>hevcConfig</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_CONFIG_H264_MEONLY</name></type> <name>h264MeOnlyConfig</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_CONFIG_HEVC_MEONLY</name></type> <name>hevcMeOnlyConfig</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name><index>[<expr><literal type="number">320</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></union></type> <name>NV_ENC_CODEC_CONFIG</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENC_CONFIG</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GUID</name></type> <name>profileGUID</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gopLength</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>frameIntervalP</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>monoChromeEncoding</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_PARAMS_FRAME_FIELD_MODE</name></type> <name>frameFieldMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_MV_PRECISION</name></type> <name>mvPrecision</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_RC_PARAMS</name></type> <name>rcParams</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_CODEC_CONFIG</name></type> <name>encodeCodecConfig</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name> <index>[<expr><literal type="number">278</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_CONFIG</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_CONFIG_VER</name></cpp:macro> <cpp:value>(NVENCAPI_STRUCT_VERSION(7) | ( 1&lt;&lt;31 ))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_INITIALIZE_PARAMS</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GUID</name></type> <name>presetGUID</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>encodeWidth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>encodeHeight</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>darWidth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>darHeight</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frameRateNum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frameRateDen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableEncodeAsync</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enablePTD</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reportSliceOffsets</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableSubFrameWrite</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableExternalMEHints</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableMEOnlyMode</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>enableWeightedPrediction</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reservedBitFields</name> <range>:<expr><literal type="number">27</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>privDataSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>privData</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_CONFIG</name><modifier>*</modifier></type> <name>encodeConfig</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxEncodeWidth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxEncodeHeight</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE</name></type> <name><name>maxMEHintCountsPerBlock</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name> <index>[<expr><literal type="number">289</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_INITIALIZE_PARAMS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_INITIALIZE_PARAMS_VER</name></cpp:macro> <cpp:value>(NVENCAPI_STRUCT_VERSION(5) | ( 1&lt;&lt;31 ))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_RECONFIGURE_PARAMS</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_INITIALIZE_PARAMS</name></type> <name>reInitEncodeParams</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>resetEncoder</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>forceIDR</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name> <range>:<expr><literal type="number">30</literal></expr></range></decl>;</decl_stmt>

}</block></struct></type><name>NV_ENC_RECONFIGURE_PARAMS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_RECONFIGURE_PARAMS_VER</name></cpp:macro> <cpp:value>(NVENCAPI_STRUCT_VERSION(1) | ( 1&lt;&lt;31 ))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_PRESET_CONFIG</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_CONFIG</name></type> <name>presetCfg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type><name>NV_ENC_PRESET_CONFIG</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_PRESET_CONFIG_VER</name></cpp:macro> <cpp:value>(NVENCAPI_STRUCT_VERSION(4) | ( 1&lt;&lt;31 ))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_SEI_PAYLOAD</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>payloadSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>payloadType</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>payload</name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_SEI_PAYLOAD</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_H264_SEI_PAYLOAD</name></cpp:macro> <cpp:value>NV_ENC_SEI_PAYLOAD</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_PIC_PARAMS_H264</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>displayPOCSyntax</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved3</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>refPicFlag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>colourPlaneId</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>forceIntraRefreshWithFrameCnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>constrainedFrame</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sliceModeDataUpdate</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrMarkFrame</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrUseFrames</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reservedBitFields</name> <range>:<expr><literal type="number">28</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>sliceTypeData</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sliceTypeArrayCnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>seiPayloadArrayCnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_SEI_PAYLOAD</name><modifier>*</modifier></type> <name>seiPayloadArray</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sliceMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sliceModeData</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrMarkFrameIdx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrUseFrameBitmap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrUsageMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name> <index>[<expr><literal type="number">243</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">62</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_PIC_PARAMS_H264</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENC_PIC_PARAMS_HEVC</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>displayPOCSyntax</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>refPicFlag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>temporalId</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>forceIntraRefreshWithFrameCnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>constrainedFrame</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sliceModeDataUpdate</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrMarkFrame</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrUseFrames</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reservedBitFields</name> <range>:<expr><literal type="number">28</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>sliceTypeData</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sliceTypeArrayCnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sliceMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sliceModeData</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrMarkFrameIdx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrUseFrameBitmap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrUsageMode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>seiPayloadArrayCnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_SEI_PAYLOAD</name><modifier>*</modifier></type> <name>seiPayloadArray</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved2</name> <index>[<expr><literal type="number">244</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved3</name><index>[<expr><literal type="number">61</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_PIC_PARAMS_HEVC</name>;</typedef>

<typedef>typedef <type><union>union <name>_NV_ENC_CODEC_PIC_PARAMS</name>

<block>{

<decl_stmt><decl><type><name>NV_ENC_PIC_PARAMS_H264</name></type> <name>h264PicParams</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_PIC_PARAMS_HEVC</name></type> <name>hevcPicParams</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></union></type> <name>NV_ENC_CODEC_PIC_PARAMS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENC_PIC_PARAMS</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>inputWidth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>inputHeight</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>inputPitch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>encodePicFlags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frameIdx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>inputTimeStamp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>inputDuration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_INPUT_PTR</name></type> <name>inputBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_OUTPUT_PTR</name></type> <name>outputBitstream</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>completionEvent</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_BUFFER_FORMAT</name></type> <name>bufferFmt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_PIC_STRUCT</name></type> <name>pictureStruct</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_PIC_TYPE</name></type> <name>pictureType</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_CODEC_PIC_PARAMS</name></type> <name>codecPicParams</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE</name></type> <name><name>meHintCountsPerBlock</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NVENC_EXTERNAL_ME_HINT</name> <modifier>*</modifier></type><name>meExternalHints</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>qpDeltaMap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>qpDeltaMapSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reservedBitFields</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>meHintRefPicDist</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved3</name><index>[<expr><literal type="number">286</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved4</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_PIC_PARAMS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_PIC_PARAMS_VER</name></cpp:macro> <cpp:value>(NVENCAPI_STRUCT_VERSION(4) | ( 1&lt;&lt;31 ))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_MEONLY_PARAMS</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>inputWidth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>inputHeight</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_INPUT_PTR</name></type> <name>inputBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_INPUT_PTR</name></type> <name>referenceFrame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_OUTPUT_PTR</name></type> <name>mvBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_BUFFER_FORMAT</name></type> <name>bufferFmt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>completionEvent</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>viewID</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE</name></type>

<name><name>meHintCountsPerBlock</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NVENC_EXTERNAL_ME_HINT</name> <modifier>*</modifier></type><name>meExternalHints</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">243</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">59</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_MEONLY_PARAMS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_MEONLY_PARAMS_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(3)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_LOCK_BITSTREAM</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>doNotWait</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrFrame</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reservedBitFields</name> <range>:<expr><literal type="number">30</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>outputBitstream</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>sliceOffsets</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frameIdx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hwEncodeStatus</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>numSlices</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitstreamSizeInBytes</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>outputTimeStamp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>outputDuration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>bitstreamBufferPtr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_PIC_TYPE</name></type> <name>pictureType</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_PIC_STRUCT</name></type> <name>pictureStruct</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frameAvgQP</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frameSatd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrFrameIdx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltrFrameBitmap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name> <index>[<expr><literal type="number">236</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_LOCK_BITSTREAM</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_LOCK_BITSTREAM_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_LOCK_INPUT_BUFFER</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>doNotWait</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reservedBitFields</name> <range>:<expr><literal type="number">31</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_INPUT_PTR</name></type> <name>inputBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>bufferDataPtr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pitch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">251</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_LOCK_INPUT_BUFFER</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_LOCK_INPUT_BUFFER_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_MAP_INPUT_RESOURCE</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>subResourceIndex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>inputResource</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_REGISTERED_PTR</name></type> <name>registeredResource</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_INPUT_PTR</name></type> <name>mappedResource</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_BUFFER_FORMAT</name></type> <name>mappedBufferFmt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">251</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">63</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_MAP_INPUT_RESOURCE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_MAP_INPUT_RESOURCE_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(4)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_INPUT_RESOURCE_OPENGL_TEX</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>texture</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>target</name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_INPUT_RESOURCE_OPENGL_TEX</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENC_REGISTER_RESOURCE</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_INPUT_RESOURCE_TYPE</name></type> <name>resourceType</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pitch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>subResourceIndex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>resourceToRegister</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_REGISTERED_PTR</name></type> <name>registeredResource</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_BUFFER_FORMAT</name></type> <name>bufferFormat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">248</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">62</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_REGISTER_RESOURCE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_REGISTER_RESOURCE_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(3)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_STAT</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_OUTPUT_PTR</name></type> <name>outputBitStream</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitStreamSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>picType</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>lastValidByteOffset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>sliceOffsets</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>picIdx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">233</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_STAT</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_STAT_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_SEQUENCE_PARAM_PAYLOAD</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>inBufferSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>spsId</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ppsId</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>spsppsBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>outSPSPPSPayloadSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name> <index>[<expr><literal type="number">250</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_SEQUENCE_PARAM_PAYLOAD</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_SEQUENCE_PARAM_PAYLOAD_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_EVENT_PARAMS</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>completionEvent</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">253</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_EVENT_PARAMS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_EVENT_PARAMS_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NV_ENC_OPEN_ENCODE_SESSIONEX_PARAMS</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NV_ENC_DEVICE_TYPE</name></type> <name>deviceType</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>device</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>reserved</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>apiVersion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">253</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENC_OPEN_ENCODE_SESSION_EX_PARAMS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENC_OPEN_ENCODE_SESSION_EX_PARAMS_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(1)</cpp:value></cpp:define>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncOpenEncodeSession</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>deviceType</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>encoder</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncGetEncodeGUIDCount</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>encodeGUIDCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncGetEncodeGUIDs</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name><modifier>*</modifier></type> <name>GUIDs</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>guidArraySize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>GUIDCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncGetEncodeProfileGUIDCount</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>encodeProfileGUIDCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncGetEncodeProfileGUIDs</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>GUID</name><modifier>*</modifier></type> <name>profileGUIDs</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>guidArraySize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>GUIDCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncGetInputFormatCount</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>inputFmtCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncGetInputFormats</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_BUFFER_FORMAT</name><modifier>*</modifier></type> <name>inputFmts</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>inputFmtArraySize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>inputFmtCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncGetEncodeCaps</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_CAPS_PARAM</name><modifier>*</modifier></type> <name>capsParam</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>capsVal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncGetEncodePresetCount</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>encodePresetGUIDCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncGetEncodePresetGUIDs</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>GUID</name><modifier>*</modifier></type> <name>presetGUIDs</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>guidArraySize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>encodePresetGUIDCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncGetEncodePresetConfig</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>presetGUID</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_PRESET_CONFIG</name><modifier>*</modifier></type> <name>presetConfig</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncInitializeEncoder</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_INITIALIZE_PARAMS</name><modifier>*</modifier></type> <name>createEncodeParams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncCreateInputBuffer</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_CREATE_INPUT_BUFFER</name><modifier>*</modifier></type> <name>createInputBufferParams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncDestroyInputBuffer</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_INPUT_PTR</name></type> <name>inputBuffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncCreateBitstreamBuffer</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_CREATE_BITSTREAM_BUFFER</name><modifier>*</modifier></type> <name>createBitstreamBufferParams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncDestroyBitstreamBuffer</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_OUTPUT_PTR</name></type> <name>bitstreamBuffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncEncodePicture</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_PIC_PARAMS</name><modifier>*</modifier></type> <name>encodePicParams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncLockBitstream</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_LOCK_BITSTREAM</name><modifier>*</modifier></type> <name>lockBitstreamBufferParams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncUnlockBitstream</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_OUTPUT_PTR</name></type> <name>bitstreamBuffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncLockInputBuffer</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_LOCK_INPUT_BUFFER</name><modifier>*</modifier></type> <name>lockInputBufferParams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncUnlockInputBuffer</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_INPUT_PTR</name></type> <name>inputBuffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncGetEncodeStats</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_STAT</name><modifier>*</modifier></type> <name>encodeStats</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncGetSequenceParams</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_SEQUENCE_PARAM_PAYLOAD</name><modifier>*</modifier></type> <name>sequenceParamPayload</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncRegisterAsyncEvent</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_EVENT_PARAMS</name><modifier>*</modifier></type> <name>eventParams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncUnregisterAsyncEvent</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_EVENT_PARAMS</name><modifier>*</modifier></type> <name>eventParams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncMapInputResource</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_MAP_INPUT_RESOURCE</name><modifier>*</modifier></type> <name>mapInputResParams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncUnmapInputResource</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_INPUT_PTR</name></type> <name>mappedInputBuffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncDestroyEncoder</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncInvalidateRefFrames</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>invalidRefFrameTimeStamp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncOpenEncodeSessionEx</name> <parameter_list>(<parameter><decl><type><name>NV_ENC_OPEN_ENCODE_SESSION_EX_PARAMS</name> <modifier>*</modifier></type><name>openSessionExParams</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>encoder</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncRegisterResource</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_REGISTER_RESOURCE</name><modifier>*</modifier></type> <name>registerResParams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncUnregisterResource</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_REGISTERED_PTR</name></type> <name>registeredResource</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncReconfigureEncoder</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_RECONFIGURE_PARAMS</name><modifier>*</modifier></type> <name>reInitEncodeParams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncCreateMVBuffer</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_CREATE_MV_BUFFER</name><modifier>*</modifier></type> <name>createMVBufferParams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncDestroyMVBuffer</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_OUTPUT_PTR</name></type> <name>mvBuffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncRunMotionEstimationOnly</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_MEONLY_PARAMS</name><modifier>*</modifier></type> <name>meOnlyParams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncodeAPIGetMaxSupportedVersion</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCOPENENCODESESSION</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>deviceType</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>encoder</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCGETENCODEGUIDCOUNT</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>encodeGUIDCount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCGETENCODEGUIDS</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name><modifier>*</modifier></type> <name>GUIDs</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>guidArraySize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>GUIDCount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCGETENCODEPROFILEGUIDCOUNT</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>encodeProfileGUIDCount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCGETENCODEPROFILEGUIDS</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>GUID</name><modifier>*</modifier></type> <name>profileGUIDs</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>guidArraySize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>GUIDCount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCGETINPUTFORMATCOUNT</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>inputFmtCount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCGETINPUTFORMATS</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_BUFFER_FORMAT</name><modifier>*</modifier></type> <name>inputFmts</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>inputFmtArraySize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>inputFmtCount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCGETENCODECAPS</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_CAPS_PARAM</name><modifier>*</modifier></type> <name>capsParam</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>capsVal</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCGETENCODEPRESETCOUNT</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>encodePresetGUIDCount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCGETENCODEPRESETGUIDS</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>GUID</name><modifier>*</modifier></type> <name>presetGUIDs</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>guidArraySize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>encodePresetGUIDCount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCGETENCODEPRESETCONFIG</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>encodeGUID</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>presetGUID</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_PRESET_CONFIG</name><modifier>*</modifier></type> <name>presetConfig</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCINITIALIZEENCODER</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_INITIALIZE_PARAMS</name><modifier>*</modifier></type> <name>createEncodeParams</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCCREATEINPUTBUFFER</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_CREATE_INPUT_BUFFER</name><modifier>*</modifier></type> <name>createInputBufferParams</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCDESTROYINPUTBUFFER</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_INPUT_PTR</name></type> <name>inputBuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCCREATEBITSTREAMBUFFER</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_CREATE_BITSTREAM_BUFFER</name><modifier>*</modifier></type> <name>createBitstreamBufferParams</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCDESTROYBITSTREAMBUFFER</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_OUTPUT_PTR</name></type> <name>bitstreamBuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCENCODEPICTURE</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_PIC_PARAMS</name><modifier>*</modifier></type> <name>encodePicParams</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCLOCKBITSTREAM</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_LOCK_BITSTREAM</name><modifier>*</modifier></type> <name>lockBitstreamBufferParams</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCUNLOCKBITSTREAM</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_OUTPUT_PTR</name></type> <name>bitstreamBuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCLOCKINPUTBUFFER</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_LOCK_INPUT_BUFFER</name><modifier>*</modifier></type> <name>lockInputBufferParams</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCUNLOCKINPUTBUFFER</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_INPUT_PTR</name></type> <name>inputBuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCGETENCODESTATS</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_STAT</name><modifier>*</modifier></type> <name>encodeStats</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCGETSEQUENCEPARAMS</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_SEQUENCE_PARAM_PAYLOAD</name><modifier>*</modifier></type> <name>sequenceParamPayload</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCREGISTERASYNCEVENT</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_EVENT_PARAMS</name><modifier>*</modifier></type> <name>eventParams</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCUNREGISTERASYNCEVENT</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_EVENT_PARAMS</name><modifier>*</modifier></type> <name>eventParams</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCMAPINPUTRESOURCE</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_MAP_INPUT_RESOURCE</name><modifier>*</modifier></type> <name>mapInputResParams</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCUNMAPINPUTRESOURCE</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_INPUT_PTR</name></type> <name>mappedInputBuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCDESTROYENCODER</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCINVALIDATEREFFRAMES</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>invalidRefFrameTimeStamp</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCOPENENCODESESSIONEX</name>) <parameter_list>(<parameter><decl><type><name>NV_ENC_OPEN_ENCODE_SESSION_EX_PARAMS</name> <modifier>*</modifier></type><name>openSessionExParams</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>encoder</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCREGISTERRESOURCE</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_REGISTER_RESOURCE</name><modifier>*</modifier></type> <name>registerResParams</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCUNREGISTERRESOURCE</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_REGISTERED_PTR</name></type> <name>registeredRes</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCRECONFIGUREENCODER</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_RECONFIGURE_PARAMS</name><modifier>*</modifier></type> <name>reInitEncodeParams</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCCREATEMVBUFFER</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_CREATE_MV_BUFFER</name><modifier>*</modifier></type> <name>createMVBufferParams</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCDESTROYMVBUFFER</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_OUTPUT_PTR</name></type> <name>mvBuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>NVENCSTATUS</name></type> (<name>NVENCAPI</name><modifier>*</modifier> <name>PNVENCRUNMOTIONESTIMATIONONLY</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_MEONLY_PARAMS</name><modifier>*</modifier></type> <name>meOnlyParams</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>_NV_ENCODE_API_FUNCTION_LIST</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCOPENENCODESESSION</name></type> <name>nvEncOpenEncodeSession</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCGETENCODEGUIDCOUNT</name></type> <name>nvEncGetEncodeGUIDCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCGETENCODEPRESETCOUNT</name></type> <name>nvEncGetEncodeProfileGUIDCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCGETENCODEPRESETGUIDS</name></type> <name>nvEncGetEncodeProfileGUIDs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCGETENCODEGUIDS</name></type> <name>nvEncGetEncodeGUIDs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCGETINPUTFORMATCOUNT</name></type> <name>nvEncGetInputFormatCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCGETINPUTFORMATS</name></type> <name>nvEncGetInputFormats</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCGETENCODECAPS</name></type> <name>nvEncGetEncodeCaps</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCGETENCODEPRESETCOUNT</name></type> <name>nvEncGetEncodePresetCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCGETENCODEPRESETGUIDS</name></type> <name>nvEncGetEncodePresetGUIDs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCGETENCODEPRESETCONFIG</name></type> <name>nvEncGetEncodePresetConfig</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCINITIALIZEENCODER</name></type> <name>nvEncInitializeEncoder</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCCREATEINPUTBUFFER</name></type> <name>nvEncCreateInputBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCDESTROYINPUTBUFFER</name></type> <name>nvEncDestroyInputBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCCREATEBITSTREAMBUFFER</name></type> <name>nvEncCreateBitstreamBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCDESTROYBITSTREAMBUFFER</name></type> <name>nvEncDestroyBitstreamBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCENCODEPICTURE</name></type> <name>nvEncEncodePicture</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCLOCKBITSTREAM</name></type> <name>nvEncLockBitstream</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCUNLOCKBITSTREAM</name></type> <name>nvEncUnlockBitstream</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCLOCKINPUTBUFFER</name></type> <name>nvEncLockInputBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCUNLOCKINPUTBUFFER</name></type> <name>nvEncUnlockInputBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCGETENCODESTATS</name></type> <name>nvEncGetEncodeStats</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCGETSEQUENCEPARAMS</name></type> <name>nvEncGetSequenceParams</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCREGISTERASYNCEVENT</name></type> <name>nvEncRegisterAsyncEvent</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCUNREGISTERASYNCEVENT</name></type> <name>nvEncUnregisterAsyncEvent</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCMAPINPUTRESOURCE</name></type> <name>nvEncMapInputResource</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCUNMAPINPUTRESOURCE</name></type> <name>nvEncUnmapInputResource</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCDESTROYENCODER</name></type> <name>nvEncDestroyEncoder</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCINVALIDATEREFFRAMES</name></type> <name>nvEncInvalidateRefFrames</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCOPENENCODESESSIONEX</name></type> <name>nvEncOpenEncodeSessionEx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCREGISTERRESOURCE</name></type> <name>nvEncRegisterResource</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCUNREGISTERRESOURCE</name></type> <name>nvEncUnregisterResource</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCRECONFIGUREENCODER</name></type> <name>nvEncReconfigureEncoder</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>reserved1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PNVENCCREATEMVBUFFER</name></type> <name>nvEncCreateMVBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCDESTROYMVBUFFER</name></type> <name>nvEncDestroyMVBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PNVENCRUNMOTIONESTIMATIONONLY</name></type> <name>nvEncRunMotionEstimationOnly</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>reserved2</name><index>[<expr><literal type="number">281</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>NV_ENCODE_API_FUNCTION_LIST</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_ENCODE_API_FUNCTION_LIST_VER</name></cpp:macro> <cpp:value>NVENCAPI_STRUCT_VERSION(2)</cpp:value></cpp:define>

<function_decl><type><name>NVENCSTATUS</name> <name>NVENCAPI</name></type> <name>NvEncodeAPICreateInstance</name><parameter_list>(<parameter><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>functionList</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
