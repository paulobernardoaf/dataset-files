<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\decklink\linux\decklink-sdk\DeckLinkAPIDiscovery.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_CONST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_CONST</name></cpp:macro> <cpp:value>__declspec(selectany) static const</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_CONST</name></cpp:macro> <cpp:value>static const</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_PUBLIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_PUBLIC</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLink</name> <init>= <expr><block>{<expr><literal type="number">0xC4</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0xFB</literal></expr>,<expr><literal type="number">0xDD</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0xED</literal></expr>,<expr><literal type="number">0x8F</literal></expr>,<expr><literal type="number">0xE5</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x0F</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0x91</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLink</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLink</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <call><name>GetModelName</name> <argument_list>( <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>modelName</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetDisplayName</name> <argument_list>( <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>displayName</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLink</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

</block_content>}</block></extern>

</unit>
