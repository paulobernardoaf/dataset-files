<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\decklink\mac\decklink-sdk\DeckLinkAPI.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_CONST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_CONST</name></cpp:macro> <cpp:value>__declspec(selectany) static const</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_CONST</name></cpp:macro> <cpp:value>static const</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BMD_PUBLIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMD_PUBLIC</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CoreFoundation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CFPlugInCOM.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPITypes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPIModes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPIDiscovery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPIConfiguration.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPIDeckControl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPIStreaming.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLACKMAGIC_DECKLINK_API_MAGIC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkVideoOutputCallback</name> <init>= <expr><block>{<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0xAA</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0xCB</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0xA8</literal></expr>,<expr><literal type="number">0xD5</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0xA6</literal></expr>,<expr><literal type="number">0xEE</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkInputCallback</name> <init>= <expr><block>{<expr><literal type="number">0xDD</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0xE5</literal></expr>,<expr><literal type="number">0xEC</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0xAB</literal></expr>,<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0xE8</literal></expr>,<expr><literal type="number">0x0C</literal></expr>,<expr><literal type="number">0x4D</literal></expr>,<expr><literal type="number">0xFC</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x4A</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkEncoderInputCallback</name> <init>= <expr><block>{<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0xF1</literal></expr>,<expr><literal type="number">0x3E</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0xF4</literal></expr>,<expr><literal type="number">0xA0</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0xA6</literal></expr>,<expr><literal type="number">0xA7</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0xF6</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x8B</literal></expr>,<expr><literal type="number">0x31</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkMemoryAllocator</name> <init>= <expr><block>{<expr><literal type="number">0xB3</literal></expr>,<expr><literal type="number">0x6E</literal></expr>,<expr><literal type="number">0xB6</literal></expr>,<expr><literal type="number">0xE7</literal></expr>,<expr><literal type="number">0x9D</literal></expr>,<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0xA8</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0xEF</literal></expr>,<expr><literal type="number">0x84</literal></expr>,<expr><literal type="number">0x3B</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0xA2</literal></expr>,<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0xE8</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkAudioOutputCallback</name> <init>= <expr><block>{<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0x1B</literal></expr>,<expr><literal type="number">0x7F</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0xB9</literal></expr>,<expr><literal type="number">0x93</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0xB1</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0xE6</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkIterator</name> <init>= <expr><block>{<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0xFB</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0xCD</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x4B</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0xBD</literal></expr>,<expr><literal type="number">0xBB</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0xF2</literal></expr>,<expr><literal type="number">0xD8</literal></expr>,<expr><literal type="number">0xBA</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkAPIInformation</name> <init>= <expr><block>{<expr><literal type="number">0x7B</literal></expr>,<expr><literal type="number">0xEA</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x8A</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0xB5</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0xA4</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkOutput</name> <init>= <expr><block>{<expr><literal type="number">0xCC</literal></expr>,<expr><literal type="number">0x5C</literal></expr>,<expr><literal type="number">0x8A</literal></expr>,<expr><literal type="number">0x6E</literal></expr>,<expr><literal type="number">0x3F</literal></expr>,<expr><literal type="number">0x2F</literal></expr>,<expr><literal type="number">0x4B</literal></expr>,<expr><literal type="number">0x3A</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0xEA</literal></expr>,<expr><literal type="number">0xFD</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x64</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkInput</name> <init>= <expr><block>{<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0xDF</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0xAA</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0xFA</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x95</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkHDMIInputEDID</name> <init>= <expr><block>{<expr><literal type="number">0xAB</literal></expr>,<expr><literal type="number">0xBB</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0xBC</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0xBC</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0x9D</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0xE6</literal></expr>,<expr><literal type="number">0xE5</literal></expr>,<expr><literal type="number">0xA9</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x02</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkEncoderInput</name> <init>= <expr><block>{<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0x6B</literal></expr>,<expr><literal type="number">0x7D</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0xE7</literal></expr>,<expr><literal type="number">0xA1</literal></expr>,<expr><literal type="number">0xF0</literal></expr>,<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x3F</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x85</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkVideoFrame</name> <init>= <expr><block>{<expr><literal type="number">0x3F</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x6F</literal></expr>,<expr><literal type="number">0xE0</literal></expr>,<expr><literal type="number">0xF0</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0xEF</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0x5B</literal></expr>,<expr><literal type="number">0x17</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkMutableVideoFrame</name> <init>= <expr><block>{<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0xE2</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x9F</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0xB6</literal></expr>,<expr><literal type="number">0xF2</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0xE8</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0xC3</literal></expr>,<expr><literal type="number">0x90</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkVideoFrame3DExtensions</name> <init>= <expr><block>{<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0x0F</literal></expr>,<expr><literal type="number">0x7E</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0xED</literal></expr>,<expr><literal type="number">0xC7</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0xA8</literal></expr>,<expr><literal type="number">0x9C</literal></expr>,<expr><literal type="number">0xDD</literal></expr>,<expr><literal type="number">0x2D</literal></expr>,<expr><literal type="number">0xB5</literal></expr>,<expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0x9C</literal></expr>,<expr><literal type="number">0xD7</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkVideoFrameMetadataExtensions</name> <init>= <expr><block>{<expr><literal type="number">0xD5</literal></expr>,<expr><literal type="number">0x97</literal></expr>,<expr><literal type="number">0x3D</literal></expr>,<expr><literal type="number">0xC9</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0xD0</literal></expr>,<expr><literal type="number">0x8F</literal></expr>,<expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0xF8</literal></expr>,<expr><literal type="number">0xA1</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0x8F</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkVideoInputFrame</name> <init>= <expr><block>{<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0xCF</literal></expr>,<expr><literal type="number">0xE3</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x7C</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x9A</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x8F</literal></expr>,<expr><literal type="number">0x44</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkAncillaryPacket</name> <init>= <expr><block>{<expr><literal type="number">0xCC</literal></expr>,<expr><literal type="number">0x5B</literal></expr>,<expr><literal type="number">0xBF</literal></expr>,<expr><literal type="number">0x7E</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x9C</literal></expr>,<expr><literal type="number">0x4D</literal></expr>,<expr><literal type="number">0x3B</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xEF</literal></expr>,<expr><literal type="number">0x5E</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x70</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkAncillaryPacketIterator</name> <init>= <expr><block>{<expr><literal type="number">0x3F</literal></expr>,<expr><literal type="number">0xC8</literal></expr>,<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0x4B</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0xFB</literal></expr>,<expr><literal type="number">0x4C</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0x8F</literal></expr>,<expr><literal type="number">0x9A</literal></expr>,<expr><literal type="number">0xAB</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0xA7</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkVideoFrameAncillaryPackets</name> <init>= <expr><block>{<expr><literal type="number">0x6C</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x6C</literal></expr>,<expr><literal type="number">0x0F</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x9E</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0xD8</literal></expr>,<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0xE2</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0xD8</literal></expr>,<expr><literal type="number">0x1A</literal></expr>,<expr><literal type="number">0xEE</literal></expr>,<expr><literal type="number">0x68</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkVideoFrameAncillary</name> <init>= <expr><block>{<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0x2E</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0xD1</literal></expr>,<expr><literal type="number">0xA4</literal></expr>,<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0x9E</literal></expr>,<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x7A</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x04</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkEncoderPacket</name> <init>= <expr><block>{<expr><literal type="number">0xB6</literal></expr>,<expr><literal type="number">0x93</literal></expr>,<expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0x6C</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x6E</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0xF1</literal></expr>,<expr><literal type="number">0xB6</literal></expr>,<expr><literal type="number">0xC2</literal></expr>,<expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0xA4</literal></expr>,<expr><literal type="number">0xBC</literal></expr>,<expr><literal type="number">0xA6</literal></expr>,<expr><literal type="number">0x20</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkEncoderVideoPacket</name> <init>= <expr><block>{<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0x7F</literal></expr>,<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0xE8</literal></expr>,<expr><literal type="number">0xC7</literal></expr>,<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0xB8</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0x7B</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0xF8</literal></expr>,<expr><literal type="number">0x0F</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,<expr><literal type="number">0xE0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkEncoderAudioPacket</name> <init>= <expr><block>{<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0xE8</literal></expr>,<expr><literal type="number">0xED</literal></expr>,<expr><literal type="number">0xC8</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x3B</literal></expr>,<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0xF6</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0xC6</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0xF5</literal></expr>,<expr><literal type="number">0xA0</literal></expr>,<expr><literal type="number">0x7A</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkH265NALPacket</name> <init>= <expr><block>{<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x9C</literal></expr>,<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0xD5</literal></expr>,<expr><literal type="number">0x4B</literal></expr>,<expr><literal type="number">0xDE</literal></expr>,<expr><literal type="number">0xA6</literal></expr>,<expr><literal type="number">0xD4</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0xF2</literal></expr>,<expr><literal type="number">0xE7</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkAudioInputPacket</name> <init>= <expr><block>{<expr><literal type="number">0xE4</literal></expr>,<expr><literal type="number">0x3D</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x70</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0xDE</literal></expr>,<expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x0C</literal></expr>,<expr><literal type="number">0x9A</literal></expr>,<expr><literal type="number">0x66</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkScreenPreviewCallback</name> <init>= <expr><block>{<expr><literal type="number">0xB1</literal></expr>,<expr><literal type="number">0xD3</literal></expr>,<expr><literal type="number">0xF4</literal></expr>,<expr><literal type="number">0x9A</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0xFE</literal></expr>,<expr><literal type="number">0x4C</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0xC8</literal></expr>,<expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0xCC</literal></expr>,<expr><literal type="number">0xD4</literal></expr>,<expr><literal type="number">0x38</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkCocoaScreenPreviewCallback</name> <init>= <expr><block>{<expr><literal type="number">0xD1</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x2F</literal></expr>,<expr><literal type="number">0x8F</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0x4C</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0xA5</literal></expr>,<expr><literal type="number">0xDD</literal></expr>,<expr><literal type="number">0x5F</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,<expr><literal type="number">0xF0</literal></expr>,<expr><literal type="number">0xA2</literal></expr>,<expr><literal type="number">0xAA</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkGLScreenPreviewHelper</name> <init>= <expr><block>{<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0xCA</literal></expr>,<expr><literal type="number">0xC7</literal></expr>,<expr><literal type="number">0x4C</literal></expr>,<expr><literal type="number">0x1A</literal></expr>,<expr><literal type="number">0x9F</literal></expr>,<expr><literal type="number">0xB4</literal></expr>,<expr><literal type="number">0xC5</literal></expr>,<expr><literal type="number">0xBB</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0xD2</literal></expr>,<expr><literal type="number">0x2F</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkNotificationCallback</name> <init>= <expr><block>{<expr><literal type="number">0xB0</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0xA1</literal></expr>,<expr><literal type="number">0xEC</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0xBD</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0xE5</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0x0D</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkNotification</name> <init>= <expr><block>{<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x1F</literal></expr>,<expr><literal type="number">0xB2</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0xE2</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x1B</literal></expr>,<expr><literal type="number">0x9B</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x6F</literal></expr>,<expr><literal type="number">0xA1</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0xC5</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkAttributes</name> <init>= <expr><block>{<expr><literal type="number">0xAB</literal></expr>,<expr><literal type="number">0xC1</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0xCB</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0xE2</literal></expr>,<expr><literal type="number">0xA1</literal></expr>,<expr><literal type="number">0xCB</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x35</literal></expr>,<expr><literal type="number">0xC4</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkStatus</name> <init>= <expr><block>{<expr><literal type="number">0x5F</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0xBC</literal></expr>,<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x3F</literal></expr>,<expr><literal type="number">0xA4</literal></expr>,<expr><literal type="number">0xA9</literal></expr>,<expr><literal type="number">0x6E</literal></expr>,<expr><literal type="number">0x46</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkKeyer</name> <init>= <expr><block>{<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0xCA</literal></expr>,<expr><literal type="number">0xF5</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0xF8</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0x1E</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0xF7</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0xFE</literal></expr>,<expr><literal type="number">0x5F</literal></expr>,<expr><literal type="number">0x5B</literal></expr>,<expr><literal type="number">0xFB</literal></expr>,<expr><literal type="number">0xA3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkVideoConversion</name> <init>= <expr><block>{<expr><literal type="number">0x3B</literal></expr>,<expr><literal type="number">0xBC</literal></expr>,<expr><literal type="number">0xB8</literal></expr>,<expr><literal type="number">0xA2</literal></expr>,<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0x2C</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0xB5</literal></expr>,<expr><literal type="number">0xD8</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0xE9</literal></expr>,<expr><literal type="number">0x9A</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkDeviceNotificationCallback</name> <init>= <expr><block>{<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x97</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x3B</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0xDF</literal></expr>,<expr><literal type="number">0x4C</literal></expr>,<expr><literal type="number">0xC8</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0x70</literal></expr>,<expr><literal type="number">0x7A</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0xC4</literal></expr>,<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0x8F</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMD_CONST</name> <name>REFIID</name></type> <name>IID_IDeckLinkDiscovery</name> <init>= <expr><block>{<expr><literal type="number">0xCD</literal></expr>,<expr><literal type="number">0xBF</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0xBC</literal></expr>,<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0xFA</literal></expr>,<expr><literal type="number">0xB4</literal></expr>,<expr><literal type="number">0x4D</literal></expr>,<expr><literal type="number">0xC5</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0xBC</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDVideoOutputFlags</name>;</typedef>

<enum>enum <name>_BMDVideoOutputFlags</name> <block>{

<decl><name>bmdVideoOutputFlagDefault</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdVideoOutputVANC</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdVideoOutputVITC</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>bmdVideoOutputRP188</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,

<decl><name>bmdVideoOutputDualStream3D</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDPacketType</name>;</typedef>

<enum>enum <name>_BMDPacketType</name> <block>{

<decl><name>bmdPacketTypeStreamInterruptedMarker</name> <init>= <expr><literal type="char">'sint'</literal></expr></init></decl>, 

<decl><name>bmdPacketTypeStreamData</name> <init>= <expr><literal type="char">'sdat'</literal></expr></init></decl> 

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDFrameFlags</name>;</typedef>

<enum>enum <name>_BMDFrameFlags</name> <block>{

<decl><name>bmdFrameFlagDefault</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdFrameFlagFlipVertical</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdFrameContainsHDRMetadata</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>bmdFrameContainsCintelMetadata</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,

<decl><name>bmdFrameCapturedAsPsF</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>,

<decl><name>bmdFrameHasNoInputSource</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDVideoInputFlags</name>;</typedef>

<enum>enum <name>_BMDVideoInputFlags</name> <block>{

<decl><name>bmdVideoInputFlagDefault</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdVideoInputEnableFormatDetection</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdVideoInputDualStream3D</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDVideoInputFormatChangedEvents</name>;</typedef>

<enum>enum <name>_BMDVideoInputFormatChangedEvents</name> <block>{

<decl><name>bmdVideoInputDisplayModeChanged</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdVideoInputFieldDominanceChanged</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>bmdVideoInputColorspaceChanged</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDetectedVideoInputFormatFlags</name>;</typedef>

<enum>enum <name>_BMDDetectedVideoInputFormatFlags</name> <block>{

<decl><name>bmdDetectedVideoInputYCbCr422</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdDetectedVideoInputRGB444</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>bmdDetectedVideoInputDualStream3D</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckLinkCapturePassthroughMode</name>;</typedef>

<enum>enum <name>_BMDDeckLinkCapturePassthroughMode</name> <block>{

<decl><name>bmdDeckLinkCapturePassthroughModeDisabled</name> <init>= <expr><literal type="char">'pdis'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkCapturePassthroughModeDirect</name> <init>= <expr><literal type="char">'pdir'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkCapturePassthroughModeCleanSwitch</name> <init>= <expr><literal type="char">'pcln'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDOutputFrameCompletionResult</name>;</typedef>

<enum>enum <name>_BMDOutputFrameCompletionResult</name> <block>{

<decl><name>bmdOutputFrameCompleted</name></decl>, 

<decl><name>bmdOutputFrameDisplayedLate</name></decl>, 

<decl><name>bmdOutputFrameDropped</name></decl>, 

<decl><name>bmdOutputFrameFlushed</name></decl> 

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDReferenceStatus</name>;</typedef>

<enum>enum <name>_BMDReferenceStatus</name> <block>{

<decl><name>bmdReferenceNotSupportedByHardware</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdReferenceLocked</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDAudioFormat</name>;</typedef>

<enum>enum <name>_BMDAudioFormat</name> <block>{

<decl><name>bmdAudioFormatPCM</name> <init>= <expr><literal type="char">'lpcm'</literal></expr></init></decl> 

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDAudioSampleRate</name>;</typedef>

<enum>enum <name>_BMDAudioSampleRate</name> <block>{

<decl><name>bmdAudioSampleRate48kHz</name> <init>= <expr><literal type="number">48000</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDAudioSampleType</name>;</typedef>

<enum>enum <name>_BMDAudioSampleType</name> <block>{

<decl><name>bmdAudioSampleType16bitInteger</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>bmdAudioSampleType32bitInteger</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDAudioOutputStreamType</name>;</typedef>

<enum>enum <name>_BMDAudioOutputStreamType</name> <block>{

<decl><name>bmdAudioOutputStreamContinuous</name></decl>, 

<decl><name>bmdAudioOutputStreamContinuousDontResample</name></decl>, 

<decl><name>bmdAudioOutputStreamTimestamped</name></decl> 

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDisplayModeSupport</name>;</typedef>

<enum>enum <name>_BMDDisplayModeSupport</name> <block>{

<decl><name>bmdDisplayModeNotSupported</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdDisplayModeSupported</name></decl>, 

<decl><name>bmdDisplayModeSupportedWithConversion</name></decl> 

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDAncillaryPacketFormat</name>;</typedef>

<enum>enum <name>_BMDAncillaryPacketFormat</name> <block>{

<decl><name>bmdAncillaryPacketFormatUInt8</name> <init>= <expr><literal type="char">'ui08'</literal></expr></init></decl>,

<decl><name>bmdAncillaryPacketFormatUInt16</name> <init>= <expr><literal type="char">'ui16'</literal></expr></init></decl>,

<decl><name>bmdAncillaryPacketFormatYCbCr10</name> <init>= <expr><literal type="char">'v210'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDTimecodeFormat</name>;</typedef>

<enum>enum <name>_BMDTimecodeFormat</name> <block>{

<decl><name>bmdTimecodeRP188VITC1</name> <init>= <expr><literal type="char">'rpv1'</literal></expr></init></decl>, 

<decl><name>bmdTimecodeRP188VITC2</name> <init>= <expr><literal type="char">'rp12'</literal></expr></init></decl>, 

<decl><name>bmdTimecodeRP188LTC</name> <init>= <expr><literal type="char">'rplt'</literal></expr></init></decl>, 

<decl><name>bmdTimecodeRP188Any</name> <init>= <expr><literal type="char">'rp18'</literal></expr></init></decl>, 

<decl><name>bmdTimecodeVITC</name> <init>= <expr><literal type="char">'vitc'</literal></expr></init></decl>,

<decl><name>bmdTimecodeVITCField2</name> <init>= <expr><literal type="char">'vit2'</literal></expr></init></decl>,

<decl><name>bmdTimecodeSerial</name> <init>= <expr><literal type="char">'seri'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDAnalogVideoFlags</name>;</typedef>

<enum>enum <name>_BMDAnalogVideoFlags</name> <block>{

<decl><name>bmdAnalogVideoFlagCompositeSetup75</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdAnalogVideoFlagComponentBetacamLevels</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDAudioOutputAnalogAESSwitch</name>;</typedef>

<enum>enum <name>_BMDAudioOutputAnalogAESSwitch</name> <block>{

<decl><name>bmdAudioOutputSwitchAESEBU</name> <init>= <expr><literal type="char">'aes '</literal></expr></init></decl>,

<decl><name>bmdAudioOutputSwitchAnalog</name> <init>= <expr><literal type="char">'anlg'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDVideoOutputConversionMode</name>;</typedef>

<enum>enum <name>_BMDVideoOutputConversionMode</name> <block>{

<decl><name>bmdNoVideoOutputConversion</name> <init>= <expr><literal type="char">'none'</literal></expr></init></decl>,

<decl><name>bmdVideoOutputLetterboxDownconversion</name> <init>= <expr><literal type="char">'ltbx'</literal></expr></init></decl>,

<decl><name>bmdVideoOutputAnamorphicDownconversion</name> <init>= <expr><literal type="char">'amph'</literal></expr></init></decl>,

<decl><name>bmdVideoOutputHD720toHD1080Conversion</name> <init>= <expr><literal type="char">'720c'</literal></expr></init></decl>,

<decl><name>bmdVideoOutputHardwareLetterboxDownconversion</name> <init>= <expr><literal type="char">'HWlb'</literal></expr></init></decl>,

<decl><name>bmdVideoOutputHardwareAnamorphicDownconversion</name> <init>= <expr><literal type="char">'HWam'</literal></expr></init></decl>,

<decl><name>bmdVideoOutputHardwareCenterCutDownconversion</name> <init>= <expr><literal type="char">'HWcc'</literal></expr></init></decl>,

<decl><name>bmdVideoOutputHardware720p1080pCrossconversion</name> <init>= <expr><literal type="char">'xcap'</literal></expr></init></decl>,

<decl><name>bmdVideoOutputHardwareAnamorphic720pUpconversion</name> <init>= <expr><literal type="char">'ua7p'</literal></expr></init></decl>,

<decl><name>bmdVideoOutputHardwareAnamorphic1080iUpconversion</name> <init>= <expr><literal type="char">'ua1i'</literal></expr></init></decl>,

<decl><name>bmdVideoOutputHardwareAnamorphic149To720pUpconversion</name> <init>= <expr><literal type="char">'u47p'</literal></expr></init></decl>,

<decl><name>bmdVideoOutputHardwareAnamorphic149To1080iUpconversion</name> <init>= <expr><literal type="char">'u41i'</literal></expr></init></decl>,

<decl><name>bmdVideoOutputHardwarePillarbox720pUpconversion</name> <init>= <expr><literal type="char">'up7p'</literal></expr></init></decl>,

<decl><name>bmdVideoOutputHardwarePillarbox1080iUpconversion</name> <init>= <expr><literal type="char">'up1i'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDVideoInputConversionMode</name>;</typedef>

<enum>enum <name>_BMDVideoInputConversionMode</name> <block>{

<decl><name>bmdNoVideoInputConversion</name> <init>= <expr><literal type="char">'none'</literal></expr></init></decl>,

<decl><name>bmdVideoInputLetterboxDownconversionFromHD1080</name> <init>= <expr><literal type="char">'10lb'</literal></expr></init></decl>,

<decl><name>bmdVideoInputAnamorphicDownconversionFromHD1080</name> <init>= <expr><literal type="char">'10am'</literal></expr></init></decl>,

<decl><name>bmdVideoInputLetterboxDownconversionFromHD720</name> <init>= <expr><literal type="char">'72lb'</literal></expr></init></decl>,

<decl><name>bmdVideoInputAnamorphicDownconversionFromHD720</name> <init>= <expr><literal type="char">'72am'</literal></expr></init></decl>,

<decl><name>bmdVideoInputLetterboxUpconversion</name> <init>= <expr><literal type="char">'lbup'</literal></expr></init></decl>,

<decl><name>bmdVideoInputAnamorphicUpconversion</name> <init>= <expr><literal type="char">'amup'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDVideo3DPackingFormat</name>;</typedef>

<enum>enum <name>_BMDVideo3DPackingFormat</name> <block>{

<decl><name>bmdVideo3DPackingSidebySideHalf</name> <init>= <expr><literal type="char">'sbsh'</literal></expr></init></decl>,

<decl><name>bmdVideo3DPackingLinebyLine</name> <init>= <expr><literal type="char">'lbyl'</literal></expr></init></decl>,

<decl><name>bmdVideo3DPackingTopAndBottom</name> <init>= <expr><literal type="char">'tabo'</literal></expr></init></decl>,

<decl><name>bmdVideo3DPackingFramePacking</name> <init>= <expr><literal type="char">'frpk'</literal></expr></init></decl>,

<decl><name>bmdVideo3DPackingLeftOnly</name> <init>= <expr><literal type="char">'left'</literal></expr></init></decl>,

<decl><name>bmdVideo3DPackingRightOnly</name> <init>= <expr><literal type="char">'righ'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDIdleVideoOutputOperation</name>;</typedef>

<enum>enum <name>_BMDIdleVideoOutputOperation</name> <block>{

<decl><name>bmdIdleVideoOutputBlack</name> <init>= <expr><literal type="char">'blac'</literal></expr></init></decl>,

<decl><name>bmdIdleVideoOutputLastFrame</name> <init>= <expr><literal type="char">'lafa'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDVideoEncoderFrameCodingMode</name>;</typedef>

<enum>enum <name>_BMDVideoEncoderFrameCodingMode</name> <block>{

<decl><name>bmdVideoEncoderFrameCodingModeInter</name> <init>= <expr><literal type="char">'inte'</literal></expr></init></decl>,

<decl><name>bmdVideoEncoderFrameCodingModeIntra</name> <init>= <expr><literal type="char">'intr'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDNxHRLevel</name>;</typedef>

<enum>enum <name>_BMDDNxHRLevel</name> <block>{

<decl><name>bmdDNxHRLevelSQ</name> <init>= <expr><literal type="char">'dnsq'</literal></expr></init></decl>,

<decl><name>bmdDNxHRLevelLB</name> <init>= <expr><literal type="char">'dnlb'</literal></expr></init></decl>,

<decl><name>bmdDNxHRLevelHQ</name> <init>= <expr><literal type="char">'dnhq'</literal></expr></init></decl>,

<decl><name>bmdDNxHRLevelHQX</name> <init>= <expr><literal type="char">'dhqx'</literal></expr></init></decl>,

<decl><name>bmdDNxHRLevel444</name> <init>= <expr><literal type="char">'d444'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDLinkConfiguration</name>;</typedef>

<enum>enum <name>_BMDLinkConfiguration</name> <block>{

<decl><name>bmdLinkConfigurationSingleLink</name> <init>= <expr><literal type="char">'lcsl'</literal></expr></init></decl>,

<decl><name>bmdLinkConfigurationDualLink</name> <init>= <expr><literal type="char">'lcdl'</literal></expr></init></decl>,

<decl><name>bmdLinkConfigurationQuadLink</name> <init>= <expr><literal type="char">'lcql'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeviceInterface</name>;</typedef>

<enum>enum <name>_BMDDeviceInterface</name> <block>{

<decl><name>bmdDeviceInterfacePCI</name> <init>= <expr><literal type="char">'pci '</literal></expr></init></decl>,

<decl><name>bmdDeviceInterfaceUSB</name> <init>= <expr><literal type="char">'usb '</literal></expr></init></decl>,

<decl><name>bmdDeviceInterfaceThunderbolt</name> <init>= <expr><literal type="char">'thun'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDColorspace</name>;</typedef>

<enum>enum <name>_BMDColorspace</name> <block>{

<decl><name>bmdColorspaceRec601</name> <init>= <expr><literal type="char">'r601'</literal></expr></init></decl>,

<decl><name>bmdColorspaceRec709</name> <init>= <expr><literal type="char">'r709'</literal></expr></init></decl>,

<decl><name>bmdColorspaceRec2020</name> <init>= <expr><literal type="char">'2020'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDynamicRange</name>;</typedef>

<enum>enum <name>_BMDDynamicRange</name> <block>{

<decl><name>bmdDynamicRangeSDR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdDynamicRangeHDRStaticPQ</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></init></decl>, 

<decl><name>bmdDynamicRangeHDRStaticHLG</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl> 

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckLinkHDMIInputEDIDID</name>;</typedef>

<enum>enum <name>_BMDDeckLinkHDMIInputEDIDID</name> <block>{

<decl><name>bmdDeckLinkHDMIInputEDIDDynamicRange</name> <init>= <expr><literal type="char">'HIDy'</literal></expr></init></decl> 

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckLinkFrameMetadataID</name>;</typedef>

<enum>enum <name>_BMDDeckLinkFrameMetadataID</name> <block>{

<decl><name>bmdDeckLinkFrameMetadataColorspace</name> <init>= <expr><literal type="char">'cspc'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataHDRElectroOpticalTransferFunc</name> <init>= <expr><literal type="char">'eotf'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelFilmType</name> <init>= <expr><literal type="char">'cfty'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelFilmGauge</name> <init>= <expr><literal type="char">'cfga'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelOffsetDetectedHorizontal</name> <init>= <expr><literal type="char">'odfh'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelOffsetDetectedVertical</name> <init>= <expr><literal type="char">'odfv'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelKeykodeLow</name> <init>= <expr><literal type="char">'ckkl'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelKeykodeHigh</name> <init>= <expr><literal type="char">'ckkh'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelTile1Size</name> <init>= <expr><literal type="char">'ct1s'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelTile2Size</name> <init>= <expr><literal type="char">'ct2s'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelTile3Size</name> <init>= <expr><literal type="char">'ct3s'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelTile4Size</name> <init>= <expr><literal type="char">'ct4s'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelImageWidth</name> <init>= <expr><literal type="char">'IWPx'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelImageHeight</name> <init>= <expr><literal type="char">'IHPx'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLinearMaskingRedInRed</name> <init>= <expr><literal type="char">'mrir'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInRed</name> <init>= <expr><literal type="char">'mgir'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInRed</name> <init>= <expr><literal type="char">'mbir'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLinearMaskingRedInGreen</name> <init>= <expr><literal type="char">'mrig'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInGreen</name> <init>= <expr><literal type="char">'mgig'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInGreen</name> <init>= <expr><literal type="char">'mbig'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLinearMaskingRedInBlue</name> <init>= <expr><literal type="char">'mrib'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInBlue</name> <init>= <expr><literal type="char">'mgib'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInBlue</name> <init>= <expr><literal type="char">'mbib'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLogMaskingRedInRed</name> <init>= <expr><literal type="char">'mlrr'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLogMaskingGreenInRed</name> <init>= <expr><literal type="char">'mlgr'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLogMaskingBlueInRed</name> <init>= <expr><literal type="char">'mlbr'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLogMaskingRedInGreen</name> <init>= <expr><literal type="char">'mlrg'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLogMaskingGreenInGreen</name> <init>= <expr><literal type="char">'mlgg'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLogMaskingBlueInGreen</name> <init>= <expr><literal type="char">'mlbg'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLogMaskingRedInBlue</name> <init>= <expr><literal type="char">'mlrb'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLogMaskingGreenInBlue</name> <init>= <expr><literal type="char">'mlgb'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLogMaskingBlueInBlue</name> <init>= <expr><literal type="char">'mlbb'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelFilmFrameRate</name> <init>= <expr><literal type="char">'cffr'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataHDRDisplayPrimariesRedX</name> <init>= <expr><literal type="char">'hdrx'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataHDRDisplayPrimariesRedY</name> <init>= <expr><literal type="char">'hdry'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataHDRDisplayPrimariesGreenX</name> <init>= <expr><literal type="char">'hdgx'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataHDRDisplayPrimariesGreenY</name> <init>= <expr><literal type="char">'hdgy'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataHDRDisplayPrimariesBlueX</name> <init>= <expr><literal type="char">'hdbx'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataHDRDisplayPrimariesBlueY</name> <init>= <expr><literal type="char">'hdby'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataHDRWhitePointX</name> <init>= <expr><literal type="char">'hdwx'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataHDRWhitePointY</name> <init>= <expr><literal type="char">'hdwy'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataHDRMaxDisplayMasteringLuminance</name> <init>= <expr><literal type="char">'hdml'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataHDRMinDisplayMasteringLuminance</name> <init>= <expr><literal type="char">'hmil'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataHDRMaximumContentLightLevel</name> <init>= <expr><literal type="char">'mcll'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataHDRMaximumFrameAverageLightLevel</name> <init>= <expr><literal type="char">'fall'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelOffsetToApplyHorizontal</name> <init>= <expr><literal type="char">'otah'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelOffsetToApplyVertical</name> <init>= <expr><literal type="char">'otav'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelGainRed</name> <init>= <expr><literal type="char">'LfRd'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelGainGreen</name> <init>= <expr><literal type="char">'LfGr'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelGainBlue</name> <init>= <expr><literal type="char">'LfBl'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLiftRed</name> <init>= <expr><literal type="char">'GnRd'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLiftGreen</name> <init>= <expr><literal type="char">'GnGr'</literal></expr></init></decl>, 

<decl><name>bmdDeckLinkFrameMetadataCintelLiftBlue</name> <init>= <expr><literal type="char">'GnBl'</literal></expr></init></decl> 

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDuplexMode</name>;</typedef>

<enum>enum <name>_BMDDuplexMode</name> <block>{

<decl><name>bmdDuplexModeFull</name> <init>= <expr><literal type="char">'fdup'</literal></expr></init></decl>,

<decl><name>bmdDuplexModeHalf</name> <init>= <expr><literal type="char">'hdup'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckLinkAttributeID</name>;</typedef>

<enum>enum <name>_BMDDeckLinkAttributeID</name> <block>{

<decl><name>BMDDeckLinkSupportsInternalKeying</name> <init>= <expr><literal type="char">'keyi'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSupportsExternalKeying</name> <init>= <expr><literal type="char">'keye'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSupportsHDKeying</name> <init>= <expr><literal type="char">'keyh'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSupportsInputFormatDetection</name> <init>= <expr><literal type="char">'infd'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkHasReferenceInput</name> <init>= <expr><literal type="char">'hrin'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkHasSerialPort</name> <init>= <expr><literal type="char">'hspt'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkHasAnalogVideoOutputGain</name> <init>= <expr><literal type="char">'avog'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkCanOnlyAdjustOverallVideoOutputGain</name> <init>= <expr><literal type="char">'ovog'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkHasVideoInputAntiAliasingFilter</name> <init>= <expr><literal type="char">'aafl'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkHasBypass</name> <init>= <expr><literal type="char">'byps'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSupportsClockTimingAdjustment</name> <init>= <expr><literal type="char">'ctad'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSupportsFullDuplex</name> <init>= <expr><literal type="char">'fdup'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSupportsFullFrameReferenceInputTimingOffset</name> <init>= <expr><literal type="char">'frin'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSupportsSMPTELevelAOutput</name> <init>= <expr><literal type="char">'lvla'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSupportsDualLinkSDI</name> <init>= <expr><literal type="char">'sdls'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSupportsQuadLinkSDI</name> <init>= <expr><literal type="char">'sqls'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSupportsIdleOutput</name> <init>= <expr><literal type="char">'idou'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkHasLTCTimecodeInput</name> <init>= <expr><literal type="char">'hltc'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSupportsDuplexModeConfiguration</name> <init>= <expr><literal type="char">'dupx'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSupportsHDRMetadata</name> <init>= <expr><literal type="char">'hdrm'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSupportsColorspaceMetadata</name> <init>= <expr><literal type="char">'cmet'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkMaximumAudioChannels</name> <init>= <expr><literal type="char">'mach'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkMaximumAnalogAudioInputChannels</name> <init>= <expr><literal type="char">'iach'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkMaximumAnalogAudioOutputChannels</name> <init>= <expr><literal type="char">'aach'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkNumberOfSubDevices</name> <init>= <expr><literal type="char">'nsbd'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSubDeviceIndex</name> <init>= <expr><literal type="char">'subi'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkPersistentID</name> <init>= <expr><literal type="char">'peid'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkDeviceGroupID</name> <init>= <expr><literal type="char">'dgid'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkTopologicalID</name> <init>= <expr><literal type="char">'toid'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkVideoOutputConnections</name> <init>= <expr><literal type="char">'vocn'</literal></expr></init></decl>, 

<decl><name>BMDDeckLinkVideoInputConnections</name> <init>= <expr><literal type="char">'vicn'</literal></expr></init></decl>, 

<decl><name>BMDDeckLinkAudioOutputConnections</name> <init>= <expr><literal type="char">'aocn'</literal></expr></init></decl>, 

<decl><name>BMDDeckLinkAudioInputConnections</name> <init>= <expr><literal type="char">'aicn'</literal></expr></init></decl>, 

<decl><name>BMDDeckLinkVideoIOSupport</name> <init>= <expr><literal type="char">'vios'</literal></expr></init></decl>, 

<decl><name>BMDDeckLinkDeckControlConnections</name> <init>= <expr><literal type="char">'dccn'</literal></expr></init></decl>, 

<decl><name>BMDDeckLinkDeviceInterface</name> <init>= <expr><literal type="char">'dbus'</literal></expr></init></decl>, 

<decl><name>BMDDeckLinkAudioInputRCAChannelCount</name> <init>= <expr><literal type="char">'airc'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkAudioInputXLRChannelCount</name> <init>= <expr><literal type="char">'aixc'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkAudioOutputRCAChannelCount</name> <init>= <expr><literal type="char">'aorc'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkAudioOutputXLRChannelCount</name> <init>= <expr><literal type="char">'aoxc'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkPairedDevicePersistentID</name> <init>= <expr><literal type="char">'ppid'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkVideoInputGainMinimum</name> <init>= <expr><literal type="char">'vigm'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkVideoInputGainMaximum</name> <init>= <expr><literal type="char">'vigx'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkVideoOutputGainMinimum</name> <init>= <expr><literal type="char">'vogm'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkVideoOutputGainMaximum</name> <init>= <expr><literal type="char">'vogx'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkMicrophoneInputGainMinimum</name> <init>= <expr><literal type="char">'migm'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkMicrophoneInputGainMaximum</name> <init>= <expr><literal type="char">'migx'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkSerialPortDeviceName</name> <init>= <expr><literal type="char">'slpn'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkVendorName</name> <init>= <expr><literal type="char">'vndr'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkDisplayName</name> <init>= <expr><literal type="char">'dspn'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkModelName</name> <init>= <expr><literal type="char">'mdln'</literal></expr></init></decl>,

<decl><name>BMDDeckLinkDeviceHandle</name> <init>= <expr><literal type="char">'devh'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckLinkAPIInformationID</name>;</typedef>

<enum>enum <name>_BMDDeckLinkAPIInformationID</name> <block>{

<decl><name>BMDDeckLinkAPIVersion</name> <init>= <expr><literal type="char">'vers'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckLinkStatusID</name>;</typedef>

<enum>enum <name>_BMDDeckLinkStatusID</name> <block>{

<decl><name>bmdDeckLinkStatusDetectedVideoInputMode</name> <init>= <expr><literal type="char">'dvim'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusDetectedVideoInputFlags</name> <init>= <expr><literal type="char">'dvif'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusCurrentVideoInputMode</name> <init>= <expr><literal type="char">'cvim'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusCurrentVideoInputPixelFormat</name> <init>= <expr><literal type="char">'cvip'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusCurrentVideoInputFlags</name> <init>= <expr><literal type="char">'cvif'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusCurrentVideoOutputMode</name> <init>= <expr><literal type="char">'cvom'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusCurrentVideoOutputFlags</name> <init>= <expr><literal type="char">'cvof'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusPCIExpressLinkWidth</name> <init>= <expr><literal type="char">'pwid'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusPCIExpressLinkSpeed</name> <init>= <expr><literal type="char">'plnk'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusLastVideoOutputPixelFormat</name> <init>= <expr><literal type="char">'opix'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusReferenceSignalMode</name> <init>= <expr><literal type="char">'refm'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusReferenceSignalFlags</name> <init>= <expr><literal type="char">'reff'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusDuplexMode</name> <init>= <expr><literal type="char">'dupx'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusBusy</name> <init>= <expr><literal type="char">'busy'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusInterchangeablePanelType</name> <init>= <expr><literal type="char">'icpt'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusDeviceTemperature</name> <init>= <expr><literal type="char">'dtmp'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusVideoInputSignalLocked</name> <init>= <expr><literal type="char">'visl'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusReferenceSignalLocked</name> <init>= <expr><literal type="char">'refl'</literal></expr></init></decl>,

<decl><name>bmdDeckLinkStatusReceivedEDID</name> <init>= <expr><literal type="char">'edid'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeckLinkVideoStatusFlags</name>;</typedef>

<enum>enum <name>_BMDDeckLinkVideoStatusFlags</name> <block>{

<decl><name>bmdDeckLinkVideoStatusPsF</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdDeckLinkVideoStatusDualStream3D</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDuplexStatus</name>;</typedef>

<enum>enum <name>_BMDDuplexStatus</name> <block>{

<decl><name>bmdDuplexStatusFullDuplex</name> <init>= <expr><literal type="char">'fdup'</literal></expr></init></decl>,

<decl><name>bmdDuplexStatusHalfDuplex</name> <init>= <expr><literal type="char">'hdup'</literal></expr></init></decl>,

<decl><name>bmdDuplexStatusSimplex</name> <init>= <expr><literal type="char">'splx'</literal></expr></init></decl>,

<decl><name>bmdDuplexStatusInactive</name> <init>= <expr><literal type="char">'inac'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDPanelType</name>;</typedef>

<enum>enum <name>_BMDPanelType</name> <block>{

<decl><name>bmdPanelNotDetected</name> <init>= <expr><literal type="char">'npnl'</literal></expr></init></decl>,

<decl><name>bmdPanelTeranexMiniSmartPanel</name> <init>= <expr><literal type="char">'tmsm'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDDeviceBusyState</name>;</typedef>

<enum>enum <name>_BMDDeviceBusyState</name> <block>{

<decl><name>bmdDeviceCaptureBusy</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdDevicePlaybackBusy</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>bmdDeviceSerialPortBusy</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDVideoIOSupport</name>;</typedef>

<enum>enum <name>_BMDVideoIOSupport</name> <block>{

<decl><name>bmdDeviceSupportsCapture</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>bmdDeviceSupportsPlayback</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMD3DPreviewFormat</name>;</typedef>

<enum>enum <name>_BMD3DPreviewFormat</name> <block>{

<decl><name>bmd3DPreviewFormatDefault</name> <init>= <expr><literal type="char">'defa'</literal></expr></init></decl>,

<decl><name>bmd3DPreviewFormatLeftOnly</name> <init>= <expr><literal type="char">'left'</literal></expr></init></decl>,

<decl><name>bmd3DPreviewFormatRightOnly</name> <init>= <expr><literal type="char">'righ'</literal></expr></init></decl>,

<decl><name>bmd3DPreviewFormatSideBySide</name> <init>= <expr><literal type="char">'side'</literal></expr></init></decl>,

<decl><name>bmd3DPreviewFormatTopBottom</name> <init>= <expr><literal type="char">'topb'</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint32_t</name></type> <name>BMDNotifications</name>;</typedef>

<enum>enum <name>_BMDNotifications</name> <block>{

<decl><name>bmdPreferencesChanged</name> <init>= <expr><literal type="char">'pref'</literal></expr></init></decl>,

<decl><name>bmdStatusChanged</name> <init>= <expr><literal type="char">'stat'</literal></expr></init></decl>

}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoOutputCallback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkInputCallback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkEncoderInputCallback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkMemoryAllocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkAudioOutputCallback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkIterator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkAPIInformation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkOutput</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkInput</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkHDMIInputEDID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkEncoderInput</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkMutableVideoFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoFrame3DExtensions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoFrameMetadataExtensions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoInputFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkAncillaryPacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkAncillaryPacketIterator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoFrameAncillaryPackets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoFrameAncillary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkEncoderPacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkEncoderVideoPacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkEncoderAudioPacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkH265NALPacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkAudioInputPacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkScreenPreviewCallback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkCocoaScreenPreviewCallback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkGLScreenPreviewHelper</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkNotificationCallback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkNotification</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkAttributes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkStatus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkKeyer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoConversion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkDeviceNotificationCallback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkDiscovery</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoOutputCallback</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>ScheduledFrameCompleted</name> <argument_list>( <argument>IDeckLinkVideoFrame *completedFrame</argument>, <argument>BMDOutputFrameCompletionResult result</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>ScheduledPlaybackHasStopped</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkVideoOutputCallback</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkInputCallback</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>VideoInputFormatChanged</name> <argument_list>( <argument>BMDVideoInputFormatChangedEvents notificationEvents</argument>, <argument>IDeckLinkDisplayMode *newDisplayMode</argument>, <argument>BMDDetectedVideoInputFormatFlags detectedSignalFlags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>VideoInputFrameArrived</name> <argument_list>( <argument><expr><name>IDeckLinkVideoInputFrame</name><operator>*</operator> <name>videoFrame</name></expr></argument>, <argument><expr><name>IDeckLinkAudioInputPacket</name><operator>*</operator> <name>audioPacket</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkInputCallback</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkEncoderInputCallback</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>VideoInputSignalChanged</name> <argument_list>( <argument>BMDVideoInputFormatChangedEvents notificationEvents</argument>, <argument>IDeckLinkDisplayMode *newDisplayMode</argument>, <argument>BMDDetectedVideoInputFormatFlags detectedSignalFlags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>VideoPacketArrived</name> <argument_list>( <argument><expr><name>IDeckLinkEncoderVideoPacket</name><operator>*</operator> <name>videoPacket</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>AudioPacketArrived</name> <argument_list>( <argument><expr><name>IDeckLinkEncoderAudioPacket</name><operator>*</operator> <name>audioPacket</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkEncoderInputCallback</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkMemoryAllocator</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>AllocateBuffer</name> <argument_list>( <argument>uint32_t bufferSize</argument>, <argument>void **allocatedBuffer</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>ReleaseBuffer</name> <argument_list>( <argument><expr><name>void</name> <operator>*</operator><name>buffer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>Commit</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>Decommit</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkAudioOutputCallback</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>RenderAudioSamples</name> <argument_list>( <argument>bool preroll</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkIterator</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <call><name>Next</name> <argument_list>( <argument><expr><name>IDeckLink</name> <operator>*</operator><operator>*</operator><name>deckLinkInstance</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkAPIInformation</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>GetFlag</name> <argument_list>( <argument>BMDDeckLinkAPIInformationID cfgID</argument>, <argument>bool *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetInt</name> <argument_list>( <argument>BMDDeckLinkAPIInformationID cfgID</argument>, <argument>int64_t *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetFloat</name> <argument_list>( <argument>BMDDeckLinkAPIInformationID cfgID</argument>, <argument>double *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetString</name> <argument_list>( <argument>BMDDeckLinkAPIInformationID cfgID</argument>, <argument>CFStringRef *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkAPIInformation</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkOutput</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>DoesSupportVideoMode</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDVideoOutputFlags flags</argument>, <argument>BMDDisplayModeSupport *result</argument>, <argument>IDeckLinkDisplayMode **resultDisplayMode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetDisplayModeIterator</name> <argument_list>( <argument><expr><name>IDeckLinkDisplayModeIterator</name> <operator>*</operator><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetScreenPreviewCallback</name> <argument_list>( <argument><expr><name>IDeckLinkScreenPreviewCallback</name> <operator>*</operator><name>previewCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableVideoOutput</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDVideoOutputFlags flags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableVideoOutput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetVideoOutputFrameMemoryAllocator</name> <argument_list>( <argument><expr><name>IDeckLinkMemoryAllocator</name> <operator>*</operator><name>theAllocator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>CreateVideoFrame</name> <argument_list>( <argument>int32_t width</argument>, <argument>int32_t height</argument>, <argument>int32_t rowBytes</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDFrameFlags flags</argument>, <argument>IDeckLinkMutableVideoFrame **outFrame</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>CreateAncillaryData</name> <argument_list>( <argument>BMDPixelFormat pixelFormat</argument>, <argument>IDeckLinkVideoFrameAncillary **outBuffer</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>; 

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisplayVideoFrameSync</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrame</name> <operator>*</operator><name>theFrame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>ScheduleVideoFrame</name> <argument_list>( <argument>IDeckLinkVideoFrame *theFrame</argument>, <argument>BMDTimeValue displayTime</argument>, <argument>BMDTimeValue displayDuration</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetScheduledFrameCompletionCallback</name> <argument_list>( <argument><expr><name>IDeckLinkVideoOutputCallback</name> <operator>*</operator><name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBufferedVideoFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>bufferedFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableAudioOutput</name> <argument_list>( <argument>BMDAudioSampleRate sampleRate</argument>, <argument>BMDAudioSampleType sampleType</argument>, <argument>uint32_t channelCount</argument>, <argument>BMDAudioOutputStreamType streamType</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableAudioOutput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>WriteAudioSamplesSync</name> <argument_list>( <argument>void *buffer</argument>, <argument>uint32_t sampleFrameCount</argument>, <argument>uint32_t *sampleFramesWritten</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>BeginAudioPreroll</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>EndAudioPreroll</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>ScheduleAudioSamples</name> <argument_list>( <argument>void *buffer</argument>, <argument>uint32_t sampleFrameCount</argument>, <argument>BMDTimeValue streamTime</argument>, <argument>BMDTimeScale timeScale</argument>, <argument>uint32_t *sampleFramesWritten</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBufferedAudioSampleFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>bufferedSampleFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>FlushBufferedAudioSamples</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetAudioCallback</name> <argument_list>( <argument><expr><name>IDeckLinkAudioOutputCallback</name> <operator>*</operator><name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>StartScheduledPlayback</name> <argument_list>( <argument>BMDTimeValue playbackStartTime</argument>, <argument>BMDTimeScale timeScale</argument>, <argument>double playbackSpeed</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>StopScheduledPlayback</name> <argument_list>( <argument>BMDTimeValue stopPlaybackAtTime</argument>, <argument>BMDTimeValue *actualStopTime</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>IsScheduledPlaybackRunning</name> <argument_list>( <argument><expr><name>bool</name> <operator>*</operator><name>active</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetScheduledStreamTime</name> <argument_list>( <argument>BMDTimeScale desiredTimeScale</argument>, <argument>BMDTimeValue *streamTime</argument>, <argument>double *playbackSpeed</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetReferenceStatus</name> <argument_list>( <argument><expr><name>BMDReferenceStatus</name> <operator>*</operator><name>referenceStatus</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetHardwareReferenceClock</name> <argument_list>( <argument>BMDTimeScale desiredTimeScale</argument>, <argument>BMDTimeValue *hardwareTime</argument>, <argument>BMDTimeValue *timeInFrame</argument>, <argument>BMDTimeValue *ticksPerFrame</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetFrameCompletionReferenceTimestamp</name> <argument_list>( <argument>IDeckLinkVideoFrame *theFrame</argument>, <argument>BMDTimeScale desiredTimeScale</argument>, <argument>BMDTimeValue *frameCompletionTimestamp</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkOutput</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkInput</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>DoesSupportVideoMode</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDVideoInputFlags flags</argument>, <argument>BMDDisplayModeSupport *result</argument>, <argument>IDeckLinkDisplayMode **resultDisplayMode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetDisplayModeIterator</name> <argument_list>( <argument><expr><name>IDeckLinkDisplayModeIterator</name> <operator>*</operator><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetScreenPreviewCallback</name> <argument_list>( <argument><expr><name>IDeckLinkScreenPreviewCallback</name> <operator>*</operator><name>previewCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableVideoInput</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDVideoInputFlags flags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableVideoInput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAvailableVideoFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>availableFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetVideoInputFrameMemoryAllocator</name> <argument_list>( <argument><expr><name>IDeckLinkMemoryAllocator</name> <operator>*</operator><name>theAllocator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableAudioInput</name> <argument_list>( <argument>BMDAudioSampleRate sampleRate</argument>, <argument>BMDAudioSampleType sampleType</argument>, <argument>uint32_t channelCount</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableAudioInput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAvailableAudioSampleFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>availableSampleFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>StartStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>StopStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>PauseStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>FlushStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetCallback</name> <argument_list>( <argument><expr><name>IDeckLinkInputCallback</name> <operator>*</operator><name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetHardwareReferenceClock</name> <argument_list>( <argument>BMDTimeScale desiredTimeScale</argument>, <argument>BMDTimeValue *hardwareTime</argument>, <argument>BMDTimeValue *timeInFrame</argument>, <argument>BMDTimeValue *ticksPerFrame</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkInput</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkHDMIInputEDID</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>SetInt</name> <argument_list>( <argument>BMDDeckLinkHDMIInputEDIDID cfgID</argument>, <argument>int64_t value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetInt</name> <argument_list>( <argument>BMDDeckLinkHDMIInputEDIDID cfgID</argument>, <argument>int64_t *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>WriteToEDID</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkHDMIInputEDID</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkEncoderInput</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>DoesSupportVideoMode</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDVideoInputFlags flags</argument>, <argument>BMDDisplayModeSupport *result</argument>, <argument>IDeckLinkDisplayMode **resultDisplayMode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetDisplayModeIterator</name> <argument_list>( <argument><expr><name>IDeckLinkDisplayModeIterator</name> <operator>*</operator><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableVideoInput</name> <argument_list>( <argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDVideoInputFlags flags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableVideoInput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAvailablePacketsCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>availablePacketsCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetMemoryAllocator</name> <argument_list>( <argument><expr><name>IDeckLinkMemoryAllocator</name> <operator>*</operator><name>theAllocator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableAudioInput</name> <argument_list>( <argument>BMDAudioFormat audioFormat</argument>, <argument>BMDAudioSampleRate sampleRate</argument>, <argument>BMDAudioSampleType sampleType</argument>, <argument>uint32_t channelCount</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableAudioInput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAvailableAudioSampleFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>availableSampleFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>StartStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>StopStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>PauseStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>FlushStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetCallback</name> <argument_list>( <argument><expr><name>IDeckLinkEncoderInputCallback</name> <operator>*</operator><name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetHardwareReferenceClock</name> <argument_list>( <argument>BMDTimeScale desiredTimeScale</argument>, <argument>BMDTimeValue *hardwareTime</argument>, <argument>BMDTimeValue *timeInFrame</argument>, <argument>BMDTimeValue *ticksPerFrame</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkEncoderInput</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoFrame</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>long</name> <call><name>GetWidth</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>long</name> <call><name>GetHeight</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>long</name> <call><name>GetRowBytes</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>BMDPixelFormat</name> <call><name>GetPixelFormat</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>BMDFrameFlags</name> <call><name>GetFlags</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBytes</name> <argument_list>( <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>buffer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetTimecode</name> <argument_list>( <argument>BMDTimecodeFormat format</argument>, <argument>IDeckLinkTimecode **timecode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAncillaryData</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrameAncillary</name> <operator>*</operator><operator>*</operator><name>ancillary</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>; 

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkVideoFrame</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkMutableVideoFrame</name> <range>: <expr><name>public</name> <name>IDeckLinkVideoFrame</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>SetFlags</name> <argument_list>( <argument>BMDFrameFlags newFlags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetTimecode</name> <argument_list>( <argument>BMDTimecodeFormat format</argument>, <argument>IDeckLinkTimecode *timecode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetTimecodeFromComponents</name> <argument_list>( <argument>BMDTimecodeFormat format</argument>, <argument>uint8_t hours</argument>, <argument>uint8_t minutes</argument>, <argument>uint8_t seconds</argument>, <argument>uint8_t frames</argument>, <argument>BMDTimecodeFlags flags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetAncillaryData</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrameAncillary</name> <operator>*</operator><name>ancillary</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetTimecodeUserBits</name> <argument_list>( <argument>BMDTimecodeFormat format</argument>, <argument>BMDTimecodeUserBits userBits</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkMutableVideoFrame</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoFrame3DExtensions</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>BMDVideo3DPackingFormat</name> <call><name>Get3DPackingFormat</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetFrameForRightEye</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrame</name><operator>*</operator> <operator>*</operator><name>rightEyeFrame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkVideoFrame3DExtensions</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoFrameMetadataExtensions</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>GetInt</name> <argument_list>( <argument>BMDDeckLinkFrameMetadataID metadataID</argument>, <argument>int64_t *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetFloat</name> <argument_list>( <argument>BMDDeckLinkFrameMetadataID metadataID</argument>, <argument>double *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetFlag</name> <argument_list>( <argument>BMDDeckLinkFrameMetadataID metadataID</argument>, <argument>bool* value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetString</name> <argument_list>( <argument>BMDDeckLinkFrameMetadataID metadataID</argument>, <argument>CFStringRef *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkVideoFrameMetadataExtensions</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoInputFrame</name> <range>: <expr><name>public</name> <name>IDeckLinkVideoFrame</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>GetStreamTime</name> <argument_list>( <argument>BMDTimeValue *frameTime</argument>, <argument>BMDTimeValue *frameDuration</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetHardwareReferenceTimestamp</name> <argument_list>( <argument>BMDTimeScale timeScale</argument>, <argument>BMDTimeValue *frameTime</argument>, <argument>BMDTimeValue *frameDuration</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkVideoInputFrame</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkAncillaryPacket</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>GetBytes</name> <argument_list>( <argument>BMDAncillaryPacketFormat format</argument> , <argument>const void **data</argument> , <argument>uint32_t *size</argument> )</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>uint8_t</name> <call><name>GetDID</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>uint8_t</name> <call><name>GetSDID</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>uint32_t</name> <call><name>GetLineNumber</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>; 

<expr><name>virtual</name> <name>uint8_t</name> <call><name>GetDataStreamIndex</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>; 

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkAncillaryPacket</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkAncillaryPacketIterator</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <call><name>Next</name> <argument_list>( <argument><expr><name>IDeckLinkAncillaryPacket</name> <operator>*</operator><operator>*</operator><name>packet</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkAncillaryPacketIterator</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoFrameAncillaryPackets</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <call><name>GetPacketIterator</name> <argument_list>( <argument><expr><name>IDeckLinkAncillaryPacketIterator</name> <operator>*</operator><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetFirstPacketByID</name> <argument_list>( <argument>uint8_t DID</argument>, <argument>uint8_t SDID</argument>, <argument>IDeckLinkAncillaryPacket **packet</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>AttachPacket</name> <argument_list>( <argument><expr><name>IDeckLinkAncillaryPacket</name> <operator>*</operator><name>packet</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>; 

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DetachPacket</name> <argument_list>( <argument><expr><name>IDeckLinkAncillaryPacket</name> <operator>*</operator><name>packet</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DetachAllPackets</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkVideoFrameAncillaryPackets</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoFrameAncillary</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>GetBufferForVerticalBlankingLine</name> <argument_list>( <argument>uint32_t lineNumber</argument>, <argument>void **buffer</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>; 

<expr><name>virtual</name> <name>BMDPixelFormat</name> <call><name>GetPixelFormat</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>BMDDisplayMode</name> <call><name>GetDisplayMode</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkVideoFrameAncillary</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkEncoderPacket</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <call><name>GetBytes</name> <argument_list>( <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>buffer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>long</name> <call><name>GetSize</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetStreamTime</name> <argument_list>( <argument>BMDTimeValue *frameTime</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>BMDPacketType</name> <call><name>GetPacketType</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkEncoderPacket</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkEncoderVideoPacket</name> <range>: <expr><name>public</name> <name>IDeckLinkEncoderPacket</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>BMDPixelFormat</name> <call><name>GetPixelFormat</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetHardwareReferenceTimestamp</name> <argument_list>( <argument>BMDTimeScale timeScale</argument>, <argument>BMDTimeValue *frameTime</argument>, <argument>BMDTimeValue *frameDuration</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetTimecode</name> <argument_list>( <argument>BMDTimecodeFormat format</argument>, <argument>IDeckLinkTimecode **timecode</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkEncoderVideoPacket</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkEncoderAudioPacket</name> <range>: <expr><name>public</name> <name>IDeckLinkEncoderPacket</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>BMDAudioFormat</name> <call><name>GetAudioFormat</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkEncoderAudioPacket</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkH265NALPacket</name> <range>: <expr><name>public</name> <name>IDeckLinkEncoderVideoPacket</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <call><name>GetUnitType</name> <argument_list>( <argument><expr><name>uint8_t</name> <operator>*</operator><name>unitType</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBytesNoPrefix</name> <argument_list>( <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>buffer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>long</name> <call><name>GetSizeNoPrefix</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkH265NALPacket</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkAudioInputPacket</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>long</name> <call><name>GetSampleFrameCount</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBytes</name> <argument_list>( <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>buffer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetPacketTime</name> <argument_list>( <argument>BMDTimeValue *packetTime</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkAudioInputPacket</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkScreenPreviewCallback</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <call><name>DrawFrame</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrame</name> <operator>*</operator><name>theFrame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkScreenPreviewCallback</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkCocoaScreenPreviewCallback</name> <range>: <expr><name>public</name> <name>IDeckLinkScreenPreviewCallback</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkCocoaScreenPreviewCallback</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkGLScreenPreviewHelper</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <call><name>InitializeGL</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>PaintGL</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetFrame</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrame</name> <operator>*</operator><name>theFrame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>Set3DPreviewFormat</name> <argument_list>( <argument>BMD3DPreviewFormat previewFormat</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkGLScreenPreviewHelper</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkNotificationCallback</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>Notify</name> <argument_list>( <argument>BMDNotifications topic</argument>, <argument>uint64_t param1</argument>, <argument>uint64_t param2</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkNotification</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>Subscribe</name> <argument_list>( <argument>BMDNotifications topic</argument>, <argument>IDeckLinkNotificationCallback *theCallback</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>Unsubscribe</name> <argument_list>( <argument>BMDNotifications topic</argument>, <argument>IDeckLinkNotificationCallback *theCallback</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkAttributes</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>GetFlag</name> <argument_list>( <argument>BMDDeckLinkAttributeID cfgID</argument>, <argument>bool *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetInt</name> <argument_list>( <argument>BMDDeckLinkAttributeID cfgID</argument>, <argument>int64_t *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetFloat</name> <argument_list>( <argument>BMDDeckLinkAttributeID cfgID</argument>, <argument>double *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetString</name> <argument_list>( <argument>BMDDeckLinkAttributeID cfgID</argument>, <argument>CFStringRef *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkAttributes</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkStatus</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>GetFlag</name> <argument_list>( <argument>BMDDeckLinkStatusID statusID</argument>, <argument>bool *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetInt</name> <argument_list>( <argument>BMDDeckLinkStatusID statusID</argument>, <argument>int64_t *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetFloat</name> <argument_list>( <argument>BMDDeckLinkStatusID statusID</argument>, <argument>double *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetString</name> <argument_list>( <argument>BMDDeckLinkStatusID statusID</argument>, <argument>CFStringRef *value</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetBytes</name> <argument_list>( <argument>BMDDeckLinkStatusID statusID</argument>, <argument>void *buffer</argument>, <argument>uint32_t *bufferSize</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkStatus</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkKeyer</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>Enable</name> <argument_list>( <argument>bool isExternal</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>SetLevel</name> <argument_list>( <argument>uint8_t level</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>RampUp</name> <argument_list>( <argument>uint32_t numberOfFrames</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>RampDown</name> <argument_list>( <argument>uint32_t numberOfFrames</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>Disable</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkKeyer</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkVideoConversion</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <call><name>ConvertFrame</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrame</name><operator>*</operator> <name>srcFrame</name></expr></argument>, <argument><expr><name>IDeckLinkVideoFrame</name><operator>*</operator> <name>dstFrame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkVideoConversion</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkDeviceNotificationCallback</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <call><name>DeckLinkDeviceArrived</name> <argument_list>( <argument><expr><name>IDeckLink</name><operator>*</operator> <name>deckLinkDevice</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DeckLinkDeviceRemoved</name> <argument_list>( <argument><expr><name>IDeckLink</name><operator>*</operator> <name>deckLinkDevice</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkDeviceNotificationCallback</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>BMD_PUBLIC</name></type> <name>IDeckLinkDiscovery</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <call><name>InstallDeviceNotifications</name> <argument_list>( <argument><expr><name>IDeckLinkDeviceNotificationCallback</name><operator>*</operator> <name>deviceNotificationCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>UninstallDeviceNotifications</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkDiscovery</name> <argument_list>()</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<function_decl><type><name>IDeckLinkIterator</name><modifier>*</modifier> <name>BMD_PUBLIC</name></type> <name>CreateDeckLinkIteratorInstance</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>IDeckLinkDiscovery</name><modifier>*</modifier> <name>BMD_PUBLIC</name></type> <name>CreateDeckLinkDiscoveryInstance</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>IDeckLinkAPIInformation</name><modifier>*</modifier> <name>BMD_PUBLIC</name></type> <name>CreateDeckLinkAPIInformationInstance</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>IDeckLinkGLScreenPreviewHelper</name><modifier>*</modifier> <name>BMD_PUBLIC</name></type> <name>CreateOpenGLScreenPreviewHelper</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>IDeckLinkCocoaScreenPreviewCallback</name><modifier>*</modifier> <name>BMD_PUBLIC</name></type> <name>CreateCocoaScreenPreview</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>parentView</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>IDeckLinkVideoConversion</name><modifier>*</modifier> <name>BMD_PUBLIC</name></type> <name>CreateVideoConversionInstance</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>IDeckLinkVideoFrameAncillaryPackets</name><modifier>*</modifier> <name>BMD_PUBLIC</name></type> <name>CreateVideoFrameAncillaryPacketsInstance</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
