<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\decklink\mac\decklink-sdk\DeckLinkAPI_v7_3.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPI.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DeckLinkAPI_v7_6.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkInputCallback_v7_3</name></cpp:macro> <cpp:value>(REFIID){0xFD,0x6F,0x31,0x1D,0x4D,0x00,0x44,0x4B,0x9E,0xD4,0x1F,0x25,0xB5,0x73,0x0A,0xD0}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkOutput_v7_3</name></cpp:macro> <cpp:value>(REFIID){0x27,0x1C,0x65,0xE3,0xC3,0x23,0x43,0x44,0xA3,0x0F,0xD9,0x08,0xBC,0xB2,0x0A,0xA3}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkInput_v7_3</name></cpp:macro> <cpp:value>(REFIID){0x49,0x73,0xF0,0x12,0x99,0x25,0x45,0x8C,0x87,0x1C,0x18,0x77,0x4C,0xDB,0xBE,0xCB}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkVideoInputFrame_v7_3</name></cpp:macro> <cpp:value>(REFIID){0xCF,0x31,0x77,0x90,0x28,0x94,0x11,0xDE,0x8C,0x30,0x08,0x00,0x20,0x0C,0x9A,0x66}</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoInputFrame_v7_3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkOutput_v7_3</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>DoesSupportVideoMode</name> <argument_list>(<argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDDisplayModeSupport *result</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetDisplayModeIterator</name> <argument_list>( <argument><expr><name>IDeckLinkDisplayModeIterator_v7_6</name> <operator>*</operator><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetScreenPreviewCallback</name> <argument_list>( <argument><expr><name>IDeckLinkScreenPreviewCallback</name> <operator>*</operator><name>previewCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableVideoOutput</name> <argument_list>(<argument>BMDDisplayMode displayMode</argument>, <argument>BMDVideoOutputFlags flags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableVideoOutput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetVideoOutputFrameMemoryAllocator</name> <argument_list>( <argument><expr><name>IDeckLinkMemoryAllocator</name> <operator>*</operator><name>theAllocator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>CreateVideoFrame</name> <argument_list>(<argument>int32_t width</argument>, <argument>int32_t height</argument>, <argument>int32_t rowBytes</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDFrameFlags flags</argument>, <argument>IDeckLinkMutableVideoFrame_v7_6 **outFrame</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>CreateAncillaryData</name> <argument_list>(<argument>BMDPixelFormat pixelFormat</argument>, <argument>IDeckLinkVideoFrameAncillary **outBuffer</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisplayVideoFrameSync</name> <argument_list>( <argument><expr><name>IDeckLinkVideoFrame_v7_6</name> <operator>*</operator><name>theFrame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>ScheduleVideoFrame</name> <argument_list>( <argument>IDeckLinkVideoFrame_v7_6 *theFrame</argument>, <argument>BMDTimeValue displayTime</argument>, <argument>BMDTimeValue displayDuration</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetScheduledFrameCompletionCallback</name> <argument_list>( <argument><expr><name>IDeckLinkVideoOutputCallback</name> <operator>*</operator><name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBufferedVideoFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>bufferedFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableAudioOutput</name> <argument_list>(<argument>BMDAudioSampleRate sampleRate</argument>, <argument>BMDAudioSampleType sampleType</argument>, <argument>uint32_t channelCount</argument>, <argument>BMDAudioOutputStreamType streamType</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableAudioOutput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>WriteAudioSamplesSync</name> <argument_list>( <argument>void *buffer</argument>, <argument>uint32_t sampleFrameCount</argument>, <argument>uint32_t *sampleFramesWritten</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>BeginAudioPreroll</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>EndAudioPreroll</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>ScheduleAudioSamples</name> <argument_list>( <argument>void *buffer</argument>, <argument>uint32_t sampleFrameCount</argument>, <argument>BMDTimeValue streamTime</argument>, <argument>BMDTimeScale timeScale</argument>, <argument>uint32_t *sampleFramesWritten</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetBufferedAudioSampleFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>bufferedSampleFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>FlushBufferedAudioSamples</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetAudioCallback</name> <argument_list>( <argument><expr><name>IDeckLinkAudioOutputCallback</name> <operator>*</operator><name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>StartScheduledPlayback</name> <argument_list>(<argument>BMDTimeValue playbackStartTime</argument>, <argument>BMDTimeScale timeScale</argument>, <argument>double playbackSpeed</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>StopScheduledPlayback</name> <argument_list>(<argument>BMDTimeValue stopPlaybackAtTime</argument>, <argument>BMDTimeValue *actualStopTime</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>IsScheduledPlaybackRunning</name> <argument_list>( <argument><expr><name>bool</name> <operator>*</operator><name>active</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>GetHardwareReferenceClock</name> <argument_list>(<argument>BMDTimeScale desiredTimeScale</argument>, <argument>BMDTimeValue *elapsedTimeSinceSchedulerBegan</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkOutput_v7_3</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkInputCallback_v7_3</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>VideoInputFormatChanged</name> <argument_list>( <argument>BMDVideoInputFormatChangedEvents notificationEvents</argument>, <argument>IDeckLinkDisplayMode_v7_6 *newDisplayMode</argument>, <argument>BMDDetectedVideoInputFormatFlags detectedSignalFlags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>VideoInputFrameArrived</name> <argument_list>( <argument><expr><name>IDeckLinkVideoInputFrame_v7_3</name> <operator>*</operator><name>videoFrame</name></expr></argument>, <argument><expr><name>IDeckLinkAudioInputPacket</name> <operator>*</operator><name>audioPacket</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkInputCallback_v7_3</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkInput_v7_3</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>DoesSupportVideoMode</name> <argument_list>(<argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDDisplayModeSupport *result</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetDisplayModeIterator</name> <argument_list>( <argument><expr><name>IDeckLinkDisplayModeIterator_v7_6</name> <operator>*</operator><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetScreenPreviewCallback</name> <argument_list>( <argument><expr><name>IDeckLinkScreenPreviewCallback</name> <operator>*</operator><name>previewCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableVideoInput</name> <argument_list>(<argument>BMDDisplayMode displayMode</argument>, <argument>BMDPixelFormat pixelFormat</argument>, <argument>BMDVideoInputFlags flags</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableVideoInput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAvailableVideoFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>availableFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <macro><name>EnableAudioInput</name> <argument_list>(<argument>BMDAudioSampleRate sampleRate</argument>, <argument>BMDAudioSampleType sampleType</argument>, <argument>uint32_t channelCount</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>DisableAudioInput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>GetAvailableAudioSampleFrameCount</name> <argument_list>( <argument><expr><name>uint32_t</name> <operator>*</operator><name>availableSampleFrameCount</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>StartStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>StopStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>PauseStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>FlushStreams</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <call><name>SetCallback</name> <argument_list>( <argument><expr><name>IDeckLinkInputCallback_v7_3</name> <operator>*</operator><name>theCallback</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkInput_v7_3</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDeckLinkVideoInputFrame_v7_3</name> <range>: <expr><name>public</name> <name>IDeckLinkVideoFrame_v7_6</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <macro><name>GetStreamTime</name> <argument_list>( <argument>BMDTimeValue *frameTime</argument>, <argument>BMDTimeValue *frameDuration</argument>, <argument>BMDTimeScale timeScale</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><macro><name>IDeckLinkVideoInputFrame_v7_3</name> <argument_list>()</argument_list></macro> <block>{}</block></expr>; 

}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
