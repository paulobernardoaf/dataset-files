<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\image-source\obs-slideshow.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threading.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/darray.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_log</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[slideshow: '%s'] " format, obs_source_get_name(ss-&gt;source), ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_WARNING, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_TR_SPEED</name></cpp:macro> <cpp:value>"transition_speed"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_CUSTOM_SIZE</name></cpp:macro> <cpp:value>"use_custom_size"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_SLIDE_TIME</name></cpp:macro> <cpp:value>"slide_time"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_TRANSITION</name></cpp:macro> <cpp:value>"transition"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_RANDOMIZE</name></cpp:macro> <cpp:value>"randomize"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_LOOP</name></cpp:macro> <cpp:value>"loop"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_HIDE</name></cpp:macro> <cpp:value>"hide"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_FILES</name></cpp:macro> <cpp:value>"files"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_BEHAVIOR</name></cpp:macro> <cpp:value>"playback_behavior"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_BEHAVIOR_STOP_RESTART</name></cpp:macro> <cpp:value>"stop_restart"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_BEHAVIOR_PAUSE_UNPAUSE</name></cpp:macro> <cpp:value>"pause_unpause"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_BEHAVIOR_ALWAYS_PLAY</name></cpp:macro> <cpp:value>"always_play"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_MODE</name></cpp:macro> <cpp:value>"slide_mode"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_MODE_AUTO</name></cpp:macro> <cpp:value>"mode_auto"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_MODE_MANUAL</name></cpp:macro> <cpp:value>"mode_manual"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_CUT</name></cpp:macro> <cpp:value>"cut"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_FADE</name></cpp:macro> <cpp:value>"fade"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_SWIPE</name></cpp:macro> <cpp:value>"swipe"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_SLIDE</name></cpp:macro> <cpp:value>"slide"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_</name><parameter_list>(<parameter><type><name>text</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>obs_module_text("SlideShow." text)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_TR_SPEED</name></cpp:macro> <cpp:value>T_("TransitionSpeed")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_CUSTOM_SIZE</name></cpp:macro> <cpp:value>T_("CustomSize")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_CUSTOM_SIZE_AUTO</name></cpp:macro> <cpp:value>T_("CustomSize.Auto")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SLIDE_TIME</name></cpp:macro> <cpp:value>T_("SlideTime")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_TRANSITION</name></cpp:macro> <cpp:value>T_("Transition")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_RANDOMIZE</name></cpp:macro> <cpp:value>T_("Randomize")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_LOOP</name></cpp:macro> <cpp:value>T_("Loop")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_HIDE</name></cpp:macro> <cpp:value>T_("HideWhenDone")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_FILES</name></cpp:macro> <cpp:value>T_("Files")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_BEHAVIOR</name></cpp:macro> <cpp:value>T_("PlaybackBehavior")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_BEHAVIOR_STOP_RESTART</name></cpp:macro> <cpp:value>T_("PlaybackBehavior.StopRestart")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_BEHAVIOR_PAUSE_UNPAUSE</name></cpp:macro> <cpp:value>T_("PlaybackBehavior.PauseUnpause")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_BEHAVIOR_ALWAYS_PLAY</name></cpp:macro> <cpp:value>T_("PlaybackBehavior.AlwaysPlay")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_MODE</name></cpp:macro> <cpp:value>T_("SlideMode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_MODE_AUTO</name></cpp:macro> <cpp:value>T_("SlideMode.Auto")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_MODE_MANUAL</name></cpp:macro> <cpp:value>T_("SlideMode.Manual")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_TR_</name><parameter_list>(<parameter><type><name>text</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>obs_module_text("SlideShow.Transition." text)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_TR_CUT</name></cpp:macro> <cpp:value>T_TR_("Cut")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_TR_FADE</name></cpp:macro> <cpp:value>T_TR_("Fade")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_TR_SWIPE</name></cpp:macro> <cpp:value>T_TR_("Swipe")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_TR_SLIDE</name></cpp:macro> <cpp:value>T_TR_("Slide")</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>image_source_get_memory_usage</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_TO_MBYTES</name></cpp:macro> <cpp:value>(1024 * 1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MEM_USAGE</name></cpp:macro> <cpp:value>(400 * BYTES_TO_MBYTES)</cpp:value></cpp:define>

<struct>struct <name>image_file_data</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

}</block>;</struct>

<enum>enum <name>behavior</name> <block>{

<decl><name>BEHAVIOR_STOP_RESTART</name></decl>,

<decl><name>BEHAVIOR_PAUSE_UNPAUSE</name></decl>,

<decl><name>BEHAVIOR_ALWAYS_PLAY</name></decl>,

}</block>;</enum>

<struct>struct <name>slideshow</name> <block>{

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>randomize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>loop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>restart_on_activate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pause_on_deactivate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>restart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>manual</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hide</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_cut</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>paused</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>slide_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tr_speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tr_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>elapsed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cur_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>mem_usage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct image_file_data</argument>)</argument_list></macro> <expr_stmt><expr><name>files</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>behavior</name></name></type> <name>behavior</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>play_pause_hotkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>restart_hotkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>stop_hotkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>next_hotkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>prev_hotkey</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>get_transition</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>tr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tr</name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>get_source</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>DARRAY</name><argument_list>(<argument>struct image_file_data</argument>)</argument_list></macro> <expr_stmt><expr><name>files</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>files</name><operator>.</operator><name>da</name></name> <operator>=</operator> <operator>*</operator><name>array</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>files</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_path</name> <init>= <expr><name><name>files</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cur_path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>source</name> <operator>=</operator> <name><name>files</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>source</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>create_source_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"unload"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>obs_source_create_private</name><argument_list>(<argument><expr><literal type="string">"image_source"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>source</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_files</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>DARRAY</name><argument_list>(<argument>struct image_file_data</argument>)</argument_list></macro> <expr_stmt><expr><name>files</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>files</name><operator>.</operator><name>da</name></name> <operator>=</operator> <operator>*</operator><name>array</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>files</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>files</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>files</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>random_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ss_getname</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"SlideShow"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>DARRAY</name><argument_list>(<argument>struct image_file_data</argument>)</argument_list></macro> <expr_stmt><expr><name>new_files</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>image_file_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>new_source</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>new_files</name><operator>.</operator><name>da</name></name> <operator>=</operator> <operator>*</operator><name>array</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_source</name> <operator>=</operator> <call><name>get_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_source</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_source</name> <operator>=</operator> <call><name>get_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_files</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_source</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_source</name> <operator>=</operator> <call><name>create_source_from_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_source</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_cx</name> <init>= <expr><call><name>obs_source_get_width</name><argument_list>(<argument><expr><name>new_source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_cy</name> <init>= <expr><call><name>obs_source_get_height</name><argument_list>(<argument><expr><name>new_source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>new_source</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>new_files</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_cx</name> <operator>&gt;</operator> <operator>*</operator><name>cx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <name>new_cx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_cy</name> <operator>&gt;</operator> <operator>*</operator><name>cy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>cy</name> <operator>=</operator> <name>new_cy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>source_data</name> <init>= <expr><call><name>obs_obj_get_data</name><argument_list>(<argument><expr><name>new_source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>mem_usage</name></name> <operator>+=</operator> <call><name>image_source_get_memory_usage</name><argument_list>(<argument><expr><name>source_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>array</name> <operator>=</operator> <name><name>new_files</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>valid_extension</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ext</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".bmp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>astrcmpi</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".tga"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>astrcmpi</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".png"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>astrcmpi</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".jpeg"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>astrcmpi</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".jpg"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>astrcmpi</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".gif"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>item_valid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>&lt;</operator> <name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_transition</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>to_null</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><call><name>item_valid</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>valid</name> <operator>&amp;&amp;</operator> <name><name>ss</name><operator>-&gt;</operator><name>use_cut</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_transition_set</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr></argument>,

<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>array</name><index>[<expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name></expr>]</index></name><operator>.</operator><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>valid</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>to_null</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_transition_start</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr></argument>, <argument><expr><name>OBS_TRANSITION_MODE_AUTO</name></expr></argument>,

<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>tr_speed</name></name></expr></argument>,

<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>array</name><index>[<expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name></expr>]</index></name><operator>.</operator><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_transition_start</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr></argument>, <argument><expr><name>OBS_TRANSITION_MODE_AUTO</name></expr></argument>,

<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>tr_speed</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ss_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>DARRAY</name><argument_list>(<argument>struct image_file_data</argument>)</argument_list></macro> <expr_stmt><expr><name>new_files</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct image_file_data</argument>)</argument_list></macro> <expr_stmt><expr><name>old_files</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>new_tr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>old_tr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tr_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>behavior</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>new_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>behavior</name> <operator>=</operator> <call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_BEHAVIOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>behavior</name></expr></argument>, <argument><expr><name>S_BEHAVIOR_PAUSE_UNPAUSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>behavior</name></name> <operator>=</operator> <name>BEHAVIOR_PAUSE_UNPAUSE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>behavior</name></expr></argument>, <argument><expr><name>S_BEHAVIOR_ALWAYS_PLAY</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>behavior</name></name> <operator>=</operator> <name>BEHAVIOR_ALWAYS_PLAY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>behavior</name></name> <operator>=</operator> <name>BEHAVIOR_STOP_RESTART</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>manual</name></name> <operator>=</operator> <operator>(</operator><call><name>astrcmpi</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>S_MODE_MANUAL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tr_name</name> <operator>=</operator> <call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_TRANSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>tr_name</name></expr></argument>, <argument><expr><name>TR_CUT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tr_name</name> <operator>=</operator> <literal type="string">"cut_transition"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>tr_name</name></expr></argument>, <argument><expr><name>TR_SWIPE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tr_name</name> <operator>=</operator> <literal type="string">"swipe_transition"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>tr_name</name></expr></argument>, <argument><expr><name>TR_SLIDE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tr_name</name> <operator>=</operator> <literal type="string">"slide_transition"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tr_name</name> <operator>=</operator> <literal type="string">"fade_transition"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>randomize</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_RANDOMIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>hide</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>tr_name</name></name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>tr_name</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>tr_name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_tr</name> <operator>=</operator> <call><name>obs_source_create_private</name><argument_list>(<argument><expr><name>tr_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_duration</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_SLIDE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_speed</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_TR_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>obs_data_get_array</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_FILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>obs_data_array_count</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>mem_usage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>obs_data_array_item</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>os_dir_t</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>os_opendir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>dir_path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>os_dirent</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>os_readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ent</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>directory</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>os_get_path_extension</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_extension</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir_path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir_path</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_file</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_files</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name><name>dir_path</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>mem_usage</name></name> <operator>&gt;=</operator> <name>MAX_MEM_USAGE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>add_file</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_files</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>mem_usage</name></name> <operator>&gt;=</operator> <name>MAX_MEM_USAGE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>old_files</name><operator>.</operator><name>da</name></name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>da</name></name> <operator>=</operator> <name><name>new_files</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_tr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>old_tr</name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name> <operator>=</operator> <name>new_tr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tr_name</name></expr></argument>, <argument><expr><literal type="string">"cut_transition"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_duration</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_duration</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_duration</name> <operator>+=</operator> <name>new_speed</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_duration</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_duration</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>tr_speed</name></name> <operator>=</operator> <name>new_speed</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>tr_name</name></name> <operator>=</operator> <name>tr_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>slide_time</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>new_duration</name> <operator>/</operator> <literal type="number">1000.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_tr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>old_tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_files</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_files</name><operator>.</operator><name>da</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res_str</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_CUSTOM_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>aspect_only</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>use_auto</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cx_in</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cy_in</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res_str</name></expr></argument>, <argument><expr><name>T_CUSTOM_SIZE_AUTO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>res_str</name></expr></argument>, <argument><expr><literal type="string">"%dx%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cy_in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>aspect_only</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>use_auto</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>res_str</name></expr></argument>, <argument><expr><literal type="string">"%d:%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cy_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>aspect_only</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>use_auto</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_auto</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>cx_f</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>cx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>cy_f</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>cy</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>old_aspect</name> <init>= <expr><name>cx_f</name> <operator>/</operator> <name>cy_f</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>new_aspect</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>cx_in</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>cy_in</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>aspect_only</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>old_aspect</name> <operator>-</operator> <name>new_aspect</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>EPSILON</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_aspect</name> <operator>&gt;</operator> <name>old_aspect</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cx</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>cy_f</name> <operator>*</operator> <name>new_aspect</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cy</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>cx_f</name> <operator>/</operator> <name>new_aspect</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cx</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cx_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cy</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cy_in</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>elapsed</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_transition_set_size</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_transition_set_alignment</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr></argument>, <argument><expr><name>OBS_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_transition_set_scale_type</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr></argument>,

<argument><expr><name>OBS_TRANSITION_SCALE_ASPECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>randomize</name></name> <operator>&amp;&amp;</operator> <name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>=</operator> <call><name>random_file</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_tr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_source_add_active_child</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>new_tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_transition</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ss_play_pause</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>paused</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>manual</name></name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>paused</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ss_restart</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>elapsed</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_transition_set</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr></argument>,

<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>array</name><index>[<expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name></expr>]</index></name><operator>.</operator><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ss_stop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>elapsed</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_transition</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ss_next_slide</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name> <operator>||</operator> <call><name>obs_transition_get_time</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>&gt;=</operator> <name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>do_transition</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ss_previous_slide</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name> <operator>||</operator> <call><name>obs_transition_get_time</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>do_transition</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>play_pause_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <call><name>obs_source_active</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ss_play_pause</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>restart_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <call><name>obs_source_active</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ss_restart</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stop_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <call><name>obs_source_active</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ss_stop</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>next_slide_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>manual</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <call><name>obs_source_active</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ss_next_slide</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>previous_slide_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>manual</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <call><name>obs_source_active</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ss_previous_slide</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ss_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_files</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>da</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ss_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>manual</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>play_pause_hotkey</name></name> <operator>=</operator> <call><name>obs_hotkey_register_source</name><argument_list>(

<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"SlideShow.PlayPause"</literal></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"SlideShow.PlayPause"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>play_pause_hotkey</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>restart_hotkey</name></name> <operator>=</operator> <call><name>obs_hotkey_register_source</name><argument_list>(

<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"SlideShow.Restart"</literal></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"SlideShow.Restart"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>restart_hotkey</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>stop_hotkey</name></name> <operator>=</operator> <call><name>obs_hotkey_register_source</name><argument_list>(

<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"SlideShow.Stop"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"SlideShow.Stop"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>stop_hotkey</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>prev_hotkey</name></name> <operator>=</operator> <call><name>obs_hotkey_register_source</name><argument_list>(

<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"SlideShow.NextSlide"</literal></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"SlideShow.NextSlide"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>next_slide_hotkey</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>prev_hotkey</name></name> <operator>=</operator> <call><name>obs_hotkey_register_source</name><argument_list>(

<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"SlideShow.PreviousSlide"</literal></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"SlideShow.PreviousSlide"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>previous_slide_hotkey</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_update</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ss</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>ss_destroy</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ss_video_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name> <init>= <expr><call><name>get_transition</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>transition</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_source_video_render</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ss_video_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name> <operator>||</operator> <operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>slide_time</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>restart_on_activate</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>randomize</name></name> <operator>&amp;&amp;</operator> <name><name>ss</name><operator>-&gt;</operator><name>use_cut</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>elapsed</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_transition</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>restart_on_activate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>use_cut</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>pause_on_deactivate</name></name> <operator>||</operator> <name><name>ss</name><operator>-&gt;</operator><name>manual</name></name> <operator>||</operator> <name><name>ss</name><operator>-&gt;</operator><name>stop</name></name> <operator>||</operator> <name><name>ss</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>active_transition_source</name> <init>=

<expr><call><name>obs_transition_get_active_source</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>active_transition_source</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>active_transition_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_transition</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>elapsed</name></name> <operator>+=</operator> <name>seconds</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>elapsed</name></name> <operator>&gt;</operator> <name><name>ss</name><operator>-&gt;</operator><name>slide_time</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>elapsed</name></name> <operator>-=</operator> <name><name>ss</name><operator>-&gt;</operator><name>slide_time</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>loop</name></name> <operator>&amp;&amp;</operator> <name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>==</operator> <name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>hide</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_transition</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_transition</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>randomize</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>next</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>next</name> <operator>==</operator> <name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>random_file</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>++</operator><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>&gt;=</operator> <name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>cur_item</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_transition</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ss_audio_render_</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ts_out</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name> <modifier>*</modifier></type><name>audio_output</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name></type> <name>child_audio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>source_ts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_source_audio_pending</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>source_ts</name> <operator>=</operator> <call><name>obs_source_get_audio_timestamp</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source_ts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_get_audio_mix</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child_audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mixers</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mix</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>audio_output</name><operator>-&gt;</operator><name>output</name><index>[<expr><name>mix</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>child_audio</name><operator>.</operator><name>output</name><index>[<expr><name>mix</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>,

<argument><expr><name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <name>MAX_AUDIO_CHANNELS</name> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>ts_out</name> <operator>=</operator> <name>source_ts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ss_audio_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ts_out</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name> <modifier>*</modifier></type><name>audio_output</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name> <init>= <expr><call><name>get_transition</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transition</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>ss_audio_render_</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>ts_out</name></expr></argument>, <argument><expr><name>audio_output</name></expr></argument>, <argument><expr><name>mixers</name></expr></argument>,

<argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ss_enum_sources</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>ss_width</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr> ?</condition><then> <expr><name><name>ss</name><operator>-&gt;</operator><name>cx</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>ss_height</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>ss</name><operator>-&gt;</operator><name>transition</name></name></expr> ?</condition><then> <expr><name><name>ss</name><operator>-&gt;</operator><name>cy</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ss_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_TRANSITION</name></expr></argument>, <argument><expr><literal type="string">"fade"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_SLIDE_TIME</name></expr></argument>, <argument><expr><literal type="number">8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_TR_SPEED</name></expr></argument>, <argument><expr><literal type="number">700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_CUSTOM_SIZE</name></expr></argument>,

<argument><expr><name>T_CUSTOM_SIZE_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_BEHAVIOR</name></expr></argument>,

<argument><expr><name>S_BEHAVIOR_ALWAYS_PLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_MODE</name></expr></argument>, <argument><expr><name>S_MODE_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>S_LOOP</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_filter</name> <init>=

<expr><literal type="string">"Image files (*.bmp *.tga *.png *.jpeg *.jpg *.gif)"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>aspects</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"16:9"</literal></expr>, <expr><literal type="string">"16:10"</literal></expr>, <expr><literal type="string">"4:3"</literal></expr>, <expr><literal type="string">"1:1"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_ASPECTS</name></cpp:macro> <cpp:value>(sizeof(aspects) / sizeof(const char *))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>ss_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_video_info</name></name></type> <name>ovi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>path</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_get_video_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ovi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ovi</name><operator>.</operator><name>base_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cy</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ovi</name><operator>.</operator><name>base_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_BEHAVIOR</name></expr></argument>, <argument><expr><name>T_BEHAVIOR</name></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_BEHAVIOR_ALWAYS_PLAY</name></expr></argument>,

<argument><expr><name>S_BEHAVIOR_ALWAYS_PLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_BEHAVIOR_STOP_RESTART</name></expr></argument>,

<argument><expr><name>S_BEHAVIOR_STOP_RESTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_BEHAVIOR_PAUSE_UNPAUSE</name></expr></argument>,

<argument><expr><name>S_BEHAVIOR_PAUSE_UNPAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_MODE</name></expr></argument>, <argument><expr><name>T_MODE</name></expr></argument>, <argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_MODE_AUTO</name></expr></argument>, <argument><expr><name>S_MODE_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_MODE_MANUAL</name></expr></argument>, <argument><expr><name>S_MODE_MANUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_TRANSITION</name></expr></argument>, <argument><expr><name>T_TRANSITION</name></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_TR_CUT</name></expr></argument>, <argument><expr><name>TR_CUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_TR_FADE</name></expr></argument>, <argument><expr><name>TR_FADE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_TR_SWIPE</name></expr></argument>, <argument><expr><name>TR_SWIPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_TR_SLIDE</name></expr></argument>, <argument><expr><name>TR_SLIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_SLIDE_TIME</name></expr></argument>, <argument><expr><name>T_SLIDE_TIME</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">3600000</literal></expr></argument>,

<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_TR_SPEED</name></expr></argument>, <argument><expr><name>T_TR_SPEED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3600000</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_LOOP</name></expr></argument>, <argument><expr><name>T_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_HIDE</name></expr></argument>, <argument><expr><name>T_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_RANDOMIZE</name></expr></argument>, <argument><expr><name>T_RANDOMIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_CUSTOM_SIZE</name></expr></argument>, <argument><expr><name>T_CUSTOM_SIZE</name></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_EDITABLE</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>T_CUSTOM_SIZE_AUTO</name></expr></argument>, <argument><expr><name>T_CUSTOM_SIZE_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_ASPECTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>aspects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>aspects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%dx%d"</literal></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ss</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>image_file_data</name></name> <modifier>*</modifier></type><name>last</name> <init>= <expr><call><name>da_end</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name><name>last</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>slash</name> <operator>-</operator> <name><name>path</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_properties_add_editable_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>S_FILES</name></expr></argument>, <argument><expr><name>T_FILES</name></expr></argument>,

<argument><expr><name>OBS_EDITABLE_LIST_TYPE_FILES</name></expr></argument>,

<argument><expr><name>file_filter</name></expr></argument>, <argument><expr><name><name>path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ppts</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ss_activate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>behavior</name></name> <operator>==</operator> <name>BEHAVIOR_STOP_RESTART</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>restart_on_activate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>use_cut</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>behavior</name></name> <operator>==</operator> <name>BEHAVIOR_PAUSE_UNPAUSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>pause_on_deactivate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ss_deactivate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slideshow</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>behavior</name></name> <operator>==</operator> <name>BEHAVIOR_PAUSE_UNPAUSE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>pause_on_deactivate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>slideshow_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"slideshow"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_INPUT</name></expr>,

<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name> <operator>|</operator> <name>OBS_SOURCE_CUSTOM_DRAW</name> <operator>|</operator>

<name>OBS_SOURCE_COMPOSITE</name></expr>,

<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>ss_getname</name></expr>,

<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>ss_create</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>ss_destroy</name></expr>,

<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>ss_update</name></expr>,

<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>ss_activate</name></expr>,

<expr><operator>.</operator><name>deactivate</name> <operator>=</operator> <name>ss_deactivate</name></expr>,

<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>ss_video_render</name></expr>,

<expr><operator>.</operator><name>video_tick</name> <operator>=</operator> <name>ss_video_tick</name></expr>,

<expr><operator>.</operator><name>audio_render</name> <operator>=</operator> <name>ss_audio_render</name></expr>,

<expr><operator>.</operator><name>enum_active_sources</name> <operator>=</operator> <name>ss_enum_sources</name></expr>,

<expr><operator>.</operator><name>get_width</name> <operator>=</operator> <name>ss_width</name></expr>,

<expr><operator>.</operator><name>get_height</name> <operator>=</operator> <name>ss_height</name></expr>,

<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>ss_defaults</name></expr>,

<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>ss_properties</name></expr>,

<expr><operator>.</operator><name>icon_type</name> <operator>=</operator> <name>OBS_ICON_TYPE_SLIDESHOW</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
