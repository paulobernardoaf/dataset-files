<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\linux-pulseaudio\pulse-wrapper.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pulse/thread-mainloop.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/base.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pulse-wrapper.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint_fast32_t</name></type> <name>pulse_refs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>pulse_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>pulse_mainloop</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pa_context</name> <modifier>*</modifier></type><name>pulse_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_context_state_changed</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulse_signal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pa_proplist</name> <modifier>*</modifier></type><name>pulse_properties</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pa_proplist</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>pa_proplist_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_proplist_sets</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PA_PROP_APPLICATION_NAME</name></expr></argument>, <argument><expr><literal type="string">"OBS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_proplist_sets</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PA_PROP_APPLICATION_ICON_NAME</name></expr></argument>, <argument><expr><literal type="string">"obs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_proplist_sets</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PA_PROP_MEDIA_ROLE</name></expr></argument>, <argument><expr><literal type="string">"production"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_init_context</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pulse_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_proplist</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>pulse_properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pulse_context</name> <operator>=</operator> <call><name>pa_context_new_with_proplist</name><argument_list>(

<argument><expr><call><name>pa_threaded_mainloop_get_api</name><argument_list>(<argument><expr><name>pulse_mainloop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"OBS"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_set_state_callback</name><argument_list>(<argument><expr><name>pulse_context</name></expr></argument>,

<argument><expr><name>pulse_context_state_changed</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_connect</name><argument_list>(<argument><expr><name>pulse_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PA_CONTEXT_NOAUTOSPAWN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_proplist_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulse_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int_fast32_t</name></type> <name>pulse_context_ready</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pulse_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PA_CONTEXT_IS_GOOD</name><argument_list>(<argument><expr><call><name>pa_context_get_state</name><argument_list>(<argument><expr><name>pulse_context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pulse_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>pa_context_get_state</name><argument_list>(<argument><expr><name>pulse_context</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PA_CONTEXT_READY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pulse_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>pulse_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>pulse_init</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pulse_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pulse_refs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pulse_mainloop</name> <operator>=</operator> <call><name>pa_threaded_mainloop_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_start</name><argument_list>(<argument><expr><name>pulse_mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulse_init_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pulse_refs</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pulse_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>pulse_unref</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pulse_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>pulse_refs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pulse_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pulse_context</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pa_context_disconnect</name><argument_list>(<argument><expr><name>pulse_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_unref</name><argument_list>(<argument><expr><name>pulse_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pulse_context</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pulse_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pulse_mainloop</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pa_threaded_mainloop_stop</name><argument_list>(<argument><expr><name>pulse_mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_free</name><argument_list>(<argument><expr><name>pulse_mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pulse_mainloop</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pulse_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>pulse_lock</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name>pulse_mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>pulse_unlock</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name>pulse_mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>pulse_wait</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name>pulse_mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>pulse_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>wait_for_accept</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name>pulse_mainloop</name></expr></argument>, <argument><expr><name>wait_for_accept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>pulse_accept</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pa_threaded_mainloop_accept</name><argument_list>(<argument><expr><name>pulse_mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>pulse_get_source_info_list</name><parameter_list>(<parameter><decl><type><name>pa_source_info_cb_t</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pulse_context_ready</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pulse_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name> <init>=

<expr><call><name>pa_context_get_source_info_list</name><argument_list>(<argument><expr><name>pulse_context</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pulse_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>pa_operation_get_state</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PA_OPERATION_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pulse_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulse_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>pulse_get_sink_info_list</name><parameter_list>(<parameter><decl><type><name>pa_sink_info_cb_t</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pulse_context_ready</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pulse_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name> <init>=

<expr><call><name>pa_context_get_sink_info_list</name><argument_list>(<argument><expr><name>pulse_context</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pulse_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>pa_operation_get_state</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PA_OPERATION_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pulse_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulse_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>pulse_get_source_info</name><parameter_list>(<parameter><decl><type><name>pa_source_info_cb_t</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pulse_context_ready</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pulse_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>pa_context_get_source_info_by_name</name><argument_list>(

<argument><expr><name>pulse_context</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pulse_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>pa_operation_get_state</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PA_OPERATION_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pulse_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulse_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int_fast32_t</name></type> <name>pulse_get_server_info</name><parameter_list>(<parameter><decl><type><name>pa_server_info_cb_t</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pulse_context_ready</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pulse_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name> <init>=

<expr><call><name>pa_context_get_server_info</name><argument_list>(<argument><expr><name>pulse_context</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pulse_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>pa_operation_get_state</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PA_OPERATION_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pulse_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulse_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>pa_stream</name> <modifier>*</modifier></type><name>pulse_stream_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pa_sample_spec</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>pa_channel_map</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pulse_context_ready</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pulse_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_proplist</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>pulse_properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name> <init>=

<expr><call><name>pa_stream_new_with_proplist</name><argument_list>(<argument><expr><name>pulse_context</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_proplist_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulse_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

</unit>
