<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-transitions\transition-stinger.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMING_TIME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMING_FRAME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<enum>enum <name>fade_style</name> <block>{ <decl><name>FADE_STYLE_FADE_OUT_FADE_IN</name></decl>, <decl><name>FADE_STYLE_CROSS_FADE</name></decl> }</block>;</enum>

<struct>struct <name>stinger_info</name> <block>{

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>media_source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>duration_ns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>duration_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>transition_point_ns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>transition_point_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>transition_point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>transition_a_mul</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>transition_b_mul</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>transitioning</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>transition_point_is_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>monitoring_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>fade_style</name></name></type> <name>fade_style</name></decl>;</decl_stmt>

<function_decl><type><name>float</name></type> (<modifier>*</modifier><name>mix_a</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float</name></type> (<modifier>*</modifier><name>mix_b</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stinger_get_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>type_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"StingerTransition"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>mix_a_fade_in_out</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>mix_b_fade_in_out</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>mix_a_cross_fade</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>mix_b_cross_fade</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stinger_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stinger_info</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>media_settings</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>media_settings</name></expr></argument>, <argument><expr><literal type="string">"local_file"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_init_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><call><name>obs_source_get_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">" (Stinger)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name> <operator>=</operator> <call><name>obs_source_create_private</name><argument_list>(<argument><expr><literal type="string">"ffmpeg_source"</literal></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><name>media_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>media_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>point</name> <init>= <expr><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"transition_point"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transition_point_is_frame</name></name> <operator>=</operator> <call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"tp_type"</literal></expr></argument>)</argument_list></call> <operator>==</operator>

<name>TIMING_FRAME</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>transition_point_is_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transition_point_frame</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>point</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transition_point_ns</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>point</name> <operator>*</operator> <literal type="number">1000000LL</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>monitoring_type</name></name> <operator>=</operator>

<operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"audio_monitoring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_set_monitoring_type</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>monitoring_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fade_style</name></name> <operator>=</operator>

<operator>(</operator>enum <name>fade_style</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"audio_fade_style"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fade_style</name></name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<case>case <expr><name>FADE_STYLE_FADE_OUT_FADE_IN</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_a</name></name> <operator>=</operator> <name>mix_a_fade_in_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_b</name></name> <operator>=</operator> <name>mix_b_fade_in_out</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FADE_STYLE_CROSS_FADE</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_a</name></name> <operator>=</operator> <name>mix_a_cross_fade</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_b</name></name> <operator>=</operator> <name>mix_b_cross_fade</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stinger_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stinger_info</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_a</name></name> <operator>=</operator> <name>mix_a_fade_in_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_b</name></name> <operator>=</operator> <name>mix_b_fade_in_out</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_transition_enable_fixed</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_update</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stinger_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stinger_info</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stinger_video_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stinger_info</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><call><name>obs_transition_get_time</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_a</name> <init>= <expr><name>t</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>transition_point</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_transition_target</name></name></type> <name>target</name> <init>= <expr><ternary><condition><expr><name>use_a</name></expr> ?</condition><then> <expr><name>OBS_TRANSITION_SOURCE_A</name></expr>

</then><else>: <expr><name>OBS_TRANSITION_SOURCE_B</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_transition_video_render_direct</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>source_cx</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>obs_source_get_width</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>source_cy</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>obs_source_get_height</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>media_cx</name> <init>= <expr><call><name>obs_source_get_width</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>media_cy</name> <init>= <expr><call><name>obs_source_get_height</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>media_cx</name> <operator>||</operator> <operator>!</operator><name>media_cy</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale_x</name> <init>= <expr><name>source_cx</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>media_cx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale_y</name> <init>= <expr><name>source_cy</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>media_cy</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_matrix_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_matrix_scale3f</name><argument_list>(<argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_video_render</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_matrix_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>calc_fade</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>mul</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>*=</operator> <name>mul</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>t</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><name>t</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>mix_a_fade_in_out</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stinger_info</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><literal type="number">1.0f</literal> <operator>-</operator> <call><name>calc_fade</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>transition_a_mul</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>mix_b_fade_in_out</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stinger_info</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><literal type="number">1.0f</literal> <operator>-</operator> <call><name>calc_fade</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <name>t</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>transition_b_mul</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>mix_a_cross_fade</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1.0f</literal> <operator>-</operator> <name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>mix_b_cross_fade</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>stinger_audio_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ts_out</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stinger_info</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_audio_pending</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>obs_source_get_audio_timestamp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>obs_transition_audio_render</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>ts_out</name></expr></argument>, <argument><expr><name>audio</name></expr></argument>,

<argument><expr><name>mixers</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>,

<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mix_a</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mix_b</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>success</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>ts_out</name> <operator>||</operator> <name>ts</name> <operator>&lt;</operator> <operator>*</operator><name>ts_out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ts_out</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name></type> <name>child_audio</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_source_get_audio_mix</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child_audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mixers</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mix</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>audio</name><operator>-&gt;</operator><name>output</name><index>[<expr><name>mix</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>child_audio</name><operator>.</operator><name>output</name><index>[<expr><name>mix</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>in</name> <operator>+</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>in</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stinger_transition_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stinger_info</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>calldata_t</name></type> <name>cd</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>proc_handler_t</name> <modifier>*</modifier></type><name>ph</name> <init>=

<expr><call><name>obs_source_get_proc_handler</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>transitioning</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>proc_handler_call</name><argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><literal type="string">"restart"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>proc_handler_call</name><argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><literal type="string">"get_duration"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>proc_handler_call</name><argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><literal type="string">"get_nb_frames"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>duration_ns</name></name> <operator>=</operator>

<operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>calldata_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"duration"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">250000000ULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>duration_frames</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>calldata_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"num_frames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>transition_point_is_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transition_point</name></name> <operator>=</operator>

<operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>transition_point_frame</name></name> <operator>/</operator>

<operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>duration_frames</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transition_point</name></name> <operator>=</operator>

<operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>transition_point_ns</name></name> <operator>/</operator>

<operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>duration_ns</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>transition_point</name></name> <operator>&gt;</operator> <literal type="number">0.999f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transition_point</name></name> <operator>=</operator> <literal type="number">0.999f</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>transition_point</name></name> <operator>&lt;</operator> <literal type="number">0.001f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transition_point</name></name> <operator>=</operator> <literal type="number">0.001f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transition_a_mul</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>transition_point</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transition_b_mul</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>transition_point</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_transition_enable_fixed</name><argument_list>(

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>duration_ns</name></name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_add_active_child</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitioning</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stinger_transition_stop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stinger_info</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_source_remove_active_child</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitioning</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stinger_enum_active_sources</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>enum_callback</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stinger_info</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>transitioning</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>enum_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stinger_enum_all_sources</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>enum_callback</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stinger_info</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>enum_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>media_source</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FILTER</name></cpp:macro> <cpp:value>"Video Files (*.mp4 *.ts *.mov *.wmv *.flv *.mkv *.avi *.gif *.webm);;"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>transition_point_type_modified</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name></decl></parameter>,

<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>type</name> <init>= <expr><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"tp_type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"transition_point"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TIMING_TIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_property_set_description</name><argument_list>(

<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"TransitionPoint"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_int_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>obs_property_set_description</name><argument_list>(

<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"TransitionPointFrame"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_int_set_suffix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>stinger_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_properties_set_flags</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>OBS_PROPERTIES_DEFER_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_path</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"VideoFile"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>OBS_PATH_FILE</name></expr></argument>, <argument><expr><name>FILE_FILTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>obs_properties_add_list</name><argument_list>(

<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"tp_type"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"TransitionPointType"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>, <argument><expr><name>OBS_COMBO_FORMAT_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"TransitionPointTypeTime"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>TIMING_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(

<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"TransitionPointTypeFrame"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TIMING_FRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>transition_point_type_modified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"transition_point"</literal></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"TransitionPoint"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">120000</literal></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>monitor_list</name> <init>= <expr><call><name>obs_properties_add_list</name><argument_list>(

<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"audio_monitoring"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"AudioMonitoring"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>, <argument><expr><name>OBS_COMBO_FORMAT_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>monitor_list</name></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"AudioMonitoring.None"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>OBS_MONITORING_TYPE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(

<argument><expr><name>monitor_list</name></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"AudioMonitoring.MonitorOnly"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>OBS_MONITORING_TYPE_MONITOR_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>monitor_list</name></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"AudioMonitoring.Both"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>OBS_MONITORING_TYPE_MONITOR_AND_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>audio_fade_style</name> <init>= <expr><call><name>obs_properties_add_list</name><argument_list>(

<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"audio_fade_style"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"AudioFadeStyle"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>, <argument><expr><name>OBS_COMBO_FORMAT_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(

<argument><expr><name>audio_fade_style</name></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"AudioFadeStyle.FadeOutFadeIn"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>FADE_STYLE_FADE_OUT_FADE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>audio_fade_style</name></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"AudioFadeStyle.CrossFade"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>FADE_STYLE_CROSS_FADE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ppts</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>stinger_transition</name> <init>= <expr><block>{

<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"obs_stinger_transition"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>,

<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>stinger_get_name</name></expr>,

<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>stinger_create</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>stinger_destroy</name></expr>,

<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>stinger_update</name></expr>,

<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>stinger_video_render</name></expr>,

<expr><operator>.</operator><name>audio_render</name> <operator>=</operator> <name>stinger_audio_render</name></expr>,

<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>stinger_properties</name></expr>,

<expr><operator>.</operator><name>enum_active_sources</name> <operator>=</operator> <name>stinger_enum_active_sources</name></expr>,

<expr><operator>.</operator><name>enum_all_sources</name> <operator>=</operator> <name>stinger_enum_all_sources</name></expr>,

<expr><operator>.</operator><name>transition_start</name> <operator>=</operator> <name>stinger_transition_start</name></expr>,

<expr><operator>.</operator><name>transition_stop</name> <operator>=</operator> <name>stinger_transition_stop</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
