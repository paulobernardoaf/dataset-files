<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\win-capture\d3d8-api\d3d8types.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DIRECT3D_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRECT3D_VERSION</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>DIRECT3D_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1200</literal></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4201</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_X86_</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_IA64_</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>4</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>D3DCOLOR_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>DWORD</name></type> <name>D3DCOLOR</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCOLOR_DEFINED</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCOLOR_ARGB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>r</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((D3DCOLOR)((((a)&amp;0xff)&lt;&lt;24)|(((r)&amp;0xff)&lt;&lt;16)|(((g)&amp;0xff)&lt;&lt;8)|((b)&amp;0xff)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCOLOR_RGBA</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>D3DCOLOR_ARGB(a,r,g,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCOLOR_XRGB</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>D3DCOLOR_ARGB(0xff,r,g,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCOLOR_COLORVALUE</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>D3DCOLOR_RGBA((DWORD)((r)*255.f),(DWORD)((g)*255.f),(DWORD)((b)*255.f),(DWORD)((a)*255.f))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>D3DVECTOR_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>_D3DVECTOR</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>z</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DVECTOR</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVECTOR_DEFINED</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>D3DCOLORVALUE_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>_D3DCOLORVALUE</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DCOLORVALUE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCOLORVALUE_DEFINED</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>D3DRECT_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>_D3DRECT</name> <block>{

<decl_stmt><decl><type><name>LONG</name></type> <name>x1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>y1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>x2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>y2</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DRECT</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DRECT_DEFINED</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>D3DMATRIX_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>_D3DMATRIX</name> <block>{

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>float</name></type> <name>_11</name></decl>, <name>_12</name>, <name>_13</name>, <name>_14</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>_21</name></decl>, <name>_22</name>, <name>_23</name>, <name>_24</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>_31</name></decl>, <name>_32</name>, <name>_33</name>, <name>_34</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>_41</name></decl>, <name>_42</name>, <name>_43</name>, <name>_44</name>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name>float</name></type> <name><name>m</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</union>

}</block></struct></type> <name>D3DMATRIX</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DMATRIX_DEFINED</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>_D3DVIEWPORT8</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>X</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Y</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>Width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>MinZ</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>MaxZ</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DVIEWPORT8</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DMAXUSERCLIPPLANES</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCLIPPLANE0</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCLIPPLANE1</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCLIPPLANE2</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCLIPPLANE3</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCLIPPLANE4</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCLIPPLANE5</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCS_LEFT</name></cpp:macro> <cpp:value>0x00000001L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCS_RIGHT</name></cpp:macro> <cpp:value>0x00000002L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCS_TOP</name></cpp:macro> <cpp:value>0x00000004L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCS_BOTTOM</name></cpp:macro> <cpp:value>0x00000008L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCS_FRONT</name></cpp:macro> <cpp:value>0x00000010L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCS_BACK</name></cpp:macro> <cpp:value>0x00000020L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCS_PLANE0</name></cpp:macro> <cpp:value>0x00000040L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCS_PLANE1</name></cpp:macro> <cpp:value>0x00000080L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCS_PLANE2</name></cpp:macro> <cpp:value>0x00000100L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCS_PLANE3</name></cpp:macro> <cpp:value>0x00000200L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCS_PLANE4</name></cpp:macro> <cpp:value>0x00000400L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCS_PLANE5</name></cpp:macro> <cpp:value>0x00000800L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCS_ALL</name></cpp:macro> <cpp:value>(D3DCS_LEFT | D3DCS_RIGHT | D3DCS_TOP | D3DCS_BOTTOM | D3DCS_FRONT | D3DCS_BACK | D3DCS_PLANE0 | D3DCS_PLANE1 | D3DCS_PLANE2 | D3DCS_PLANE3 | D3DCS_PLANE4 | D3DCS_PLANE5)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_D3DCLIPSTATUS8</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>ClipUnion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ClipIntersection</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DCLIPSTATUS8</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DMATERIAL8</name> <block>{

<decl_stmt><decl><type><name>D3DCOLORVALUE</name></type> <name>Diffuse</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>D3DCOLORVALUE</name></type> <name>Ambient</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>D3DCOLORVALUE</name></type> <name>Specular</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>D3DCOLORVALUE</name></type> <name>Emissive</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>Power</name></decl>;</decl_stmt> 

}</block></struct></type> <name>D3DMATERIAL8</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DLIGHTTYPE</name> <block>{

<decl><name>D3DLIGHT_POINT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DLIGHT_SPOT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DLIGHT_DIRECTIONAL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DLIGHT_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DLIGHTTYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DLIGHT8</name> <block>{

<decl_stmt><decl><type><name>D3DLIGHTTYPE</name></type> <name>Type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>D3DCOLORVALUE</name></type> <name>Diffuse</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>D3DCOLORVALUE</name></type> <name>Specular</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>D3DCOLORVALUE</name></type> <name>Ambient</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>D3DVECTOR</name></type> <name>Position</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>D3DVECTOR</name></type> <name>Direction</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>Range</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>Falloff</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>Attenuation0</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>Attenuation1</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>Attenuation2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>Theta</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>Phi</name></decl>;</decl_stmt> 

}</block></struct></type> <name>D3DLIGHT8</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCLEAR_TARGET</name></cpp:macro> <cpp:value>0x00000001l</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCLEAR_ZBUFFER</name></cpp:macro> <cpp:value>0x00000002l</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCLEAR_STENCIL</name></cpp:macro> <cpp:value>0x00000004l</cpp:value></cpp:define> 

<typedef>typedef <type><enum>enum <name>_D3DSHADEMODE</name> <block>{

<decl><name>D3DSHADE_FLAT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DSHADE_GOURAUD</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DSHADE_PHONG</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DSHADE_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DSHADEMODE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DFILLMODE</name> <block>{

<decl><name>D3DFILL_POINT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DFILL_WIREFRAME</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DFILL_SOLID</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DFILL_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DFILLMODE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DLINEPATTERN</name> <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>wRepeatFactor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wLinePattern</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DLINEPATTERN</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DBLEND</name> <block>{

<decl><name>D3DBLEND_ZERO</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DBLEND_ONE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DBLEND_SRCCOLOR</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DBLEND_INVSRCCOLOR</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>D3DBLEND_SRCALPHA</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>D3DBLEND_INVSRCALPHA</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>D3DBLEND_DESTALPHA</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>D3DBLEND_INVDESTALPHA</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>D3DBLEND_DESTCOLOR</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>D3DBLEND_INVDESTCOLOR</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>D3DBLEND_SRCALPHASAT</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,

<decl><name>D3DBLEND_BOTHSRCALPHA</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>D3DBLEND_BOTHINVSRCALPHA</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,

<decl><name>D3DBLEND_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DBLEND</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DBLENDOP</name> <block>{

<decl><name>D3DBLENDOP_ADD</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DBLENDOP_SUBTRACT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DBLENDOP_REVSUBTRACT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DBLENDOP_MIN</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>D3DBLENDOP_MAX</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>D3DBLENDOP_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DBLENDOP</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DTEXTUREADDRESS</name> <block>{

<decl><name>D3DTADDRESS_WRAP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DTADDRESS_MIRROR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DTADDRESS_CLAMP</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DTADDRESS_BORDER</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>D3DTADDRESS_MIRRORONCE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>D3DTADDRESS_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DTEXTUREADDRESS</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DCULL</name> <block>{

<decl><name>D3DCULL_NONE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DCULL_CW</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DCULL_CCW</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DCULL_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DCULL</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DCMPFUNC</name> <block>{

<decl><name>D3DCMP_NEVER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DCMP_LESS</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DCMP_EQUAL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DCMP_LESSEQUAL</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>D3DCMP_GREATER</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>D3DCMP_NOTEQUAL</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>D3DCMP_GREATEREQUAL</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>D3DCMP_ALWAYS</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>D3DCMP_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DCMPFUNC</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DSTENCILOP</name> <block>{

<decl><name>D3DSTENCILOP_KEEP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DSTENCILOP_ZERO</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DSTENCILOP_REPLACE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DSTENCILOP_INCRSAT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>D3DSTENCILOP_DECRSAT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>D3DSTENCILOP_INVERT</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>D3DSTENCILOP_INCR</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>D3DSTENCILOP_DECR</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>D3DSTENCILOP_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DSTENCILOP</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DFOGMODE</name> <block>{

<decl><name>D3DFOG_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>D3DFOG_EXP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DFOG_EXP2</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DFOG_LINEAR</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DFOG_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DFOGMODE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DZBUFFERTYPE</name> <block>{

<decl><name>D3DZB_FALSE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>D3DZB_TRUE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>D3DZB_USEW</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>D3DZB_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DZBUFFERTYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DPRIMITIVETYPE</name> <block>{

<decl><name>D3DPT_POINTLIST</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DPT_LINELIST</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DPT_LINESTRIP</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DPT_TRIANGLELIST</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>D3DPT_TRIANGLESTRIP</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>D3DPT_TRIANGLEFAN</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>D3DPT_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DPRIMITIVETYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DTRANSFORMSTATETYPE</name> <block>{

<decl><name>D3DTS_VIEW</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DTS_PROJECTION</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DTS_TEXTURE0</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>D3DTS_TEXTURE1</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,

<decl><name>D3DTS_TEXTURE2</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,

<decl><name>D3DTS_TEXTURE3</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,

<decl><name>D3DTS_TEXTURE4</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,

<decl><name>D3DTS_TEXTURE5</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,

<decl><name>D3DTS_TEXTURE6</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,

<decl><name>D3DTS_TEXTURE7</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,

<decl><name>D3DTS_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DTRANSFORMSTATETYPE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTS_WORLDMATRIX</name><parameter_list>(<parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(D3DTRANSFORMSTATETYPE)(index + 256)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTS_WORLD</name></cpp:macro> <cpp:value>D3DTS_WORLDMATRIX(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTS_WORLD1</name></cpp:macro> <cpp:value>D3DTS_WORLDMATRIX(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTS_WORLD2</name></cpp:macro> <cpp:value>D3DTS_WORLDMATRIX(2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTS_WORLD3</name></cpp:macro> <cpp:value>D3DTS_WORLDMATRIX(3)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_D3DRENDERSTATETYPE</name> <block>{

<decl><name>D3DRS_ZENABLE</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 

<decl><name>D3DRS_FILLMODE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 

<decl><name>D3DRS_SHADEMODE</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, 

<decl><name>D3DRS_LINEPATTERN</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, 

<decl><name>D3DRS_ZWRITEENABLE</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>, 

<decl><name>D3DRS_ALPHATESTENABLE</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>, 

<decl><name>D3DRS_LASTPIXEL</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, 

<decl><name>D3DRS_SRCBLEND</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>, 

<decl><name>D3DRS_DESTBLEND</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>, 

<decl><name>D3DRS_CULLMODE</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>, 

<decl><name>D3DRS_ZFUNC</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>, 

<decl><name>D3DRS_ALPHAREF</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>, 

<decl><name>D3DRS_ALPHAFUNC</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>, 

<decl><name>D3DRS_DITHERENABLE</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>, 

<decl><name>D3DRS_ALPHABLENDENABLE</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>, 

<decl><name>D3DRS_FOGENABLE</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>, 

<decl><name>D3DRS_SPECULARENABLE</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>, 

<decl><name>D3DRS_ZVISIBLE</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>, 

<decl><name>D3DRS_FOGCOLOR</name> <init>= <expr><literal type="number">34</literal></expr></init></decl>, 

<decl><name>D3DRS_FOGTABLEMODE</name> <init>= <expr><literal type="number">35</literal></expr></init></decl>, 

<decl><name>D3DRS_FOGSTART</name> <init>= <expr><literal type="number">36</literal></expr></init></decl>, 

<decl><name>D3DRS_FOGEND</name> <init>= <expr><literal type="number">37</literal></expr></init></decl>, 

<decl><name>D3DRS_FOGDENSITY</name> <init>= <expr><literal type="number">38</literal></expr></init></decl>, 

<decl><name>D3DRS_EDGEANTIALIAS</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>, 

<decl><name>D3DRS_ZBIAS</name> <init>= <expr><literal type="number">47</literal></expr></init></decl>, 

<decl><name>D3DRS_RANGEFOGENABLE</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>, 

<decl><name>D3DRS_STENCILENABLE</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>, 

<decl><name>D3DRS_STENCILFAIL</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>, 

<decl><name>D3DRS_STENCILZFAIL</name> <init>= <expr><literal type="number">54</literal></expr></init></decl>, 

<decl><name>D3DRS_STENCILPASS</name> <init>= <expr><literal type="number">55</literal></expr></init></decl>, 

<decl><name>D3DRS_STENCILFUNC</name> <init>= <expr><literal type="number">56</literal></expr></init></decl>, 

<decl><name>D3DRS_STENCILREF</name> <init>= <expr><literal type="number">57</literal></expr></init></decl>, 

<decl><name>D3DRS_STENCILMASK</name> <init>= <expr><literal type="number">58</literal></expr></init></decl>, 

<decl><name>D3DRS_STENCILWRITEMASK</name> <init>= <expr><literal type="number">59</literal></expr></init></decl>, 

<decl><name>D3DRS_TEXTUREFACTOR</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>, 

<decl><name>D3DRS_WRAP0</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>, 

<decl><name>D3DRS_WRAP1</name> <init>= <expr><literal type="number">129</literal></expr></init></decl>, 

<decl><name>D3DRS_WRAP2</name> <init>= <expr><literal type="number">130</literal></expr></init></decl>, 

<decl><name>D3DRS_WRAP3</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>, 

<decl><name>D3DRS_WRAP4</name> <init>= <expr><literal type="number">132</literal></expr></init></decl>, 

<decl><name>D3DRS_WRAP5</name> <init>= <expr><literal type="number">133</literal></expr></init></decl>, 

<decl><name>D3DRS_WRAP6</name> <init>= <expr><literal type="number">134</literal></expr></init></decl>, 

<decl><name>D3DRS_WRAP7</name> <init>= <expr><literal type="number">135</literal></expr></init></decl>, 

<decl><name>D3DRS_CLIPPING</name> <init>= <expr><literal type="number">136</literal></expr></init></decl>,

<decl><name>D3DRS_LIGHTING</name> <init>= <expr><literal type="number">137</literal></expr></init></decl>,

<decl><name>D3DRS_AMBIENT</name> <init>= <expr><literal type="number">139</literal></expr></init></decl>,

<decl><name>D3DRS_FOGVERTEXMODE</name> <init>= <expr><literal type="number">140</literal></expr></init></decl>,

<decl><name>D3DRS_COLORVERTEX</name> <init>= <expr><literal type="number">141</literal></expr></init></decl>,

<decl><name>D3DRS_LOCALVIEWER</name> <init>= <expr><literal type="number">142</literal></expr></init></decl>,

<decl><name>D3DRS_NORMALIZENORMALS</name> <init>= <expr><literal type="number">143</literal></expr></init></decl>,

<decl><name>D3DRS_DIFFUSEMATERIALSOURCE</name> <init>= <expr><literal type="number">145</literal></expr></init></decl>,

<decl><name>D3DRS_SPECULARMATERIALSOURCE</name> <init>= <expr><literal type="number">146</literal></expr></init></decl>,

<decl><name>D3DRS_AMBIENTMATERIALSOURCE</name> <init>= <expr><literal type="number">147</literal></expr></init></decl>,

<decl><name>D3DRS_EMISSIVEMATERIALSOURCE</name> <init>= <expr><literal type="number">148</literal></expr></init></decl>,

<decl><name>D3DRS_VERTEXBLEND</name> <init>= <expr><literal type="number">151</literal></expr></init></decl>,

<decl><name>D3DRS_CLIPPLANEENABLE</name> <init>= <expr><literal type="number">152</literal></expr></init></decl>,

<decl><name>D3DRS_SOFTWAREVERTEXPROCESSING</name> <init>= <expr><literal type="number">153</literal></expr></init></decl>,

<decl><name>D3DRS_POINTSIZE</name> <init>= <expr><literal type="number">154</literal></expr></init></decl>, 

<decl><name>D3DRS_POINTSIZE_MIN</name> <init>= <expr><literal type="number">155</literal></expr></init></decl>, 

<decl><name>D3DRS_POINTSPRITEENABLE</name> <init>= <expr><literal type="number">156</literal></expr></init></decl>, 

<decl><name>D3DRS_POINTSCALEENABLE</name> <init>= <expr><literal type="number">157</literal></expr></init></decl>, 

<decl><name>D3DRS_POINTSCALE_A</name> <init>= <expr><literal type="number">158</literal></expr></init></decl>, 

<decl><name>D3DRS_POINTSCALE_B</name> <init>= <expr><literal type="number">159</literal></expr></init></decl>, 

<decl><name>D3DRS_POINTSCALE_C</name> <init>= <expr><literal type="number">160</literal></expr></init></decl>, 

<decl><name>D3DRS_MULTISAMPLEANTIALIAS</name> <init>= <expr><literal type="number">161</literal></expr></init></decl>, 

<decl><name>D3DRS_MULTISAMPLEMASK</name> <init>= <expr><literal type="number">162</literal></expr></init></decl>, 

<decl><name>D3DRS_PATCHEDGESTYLE</name> <init>= <expr><literal type="number">163</literal></expr></init></decl>, 

<decl><name>D3DRS_PATCHSEGMENTS</name> <init>= <expr><literal type="number">164</literal></expr></init></decl>, 

<decl><name>D3DRS_DEBUGMONITORTOKEN</name> <init>= <expr><literal type="number">165</literal></expr></init></decl>, 

<decl><name>D3DRS_POINTSIZE_MAX</name> <init>= <expr><literal type="number">166</literal></expr></init></decl>, 

<decl><name>D3DRS_INDEXEDVERTEXBLENDENABLE</name> <init>= <expr><literal type="number">167</literal></expr></init></decl>,

<decl><name>D3DRS_COLORWRITEENABLE</name> <init>= <expr><literal type="number">168</literal></expr></init></decl>, 

<decl><name>D3DRS_TWEENFACTOR</name> <init>= <expr><literal type="number">170</literal></expr></init></decl>, 

<decl><name>D3DRS_BLENDOP</name> <init>= <expr><literal type="number">171</literal></expr></init></decl>, 

<decl><name>D3DRS_POSITIONORDER</name> <init>= <expr><literal type="number">172</literal></expr></init></decl>, 

<decl><name>D3DRS_NORMALORDER</name> <init>= <expr><literal type="number">173</literal></expr></init></decl>, 

<decl><name>D3DRS_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DRENDERSTATETYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DMATERIALCOLORSOURCE</name>

<block>{

<decl><name>D3DMCS_MATERIAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>D3DMCS_COLOR1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>D3DMCS_COLOR2</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>D3DMCS_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DMATERIALCOLORSOURCE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DRENDERSTATE_WRAPBIAS</name></cpp:macro> <cpp:value>128UL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DWRAP_U</name></cpp:macro> <cpp:value>0x00000001L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DWRAP_V</name></cpp:macro> <cpp:value>0x00000002L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DWRAP_W</name></cpp:macro> <cpp:value>0x00000004L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DWRAPCOORD_0</name></cpp:macro> <cpp:value>0x00000001L</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DWRAPCOORD_1</name></cpp:macro> <cpp:value>0x00000002L</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DWRAPCOORD_2</name></cpp:macro> <cpp:value>0x00000004L</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DWRAPCOORD_3</name></cpp:macro> <cpp:value>0x00000008L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCOLORWRITEENABLE_RED</name></cpp:macro> <cpp:value>(1L&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCOLORWRITEENABLE_GREEN</name></cpp:macro> <cpp:value>(1L&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCOLORWRITEENABLE_BLUE</name></cpp:macro> <cpp:value>(1L&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCOLORWRITEENABLE_ALPHA</name></cpp:macro> <cpp:value>(1L&lt;&lt;3)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_D3DTEXTURESTAGESTATETYPE</name>

<block>{

<decl><name>D3DTSS_COLOROP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>D3DTSS_COLORARG1</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>D3DTSS_COLORARG2</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 

<decl><name>D3DTSS_ALPHAOP</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 

<decl><name>D3DTSS_ALPHAARG1</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 

<decl><name>D3DTSS_ALPHAARG2</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 

<decl><name>D3DTSS_BUMPENVMAT00</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 

<decl><name>D3DTSS_BUMPENVMAT01</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 

<decl><name>D3DTSS_BUMPENVMAT10</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, 

<decl><name>D3DTSS_BUMPENVMAT11</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, 

<decl><name>D3DTSS_TEXCOORDINDEX</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>, 

<decl><name>D3DTSS_ADDRESSU</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>, 

<decl><name>D3DTSS_ADDRESSV</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>, 

<decl><name>D3DTSS_BORDERCOLOR</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>, 

<decl><name>D3DTSS_MAGFILTER</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, 

<decl><name>D3DTSS_MINFILTER</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>, 

<decl><name>D3DTSS_MIPFILTER</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>, 

<decl><name>D3DTSS_MIPMAPLODBIAS</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>, 

<decl><name>D3DTSS_MAXMIPLEVEL</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>, 

<decl><name>D3DTSS_MAXANISOTROPY</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>, 

<decl><name>D3DTSS_BUMPENVLSCALE</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>, 

<decl><name>D3DTSS_BUMPENVLOFFSET</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>, 

<decl><name>D3DTSS_TEXTURETRANSFORMFLAGS</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>, 

<decl><name>D3DTSS_ADDRESSW</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>, 

<decl><name>D3DTSS_COLORARG0</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>, 

<decl><name>D3DTSS_ALPHAARG0</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>, 

<decl><name>D3DTSS_RESULTARG</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>, 

<decl><name>D3DTSS_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DTEXTURESTAGESTATETYPE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTSS_TCI_PASSTHRU</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTSS_TCI_CAMERASPACENORMAL</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTSS_TCI_CAMERASPACEPOSITION</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR</name></cpp:macro> <cpp:value>0x00030000</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_D3DTEXTUREOP</name>

<block>{

<decl><name>D3DTOP_DISABLE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>D3DTOP_SELECTARG1</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>D3DTOP_SELECTARG2</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DTOP_MODULATE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 

<decl><name>D3DTOP_MODULATE2X</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 

<decl><name>D3DTOP_MODULATE4X</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 

<decl><name>D3DTOP_ADD</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 

<decl><name>D3DTOP_ADDSIGNED</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 

<decl><name>D3DTOP_ADDSIGNED2X</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, 

<decl><name>D3DTOP_SUBTRACT</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, 

<decl><name>D3DTOP_ADDSMOOTH</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>, 

<decl><name>D3DTOP_BLENDDIFFUSEALPHA</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>, 

<decl><name>D3DTOP_BLENDTEXTUREALPHA</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>, 

<decl><name>D3DTOP_BLENDFACTORALPHA</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>, 

<decl><name>D3DTOP_BLENDTEXTUREALPHAPM</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>, 

<decl><name>D3DTOP_BLENDCURRENTALPHA</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, 

<decl><name>D3DTOP_PREMODULATE</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>, 

<decl><name>D3DTOP_MODULATEALPHA_ADDCOLOR</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>, 

<decl><name>D3DTOP_MODULATECOLOR_ADDALPHA</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>, 

<decl><name>D3DTOP_MODULATEINVALPHA_ADDCOLOR</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>, 

<decl><name>D3DTOP_MODULATEINVCOLOR_ADDALPHA</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>, 

<decl><name>D3DTOP_BUMPENVMAP</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>, 

<decl><name>D3DTOP_BUMPENVMAPLUMINANCE</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>, 

<decl><name>D3DTOP_DOTPRODUCT3</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,

<decl><name>D3DTOP_MULTIPLYADD</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>, 

<decl><name>D3DTOP_LERP</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>, 

<decl><name>D3DTOP_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>,

}</block></enum></type> <name>D3DTEXTUREOP</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTA_SELECTMASK</name></cpp:macro> <cpp:value>0x0000000f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTA_DIFFUSE</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTA_CURRENT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTA_TEXTURE</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTA_TFACTOR</name></cpp:macro> <cpp:value>0x00000003</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTA_SPECULAR</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTA_TEMP</name></cpp:macro> <cpp:value>0x00000005</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTA_COMPLEMENT</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DTA_ALPHAREPLICATE</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define> 

<typedef>typedef <type><enum>enum <name>_D3DTEXTUREFILTERTYPE</name>

<block>{

<decl><name>D3DTEXF_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>D3DTEXF_POINT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>D3DTEXF_LINEAR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>D3DTEXF_ANISOTROPIC</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 

<decl><name>D3DTEXF_FLATCUBIC</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 

<decl><name>D3DTEXF_GAUSSIANCUBIC</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 

<decl><name>D3DTEXF_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DTEXTUREFILTERTYPE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DPV_DONOTCOPYDATA</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_RESERVED0</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_POSITION_MASK</name></cpp:macro> <cpp:value>0x00E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_XYZ</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_XYZRHW</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_XYZB1</name></cpp:macro> <cpp:value>0x006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_XYZB2</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_XYZB3</name></cpp:macro> <cpp:value>0x00a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_XYZB4</name></cpp:macro> <cpp:value>0x00c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_XYZB5</name></cpp:macro> <cpp:value>0x00e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_NORMAL</name></cpp:macro> <cpp:value>0x010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_PSIZE</name></cpp:macro> <cpp:value>0x020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_DIFFUSE</name></cpp:macro> <cpp:value>0x040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_SPECULAR</name></cpp:macro> <cpp:value>0x080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEXCOUNT_MASK</name></cpp:macro> <cpp:value>0xf00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEXCOUNT_SHIFT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEX0</name></cpp:macro> <cpp:value>0x000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEX1</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEX2</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEX3</name></cpp:macro> <cpp:value>0x300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEX4</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEX5</name></cpp:macro> <cpp:value>0x500</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEX6</name></cpp:macro> <cpp:value>0x600</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEX7</name></cpp:macro> <cpp:value>0x700</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEX8</name></cpp:macro> <cpp:value>0x800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_LASTBETA_UBYTE4</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_RESERVED2</name></cpp:macro> <cpp:value>0xE000</cpp:value></cpp:define> 

<typedef>typedef <type><enum>enum <name>_D3DVSD_TOKENTYPE</name>

<block>{

<decl><name>D3DVSD_TOKEN_NOP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>D3DVSD_TOKEN_STREAM</name></decl>, 

<decl><name>D3DVSD_TOKEN_STREAMDATA</name></decl>, 

<decl><name>D3DVSD_TOKEN_TESSELLATOR</name></decl>, 

<decl><name>D3DVSD_TOKEN_CONSTMEM</name></decl>, 

<decl><name>D3DVSD_TOKEN_EXT</name></decl>, 

<decl><name>D3DVSD_TOKEN_END</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 

<decl><name>D3DVSD_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>,

}</block></enum></type> <name>D3DVSD_TOKENTYPE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_TOKENTYPESHIFT</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_TOKENTYPEMASK</name></cpp:macro> <cpp:value>(7 &lt;&lt; D3DVSD_TOKENTYPESHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_STREAMNUMBERSHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_STREAMNUMBERMASK</name></cpp:macro> <cpp:value>(0xF &lt;&lt; D3DVSD_STREAMNUMBERSHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_DATALOADTYPESHIFT</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_DATALOADTYPEMASK</name></cpp:macro> <cpp:value>(0x1 &lt;&lt; D3DVSD_DATALOADTYPESHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_DATATYPESHIFT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_DATATYPEMASK</name></cpp:macro> <cpp:value>(0xF &lt;&lt; D3DVSD_DATATYPESHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_SKIPCOUNTSHIFT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_SKIPCOUNTMASK</name></cpp:macro> <cpp:value>(0xF &lt;&lt; D3DVSD_SKIPCOUNTSHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_VERTEXREGSHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_VERTEXREGMASK</name></cpp:macro> <cpp:value>(0x1F &lt;&lt; D3DVSD_VERTEXREGSHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_VERTEXREGINSHIFT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_VERTEXREGINMASK</name></cpp:macro> <cpp:value>(0xF &lt;&lt; D3DVSD_VERTEXREGINSHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_CONSTCOUNTSHIFT</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_CONSTCOUNTMASK</name></cpp:macro> <cpp:value>(0xF &lt;&lt; D3DVSD_CONSTCOUNTSHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_CONSTADDRESSSHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_CONSTADDRESSMASK</name></cpp:macro> <cpp:value>(0x7F &lt;&lt; D3DVSD_CONSTADDRESSSHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_CONSTRSSHIFT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_CONSTRSMASK</name></cpp:macro> <cpp:value>(0x1FFF &lt;&lt; D3DVSD_CONSTRSSHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_EXTCOUNTSHIFT</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_EXTCOUNTMASK</name></cpp:macro> <cpp:value>(0x1F &lt;&lt; D3DVSD_EXTCOUNTSHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_EXTINFOSHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_EXTINFOMASK</name></cpp:macro> <cpp:value>(0xFFFFFF &lt;&lt; D3DVSD_EXTINFOSHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_MAKETOKENTYPE</name><parameter_list>(<parameter><type><name>tokenType</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tokenType &lt;&lt; D3DVSD_TOKENTYPESHIFT) &amp; D3DVSD_TOKENTYPEMASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_STREAM</name><parameter_list>( <parameter><type><name>_StreamNumber</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_STREAM) | (_StreamNumber))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_STREAMTESSSHIFT</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_STREAMTESSMASK</name></cpp:macro> <cpp:value>(1 &lt;&lt; D3DVSD_STREAMTESSSHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_STREAM_TESS</name><parameter_list>( )</parameter_list></cpp:macro> <cpp:value>(D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_STREAM) | (D3DVSD_STREAMTESSMASK))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_REG</name><parameter_list>( <parameter><type><name>_VertexRegister</name></type></parameter>, <parameter><type><name>_Type</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_STREAMDATA) | ((_Type) &lt;&lt; D3DVSD_DATATYPESHIFT) | (_VertexRegister))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_SKIP</name><parameter_list>( <parameter><type><name>_DWORDCount</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_STREAMDATA) | 0x10000000 | ((_DWORDCount) &lt;&lt; D3DVSD_SKIPCOUNTSHIFT))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_CONST</name><parameter_list>( <parameter><type><name>_ConstantAddress</name></type></parameter>, <parameter><type><name>_Count</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_CONSTMEM) | ((_Count) &lt;&lt; D3DVSD_CONSTCOUNTSHIFT) | (_ConstantAddress))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_TESSNORMAL</name><parameter_list>( <parameter><type><name>_VertexRegisterIn</name></type></parameter>, <parameter><type><name>_VertexRegisterOut</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_TESSELLATOR) | ((_VertexRegisterIn) &lt;&lt; D3DVSD_VERTEXREGINSHIFT) | ((0x02) &lt;&lt; D3DVSD_DATATYPESHIFT) | (_VertexRegisterOut))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_TESSUV</name><parameter_list>( <parameter><type><name>_VertexRegister</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_TESSELLATOR) | 0x10000000 | ((0x01) &lt;&lt; D3DVSD_DATATYPESHIFT) | (_VertexRegister))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_END</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSD_NOP</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDT_FLOAT1</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDT_FLOAT2</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDT_FLOAT3</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDT_FLOAT4</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDT_D3DCOLOR</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDT_UBYTE4</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDT_SHORT2</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDT_SHORT4</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_POSITION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_BLENDWEIGHT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_BLENDINDICES</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_NORMAL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_PSIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_DIFFUSE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_SPECULAR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_TEXCOORD0</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_TEXCOORD1</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_TEXCOORD2</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_TEXCOORD3</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_TEXCOORD4</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_TEXCOORD5</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_TEXCOORD6</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_TEXCOORD7</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_POSITION2</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVSDE_NORMAL2</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DDP_MAXTEXCOORD</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSI_OPCODE_MASK</name></cpp:macro> <cpp:value>0x0000FFFF</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_D3DSHADER_INSTRUCTION_OPCODE_TYPE</name>

<block>{

<decl><name>D3DSIO_NOP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>D3DSIO_MOV</name></decl> , 

<decl><name>D3DSIO_ADD</name></decl> , 

<decl><name>D3DSIO_SUB</name></decl> , 

<decl><name>D3DSIO_MAD</name></decl> , 

<decl><name>D3DSIO_MUL</name></decl> , 

<decl><name>D3DSIO_RCP</name></decl> , 

<decl><name>D3DSIO_RSQ</name></decl> , 

<decl><name>D3DSIO_DP3</name></decl> , 

<decl><name>D3DSIO_DP4</name></decl> , 

<decl><name>D3DSIO_MIN</name></decl> , 

<decl><name>D3DSIO_MAX</name></decl> , 

<decl><name>D3DSIO_SLT</name></decl> , 

<decl><name>D3DSIO_SGE</name></decl> , 

<decl><name>D3DSIO_EXP</name></decl> , 

<decl><name>D3DSIO_LOG</name></decl> , 

<decl><name>D3DSIO_LIT</name></decl> , 

<decl><name>D3DSIO_DST</name></decl> , 

<decl><name>D3DSIO_LRP</name></decl> , 

<decl><name>D3DSIO_FRC</name></decl> , 

<decl><name>D3DSIO_M4x4</name></decl> , 

<decl><name>D3DSIO_M4x3</name></decl> , 

<decl><name>D3DSIO_M3x4</name></decl> , 

<decl><name>D3DSIO_M3x3</name></decl> , 

<decl><name>D3DSIO_M3x2</name></decl> , 

<decl><name>D3DSIO_TEXCOORD</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>, 

<decl><name>D3DSIO_TEXKILL</name></decl> , 

<decl><name>D3DSIO_TEX</name></decl> , 

<decl><name>D3DSIO_TEXBEM</name></decl> , 

<decl><name>D3DSIO_TEXBEML</name></decl> , 

<decl><name>D3DSIO_TEXREG2AR</name></decl> , 

<decl><name>D3DSIO_TEXREG2GB</name></decl> , 

<decl><name>D3DSIO_TEXM3x2PAD</name></decl> , 

<decl><name>D3DSIO_TEXM3x2TEX</name></decl> , 

<decl><name>D3DSIO_TEXM3x3PAD</name></decl> , 

<decl><name>D3DSIO_TEXM3x3TEX</name></decl> , 

<decl><name>D3DSIO_TEXM3x3DIFF</name></decl> , 

<decl><name>D3DSIO_TEXM3x3SPEC</name></decl> , 

<decl><name>D3DSIO_TEXM3x3VSPEC</name></decl> , 

<decl><name>D3DSIO_EXPP</name></decl> , 

<decl><name>D3DSIO_LOGP</name></decl> , 

<decl><name>D3DSIO_CND</name></decl> , 

<decl><name>D3DSIO_DEF</name></decl> , 

<decl><name>D3DSIO_TEXREG2RGB</name></decl> , 

<decl><name>D3DSIO_TEXDP3TEX</name></decl> , 

<decl><name>D3DSIO_TEXM3x2DEPTH</name></decl> , 

<decl><name>D3DSIO_TEXDP3</name></decl> , 

<decl><name>D3DSIO_TEXM3x3</name></decl> , 

<decl><name>D3DSIO_TEXDEPTH</name></decl> , 

<decl><name>D3DSIO_CMP</name></decl> , 

<decl><name>D3DSIO_BEM</name></decl> , 

<decl><name>D3DSIO_PHASE</name> <init>= <expr><literal type="number">0xFFFD</literal></expr></init></decl>,

<decl><name>D3DSIO_COMMENT</name> <init>= <expr><literal type="number">0xFFFE</literal></expr></init></decl>,

<decl><name>D3DSIO_END</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>,

<decl><name>D3DSIO_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DSHADER_INSTRUCTION_OPCODE_TYPE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSI_COISSUE</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_REGNUM_MASK</name></cpp:macro> <cpp:value>0x00001FFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_WRITEMASK_0</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_WRITEMASK_1</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_WRITEMASK_2</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_WRITEMASK_3</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_WRITEMASK_ALL</name></cpp:macro> <cpp:value>0x000F0000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_DSTMOD_SHIFT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_DSTMOD_MASK</name></cpp:macro> <cpp:value>0x00F00000</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_D3DSHADER_PARAM_DSTMOD_TYPE</name>

<block>{

<decl><name>D3DSPDM_NONE</name> <init>= <expr><literal type="number">0</literal><operator>&lt;&lt;</operator><name>D3DSP_DSTMOD_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPDM_SATURATE</name><init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>D3DSP_DSTMOD_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPDM_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DSHADER_PARAM_DSTMOD_TYPE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_DSTSHIFT_SHIFT</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_DSTSHIFT_MASK</name></cpp:macro> <cpp:value>0x0F000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_REGTYPE_SHIFT</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_REGTYPE_MASK</name></cpp:macro> <cpp:value>0x70000000</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_D3DSHADER_PARAM_REGISTER_TYPE</name>

<block>{

<decl><name>D3DSPR_TEMP</name> <init>= <expr><literal type="number">0</literal><operator>&lt;&lt;</operator><name>D3DSP_REGTYPE_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPR_INPUT</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>D3DSP_REGTYPE_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPR_CONST</name> <init>= <expr><literal type="number">2</literal><operator>&lt;&lt;</operator><name>D3DSP_REGTYPE_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPR_ADDR</name> <init>= <expr><literal type="number">3</literal><operator>&lt;&lt;</operator><name>D3DSP_REGTYPE_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPR_TEXTURE</name> <init>= <expr><literal type="number">3</literal><operator>&lt;&lt;</operator><name>D3DSP_REGTYPE_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPR_RASTOUT</name> <init>= <expr><literal type="number">4</literal><operator>&lt;&lt;</operator><name>D3DSP_REGTYPE_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPR_ATTROUT</name> <init>= <expr><literal type="number">5</literal><operator>&lt;&lt;</operator><name>D3DSP_REGTYPE_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPR_TEXCRDOUT</name><init>= <expr><literal type="number">6</literal><operator>&lt;&lt;</operator><name>D3DSP_REGTYPE_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPR_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DSHADER_PARAM_REGISTER_TYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DVS_RASTOUT_OFFSETS</name>

<block>{

<decl><name>D3DSRO_POSITION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>D3DSRO_FOG</name></decl>,

<decl><name>D3DSRO_POINT_SIZE</name></decl>,

<decl><name>D3DSRO_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DVS_RASTOUT_OFFSETS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_ADDRESSMODE_SHIFT</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_ADDRESSMODE_MASK</name></cpp:macro> <cpp:value>(1 &lt;&lt; D3DVS_ADDRESSMODE_SHIFT)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_D3DVS_ADDRESSMODE_TYPE</name>

<block>{

<decl><name>D3DVS_ADDRMODE_ABSOLUTE</name> <init>= <expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>D3DVS_ADDRESSMODE_SHIFT</name><operator>)</operator></expr></init></decl>,

<decl><name>D3DVS_ADDRMODE_RELATIVE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>D3DVS_ADDRESSMODE_SHIFT</name><operator>)</operator></expr></init></decl>, 

<decl><name>D3DVS_ADDRMODE_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DVS_ADDRESSMODE_TYPE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_SWIZZLE_SHIFT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_SWIZZLE_MASK</name></cpp:macro> <cpp:value>0x00FF0000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_X_X</name></cpp:macro> <cpp:value>(0 &lt;&lt; D3DVS_SWIZZLE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_X_Y</name></cpp:macro> <cpp:value>(1 &lt;&lt; D3DVS_SWIZZLE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_X_Z</name></cpp:macro> <cpp:value>(2 &lt;&lt; D3DVS_SWIZZLE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_X_W</name></cpp:macro> <cpp:value>(3 &lt;&lt; D3DVS_SWIZZLE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_Y_X</name></cpp:macro> <cpp:value>(0 &lt;&lt; (D3DVS_SWIZZLE_SHIFT + 2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_Y_Y</name></cpp:macro> <cpp:value>(1 &lt;&lt; (D3DVS_SWIZZLE_SHIFT + 2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_Y_Z</name></cpp:macro> <cpp:value>(2 &lt;&lt; (D3DVS_SWIZZLE_SHIFT + 2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_Y_W</name></cpp:macro> <cpp:value>(3 &lt;&lt; (D3DVS_SWIZZLE_SHIFT + 2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_Z_X</name></cpp:macro> <cpp:value>(0 &lt;&lt; (D3DVS_SWIZZLE_SHIFT + 4))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_Z_Y</name></cpp:macro> <cpp:value>(1 &lt;&lt; (D3DVS_SWIZZLE_SHIFT + 4))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_Z_Z</name></cpp:macro> <cpp:value>(2 &lt;&lt; (D3DVS_SWIZZLE_SHIFT + 4))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_Z_W</name></cpp:macro> <cpp:value>(3 &lt;&lt; (D3DVS_SWIZZLE_SHIFT + 4))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_W_X</name></cpp:macro> <cpp:value>(0 &lt;&lt; (D3DVS_SWIZZLE_SHIFT + 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_W_Y</name></cpp:macro> <cpp:value>(1 &lt;&lt; (D3DVS_SWIZZLE_SHIFT + 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_W_Z</name></cpp:macro> <cpp:value>(2 &lt;&lt; (D3DVS_SWIZZLE_SHIFT + 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_W_W</name></cpp:macro> <cpp:value>(3 &lt;&lt; (D3DVS_SWIZZLE_SHIFT + 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_NOSWIZZLE</name></cpp:macro> <cpp:value>(D3DVS_X_X | D3DVS_Y_Y | D3DVS_Z_Z | D3DVS_W_W)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_SWIZZLE_SHIFT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_SWIZZLE_MASK</name></cpp:macro> <cpp:value>0x00FF0000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_NOSWIZZLE</name></cpp:macro> <cpp:value>( (0 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 0)) | (1 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 2)) | (2 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 4)) | (3 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 6)) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_REPLICATERED</name></cpp:macro> <cpp:value>( (0 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 0)) | (0 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 2)) | (0 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 4)) | (0 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 6)) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_REPLICATEGREEN</name></cpp:macro> <cpp:value>( (1 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 0)) | (1 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 2)) | (1 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 4)) | (1 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 6)) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_REPLICATEBLUE</name></cpp:macro> <cpp:value>( (2 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 0)) | (2 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 2)) | (2 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 4)) | (2 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 6)) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_REPLICATEALPHA</name></cpp:macro> <cpp:value>( (3 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 0)) | (3 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 2)) | (3 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 4)) | (3 &lt;&lt; (D3DSP_SWIZZLE_SHIFT + 6)) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_SRCMOD_SHIFT</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSP_SRCMOD_MASK</name></cpp:macro> <cpp:value>0x0F000000</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_D3DSHADER_PARAM_SRCMOD_TYPE</name>

<block>{

<decl><name>D3DSPSM_NONE</name> <init>= <expr><literal type="number">0</literal><operator>&lt;&lt;</operator><name>D3DSP_SRCMOD_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPSM_NEG</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>D3DSP_SRCMOD_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPSM_BIAS</name> <init>= <expr><literal type="number">2</literal><operator>&lt;&lt;</operator><name>D3DSP_SRCMOD_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPSM_BIASNEG</name> <init>= <expr><literal type="number">3</literal><operator>&lt;&lt;</operator><name>D3DSP_SRCMOD_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPSM_SIGN</name> <init>= <expr><literal type="number">4</literal><operator>&lt;&lt;</operator><name>D3DSP_SRCMOD_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPSM_SIGNNEG</name> <init>= <expr><literal type="number">5</literal><operator>&lt;&lt;</operator><name>D3DSP_SRCMOD_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPSM_COMP</name> <init>= <expr><literal type="number">6</literal><operator>&lt;&lt;</operator><name>D3DSP_SRCMOD_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPSM_X2</name> <init>= <expr><literal type="number">7</literal><operator>&lt;&lt;</operator><name>D3DSP_SRCMOD_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPSM_X2NEG</name> <init>= <expr><literal type="number">8</literal><operator>&lt;&lt;</operator><name>D3DSP_SRCMOD_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPSM_DZ</name> <init>= <expr><literal type="number">9</literal><operator>&lt;&lt;</operator><name>D3DSP_SRCMOD_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPSM_DW</name> <init>= <expr><literal type="number">10</literal><operator>&lt;&lt;</operator><name>D3DSP_SRCMOD_SHIFT</name></expr></init></decl>, 

<decl><name>D3DSPSM_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DSHADER_PARAM_SRCMOD_TYPE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DPS_VERSION</name><parameter_list>(<parameter><type><name>_Major</name></type></parameter>,<parameter><type><name>_Minor</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0xFFFF0000|((_Major)&lt;&lt;8)|(_Minor))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_VERSION</name><parameter_list>(<parameter><type><name>_Major</name></type></parameter>,<parameter><type><name>_Minor</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0xFFFE0000|((_Major)&lt;&lt;8)|(_Minor))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSHADER_VERSION_MAJOR</name><parameter_list>(<parameter><type><name>_Version</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((_Version)&gt;&gt;8)&amp;0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSHADER_VERSION_MINOR</name><parameter_list>(<parameter><type><name>_Version</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((_Version)&gt;&gt;0)&amp;0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSI_COMMENTSIZE_SHIFT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSI_COMMENTSIZE_MASK</name></cpp:macro> <cpp:value>0x7FFF0000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSHADER_COMMENT</name><parameter_list>(<parameter><type><name>_DWordSize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((_DWordSize)&lt;&lt;D3DSI_COMMENTSIZE_SHIFT)&amp;D3DSI_COMMENTSIZE_MASK)|D3DSIO_COMMENT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DPS_END</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>0x0000FFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DVS_END</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>0x0000FFFF</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_D3DBASISTYPE</name>

<block>{

<decl><name>D3DBASIS_BEZIER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>D3DBASIS_BSPLINE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DBASIS_INTERPOLATE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DBASIS_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>,

}</block></enum></type> <name>D3DBASISTYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DORDERTYPE</name>

<block>{

<decl><name>D3DORDER_LINEAR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DORDER_QUADRATIC</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DORDER_CUBIC</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DORDER_QUINTIC</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>D3DORDER_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>,

}</block></enum></type> <name>D3DORDERTYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DPATCHEDGESTYLE</name>

<block>{

<decl><name>D3DPATCHEDGE_DISCRETE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>D3DPATCHEDGE_CONTINUOUS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DPATCHEDGE_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>,

}</block></enum></type> <name>D3DPATCHEDGESTYLE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DSTATEBLOCKTYPE</name>

<block>{

<decl><name>D3DSBT_ALL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>D3DSBT_PIXELSTATE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>D3DSBT_VERTEXSTATE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 

<decl><name>D3DSBT_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>,

}</block></enum></type> <name>D3DSTATEBLOCKTYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DVERTEXBLENDFLAGS</name>

<block>{

<decl><name>D3DVBF_DISABLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>D3DVBF_1WEIGHTS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>D3DVBF_2WEIGHTS</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>D3DVBF_3WEIGHTS</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 

<decl><name>D3DVBF_TWEENING</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, 

<decl><name>D3DVBF_0WEIGHTS</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>, 

<decl><name>D3DVBF_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, 

}</block></enum></type> <name>D3DVERTEXBLENDFLAGS</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DTEXTURETRANSFORMFLAGS</name> <block>{

<decl><name>D3DTTFF_DISABLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>D3DTTFF_COUNT1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>D3DTTFF_COUNT2</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>D3DTTFF_COUNT3</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 

<decl><name>D3DTTFF_COUNT4</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 

<decl><name>D3DTTFF_PROJECTED</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>, 

<decl><name>D3DTTFF_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>,

}</block></enum></type> <name>D3DTEXTURETRANSFORMFLAGS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEXTUREFORMAT2</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEXTUREFORMAT1</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEXTUREFORMAT3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEXTUREFORMAT4</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEXCOORDSIZE3</name><parameter_list>(<parameter><type><name>CoordIndex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(D3DFVF_TEXTUREFORMAT3 &lt;&lt; (CoordIndex*2 + 16))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEXCOORDSIZE2</name><parameter_list>(<parameter><type><name>CoordIndex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(D3DFVF_TEXTUREFORMAT2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEXCOORDSIZE4</name><parameter_list>(<parameter><type><name>CoordIndex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(D3DFVF_TEXTUREFORMAT4 &lt;&lt; (CoordIndex*2 + 16))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_TEXCOORDSIZE1</name><parameter_list>(<parameter><type><name>CoordIndex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(D3DFVF_TEXTUREFORMAT1 &lt;&lt; (CoordIndex*2 + 16))</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_D3DDEVTYPE</name>

<block>{

<decl><name>D3DDEVTYPE_HAL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DDEVTYPE_REF</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DDEVTYPE_SW</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DDEVTYPE_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>

}</block></enum></type> <name>D3DDEVTYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DMULTISAMPLE_TYPE</name>

<block>{

<decl><name>D3DMULTISAMPLE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_2_SAMPLES</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_3_SAMPLES</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_4_SAMPLES</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_5_SAMPLES</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_6_SAMPLES</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_7_SAMPLES</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_8_SAMPLES</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_9_SAMPLES</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_10_SAMPLES</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_11_SAMPLES</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_12_SAMPLES</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_13_SAMPLES</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_14_SAMPLES</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_15_SAMPLES</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_16_SAMPLES</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>D3DMULTISAMPLE_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>

}</block></enum></type> <name>D3DMULTISAMPLE_TYPE</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAKEFOURCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKEFOURCC</name><parameter_list>(<parameter><type><name>ch0</name></type></parameter>, <parameter><type><name>ch1</name></type></parameter>, <parameter><type><name>ch2</name></type></parameter>, <parameter><type><name>ch3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((DWORD)(BYTE)(ch0) | ((DWORD)(BYTE)(ch1) &lt;&lt; 8) | ((DWORD)(BYTE)(ch2) &lt;&lt; 16) | ((DWORD)(BYTE)(ch3) &lt;&lt; 24 ))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><enum>enum <name>_D3DFORMAT</name>

<block>{

<decl><name>D3DFMT_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>D3DFMT_R8G8B8</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,

<decl><name>D3DFMT_A8R8G8B8</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,

<decl><name>D3DFMT_X8R8G8B8</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,

<decl><name>D3DFMT_R5G6B5</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,

<decl><name>D3DFMT_X1R5G5B5</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,

<decl><name>D3DFMT_A1R5G5B5</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,

<decl><name>D3DFMT_A4R4G4B4</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>,

<decl><name>D3DFMT_R3G3B2</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,

<decl><name>D3DFMT_A8</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,

<decl><name>D3DFMT_A8R3G3B2</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>,

<decl><name>D3DFMT_X4R4G4B4</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,

<decl><name>D3DFMT_A2B10G10R10</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,

<decl><name>D3DFMT_G16R16</name> <init>= <expr><literal type="number">34</literal></expr></init></decl>,

<decl><name>D3DFMT_A8P8</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>,

<decl><name>D3DFMT_P8</name> <init>= <expr><literal type="number">41</literal></expr></init></decl>,

<decl><name>D3DFMT_L8</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>,

<decl><name>D3DFMT_A8L8</name> <init>= <expr><literal type="number">51</literal></expr></init></decl>,

<decl><name>D3DFMT_A4L4</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>,

<decl><name>D3DFMT_V8U8</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>,

<decl><name>D3DFMT_L6V5U5</name> <init>= <expr><literal type="number">61</literal></expr></init></decl>,

<decl><name>D3DFMT_X8L8V8U8</name> <init>= <expr><literal type="number">62</literal></expr></init></decl>,

<decl><name>D3DFMT_Q8W8V8U8</name> <init>= <expr><literal type="number">63</literal></expr></init></decl>,

<decl><name>D3DFMT_V16U16</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,

<decl><name>D3DFMT_W11V11U10</name> <init>= <expr><literal type="number">65</literal></expr></init></decl>,

<decl><name>D3DFMT_A2W10V10U10</name> <init>= <expr><literal type="number">67</literal></expr></init></decl>,

<decl><name>D3DFMT_UYVY</name> <init>= <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>D3DFMT_YUY2</name> <init>= <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>D3DFMT_DXT1</name> <init>= <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>D3DFMT_DXT2</name> <init>= <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>D3DFMT_DXT3</name> <init>= <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>D3DFMT_DXT4</name> <init>= <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>D3DFMT_DXT5</name> <init>= <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>D3DFMT_D16_LOCKABLE</name> <init>= <expr><literal type="number">70</literal></expr></init></decl>,

<decl><name>D3DFMT_D32</name> <init>= <expr><literal type="number">71</literal></expr></init></decl>,

<decl><name>D3DFMT_D15S1</name> <init>= <expr><literal type="number">73</literal></expr></init></decl>,

<decl><name>D3DFMT_D24S8</name> <init>= <expr><literal type="number">75</literal></expr></init></decl>,

<decl><name>D3DFMT_D16</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>,

<decl><name>D3DFMT_D24X8</name> <init>= <expr><literal type="number">77</literal></expr></init></decl>,

<decl><name>D3DFMT_D24X4S4</name> <init>= <expr><literal type="number">79</literal></expr></init></decl>,

<decl><name>D3DFMT_VERTEXDATA</name> <init>=<expr><literal type="number">100</literal></expr></init></decl>,

<decl><name>D3DFMT_INDEX16</name> <init>=<expr><literal type="number">101</literal></expr></init></decl>,

<decl><name>D3DFMT_INDEX32</name> <init>=<expr><literal type="number">102</literal></expr></init></decl>,

<decl><name>D3DFMT_FORCE_DWORD</name> <init>=<expr><literal type="number">0x7fffffff</literal></expr></init></decl>

}</block></enum></type> <name>D3DFORMAT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DDISPLAYMODE</name>

<block>{

<decl_stmt><decl><type><name>UINT</name></type> <name>Width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>RefreshRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>Format</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DDISPLAYMODE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DDEVICE_CREATION_PARAMETERS</name>

<block>{

<decl_stmt><decl><type><name>UINT</name></type> <name>AdapterOrdinal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DDEVTYPE</name></type> <name>DeviceType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hFocusWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>BehaviorFlags</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DDEVICE_CREATION_PARAMETERS</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DSWAPEFFECT</name>

<block>{

<decl><name>D3DSWAPEFFECT_DISCARD</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DSWAPEFFECT_FLIP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DSWAPEFFECT_COPY</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DSWAPEFFECT_COPY_VSYNC</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>D3DSWAPEFFECT_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>

}</block></enum></type> <name>D3DSWAPEFFECT</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DPOOL</name> <block>{

<decl><name>D3DPOOL_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>D3DPOOL_MANAGED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DPOOL_SYSTEMMEM</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DPOOL_SCRATCH</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DPOOL_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>

}</block></enum></type> <name>D3DPOOL</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DPRESENT_RATE_DEFAULT</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DPRESENT_RATE_UNLIMITED</name></cpp:macro> <cpp:value>0x7fffffff</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_D3DPRESENT_PARAMETERS_</name>

<block>{

<decl_stmt><decl><type><name>UINT</name></type> <name>BackBufferWidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>BackBufferHeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>BackBufferFormat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>BackBufferCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DMULTISAMPLE_TYPE</name></type> <name>MultiSampleType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DSWAPEFFECT</name></type> <name>SwapEffect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hDeviceWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>Windowed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>EnableAutoDepthStencil</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>AutoDepthStencilFormat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>FullScreen_RefreshRateInHz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>FullScreen_PresentationInterval</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DPRESENT_PARAMETERS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DPRESENTFLAG_LOCKABLE_BACKBUFFER</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_D3DGAMMARAMP</name>

<block>{

<decl_stmt><decl><type><name>WORD</name></type> <name><name>red</name> <index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name><name>green</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name><name>blue</name> <index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DGAMMARAMP</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DBACKBUFFER_TYPE</name>

<block>{

<decl><name>D3DBACKBUFFER_TYPE_MONO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>D3DBACKBUFFER_TYPE_LEFT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DBACKBUFFER_TYPE_RIGHT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DBACKBUFFER_TYPE_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>

}</block></enum></type> <name>D3DBACKBUFFER_TYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DRESOURCETYPE</name> <block>{

<decl><name>D3DRTYPE_SURFACE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DRTYPE_VOLUME</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DRTYPE_TEXTURE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DRTYPE_VOLUMETEXTURE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>D3DRTYPE_CUBETEXTURE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>D3DRTYPE_VERTEXBUFFER</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>D3DRTYPE_INDEXBUFFER</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>D3DRTYPE_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>

}</block></enum></type> <name>D3DRESOURCETYPE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DUSAGE_RENDERTARGET</name></cpp:macro> <cpp:value>(0x00000001L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DUSAGE_DEPTHSTENCIL</name></cpp:macro> <cpp:value>(0x00000002L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DUSAGE_WRITEONLY</name></cpp:macro> <cpp:value>(0x00000008L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DUSAGE_SOFTWAREPROCESSING</name></cpp:macro> <cpp:value>(0x00000010L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DUSAGE_DONOTCLIP</name></cpp:macro> <cpp:value>(0x00000020L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DUSAGE_POINTS</name></cpp:macro> <cpp:value>(0x00000040L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DUSAGE_RTPATCHES</name></cpp:macro> <cpp:value>(0x00000080L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DUSAGE_NPATCHES</name></cpp:macro> <cpp:value>(0x00000100L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DUSAGE_DYNAMIC</name></cpp:macro> <cpp:value>(0x00000200L)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_D3DCUBEMAP_FACES</name>

<block>{

<decl><name>D3DCUBEMAP_FACE_POSITIVE_X</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>D3DCUBEMAP_FACE_NEGATIVE_X</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>D3DCUBEMAP_FACE_POSITIVE_Y</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>D3DCUBEMAP_FACE_NEGATIVE_Y</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>D3DCUBEMAP_FACE_POSITIVE_Z</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>D3DCUBEMAP_FACE_NEGATIVE_Z</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>D3DCUBEMAP_FACE_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>

}</block></enum></type> <name>D3DCUBEMAP_FACES</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DLOCK_READONLY</name></cpp:macro> <cpp:value>0x00000010L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DLOCK_DISCARD</name></cpp:macro> <cpp:value>0x00002000L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DLOCK_NOOVERWRITE</name></cpp:macro> <cpp:value>0x00001000L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DLOCK_NOSYSLOCK</name></cpp:macro> <cpp:value>0x00000800L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DLOCK_NO_DIRTY_UPDATE</name></cpp:macro> <cpp:value>0x00008000L</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_D3DVERTEXBUFFER_DESC</name>

<block>{

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>Format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DRESOURCETYPE</name></type> <name>Type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Usage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DPOOL</name></type> <name>Pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>FVF</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DVERTEXBUFFER_DESC</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DINDEXBUFFER_DESC</name>

<block>{

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>Format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DRESOURCETYPE</name></type> <name>Type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Usage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DPOOL</name></type> <name>Pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Size</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DINDEXBUFFER_DESC</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DSURFACE_DESC</name>

<block>{

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>Format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DRESOURCETYPE</name></type> <name>Type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Usage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DPOOL</name></type> <name>Pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DMULTISAMPLE_TYPE</name></type> <name>MultiSampleType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Height</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DSURFACE_DESC</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DVOLUME_DESC</name>

<block>{

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>Format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DRESOURCETYPE</name></type> <name>Type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Usage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DPOOL</name></type> <name>Pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Depth</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DVOLUME_DESC</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DLOCKED_RECT</name>

<block>{

<decl_stmt><decl><type><name>INT</name></type> <name>Pitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pBits</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DLOCKED_RECT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DBOX</name>

<block>{

<decl_stmt><decl><type><name>UINT</name></type> <name>Left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Front</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Back</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DBOX</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DLOCKED_BOX</name>

<block>{

<decl_stmt><decl><type><name>INT</name></type> <name>RowPitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INT</name></type> <name>SlicePitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pBits</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DLOCKED_BOX</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DRANGE</name>

<block>{

<decl_stmt><decl><type><name>UINT</name></type> <name>Offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Size</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DRANGE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DRECTPATCH_INFO</name>

<block>{

<decl_stmt><decl><type><name>UINT</name></type> <name>StartVertexOffsetWidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>StartVertexOffsetHeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>Stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DBASISTYPE</name></type> <name>Basis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DORDERTYPE</name></type> <name>Order</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DRECTPATCH_INFO</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DTRIPATCH_INFO</name>

<block>{

<decl_stmt><decl><type><name>UINT</name></type> <name>StartVertexOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>NumVertices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DBASISTYPE</name></type> <name>Basis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DORDERTYPE</name></type> <name>Order</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DTRIPATCH_INFO</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DEVICE_IDENTIFIER_STRING</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_D3DADAPTER_IDENTIFIER8</name>

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>Driver</name><index>[<expr><name>MAX_DEVICE_IDENTIFIER_STRING</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>Description</name><index>[<expr><name>MAX_DEVICE_IDENTIFIER_STRING</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>DriverVersion</name></decl>;</decl_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>DWORD</name></type> <name>DriverVersionLowPart</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>DriverVersionHighPart</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>DWORD</name></type> <name>VendorId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>DeviceId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>SubSysId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Revision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>DeviceIdentifier</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>WHQLLevel</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DADAPTER_IDENTIFIER8</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DRASTER_STATUS</name>

<block>{

<decl_stmt><decl><type><name>BOOL</name></type> <name>InVBlank</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>ScanLine</name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DRASTER_STATUS</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_D3DDEBUGMONITORTOKENS</name> <block>{

<decl><name>D3DDMT_ENABLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>D3DDMT_DISABLE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>D3DDMT_FORCE_DWORD</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>,

}</block></enum></type> <name>D3DDEBUGMONITORTOKENS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DDEVINFOID_RESOURCEMANAGER</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DDEVINFOID_VERTEXSTATS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>_D3DRESOURCESTATS</name>

<block>{

<decl_stmt><decl><type><name>BOOL</name></type> <name>bThrashing</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>ApproxBytesDownloaded</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>NumEvicts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>NumVidCreates</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>LastPri</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>NumUsed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>NumUsedInVidMem</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>WorkingSet</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>WorkingSetBytes</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>TotalManaged</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>TotalBytes</name></decl>;</decl_stmt> 

}</block></struct></type> <name>D3DRESOURCESTATS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DRTYPECOUNT</name></cpp:macro> <cpp:value>(D3DRTYPE_INDEXBUFFER+1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_D3DDEVINFO_RESOURCEMANAGER</name>

<block>{

<decl_stmt><decl><type><name>D3DRESOURCESTATS</name></type> <name><name>stats</name><index>[<expr><name>D3DRTYPECOUNT</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>D3DDEVINFO_RESOURCEMANAGER</name><operator>,</operator> *<name>LPD3DDEVINFO_RESOURCEMANAGER</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_D3DDEVINFO_D3DVERTEXSTATS</name>

<block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>NumRenderedTriangles</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>NumExtraClippingTriangles</name></decl>;</decl_stmt> 

}</block></struct></type> <name>D3DDEVINFO_D3DVERTEXSTATS</name><operator>,</operator> *<name>LPD3DDEVINFO_D3DVERTEXSTATS</name>;</typedef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>)</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1200</literal></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>default</name><name>:</name><name>4201</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
