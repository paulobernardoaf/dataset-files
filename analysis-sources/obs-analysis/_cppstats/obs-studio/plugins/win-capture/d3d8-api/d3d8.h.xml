<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\win-capture\d3d8-api\d3d8.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DIRECT3D_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRECT3D_VERSION</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>DIRECT3D_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0800</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D_SDK_VERSION</name></cpp:macro> <cpp:value>220</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_NO_WINDOWS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;objbase.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HMONITOR_DECLARED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>WINVER</name> <operator>&lt;</operator> <literal type="number">0x0500</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMONITOR_DECLARED</name></cpp:macro></cpp:define>

<expr_stmt><expr><call><name>DECLARE_HANDLE</name><argument_list>(<argument><expr><name>HMONITOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DAPI</name></cpp:macro> <cpp:value>WINAPI</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>_NO_COM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirect3D8</name></expr></argument>, <argument><expr><literal type="number">0x1dd9e8da</literal></expr></argument>, <argument><expr><literal type="number">0x1c77</literal></expr></argument>, <argument><expr><literal type="number">0x4d40</literal></expr></argument>, <argument><expr><literal type="number">0xb0</literal></expr></argument>, <argument><expr><literal type="number">0xcf</literal></expr></argument>, <argument><expr><literal type="number">0x98</literal></expr></argument>, <argument><expr><literal type="number">0xfe</literal></expr></argument>, <argument><expr><literal type="number">0xfd</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">0x95</literal></expr></argument>, <argument><expr><literal type="number">0x12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirect3DDevice8</name></expr></argument>, <argument><expr><literal type="number">0x7385e5df</literal></expr></argument>, <argument><expr><literal type="number">0x8fe8</literal></expr></argument>, <argument><expr><literal type="number">0x41d5</literal></expr></argument>, <argument><expr><literal type="number">0x86</literal></expr></argument>, <argument><expr><literal type="number">0xb6</literal></expr></argument>, <argument><expr><literal type="number">0xd7</literal></expr></argument>, <argument><expr><literal type="number">0xb4</literal></expr></argument>, <argument><expr><literal type="number">0x85</literal></expr></argument>, <argument><expr><literal type="number">0x47</literal></expr></argument>, <argument><expr><literal type="number">0xb6</literal></expr></argument>, <argument><expr><literal type="number">0xcf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirect3DResource8</name></expr></argument>, <argument><expr><literal type="number">0x1b36bb7b</literal></expr></argument>, <argument><expr><literal type="number">0x9b7</literal></expr></argument>, <argument><expr><literal type="number">0x410a</literal></expr></argument>, <argument><expr><literal type="number">0xb4</literal></expr></argument>, <argument><expr><literal type="number">0x45</literal></expr></argument>, <argument><expr><literal type="number">0x7d</literal></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0xd7</literal></expr></argument>, <argument><expr><literal type="number">0xb3</literal></expr></argument>, <argument><expr><literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirect3DBaseTexture8</name></expr></argument>, <argument><expr><literal type="number">0xb4211cfa</literal></expr></argument>, <argument><expr><literal type="number">0x51b9</literal></expr></argument>, <argument><expr><literal type="number">0x4a9f</literal></expr></argument>, <argument><expr><literal type="number">0xab</literal></expr></argument>, <argument><expr><literal type="number">0x78</literal></expr></argument>, <argument><expr><literal type="number">0xdb</literal></expr></argument>, <argument><expr><literal type="number">0x99</literal></expr></argument>, <argument><expr><literal type="number">0xb2</literal></expr></argument>, <argument><expr><literal type="number">0xbb</literal></expr></argument>, <argument><expr><literal type="number">0x67</literal></expr></argument>, <argument><expr><literal type="number">0x8e</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirect3DTexture8</name></expr></argument>, <argument><expr><literal type="number">0xe4cdd575</literal></expr></argument>, <argument><expr><literal type="number">0x2866</literal></expr></argument>, <argument><expr><literal type="number">0x4f01</literal></expr></argument>, <argument><expr><literal type="number">0xb1</literal></expr></argument>, <argument><expr><literal type="number">0x2e</literal></expr></argument>, <argument><expr><literal type="number">0x7e</literal></expr></argument>, <argument><expr><literal type="number">0xec</literal></expr></argument>, <argument><expr><literal type="number">0xe1</literal></expr></argument>, <argument><expr><literal type="number">0xec</literal></expr></argument>, <argument><expr><literal type="number">0x93</literal></expr></argument>, <argument><expr><literal type="number">0x58</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirect3DCubeTexture8</name></expr></argument>, <argument><expr><literal type="number">0x3ee5b968</literal></expr></argument>, <argument><expr><literal type="number">0x2aca</literal></expr></argument>, <argument><expr><literal type="number">0x4c34</literal></expr></argument>, <argument><expr><literal type="number">0x8b</literal></expr></argument>, <argument><expr><literal type="number">0xb5</literal></expr></argument>, <argument><expr><literal type="number">0x7e</literal></expr></argument>, <argument><expr><literal type="number">0x0c</literal></expr></argument>, <argument><expr><literal type="number">0x3d</literal></expr></argument>, <argument><expr><literal type="number">0x19</literal></expr></argument>, <argument><expr><literal type="number">0xb7</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirect3DVolumeTexture8</name></expr></argument>, <argument><expr><literal type="number">0x4b8aaafa</literal></expr></argument>, <argument><expr><literal type="number">0x140f</literal></expr></argument>, <argument><expr><literal type="number">0x42ba</literal></expr></argument>, <argument><expr><literal type="number">0x91</literal></expr></argument>, <argument><expr><literal type="number">0x31</literal></expr></argument>, <argument><expr><literal type="number">0x59</literal></expr></argument>, <argument><expr><literal type="number">0x7e</literal></expr></argument>, <argument><expr><literal type="number">0xaf</literal></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0x2e</literal></expr></argument>, <argument><expr><literal type="number">0xad</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirect3DVertexBuffer8</name></expr></argument>, <argument><expr><literal type="number">0x8aeeeac7</literal></expr></argument>, <argument><expr><literal type="number">0x05f9</literal></expr></argument>, <argument><expr><literal type="number">0x44d4</literal></expr></argument>, <argument><expr><literal type="number">0xb5</literal></expr></argument>, <argument><expr><literal type="number">0x91</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x0b</literal></expr></argument>, <argument><expr><literal type="number">0x0d</literal></expr></argument>, <argument><expr><literal type="number">0xf1</literal></expr></argument>, <argument><expr><literal type="number">0xcb</literal></expr></argument>, <argument><expr><literal type="number">0x95</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirect3DIndexBuffer8</name></expr></argument>, <argument><expr><literal type="number">0x0e689c9a</literal></expr></argument>, <argument><expr><literal type="number">0x053d</literal></expr></argument>, <argument><expr><literal type="number">0x44a0</literal></expr></argument>, <argument><expr><literal type="number">0x9d</literal></expr></argument>, <argument><expr><literal type="number">0x92</literal></expr></argument>, <argument><expr><literal type="number">0xdb</literal></expr></argument>, <argument><expr><literal type="number">0x0e</literal></expr></argument>, <argument><expr><literal type="number">0x3d</literal></expr></argument>, <argument><expr><literal type="number">0x75</literal></expr></argument>, <argument><expr><literal type="number">0x0f</literal></expr></argument>, <argument><expr><literal type="number">0x86</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirect3DSurface8</name></expr></argument>, <argument><expr><literal type="number">0xb96eebca</literal></expr></argument>, <argument><expr><literal type="number">0xb326</literal></expr></argument>, <argument><expr><literal type="number">0x4ea5</literal></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument>, <argument><expr><literal type="number">0x2f</literal></expr></argument>, <argument><expr><literal type="number">0x2f</literal></expr></argument>, <argument><expr><literal type="number">0xf5</literal></expr></argument>, <argument><expr><literal type="number">0xba</literal></expr></argument>, <argument><expr><literal type="number">0xe0</literal></expr></argument>, <argument><expr><literal type="number">0x21</literal></expr></argument>, <argument><expr><literal type="number">0xdd</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirect3DVolume8</name></expr></argument>, <argument><expr><literal type="number">0xbd7349f5</literal></expr></argument>, <argument><expr><literal type="number">0x14f1</literal></expr></argument>, <argument><expr><literal type="number">0x42e4</literal></expr></argument>, <argument><expr><literal type="number">0x9c</literal></expr></argument>, <argument><expr><literal type="number">0x79</literal></expr></argument>, <argument><expr><literal type="number">0x97</literal></expr></argument>, <argument><expr><literal type="number">0x23</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0xdb</literal></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><literal type="number">0xc0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IDirect3DSwapChain8</name></expr></argument>, <argument><expr><literal type="number">0x928c088b</literal></expr></argument>, <argument><expr><literal type="number">0x76b9</literal></expr></argument>, <argument><expr><literal type="number">0x4c6b</literal></expr></argument>, <argument><expr><literal type="number">0xa5</literal></expr></argument>, <argument><expr><literal type="number">0x36</literal></expr></argument>, <argument><expr><literal type="number">0xa5</literal></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument>, <argument><expr><literal type="number">0x85</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x76</literal></expr></argument>, <argument><expr><literal type="number">0xcd</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>interface</name></type> <name>IDirect3D8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>interface</name></type> <name>IDirect3DDevice8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>interface</name></type> <name>IDirect3DResource8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>interface</name></type> <name>IDirect3DBaseTexture8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>interface</name></type> <name>IDirect3DTexture8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>interface</name></type> <name>IDirect3DVolumeTexture8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>interface</name></type> <name>IDirect3DCubeTexture8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>interface</name></type> <name>IDirect3DVertexBuffer8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>interface</name></type> <name>IDirect3DIndexBuffer8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>interface</name></type> <name>IDirect3DSurface8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>interface</name></type> <name>IDirect3DVolume8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>interface</name></type> <name>IDirect3DSwapChain8</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>interface</name> <name>IDirect3D8</name></type> <name>IDirect3D8</name>;</typedef>

<typedef>typedef <type><name>interface</name> <name>IDirect3DDevice8</name></type> <name>IDirect3DDevice8</name>;</typedef>

<typedef>typedef <type><name>interface</name> <name>IDirect3DResource8</name></type> <name>IDirect3DResource8</name>;</typedef>

<typedef>typedef <type><name>interface</name> <name>IDirect3DBaseTexture8</name></type> <name>IDirect3DBaseTexture8</name>;</typedef>

<typedef>typedef <type><name>interface</name> <name>IDirect3DTexture8</name></type> <name>IDirect3DTexture8</name>;</typedef>

<typedef>typedef <type><name>interface</name> <name>IDirect3DVolumeTexture8</name></type> <name>IDirect3DVolumeTexture8</name>;</typedef>

<typedef>typedef <type><name>interface</name> <name>IDirect3DCubeTexture8</name></type> <name>IDirect3DCubeTexture8</name>;</typedef>

<typedef>typedef <type><name>interface</name> <name>IDirect3DVertexBuffer8</name></type> <name>IDirect3DVertexBuffer8</name>;</typedef>

<typedef>typedef <type><name>interface</name> <name>IDirect3DIndexBuffer8</name></type> <name>IDirect3DIndexBuffer8</name>;</typedef>

<typedef>typedef <type><name>interface</name> <name>IDirect3DSurface8</name></type> <name>IDirect3DSurface8</name>;</typedef>

<typedef>typedef <type><name>interface</name> <name>IDirect3DVolume8</name></type> <name>IDirect3DVolume8</name>;</typedef>

<typedef>typedef <type><name>interface</name> <name>IDirect3DSwapChain8</name></type> <name>IDirect3DSwapChain8</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d8types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d8caps.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>IDirect3D8</name> <modifier>*</modifier> <name>WINAPI</name></type> <name>Direct3DCreate8</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>SDKVersion</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirect3D8</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirect3D8</argument>, <argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObj</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>RegisterSoftwareDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>void</name><operator>*</operator> <name>pInitializeFunction</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>UINT</argument>, <argument>GetAdapterCount</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetAdapterIdentifier</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Adapter</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>,</operator><name>D3DADAPTER_IDENTIFIER8</name><operator>*</operator> <name>pIdentifier</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>UINT</argument>, <argument>GetAdapterModeCount</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Adapter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EnumAdapterModes</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Adapter</name><operator>,</operator><name>UINT</name> <name>Mode</name><operator>,</operator><name>D3DDISPLAYMODE</name><operator>*</operator> <name>pMode</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetAdapterDisplayMode</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Adapter</name><operator>,</operator><name>D3DDISPLAYMODE</name><operator>*</operator> <name>pMode</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CheckDeviceType</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Adapter</name><operator>,</operator><name>D3DDEVTYPE</name> <name>CheckType</name><operator>,</operator><name>D3DFORMAT</name> <name>DisplayFormat</name><operator>,</operator><name>D3DFORMAT</name> <name>BackBufferFormat</name><operator>,</operator><name>BOOL</name> <name>Windowed</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CheckDeviceFormat</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Adapter</name><operator>,</operator><name>D3DDEVTYPE</name> <name>DeviceType</name><operator>,</operator><name>D3DFORMAT</name> <name>AdapterFormat</name><operator>,</operator><name>DWORD</name> <name>Usage</name><operator>,</operator><name>D3DRESOURCETYPE</name> <name>RType</name><operator>,</operator><name>D3DFORMAT</name> <name>CheckFormat</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CheckDeviceMultiSampleType</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Adapter</name><operator>,</operator><name>D3DDEVTYPE</name> <name>DeviceType</name><operator>,</operator><name>D3DFORMAT</name> <name>SurfaceFormat</name><operator>,</operator><name>BOOL</name> <name>Windowed</name><operator>,</operator><name>D3DMULTISAMPLE_TYPE</name> <name>MultiSampleType</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CheckDepthStencilMatch</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Adapter</name><operator>,</operator><name>D3DDEVTYPE</name> <name>DeviceType</name><operator>,</operator><name>D3DFORMAT</name> <name>AdapterFormat</name><operator>,</operator><name>D3DFORMAT</name> <name>RenderTargetFormat</name><operator>,</operator><name>D3DFORMAT</name> <name>DepthStencilFormat</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceCaps</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Adapter</name><operator>,</operator><name>D3DDEVTYPE</name> <name>DeviceType</name><operator>,</operator><name>D3DCAPS8</name><operator>*</operator> <name>pCaps</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>HMONITOR</argument>, <argument>GetAdapterMonitor</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Adapter</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Adapter</name><operator>,</operator><name>D3DDEVTYPE</name> <name>DeviceType</name><operator>,</operator><name>HWND</name> <name>hFocusWindow</name><operator>,</operator><name>DWORD</name> <name>BehaviorFlags</name><operator>,</operator><name>D3DPRESENT_PARAMETERS</name><operator>*</operator> <name>pPresentationParameters</name><operator>,</operator><name>IDirect3DDevice8</name><operator>*</operator><operator>*</operator> <name>ppReturnedDeviceInterface</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>IDirect3D8</name></name> <modifier>*</modifier></type><name>LPDIRECT3D8</name>, <modifier>*</modifier><name>PDIRECT3D8</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_RegisterSoftwareDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;RegisterSoftwareDevice(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_GetAdapterCount</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetAdapterCount(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_GetAdapterIdentifier</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetAdapterIdentifier(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_GetAdapterModeCount</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetAdapterModeCount(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_EnumAdapterModes</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EnumAdapterModes(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_GetAdapterDisplayMode</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetAdapterDisplayMode(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_CheckDeviceType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CheckDeviceType(p,a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_CheckDeviceFormat</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CheckDeviceFormat(p,a,b,c,d,e,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_CheckDeviceMultiSampleType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CheckDeviceMultiSampleType(p,a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_CheckDepthStencilMatch</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CheckDepthStencilMatch(p,a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_GetDeviceCaps</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceCaps(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_GetAdapterMonitor</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetAdapterMonitor(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_CreateDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateDevice(p,a,b,c,d,e,f)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_RegisterSoftwareDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;RegisterSoftwareDevice(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_GetAdapterCount</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetAdapterCount()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_GetAdapterIdentifier</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetAdapterIdentifier(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_GetAdapterModeCount</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetAdapterModeCount(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_EnumAdapterModes</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EnumAdapterModes(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_GetAdapterDisplayMode</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetAdapterDisplayMode(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_CheckDeviceType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CheckDeviceType(a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_CheckDeviceFormat</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CheckDeviceFormat(a,b,c,d,e,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_CheckDeviceMultiSampleType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CheckDeviceMultiSampleType(a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_CheckDepthStencilMatch</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CheckDepthStencilMatch(a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_GetDeviceCaps</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceCaps(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_GetAdapterMonitor</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetAdapterMonitor(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3D8_CreateDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateDevice(a,b,c,d,e,f)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirect3DDevice8</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirect3DDevice8</argument>, <argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObj</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>TestCooperativeLevel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>UINT</argument>, <argument>GetAvailableTextureMem</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>ResourceManagerDiscardBytes</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Bytes</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDirect3D</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3D8</name><operator>*</operator><operator>*</operator> <name>ppD3D8</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDeviceCaps</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DCAPS8</name><operator>*</operator> <name>pCaps</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDisplayMode</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DDISPLAYMODE</name><operator>*</operator> <name>pMode</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetCreationParameters</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DDEVICE_CREATION_PARAMETERS</name> <operator>*</operator><name>pParameters</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetCursorProperties</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>XHotSpot</name><operator>,</operator><name>UINT</name> <name>YHotSpot</name><operator>,</operator><name>IDirect3DSurface8</name><operator>*</operator> <name>pCursorBitmap</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>void</argument>, <argument>SetCursorPosition</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>int</name> <name>X</name><operator>,</operator><name>int</name> <name>Y</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>BOOL</argument>, <argument>ShowCursor</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>BOOL</name> <name>bShow</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateAdditionalSwapChain</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DPRESENT_PARAMETERS</name><operator>*</operator> <name>pPresentationParameters</name><operator>,</operator><name>IDirect3DSwapChain8</name><operator>*</operator><operator>*</operator> <name>pSwapChain</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Reset</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DPRESENT_PARAMETERS</name><operator>*</operator> <name>pPresentationParameters</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Present</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>CONST</name> <name>RECT</name><operator>*</operator> <name>pSourceRect</name><operator>,</operator><name>CONST</name> <name>RECT</name><operator>*</operator> <name>pDestRect</name><operator>,</operator><name>HWND</name> <name>hDestWindowOverride</name><operator>,</operator><name>CONST</name> <name>RGNDATA</name><operator>*</operator> <name>pDirtyRegion</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetBackBuffer</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>BackBuffer</name><operator>,</operator><name>D3DBACKBUFFER_TYPE</name> <name>Type</name><operator>,</operator><name>IDirect3DSurface8</name><operator>*</operator><operator>*</operator> <name>ppBackBuffer</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetRasterStatus</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DRASTER_STATUS</name><operator>*</operator> <name>pRasterStatus</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>void</argument>, <argument>SetGammaRamp</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Flags</name><operator>,</operator><name>CONST</name> <name>D3DGAMMARAMP</name><operator>*</operator> <name>pRamp</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>void</argument>, <argument>GetGammaRamp</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DGAMMARAMP</name><operator>*</operator> <name>pRamp</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateTexture</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Width</name><operator>,</operator><name>UINT</name> <name>Height</name><operator>,</operator><name>UINT</name> <name>Levels</name><operator>,</operator><name>DWORD</name> <name>Usage</name><operator>,</operator><name>D3DFORMAT</name> <name>Format</name><operator>,</operator><name>D3DPOOL</name> <name>Pool</name><operator>,</operator><name>IDirect3DTexture8</name><operator>*</operator><operator>*</operator> <name>ppTexture</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateVolumeTexture</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Width</name><operator>,</operator><name>UINT</name> <name>Height</name><operator>,</operator><name>UINT</name> <name>Depth</name><operator>,</operator><name>UINT</name> <name>Levels</name><operator>,</operator><name>DWORD</name> <name>Usage</name><operator>,</operator><name>D3DFORMAT</name> <name>Format</name><operator>,</operator><name>D3DPOOL</name> <name>Pool</name><operator>,</operator><name>IDirect3DVolumeTexture8</name><operator>*</operator><operator>*</operator> <name>ppVolumeTexture</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateCubeTexture</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>EdgeLength</name><operator>,</operator><name>UINT</name> <name>Levels</name><operator>,</operator><name>DWORD</name> <name>Usage</name><operator>,</operator><name>D3DFORMAT</name> <name>Format</name><operator>,</operator><name>D3DPOOL</name> <name>Pool</name><operator>,</operator><name>IDirect3DCubeTexture8</name><operator>*</operator><operator>*</operator> <name>ppCubeTexture</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateVertexBuffer</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Length</name><operator>,</operator><name>DWORD</name> <name>Usage</name><operator>,</operator><name>DWORD</name> <name>FVF</name><operator>,</operator><name>D3DPOOL</name> <name>Pool</name><operator>,</operator><name>IDirect3DVertexBuffer8</name><operator>*</operator><operator>*</operator> <name>ppVertexBuffer</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateIndexBuffer</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Length</name><operator>,</operator><name>DWORD</name> <name>Usage</name><operator>,</operator><name>D3DFORMAT</name> <name>Format</name><operator>,</operator><name>D3DPOOL</name> <name>Pool</name><operator>,</operator><name>IDirect3DIndexBuffer8</name><operator>*</operator><operator>*</operator> <name>ppIndexBuffer</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateRenderTarget</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Width</name><operator>,</operator><name>UINT</name> <name>Height</name><operator>,</operator><name>D3DFORMAT</name> <name>Format</name><operator>,</operator><name>D3DMULTISAMPLE_TYPE</name> <name>MultiSample</name><operator>,</operator><name>BOOL</name> <name>Lockable</name><operator>,</operator><name>IDirect3DSurface8</name><operator>*</operator><operator>*</operator> <name>ppSurface</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateDepthStencilSurface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Width</name><operator>,</operator><name>UINT</name> <name>Height</name><operator>,</operator><name>D3DFORMAT</name> <name>Format</name><operator>,</operator><name>D3DMULTISAMPLE_TYPE</name> <name>MultiSample</name><operator>,</operator><name>IDirect3DSurface8</name><operator>*</operator><operator>*</operator> <name>ppSurface</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateImageSurface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Width</name><operator>,</operator><name>UINT</name> <name>Height</name><operator>,</operator><name>D3DFORMAT</name> <name>Format</name><operator>,</operator><name>IDirect3DSurface8</name><operator>*</operator><operator>*</operator> <name>ppSurface</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CopyRects</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DSurface8</name><operator>*</operator> <name>pSourceSurface</name><operator>,</operator><name>CONST</name> <name>RECT</name><operator>*</operator> <name>pSourceRectsArray</name><operator>,</operator><name>UINT</name> <name>cRects</name><operator>,</operator><name>IDirect3DSurface8</name><operator>*</operator> <name>pDestinationSurface</name><operator>,</operator><name>CONST</name> <name>POINT</name><operator>*</operator> <name>pDestPointsArray</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>UpdateTexture</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DBaseTexture8</name><operator>*</operator> <name>pSourceTexture</name><operator>,</operator><name>IDirect3DBaseTexture8</name><operator>*</operator> <name>pDestinationTexture</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetFrontBuffer</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DSurface8</name><operator>*</operator> <name>pDestSurface</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetRenderTarget</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DSurface8</name><operator>*</operator> <name>pRenderTarget</name><operator>,</operator><name>IDirect3DSurface8</name><operator>*</operator> <name>pNewZStencil</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetRenderTarget</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DSurface8</name><operator>*</operator><operator>*</operator> <name>ppRenderTarget</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDepthStencilSurface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DSurface8</name><operator>*</operator><operator>*</operator> <name>ppZStencilSurface</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>BeginScene</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EndScene</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Clear</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Count</name><operator>,</operator><name>CONST</name> <name>D3DRECT</name><operator>*</operator> <name>pRects</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>,</operator><name>D3DCOLOR</name> <name>Color</name><operator>,</operator><name>float</name> <name>Z</name><operator>,</operator><name>DWORD</name> <name>Stencil</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetTransform</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DTRANSFORMSTATETYPE</name> <name>State</name><operator>,</operator><name>CONST</name> <name>D3DMATRIX</name><operator>*</operator> <name>pMatrix</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetTransform</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DTRANSFORMSTATETYPE</name> <name>State</name><operator>,</operator><name>D3DMATRIX</name><operator>*</operator> <name>pMatrix</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>MultiplyTransform</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DTRANSFORMSTATETYPE</name><operator>,</operator><name>CONST</name> <name>D3DMATRIX</name><operator>*</operator><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetViewport</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>CONST</name> <name>D3DVIEWPORT8</name><operator>*</operator> <name>pViewport</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetViewport</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DVIEWPORT8</name><operator>*</operator> <name>pViewport</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetMaterial</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>CONST</name> <name>D3DMATERIAL8</name><operator>*</operator> <name>pMaterial</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetMaterial</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DMATERIAL8</name><operator>*</operator> <name>pMaterial</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetLight</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Index</name><operator>,</operator><name>CONST</name> <name>D3DLIGHT8</name><operator>*</operator><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetLight</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Index</name><operator>,</operator><name>D3DLIGHT8</name><operator>*</operator><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>LightEnable</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Index</name><operator>,</operator><name>BOOL</name> <name>Enable</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetLightEnable</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Index</name><operator>,</operator><name>BOOL</name><operator>*</operator> <name>pEnable</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetClipPlane</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Index</name><operator>,</operator><name>CONST</name> <name>float</name><operator>*</operator> <name>pPlane</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetClipPlane</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Index</name><operator>,</operator><name>float</name><operator>*</operator> <name>pPlane</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetRenderState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DRENDERSTATETYPE</name> <name>State</name><operator>,</operator><name>DWORD</name> <name>Value</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetRenderState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DRENDERSTATETYPE</name> <name>State</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pValue</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>BeginStateBlock</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>EndStateBlock</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name><operator>*</operator> <name>pToken</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>ApplyStateBlock</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Token</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CaptureStateBlock</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Token</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>DeleteStateBlock</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Token</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateStateBlock</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DSTATEBLOCKTYPE</name> <name>Type</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pToken</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetClipStatus</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>CONST</name> <name>D3DCLIPSTATUS8</name><operator>*</operator> <name>pClipStatus</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetClipStatus</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DCLIPSTATUS8</name><operator>*</operator> <name>pClipStatus</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetTexture</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Stage</name><operator>,</operator><name>IDirect3DBaseTexture8</name><operator>*</operator><operator>*</operator> <name>ppTexture</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetTexture</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Stage</name><operator>,</operator><name>IDirect3DBaseTexture8</name><operator>*</operator> <name>pTexture</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetTextureStageState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Stage</name><operator>,</operator><name>D3DTEXTURESTAGESTATETYPE</name> <name>Type</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pValue</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetTextureStageState</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Stage</name><operator>,</operator><name>D3DTEXTURESTAGESTATETYPE</name> <name>Type</name><operator>,</operator><name>DWORD</name> <name>Value</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>ValidateDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name><operator>*</operator> <name>pNumPasses</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetInfo</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>DevInfoID</name><operator>,</operator><name>void</name><operator>*</operator> <name>pDevInfoStruct</name><operator>,</operator><name>DWORD</name> <name>DevInfoStructSize</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetPaletteEntries</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>PaletteNumber</name><operator>,</operator><name>CONST</name> <name>PALETTEENTRY</name><operator>*</operator> <name>pEntries</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetPaletteEntries</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>PaletteNumber</name><operator>,</operator><name>PALETTEENTRY</name><operator>*</operator> <name>pEntries</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetCurrentTexturePalette</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>PaletteNumber</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetCurrentTexturePalette</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <operator>*</operator><name>PaletteNumber</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>DrawPrimitive</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DPRIMITIVETYPE</name> <name>PrimitiveType</name><operator>,</operator><name>UINT</name> <name>StartVertex</name><operator>,</operator><name>UINT</name> <name>PrimitiveCount</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>DrawIndexedPrimitive</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DPRIMITIVETYPE</name><operator>,</operator><name>UINT</name> <name>minIndex</name><operator>,</operator><name>UINT</name> <name>NumVertices</name><operator>,</operator><name>UINT</name> <name>startIndex</name><operator>,</operator><name>UINT</name> <name>primCount</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>DrawPrimitiveUP</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DPRIMITIVETYPE</name> <name>PrimitiveType</name><operator>,</operator><name>UINT</name> <name>PrimitiveCount</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pVertexStreamZeroData</name><operator>,</operator><name>UINT</name> <name>VertexStreamZeroStride</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>DrawIndexedPrimitiveUP</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DPRIMITIVETYPE</name> <name>PrimitiveType</name><operator>,</operator><name>UINT</name> <name>MinVertexIndex</name><operator>,</operator><name>UINT</name> <name>NumVertexIndices</name><operator>,</operator><name>UINT</name> <name>PrimitiveCount</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pIndexData</name><operator>,</operator><name>D3DFORMAT</name> <name>IndexDataFormat</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pVertexStreamZeroData</name><operator>,</operator><name>UINT</name> <name>VertexStreamZeroStride</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>ProcessVertices</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>SrcStartIndex</name><operator>,</operator><name>UINT</name> <name>DestIndex</name><operator>,</operator><name>UINT</name> <name>VertexCount</name><operator>,</operator><name>IDirect3DVertexBuffer8</name><operator>*</operator> <name>pDestBuffer</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreateVertexShader</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>CONST</name> <name>DWORD</name><operator>*</operator> <name>pDeclaration</name><operator>,</operator><name>CONST</name> <name>DWORD</name><operator>*</operator> <name>pFunction</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pHandle</name><operator>,</operator><name>DWORD</name> <name>Usage</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetVertexShader</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Handle</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetVertexShader</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name><operator>*</operator> <name>pHandle</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>DeleteVertexShader</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Handle</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetVertexShaderConstant</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Register</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pConstantData</name><operator>,</operator><name>DWORD</name> <name>ConstantCount</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetVertexShaderConstant</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Register</name><operator>,</operator><name>void</name><operator>*</operator> <name>pConstantData</name><operator>,</operator><name>DWORD</name> <name>ConstantCount</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetVertexShaderDeclaration</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Handle</name><operator>,</operator><name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pSizeOfData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetVertexShaderFunction</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Handle</name><operator>,</operator><name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pSizeOfData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetStreamSource</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>StreamNumber</name><operator>,</operator><name>IDirect3DVertexBuffer8</name><operator>*</operator> <name>pStreamData</name><operator>,</operator><name>UINT</name> <name>Stride</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetStreamSource</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>StreamNumber</name><operator>,</operator><name>IDirect3DVertexBuffer8</name><operator>*</operator><operator>*</operator> <name>ppStreamData</name><operator>,</operator><name>UINT</name><operator>*</operator> <name>pStride</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetIndices</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DIndexBuffer8</name><operator>*</operator> <name>pIndexData</name><operator>,</operator><name>UINT</name> <name>BaseVertexIndex</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetIndices</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DIndexBuffer8</name><operator>*</operator><operator>*</operator> <name>ppIndexData</name><operator>,</operator><name>UINT</name><operator>*</operator> <name>pBaseVertexIndex</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>CreatePixelShader</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>CONST</name> <name>DWORD</name><operator>*</operator> <name>pFunction</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pHandle</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetPixelShader</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Handle</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetPixelShader</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name><operator>*</operator> <name>pHandle</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>DeletePixelShader</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Handle</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetPixelShaderConstant</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Register</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pConstantData</name><operator>,</operator><name>DWORD</name> <name>ConstantCount</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetPixelShaderConstant</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Register</name><operator>,</operator><name>void</name><operator>*</operator> <name>pConstantData</name><operator>,</operator><name>DWORD</name> <name>ConstantCount</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetPixelShaderFunction</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>Handle</name><operator>,</operator><name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pSizeOfData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>DrawRectPatch</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Handle</name><operator>,</operator><name>CONST</name> <name>float</name><operator>*</operator> <name>pNumSegs</name><operator>,</operator><name>CONST</name> <name>D3DRECTPATCH_INFO</name><operator>*</operator> <name>pRectPatchInfo</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>DrawTriPatch</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Handle</name><operator>,</operator><name>CONST</name> <name>float</name><operator>*</operator> <name>pNumSegs</name><operator>,</operator><name>CONST</name> <name>D3DTRIPATCH_INFO</name><operator>*</operator> <name>pTriPatchInfo</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>DeletePatch</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Handle</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>IDirect3DDevice8</name></name> <modifier>*</modifier></type><name>LPDIRECT3DDEVICE8</name>, <modifier>*</modifier><name>PDIRECT3DDEVICE8</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_TestCooperativeLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;TestCooperativeLevel(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetAvailableTextureMem</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetAvailableTextureMem(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_ResourceManagerDiscardBytes</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;ResourceManagerDiscardBytes(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetDirect3D</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDirect3D(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetDeviceCaps</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDeviceCaps(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetDisplayMode</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDisplayMode(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetCreationParameters</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetCreationParameters(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetCursorProperties</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetCursorProperties(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetCursorPosition</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetCursorPosition(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_ShowCursor</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;ShowCursor(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateAdditionalSwapChain</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateAdditionalSwapChain(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_Reset</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Reset(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_Present</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Present(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetBackBuffer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetBackBuffer(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetRasterStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetRasterStatus(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetGammaRamp</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetGammaRamp(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetGammaRamp</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetGammaRamp(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateTexture</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateTexture(p,a,b,c,d,e,f,g)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateVolumeTexture</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateVolumeTexture(p,a,b,c,d,e,f,g,h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateCubeTexture</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateCubeTexture(p,a,b,c,d,e,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateVertexBuffer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateVertexBuffer(p,a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateIndexBuffer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateIndexBuffer(p,a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateRenderTarget</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateRenderTarget(p,a,b,c,d,e,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateDepthStencilSurface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateDepthStencilSurface(p,a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateImageSurface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateImageSurface(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CopyRects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CopyRects(p,a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_UpdateTexture</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;UpdateTexture(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetFrontBuffer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetFrontBuffer(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetRenderTarget</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetRenderTarget(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetRenderTarget</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetRenderTarget(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetDepthStencilSurface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDepthStencilSurface(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_BeginScene</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;BeginScene(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_EndScene</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EndScene(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_Clear</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Clear(p,a,b,c,d,e,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetTransform</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetTransform(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetTransform</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetTransform(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_MultiplyTransform</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;MultiplyTransform(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetViewport</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetViewport(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetViewport</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetViewport(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetMaterial</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetMaterial(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetMaterial</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetMaterial(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetLight</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetLight(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetLight</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetLight(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_LightEnable</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;LightEnable(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetLightEnable</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetLightEnable(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetClipPlane</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetClipPlane(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetClipPlane</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetClipPlane(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetRenderState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetRenderState(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetRenderState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetRenderState(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_BeginStateBlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;BeginStateBlock(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_EndStateBlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;EndStateBlock(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_ApplyStateBlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;ApplyStateBlock(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CaptureStateBlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CaptureStateBlock(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DeleteStateBlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;DeleteStateBlock(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateStateBlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateStateBlock(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetClipStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetClipStatus(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetClipStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetClipStatus(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetTexture</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetTexture(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetTexture</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetTexture(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetTextureStageState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetTextureStageState(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetTextureStageState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetTextureStageState(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_ValidateDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;ValidateDevice(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetInfo(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetPaletteEntries</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPaletteEntries(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetPaletteEntries</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPaletteEntries(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetCurrentTexturePalette</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetCurrentTexturePalette(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetCurrentTexturePalette</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetCurrentTexturePalette(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DrawPrimitive</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;DrawPrimitive(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DrawIndexedPrimitive</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;DrawIndexedPrimitive(p,a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DrawPrimitiveUP</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;DrawPrimitiveUP(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DrawIndexedPrimitiveUP</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;DrawIndexedPrimitiveUP(p,a,b,c,d,e,f,g,h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_ProcessVertices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;ProcessVertices(p,a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateVertexShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreateVertexShader(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetVertexShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetVertexShader(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetVertexShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetVertexShader(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DeleteVertexShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;DeleteVertexShader(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetVertexShaderConstant</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetVertexShaderConstant(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetVertexShaderConstant</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetVertexShaderConstant(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetVertexShaderDeclaration</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetVertexShaderDeclaration(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetVertexShaderFunction</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetVertexShaderFunction(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetStreamSource</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetStreamSource(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetStreamSource</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetStreamSource(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetIndices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetIndices(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetIndices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetIndices(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreatePixelShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;CreatePixelShader(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetPixelShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPixelShader(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetPixelShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPixelShader(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DeletePixelShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;DeletePixelShader(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetPixelShaderConstant</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPixelShaderConstant(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetPixelShaderConstant</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPixelShaderConstant(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetPixelShaderFunction</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPixelShaderFunction(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DrawRectPatch</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;DrawRectPatch(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DrawTriPatch</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;DrawTriPatch(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DeletePatch</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;DeletePatch(p,a)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_TestCooperativeLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;TestCooperativeLevel()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetAvailableTextureMem</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetAvailableTextureMem()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_ResourceManagerDiscardBytes</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;ResourceManagerDiscardBytes(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetDirect3D</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDirect3D(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetDeviceCaps</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDeviceCaps(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetDisplayMode</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDisplayMode(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetCreationParameters</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetCreationParameters(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetCursorProperties</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetCursorProperties(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetCursorPosition</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetCursorPosition(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_ShowCursor</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;ShowCursor(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateAdditionalSwapChain</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateAdditionalSwapChain(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_Reset</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Reset(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_Present</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Present(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetBackBuffer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetBackBuffer(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetRasterStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetRasterStatus(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetGammaRamp</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetGammaRamp(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetGammaRamp</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetGammaRamp(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateTexture</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateTexture(a,b,c,d,e,f,g)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateVolumeTexture</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateVolumeTexture(a,b,c,d,e,f,g,h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateCubeTexture</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateCubeTexture(a,b,c,d,e,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateVertexBuffer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateVertexBuffer(a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateIndexBuffer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateIndexBuffer(a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateRenderTarget</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateRenderTarget(a,b,c,d,e,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateDepthStencilSurface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateDepthStencilSurface(a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateImageSurface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateImageSurface(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CopyRects</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CopyRects(a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_UpdateTexture</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;UpdateTexture(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetFrontBuffer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetFrontBuffer(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetRenderTarget</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetRenderTarget(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetRenderTarget</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetRenderTarget(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetDepthStencilSurface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDepthStencilSurface(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_BeginScene</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;BeginScene()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_EndScene</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EndScene()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_Clear</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Clear(a,b,c,d,e,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetTransform</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetTransform(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetTransform</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetTransform(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_MultiplyTransform</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;MultiplyTransform(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetViewport</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetViewport(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetViewport</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetViewport(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetMaterial</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetMaterial(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetMaterial</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetMaterial(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetLight</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetLight(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetLight</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetLight(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_LightEnable</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;LightEnable(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetLightEnable</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetLightEnable(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetClipPlane</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetClipPlane(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetClipPlane</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetClipPlane(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetRenderState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetRenderState(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetRenderState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetRenderState(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_BeginStateBlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;BeginStateBlock()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_EndStateBlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;EndStateBlock(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_ApplyStateBlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;ApplyStateBlock(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CaptureStateBlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CaptureStateBlock(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DeleteStateBlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;DeleteStateBlock(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateStateBlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateStateBlock(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetClipStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetClipStatus(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetClipStatus</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetClipStatus(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetTexture</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetTexture(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetTexture</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetTexture(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetTextureStageState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetTextureStageState(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetTextureStageState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetTextureStageState(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_ValidateDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;ValidateDevice(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetInfo</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetInfo(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetPaletteEntries</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPaletteEntries(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetPaletteEntries</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPaletteEntries(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetCurrentTexturePalette</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetCurrentTexturePalette(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetCurrentTexturePalette</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetCurrentTexturePalette(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DrawPrimitive</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;DrawPrimitive(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DrawIndexedPrimitive</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;DrawIndexedPrimitive(a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DrawPrimitiveUP</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;DrawPrimitiveUP(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DrawIndexedPrimitiveUP</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;DrawIndexedPrimitiveUP(a,b,c,d,e,f,g,h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_ProcessVertices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;ProcessVertices(a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreateVertexShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreateVertexShader(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetVertexShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetVertexShader(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetVertexShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetVertexShader(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DeleteVertexShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;DeleteVertexShader(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetVertexShaderConstant</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetVertexShaderConstant(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetVertexShaderConstant</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetVertexShaderConstant(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetVertexShaderDeclaration</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetVertexShaderDeclaration(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetVertexShaderFunction</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetVertexShaderFunction(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetStreamSource</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetStreamSource(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetStreamSource</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetStreamSource(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetIndices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetIndices(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetIndices</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetIndices(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_CreatePixelShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;CreatePixelShader(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetPixelShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPixelShader(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetPixelShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPixelShader(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DeletePixelShader</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;DeletePixelShader(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_SetPixelShaderConstant</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPixelShaderConstant(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetPixelShaderConstant</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPixelShaderConstant(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_GetPixelShaderFunction</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPixelShaderFunction(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DrawRectPatch</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;DrawRectPatch(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DrawTriPatch</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;DrawTriPatch(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DDevice8_DeletePatch</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;DeletePatch(a)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirect3DSwapChain8</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirect3DSwapChain8</argument>, <argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObj</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Present</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>CONST</name> <name>RECT</name><operator>*</operator> <name>pSourceRect</name><operator>,</operator><name>CONST</name> <name>RECT</name><operator>*</operator> <name>pDestRect</name><operator>,</operator><name>HWND</name> <name>hDestWindowOverride</name><operator>,</operator><name>CONST</name> <name>RGNDATA</name><operator>*</operator> <name>pDirtyRegion</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetBackBuffer</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>BackBuffer</name><operator>,</operator><name>D3DBACKBUFFER_TYPE</name> <name>Type</name><operator>,</operator><name>IDirect3DSurface8</name><operator>*</operator><operator>*</operator> <name>ppBackBuffer</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>IDirect3DSwapChain8</name></name> <modifier>*</modifier></type><name>LPDIRECT3DSWAPCHAIN8</name>, <modifier>*</modifier><name>PDIRECT3DSWAPCHAIN8</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSwapChain8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSwapChain8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSwapChain8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSwapChain8_Present</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Present(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSwapChain8_GetBackBuffer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetBackBuffer(p,a,b,c)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSwapChain8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSwapChain8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSwapChain8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSwapChain8_Present</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Present(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSwapChain8_GetBackBuffer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetBackBuffer(a,b,c)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirect3DResource8</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirect3DResource8</argument>, <argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObj</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DDevice8</name><operator>*</operator><operator>*</operator> <name>ppDevice</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name> <name>SizeOfData</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pSizeOfData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FreePrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>SetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>PriorityNew</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>void</argument>, <argument>PreLoad</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>D3DRESOURCETYPE</argument>, <argument>GetType</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>IDirect3DResource8</name></name> <modifier>*</modifier></type><name>LPDIRECT3DRESOURCE8</name>, <modifier>*</modifier><name>PDIRECT3DRESOURCE8</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDevice(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPrivateData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPrivateData(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;FreePrivateData(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPriority(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPriority(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;PreLoad(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetType(p)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDevice(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPrivateData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPrivateData(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;FreePrivateData(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPriority(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPriority()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;PreLoad()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DResource8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetType()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirect3DBaseTexture8</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirect3DBaseTexture8</argument>, <argument>IDirect3DResource8</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObj</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DDevice8</name><operator>*</operator><operator>*</operator> <name>ppDevice</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name> <name>SizeOfData</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pSizeOfData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FreePrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>SetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>PriorityNew</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>void</argument>, <argument>PreLoad</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>D3DRESOURCETYPE</argument>, <argument>GetType</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>SetLOD</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>LODNew</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetLOD</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetLevelCount</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>IDirect3DBaseTexture8</name></name> <modifier>*</modifier></type><name>LPDIRECT3DBASETEXTURE8</name>, <modifier>*</modifier><name>PDIRECT3DBASETEXTURE8</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDevice(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPrivateData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPrivateData(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;FreePrivateData(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPriority(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPriority(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;PreLoad(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetType(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_SetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetLOD(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_GetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetLOD(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_GetLevelCount</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetLevelCount(p)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDevice(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPrivateData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPrivateData(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;FreePrivateData(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPriority(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPriority()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;PreLoad()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetType()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_SetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetLOD(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_GetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetLOD()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DBaseTexture8_GetLevelCount</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetLevelCount()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirect3DTexture8</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirect3DTexture8</argument>, <argument>IDirect3DBaseTexture8</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObj</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DDevice8</name><operator>*</operator><operator>*</operator> <name>ppDevice</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name> <name>SizeOfData</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pSizeOfData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FreePrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>SetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>PriorityNew</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>void</argument>, <argument>PreLoad</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>D3DRESOURCETYPE</argument>, <argument>GetType</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>SetLOD</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>LODNew</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetLOD</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetLevelCount</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetLevelDesc</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Level</name><operator>,</operator><name>D3DSURFACE_DESC</name> <operator>*</operator><name>pDesc</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetSurfaceLevel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Level</name><operator>,</operator><name>IDirect3DSurface8</name><operator>*</operator><operator>*</operator> <name>ppSurfaceLevel</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>LockRect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Level</name><operator>,</operator><name>D3DLOCKED_RECT</name><operator>*</operator> <name>pLockedRect</name><operator>,</operator><name>CONST</name> <name>RECT</name><operator>*</operator> <name>pRect</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>UnlockRect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Level</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>AddDirtyRect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>CONST</name> <name>RECT</name><operator>*</operator> <name>pDirtyRect</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>IDirect3DTexture8</name></name> <modifier>*</modifier></type><name>LPDIRECT3DTEXTURE8</name>, <modifier>*</modifier><name>PDIRECT3DTEXTURE8</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDevice(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPrivateData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPrivateData(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;FreePrivateData(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPriority(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPriority(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;PreLoad(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetType(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_SetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetLOD(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetLOD(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetLevelCount</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetLevelCount(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetLevelDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetLevelDesc(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetSurfaceLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetSurfaceLevel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_LockRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;LockRect(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_UnlockRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;UnlockRect(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_AddDirtyRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddDirtyRect(p,a)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDevice(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPrivateData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPrivateData(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;FreePrivateData(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPriority(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPriority()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;PreLoad()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetType()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_SetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetLOD(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetLOD()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetLevelCount</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetLevelCount()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetLevelDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetLevelDesc(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_GetSurfaceLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetSurfaceLevel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_LockRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;LockRect(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_UnlockRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;UnlockRect(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DTexture8_AddDirtyRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddDirtyRect(a)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirect3DVolumeTexture8</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirect3DVolumeTexture8</argument>, <argument>IDirect3DBaseTexture8</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObj</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DDevice8</name><operator>*</operator><operator>*</operator> <name>ppDevice</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name> <name>SizeOfData</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pSizeOfData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FreePrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>SetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>PriorityNew</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>void</argument>, <argument>PreLoad</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>D3DRESOURCETYPE</argument>, <argument>GetType</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>SetLOD</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>LODNew</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetLOD</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetLevelCount</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetLevelDesc</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Level</name><operator>,</operator><name>D3DVOLUME_DESC</name> <operator>*</operator><name>pDesc</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetVolumeLevel</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Level</name><operator>,</operator><name>IDirect3DVolume8</name><operator>*</operator><operator>*</operator> <name>ppVolumeLevel</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>LockBox</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Level</name><operator>,</operator><name>D3DLOCKED_BOX</name><operator>*</operator> <name>pLockedVolume</name><operator>,</operator><name>CONST</name> <name>D3DBOX</name><operator>*</operator> <name>pBox</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>UnlockBox</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Level</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>AddDirtyBox</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>CONST</name> <name>D3DBOX</name><operator>*</operator> <name>pDirtyBox</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>IDirect3DVolumeTexture8</name></name> <modifier>*</modifier></type><name>LPDIRECT3DVOLUMETEXTURE8</name>, <modifier>*</modifier><name>PDIRECT3DVOLUMETEXTURE8</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDevice(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPrivateData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPrivateData(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;FreePrivateData(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPriority(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPriority(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;PreLoad(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetType(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_SetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetLOD(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetLOD(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetLevelCount</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetLevelCount(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetLevelDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetLevelDesc(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetVolumeLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetVolumeLevel(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_LockBox</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;LockBox(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_UnlockBox</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;UnlockBox(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_AddDirtyBox</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddDirtyBox(p,a)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDevice(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPrivateData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPrivateData(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;FreePrivateData(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPriority(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPriority()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;PreLoad()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetType()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_SetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetLOD(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetLOD()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetLevelCount</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetLevelCount()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetLevelDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetLevelDesc(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_GetVolumeLevel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetVolumeLevel(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_LockBox</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;LockBox(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_UnlockBox</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;UnlockBox(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolumeTexture8_AddDirtyBox</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddDirtyBox(a)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirect3DCubeTexture8</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirect3DCubeTexture8</argument>, <argument>IDirect3DBaseTexture8</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObj</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DDevice8</name><operator>*</operator><operator>*</operator> <name>ppDevice</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name> <name>SizeOfData</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pSizeOfData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FreePrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>SetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>PriorityNew</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>void</argument>, <argument>PreLoad</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>D3DRESOURCETYPE</argument>, <argument>GetType</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>SetLOD</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>LODNew</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetLOD</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetLevelCount</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetLevelDesc</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>Level</name><operator>,</operator><name>D3DSURFACE_DESC</name> <operator>*</operator><name>pDesc</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetCubeMapSurface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DCUBEMAP_FACES</name> <name>FaceType</name><operator>,</operator><name>UINT</name> <name>Level</name><operator>,</operator><name>IDirect3DSurface8</name><operator>*</operator><operator>*</operator> <name>ppCubeMapSurface</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>LockRect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DCUBEMAP_FACES</name> <name>FaceType</name><operator>,</operator><name>UINT</name> <name>Level</name><operator>,</operator><name>D3DLOCKED_RECT</name><operator>*</operator> <name>pLockedRect</name><operator>,</operator><name>CONST</name> <name>RECT</name><operator>*</operator> <name>pRect</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>UnlockRect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DCUBEMAP_FACES</name> <name>FaceType</name><operator>,</operator><name>UINT</name> <name>Level</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>AddDirtyRect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DCUBEMAP_FACES</name> <name>FaceType</name><operator>,</operator><name>CONST</name> <name>RECT</name><operator>*</operator> <name>pDirtyRect</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>IDirect3DCubeTexture8</name></name> <modifier>*</modifier></type><name>LPDIRECT3DCUBETEXTURE8</name>, <modifier>*</modifier><name>PDIRECT3DCUBETEXTURE8</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDevice(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPrivateData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPrivateData(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;FreePrivateData(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPriority(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPriority(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;PreLoad(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetType(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_SetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetLOD(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetLOD(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetLevelCount</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetLevelCount(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetLevelDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetLevelDesc(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetCubeMapSurface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetCubeMapSurface(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_LockRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;LockRect(p,a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_UnlockRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;UnlockRect(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_AddDirtyRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddDirtyRect(p,a,b)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDevice(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPrivateData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPrivateData(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;FreePrivateData(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPriority(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPriority()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;PreLoad()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetType()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_SetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetLOD(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetLOD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetLOD()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetLevelCount</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetLevelCount()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetLevelDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetLevelDesc(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_GetCubeMapSurface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetCubeMapSurface(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_LockRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;LockRect(a,b,c,d,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_UnlockRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;UnlockRect(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DCubeTexture8_AddDirtyRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddDirtyRect(a,b)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirect3DVertexBuffer8</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirect3DVertexBuffer8</argument>, <argument>IDirect3DResource8</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObj</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DDevice8</name><operator>*</operator><operator>*</operator> <name>ppDevice</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name> <name>SizeOfData</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pSizeOfData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FreePrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>SetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>PriorityNew</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>void</argument>, <argument>PreLoad</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>D3DRESOURCETYPE</argument>, <argument>GetType</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Lock</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>OffsetToLock</name><operator>,</operator><name>UINT</name> <name>SizeToLock</name><operator>,</operator><name>BYTE</name><operator>*</operator><operator>*</operator> <name>ppbData</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Unlock</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDesc</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DVERTEXBUFFER_DESC</name> <operator>*</operator><name>pDesc</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>IDirect3DVertexBuffer8</name></name> <modifier>*</modifier></type><name>LPDIRECT3DVERTEXBUFFER8</name>, <modifier>*</modifier><name>PDIRECT3DVERTEXBUFFER8</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDevice(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPrivateData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPrivateData(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;FreePrivateData(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPriority(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPriority(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;PreLoad(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetType(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_Lock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Lock(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_Unlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Unlock(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_GetDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDesc(p,a)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDevice(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPrivateData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPrivateData(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;FreePrivateData(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPriority(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPriority()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;PreLoad()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetType()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_Lock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Lock(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_Unlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Unlock()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVertexBuffer8_GetDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDesc(a)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirect3DIndexBuffer8</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirect3DIndexBuffer8</argument>, <argument>IDirect3DResource8</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObj</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DDevice8</name><operator>*</operator><operator>*</operator> <name>ppDevice</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name> <name>SizeOfData</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pSizeOfData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FreePrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>SetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>DWORD</name> <name>PriorityNew</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>DWORD</argument>, <argument>GetPriority</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>void</argument>, <argument>PreLoad</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>D3DRESOURCETYPE</argument>, <argument>GetType</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Lock</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>UINT</name> <name>OffsetToLock</name><operator>,</operator><name>UINT</name> <name>SizeToLock</name><operator>,</operator><name>BYTE</name><operator>*</operator><operator>*</operator> <name>ppbData</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>Unlock</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDesc</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DINDEXBUFFER_DESC</name> <operator>*</operator><name>pDesc</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>IDirect3DIndexBuffer8</name></name> <modifier>*</modifier></type><name>LPDIRECT3DINDEXBUFFER8</name>, <modifier>*</modifier><name>PDIRECT3DINDEXBUFFER8</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDevice(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPrivateData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPrivateData(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;FreePrivateData(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPriority(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPriority(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;PreLoad(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetType(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_Lock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Lock(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_Unlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Unlock(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_GetDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDesc(p,a)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDevice(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPrivateData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPrivateData(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;FreePrivateData(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_SetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPriority(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_GetPriority</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPriority()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_PreLoad</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;PreLoad()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_GetType</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetType()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_Lock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Lock(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_Unlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Unlock()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DIndexBuffer8_GetDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDesc(a)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirect3DSurface8</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirect3DSurface8</argument>, <argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObj</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DDevice8</name><operator>*</operator><operator>*</operator> <name>ppDevice</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name> <name>SizeOfData</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pSizeOfData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FreePrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetContainer</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator><name>void</name><operator>*</operator><operator>*</operator> <name>ppContainer</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDesc</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DSURFACE_DESC</name> <operator>*</operator><name>pDesc</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>LockRect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DLOCKED_RECT</name><operator>*</operator> <name>pLockedRect</name><operator>,</operator><name>CONST</name> <name>RECT</name><operator>*</operator> <name>pRect</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>UnlockRect</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>IDirect3DSurface8</name></name> <modifier>*</modifier></type><name>LPDIRECT3DSURFACE8</name>, <modifier>*</modifier><name>PDIRECT3DSURFACE8</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDevice(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPrivateData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPrivateData(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;FreePrivateData(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_GetContainer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetContainer(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_GetDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDesc(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_LockRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;LockRect(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_UnlockRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;UnlockRect(p)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDevice(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPrivateData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPrivateData(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;FreePrivateData(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_GetContainer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetContainer(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_GetDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDesc(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_LockRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;LockRect(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DSurface8_UnlockRect</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;UnlockRect()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IDirect3DVolume8</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IDirect3DVolume8</argument>, <argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator> <name>void</name><operator>*</operator><operator>*</operator> <name>ppvObj</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>AddRef</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD_</name><argument_list>(<argument>ULONG</argument>,<argument>Release</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDevice</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>IDirect3DDevice8</name><operator>*</operator><operator>*</operator> <name>ppDevice</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>SetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>CONST</name> <name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name> <name>SizeOfData</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetPrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>,</operator><name>void</name><operator>*</operator> <name>pData</name><operator>,</operator><name>DWORD</name><operator>*</operator> <name>pSizeOfData</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>FreePrivateData</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFGUID</name> <name>refguid</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetContainer</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name> <name>riid</name><operator>,</operator><name>void</name><operator>*</operator><operator>*</operator> <name>ppContainer</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>GetDesc</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DVOLUME_DESC</name> <operator>*</operator><name>pDesc</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>LockBox</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>D3DLOCKED_BOX</name> <operator>*</operator> <name>pLockedVolume</name><operator>,</operator><name>CONST</name> <name>D3DBOX</name><operator>*</operator> <name>pBox</name><operator>,</operator><name>DWORD</name> <name>Flags</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<macro><name>STDMETHOD</name><argument_list>(<argument>UnlockBox</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>THIS</name><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

</block_content>}</block><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>IDirect3DVolume8</name></name> <modifier>*</modifier></type><name>LPDIRECT3DVOLUME8</name>, <modifier>*</modifier><name>PDIRECT3DVOLUME8</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;QueryInterface(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;AddRef(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;Release(p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDevice(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;SetPrivateData(p,a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetPrivateData(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;FreePrivateData(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_GetContainer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetContainer(p,a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_GetDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;GetDesc(p,a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_LockBox</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;LockBox(p,a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_UnlockBox</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;lpVtbl-&gt;UnlockBox(p)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_QueryInterface</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;QueryInterface(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_AddRef</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;AddRef()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_Release</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;Release()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_GetDevice</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDevice(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_SetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;SetPrivateData(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_GetPrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetPrivateData(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_FreePrivateData</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;FreePrivateData(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_GetContainer</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetContainer(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_GetDesc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;GetDesc(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_LockBox</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;LockBox(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDirect3DVolume8_UnlockBox</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)-&gt;UnlockBox()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSPD_IUNKNOWN</name></cpp:macro> <cpp:value>0x00000001L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCURRENT_DISPLAY_MODE</name></cpp:macro> <cpp:value>0x00EFFFFFL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCREATE_FPU_PRESERVE</name></cpp:macro> <cpp:value>0x00000002L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCREATE_MULTITHREADED</name></cpp:macro> <cpp:value>0x00000004L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCREATE_PUREDEVICE</name></cpp:macro> <cpp:value>0x00000010L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCREATE_SOFTWARE_VERTEXPROCESSING</name></cpp:macro> <cpp:value>0x00000020L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCREATE_HARDWARE_VERTEXPROCESSING</name></cpp:macro> <cpp:value>0x00000040L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCREATE_MIXED_VERTEXPROCESSING</name></cpp:macro> <cpp:value>0x00000080L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCREATE_DISABLE_DRIVER_MANAGEMENT</name></cpp:macro> <cpp:value>0x00000100L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DADAPTER_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DENUM_NO_WHQL_LEVEL</name></cpp:macro> <cpp:value>0x00000002L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DPRESENT_BACK_BUFFERS_MAX</name></cpp:macro> <cpp:value>3L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSGR_NO_CALIBRATION</name></cpp:macro> <cpp:value>0x00000000L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DSGR_CALIBRATE</name></cpp:macro> <cpp:value>0x00000001L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DCURSOR_IMMEDIATE_UPDATE</name></cpp:macro> <cpp:value>0x00000001L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FACD3D</name></cpp:macro> <cpp:value>0x876</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_D3DHRESULT</name><parameter_list>( <parameter><type><name>code</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>MAKE_HRESULT( 1, _FACD3D, code )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D_OK</name></cpp:macro> <cpp:value>S_OK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_WRONGTEXTUREFORMAT</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2072)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_UNSUPPORTEDCOLOROPERATION</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2073)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_UNSUPPORTEDCOLORARG</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2074)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_UNSUPPORTEDALPHAOPERATION</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2075)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_UNSUPPORTEDALPHAARG</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2076)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_TOOMANYOPERATIONS</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2077)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_CONFLICTINGTEXTUREFILTER</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2078)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_UNSUPPORTEDFACTORVALUE</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2079)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_CONFLICTINGRENDERSTATE</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2081)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_UNSUPPORTEDTEXTUREFILTER</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2082)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_CONFLICTINGTEXTUREPALETTE</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2086)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_DRIVERINTERNALERROR</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2087)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_NOTFOUND</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2150)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_MOREDATA</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2151)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_DEVICELOST</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2152)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_DEVICENOTRESET</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2153)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_NOTAVAILABLE</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2154)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_OUTOFVIDEOMEMORY</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(380)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_INVALIDDEVICE</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2155)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_INVALIDCALL</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2156)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DERR_DRIVERINVALIDCALL</name></cpp:macro> <cpp:value>MAKE_D3DHRESULT(2157)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
