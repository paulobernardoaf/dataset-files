<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\win-capture\window-capture.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dc-capture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"window-helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libobs/util/platform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libobs-winrt/winrt-capture.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_WINDOW_CAPTURE</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_WINDOW</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Window")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_METHOD</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Method")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_METHOD_AUTO</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Method.Auto")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_METHOD_BITBLT</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Method.BitBlt")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_METHOD_WGC</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Method.WindowsGraphicsCapture")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MATCH_PRIORITY</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Priority")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MATCH_TITLE</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Priority.Title")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MATCH_CLASS</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Priority.Class")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MATCH_EXE</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Priority.Exe")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_CAPTURE_CURSOR</name></cpp:macro> <cpp:value>obs_module_text("CaptureCursor")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_COMPATIBILITY</name></cpp:macro> <cpp:value>obs_module_text("Compatibility")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_CLIENT_AREA</name></cpp:macro> <cpp:value>obs_module_text("ClientArea")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WC_CHECK_TIMER</name></cpp:macro> <cpp:value>1.0f</cpp:value></cpp:define>

<struct>struct <name>winrt_exports</name> <block>{

<function_decl><type><name>BOOL</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>winrt_capture_supported</name>)<parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>BOOL</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>winrt_capture_cursor_toggle_supported</name>)<parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>winrt_capture</name></name> <modifier>*</modifier></type>(<modifier>*</modifier><name>winrt_capture_init</name>)<parameter_list>(<parameter><decl><type><name>BOOL</name></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>,

<parameter><decl><type><name>BOOL</name></type> <name>client_area</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>winrt_capture_free</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winrt_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>winrt_capture_show_cursor</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winrt_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>,

<parameter><decl><type><name>BOOL</name></type> <name>visible</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>winrt_capture_render</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winrt_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>,

<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>winrt_capture_width</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>winrt_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>winrt_capture_height</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>winrt_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<enum>enum <name>window_capture_method</name> <block>{

<decl><name>METHOD_AUTO</name></decl>,

<decl><name>METHOD_BITBLT</name></decl>,

<decl><name>METHOD_WGC</name></decl>,

}</block>;</enum>

<struct>struct <name>window_capture</name> <block>{

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>executable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>window_capture_method</name></name></type> <name>method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>window_priority</name></name></type> <name>priority</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>compatibility</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>client_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_wildcards</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>dc_capture</name></name></type> <name>capture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>wgc_supported</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>previously_failed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>winrt_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>winrt_exports</name></name></type> <name>exports</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>winrt_capture</name></name> <modifier>*</modifier></type><name>capture_winrt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>resize_timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>check_window_timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cursor_check_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>last_rect</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>wgc_partial_match_classes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Chrome"</literal></expr>,

<expr><literal type="string">"Mozilla"</literal></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>wgc_whole_match_classes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"ApplicationFrameWindow"</literal></expr>,

<expr><literal type="string">"Windows.UI.Core.CoreWindow"</literal></expr>,

<expr><literal type="string">"XLMAIN"</literal></expr>, 

<expr><literal type="string">"PPTFrameClass"</literal></expr>, 

<expr><literal type="string">"OpusApp"</literal></expr>, 

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>window_capture_method</name></name></type>

<name>choose_method</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>window_capture_method</name></name></type> <name>method</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wgc_supported</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current_class</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wgc_supported</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>METHOD_BITBLT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>method</name> <operator>!=</operator> <name>METHOD_AUTO</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>method</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_class</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>METHOD_BITBLT</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>class</name> <init>= <expr><name>wgc_partial_match_classes</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>class</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>astrstri</name><argument_list>(<argument><expr><name>current_class</name></expr></argument>, <argument><expr><operator>*</operator><name>class</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>METHOD_WGC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>class</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>class</name> <operator>=</operator> <name>wgc_whole_match_classes</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>class</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>current_class</name></expr></argument>, <argument><expr><operator>*</operator><name>class</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>METHOD_WGC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>class</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>METHOD_BITBLT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_settings</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>window_capture</name></name> <modifier>*</modifier></type><name>wc</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>method</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>window</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>priority</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"priority"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>build_window_strings</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>class</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>title</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"[window-capture: '%s'] update settings:\n"</literal>

<literal type="string">"\texecutable: %s"</literal></expr></argument>,

<argument><expr><call><name>obs_source_get_name</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\tclass: %s"</literal></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <call><name>choose_method</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>wgc_supported</name></name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>priority</name></name> <operator>=</operator> <operator>(</operator>enum <name>window_priority</name><operator>)</operator><name>priority</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>use_wildcards</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"use_wildcards"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>compatibility</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"compatibility"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>client_area</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"client_area"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wc_getname</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TEXT_WINDOW_CAPTURE</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINRT_IMPORT</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exports-&gt;func = os_dlsym(module, #func); if (!exports-&gt;func) { success = false; blog(LOG_ERROR, "Could not load function '%s' from " "module '%s'", #func, module_name); } } while (false)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_winrt_imports</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winrt_exports</name></name> <modifier>*</modifier></type><name>exports</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>module</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WINRT_IMPORT</name><argument_list>(<argument><expr><name>winrt_capture_supported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WINRT_IMPORT</name><argument_list>(<argument><expr><name>winrt_capture_cursor_toggle_supported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WINRT_IMPORT</name><argument_list>(<argument><expr><name>winrt_capture_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WINRT_IMPORT</name><argument_list>(<argument><expr><name>winrt_capture_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WINRT_IMPORT</name><argument_list>(<argument><expr><name>winrt_capture_show_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WINRT_IMPORT</name><argument_list>(<argument><expr><name>winrt_capture_render</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WINRT_IMPORT</name><argument_list>(<argument><expr><name>winrt_capture_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WINRT_IMPORT</name><argument_list>(<argument><expr><name>winrt_capture_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>wc_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>window_capture</name></name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>window_capture</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>uses_d3d11</name> <init>= <expr><call><name>gs_get_device_type</name><argument_list>()</argument_list></call> <operator>==</operator> <name>GS_DEVICE_DIRECT3D_11</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uses_d3d11</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>module</name> <init>= <expr><literal type="string">"libobs-winrt"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_winrt_capture</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>winrt_module</name></name> <operator>=</operator> <call><name>os_dlopen</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>winrt_module</name></name> <operator>&amp;&amp;</operator>

<call><name>load_winrt_imports</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>exports</name></name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>winrt_module</name></name></expr></argument>,

<argument><expr><name>module</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name><name>wc</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>winrt_capture_supported</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>wgc_supported</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_settings</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>wc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wc_actual_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>window_capture</name></name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>wc</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>winrt_capture_free</name></name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dc_capture_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>capture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>winrt_module</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_dlclose</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>winrt_module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wc_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_queue_task</name><argument_list>(<argument><expr><name>OBS_TASK_GRAPHICS</name></expr></argument>, <argument><expr><name>wc_actual_destroy</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wc_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>window_capture</name></name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update_settings</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>check_window_timer</name></name> <operator>=</operator> <name>WC_CHECK_TIMER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>previously_failed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>wc_width</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>window_capture</name></name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>wc</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>METHOD_WGC</name><operator>)</operator></expr>

?</condition><then> <expr><call><name><name>wc</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>winrt_capture_width</name></name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name><name>wc</name><operator>-&gt;</operator><name>capture</name><operator>.</operator><name>width</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>wc_height</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>window_capture</name></name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>wc</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>METHOD_WGC</name><operator>)</operator></expr>

?</condition><then> <expr><call><name><name>wc</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>winrt_capture_height</name></name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name><name>wc</name><operator>-&gt;</operator><name>capture</name><operator>.</operator><name>height</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wc_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>defaults</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>, <argument><expr><name>METHOD_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>, <argument><expr><literal type="string">"cursor"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>, <argument><expr><literal type="string">"compatibility"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>, <argument><expr><literal type="string">"client_area"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_settings_visibility</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>window_capture</name></name> <modifier>*</modifier></type><name>wc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>window_capture_method</name></name></type> <name>method</name> <init>= <expr><name><name>wc</name><operator>-&gt;</operator><name>method</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>bitblt_options</name> <init>= <expr><name>method</name> <operator>==</operator> <name>METHOD_BITBLT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>wgc_options</name> <init>= <expr><name>method</name> <operator>==</operator> <name>METHOD_WGC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>wgc_cursor_toggle</name> <init>=

<expr><name>wgc_options</name> <operator>&amp;&amp;</operator>

<call><name><name>wc</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>winrt_capture_cursor_toggle_supported</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>obs_properties_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"cursor"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bitblt_options</name> <operator>||</operator> <name>wgc_cursor_toggle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"compatibility"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bitblt_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"client_area"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>wgc_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>wc_capture_method_changed</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>window_capture</name></name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><call><name>obs_properties_get_param</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update_settings</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_settings_visibility</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>check_window_property_setting</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name></decl></parameter>,

<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>wc_window_changed</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>window_capture</name></name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><call><name>obs_properties_get_param</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update_settings</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_settings_visibility</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_window_property_setting</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>wc_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>window_capture</name></name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_properties_set_param</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>wc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><name>TEXT_WINDOW</name></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_window_list</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>EXCLUDE_MINIMIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>wc_window_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>, <argument><expr><name>TEXT_METHOD</name></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>, <argument><expr><name>OBS_COMBO_FORMAT_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_METHOD_AUTO</name></expr></argument>, <argument><expr><name>METHOD_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_METHOD_BITBLT</name></expr></argument>, <argument><expr><name>METHOD_BITBLT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_METHOD_WGC</name></expr></argument>, <argument><expr><name>METHOD_WGC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_item_disable</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>wgc_supported</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>wc_capture_method_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"priority"</literal></expr></argument>, <argument><expr><name>TEXT_MATCH_PRIORITY</name></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>, <argument><expr><name>OBS_COMBO_FORMAT_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_MATCH_TITLE</name></expr></argument>, <argument><expr><name>WINDOW_PRIORITY_TITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_MATCH_CLASS</name></expr></argument>, <argument><expr><name>WINDOW_PRIORITY_CLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_MATCH_EXE</name></expr></argument>, <argument><expr><name>WINDOW_PRIORITY_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"cursor"</literal></expr></argument>, <argument><expr><name>TEXT_CAPTURE_CURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"compatibility"</literal></expr></argument>, <argument><expr><name>TEXT_COMPATIBILITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><literal type="string">"client_area"</literal></expr></argument>, <argument><expr><name>TEXT_CLIENT_AREA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ppts</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wc_hide</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>window_capture</name></name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>wc</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>winrt_capture_free</name></name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>last_rect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>last_rect</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESIZE_CHECK_TIME</name></cpp:macro> <cpp:value>0.2f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURSOR_CHECK_TIME</name></cpp:macro> <cpp:value>0.2f</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wc_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>window_capture</name></name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>reset_capture</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_showing</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>window</name></name> <operator>||</operator> <operator>!</operator><call><name>IsWindow</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>title</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>class</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>check_window_timer</name></name> <operator>+=</operator> <name>seconds</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>check_window_timer</name></name> <operator>&lt;</operator> <name>WC_CHECK_TIMER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>capture</name><operator>.</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dc_capture_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>capture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>wc</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>winrt_capture_free</name></name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>check_window_timer</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>wc</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>METHOD_WGC</name><operator>)</operator></expr>

?</condition><then> <expr><call><name>find_window_top_level</name><argument_list>(<argument><expr><name>INCLUDE_MINIMIZED</name></expr></argument>,

<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>,

<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>class</name></name></expr></argument>,

<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>title</name></name></expr></argument>,

<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>find_window</name><argument_list>(<argument><expr><name>INCLUDE_MINIMIZED</name></expr></argument>,

<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>class</name></name></expr></argument>,

<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>window</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>capture</name><operator>.</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dc_capture_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>capture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reset_capture</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IsIconic</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>cursor_check_time</name></name> <operator>+=</operator> <name>seconds</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>cursor_check_time</name></name> <operator>&gt;</operator> <name>CURSOR_CHECK_TIME</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>foreground_pid</name></decl>, <decl><type ref="prev"/><name>target_pid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetWindowThreadProcessId</name><argument_list>(<argument><expr><call><name>GetForegroundWindow</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>foreground_pid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>foreground_pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetWindowThreadProcessId</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_pid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>target_pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>cursor_hidden</name> <init>= <expr><name>foreground_pid</name> <operator>&amp;&amp;</operator> <name>target_pid</name> <operator>&amp;&amp;</operator>

<name>foreground_pid</name> <operator>!=</operator> <name>target_pid</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>capture</name><operator>.</operator><name>cursor_hidden</name></name> <operator>=</operator> <name>cursor_hidden</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>wc</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>winrt_capture_show_cursor</name></name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name></expr></argument>,

<argument><expr><operator>!</operator><name>cursor_hidden</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>cursor_check_time</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>METHOD_BITBLT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reset_capture</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>resize_timer</name></name> <operator>+=</operator> <name>seconds</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>resize_timer</name></name> <operator>&gt;=</operator> <name>RESIZE_CHECK_TIME</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name><operator>)</operator> <operator>!=</operator>

<operator>(</operator><name><name>wc</name><operator>-&gt;</operator><name>last_rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator>

<name><name>wc</name><operator>-&gt;</operator><name>last_rect</name><operator>.</operator><name>top</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name><operator>)</operator> <operator>!=</operator>

<operator>(</operator><name><name>wc</name><operator>-&gt;</operator><name>last_rect</name><operator>.</operator><name>right</name></name> <operator>-</operator>

<name><name>wc</name><operator>-&gt;</operator><name>last_rect</name><operator>.</operator><name>left</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>reset_capture</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>resize_timer</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reset_capture</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>resize_timer</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>last_rect</name></name> <operator>=</operator> <name>rect</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dc_capture_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>capture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dc_capture_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>capture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>,

<argument><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>,

<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>compatibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dc_capture_capture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>capture</name></name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>METHOD_WGC</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>window</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>previously_failed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name> <operator>=</operator>

<call><name><name>wc</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>winrt_capture_init</name></name><argument_list>(

<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>client_area</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>previously_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wc_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>window_capture</name></name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opaque</name> <init>= <expr><call><name>obs_get_base_effect</name><argument_list>(<argument><expr><name>OBS_EFFECT_OPAQUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>METHOD_WGC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>wc</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>winrt_capture_render</name></name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>capture_winrt</name></name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dc_capture_render</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>capture</name></name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>window_capture_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"window_capture"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_INPUT</name></expr>,

<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name> <operator>|</operator> <name>OBS_SOURCE_CUSTOM_DRAW</name></expr>,

<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>wc_getname</name></expr>,

<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>wc_create</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>wc_destroy</name></expr>,

<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>wc_update</name></expr>,

<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>wc_render</name></expr>,

<expr><operator>.</operator><name>hide</name> <operator>=</operator> <name>wc_hide</name></expr>,

<expr><operator>.</operator><name>video_tick</name> <operator>=</operator> <name>wc_tick</name></expr>,

<expr><operator>.</operator><name>get_width</name> <operator>=</operator> <name>wc_width</name></expr>,

<expr><operator>.</operator><name>get_height</name> <operator>=</operator> <name>wc_height</name></expr>,

<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>wc_defaults</name></expr>,

<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>wc_properties</name></expr>,

<expr><operator>.</operator><name>icon_type</name> <operator>=</operator> <name>OBS_ICON_TYPE_WINDOW_CAPTURE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
