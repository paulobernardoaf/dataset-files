<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\win-capture\duplicator-monitor-capture.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cursor-capture.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_log</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[duplicator-monitor-capture: '%s'] " format, obs_source_get_name(capture-&gt;source), ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_WARNING, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_INFO, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_DEBUG, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MONITOR_CAPTURE</name></cpp:macro> <cpp:value>obs_module_text("MonitorCapture")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_CAPTURE_CURSOR</name></cpp:macro> <cpp:value>obs_module_text("CaptureCursor")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_COMPATIBILITY</name></cpp:macro> <cpp:value>obs_module_text("Compatibility")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MONITOR</name></cpp:macro> <cpp:value>obs_module_text("Monitor")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_PRIMARY_MONITOR</name></cpp:macro> <cpp:value>obs_module_text("PrimaryMonitor")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET_INTERVAL_SEC</name></cpp:macro> <cpp:value>3.0f</cpp:value></cpp:define>

<struct>struct <name>duplicator_capture</name> <block>{

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>monitor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>capture_cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>showing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_duplicator_t</name> <modifier>*</modifier></type><name>duplicator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>reset_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cursor_data</name></name></type> <name>cursor_data</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>update_settings</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>duplicator_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>monitor</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>capture_cursor</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"capture_cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_duplicator_destroy</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>duplicator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>duplicator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>rot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>reset_timeout</name></name> <operator>=</operator> <name>RESET_INTERVAL_SEC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>duplicator_capture_getname</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TEXT_MONITOR_CAPTURE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>duplicator_capture_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>duplicator_capture</name></name> <modifier>*</modifier></type><name>capture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_duplicator_destroy</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>duplicator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cursor_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>cursor_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>duplicator_capture_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"capture_cursor"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>duplicator_capture_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>duplicator_capture</name></name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update_settings</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>duplicator_capture_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>,

<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>duplicator_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl>;</decl_stmt>

<expr_stmt><expr><name>capture</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>duplicator_capture</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_settings</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>capture</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_capture_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>duplicator_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_monitor_info</name></name></type> <name>monitor_info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name> <init>= <expr><call><name>gs_duplicator_get_texture</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>duplicator</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_get_duplicator_monitor_info</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>monitor_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>gs_texture_get_width</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>gs_texture_get_height</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>monitor_info</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>monitor_info</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>rot</name></name> <operator>=</operator> <name><name>monitor_info</name><operator>.</operator><name>rotation_degrees</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_capture_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>duplicator_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gs_duplicator_destroy</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>duplicator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cursor_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>cursor_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>duplicator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>rot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>reset_timeout</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>duplicator_capture_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>duplicator_capture</name></name> <modifier>*</modifier></type><name>capture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_showing</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>showing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_capture_data</name><argument_list>(<argument><expr><name>capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>showing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>capture</name><operator>-&gt;</operator><name>showing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>reset_timeout</name></name> <operator>=</operator> <name>RESET_INTERVAL_SEC</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>capture</name><operator>-&gt;</operator><name>duplicator</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>reset_timeout</name></name> <operator>+=</operator> <name>seconds</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>reset_timeout</name></name> <operator>&gt;=</operator> <name>RESET_INTERVAL_SEC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>duplicator</name></name> <operator>=</operator>

<call><name>gs_duplicator_create</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>reset_timeout</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><name><name>capture</name><operator>-&gt;</operator><name>duplicator</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>capture_cursor</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cursor_capture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>cursor_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_duplicator_update_frame</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>duplicator</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_capture_data</name><argument_list>(<argument><expr><name>capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reset_capture_data</name><argument_list>(<argument><expr><name>capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>capture</name><operator>-&gt;</operator><name>showing</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>showing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>duplicator_capture_width</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>duplicator_capture</name></name> <modifier>*</modifier></type><name>capture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>capture</name><operator>-&gt;</operator><name>rot</name></name> <operator>%</operator> <literal type="number">180</literal> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name></expr> </then><else>: <expr><name><name>capture</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>duplicator_capture_height</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>duplicator_capture</name></name> <modifier>*</modifier></type><name>capture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>capture</name><operator>-&gt;</operator><name>rot</name></name> <operator>%</operator> <literal type="number">180</literal> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>capture</name><operator>-&gt;</operator><name>height</name></name></expr> </then><else>: <expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_cursor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>duplicator_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>cursor_draw</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>cursor_data</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>capture</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>capture</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>capture</name><operator>-&gt;</operator><name>rot</name></name> <operator>%</operator> <literal type="number">180</literal> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name></expr> </then><else>: <expr><name><name>capture</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>capture</name><operator>-&gt;</operator><name>rot</name></name> <operator>%</operator> <literal type="number">180</literal> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>capture</name><operator>-&gt;</operator><name>height</name></name></expr> </then><else>: <expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>duplicator_capture_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>duplicator_capture</name></name> <modifier>*</modifier></type><name>capture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>capture</name><operator>-&gt;</operator><name>duplicator</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>texture</name> <operator>=</operator> <call><name>gs_duplicator_get_texture</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>duplicator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>texture</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>effect</name> <operator>=</operator> <call><name>obs_get_base_effect</name><argument_list>(<argument><expr><name>OBS_EFFECT_OPAQUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rot</name> <operator>=</operator> <name><name>capture</name><operator>-&gt;</operator><name>rot</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>gs_effect_loop</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"Draw"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rot</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>rot</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">90</literal></expr>:</case>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>capture</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">180</literal></expr>:</case>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>capture</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>capture</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">270</literal></expr>:</case>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>capture</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>gs_matrix_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_matrix_translate3f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_matrix_rotaa4f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><call><name>RAD</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>rot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_draw</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rot</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gs_matrix_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>capture_cursor</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>effect</name> <operator>=</operator> <call><name>obs_get_base_effect</name><argument_list>(<argument><expr><name>OBS_EFFECT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>gs_effect_loop</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"Draw"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>draw_cursor</name><argument_list>(<argument><expr><name>capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_monitor_props</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>monitor_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>monitor_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>monitor_desc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_monitor_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_get_duplicator_monitor_info</name><argument_list>(<argument><expr><name>monitor_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitor_desc</name></expr></argument>, <argument><expr><literal type="string">"%s %d: %ldx%ld @ %ld,%ld"</literal></expr></argument>, <argument><expr><name>TEXT_MONITOR</name></expr></argument>,

<argument><expr><name>monitor_idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>monitor_list</name></expr></argument>, <argument><expr><name><name>monitor_desc</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><name>monitor_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitor_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>duplicator_capture_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>monitor_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>monitors</name> <init>= <expr><call><name>obs_properties_add_list</name><argument_list>(

<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>, <argument><expr><name>TEXT_MONITOR</name></expr></argument>, <argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"capture_cursor"</literal></expr></argument>, <argument><expr><name>TEXT_CAPTURE_CURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>get_monitor_props</name><argument_list>(<argument><expr><name>monitors</name></expr></argument>, <argument><expr><name>monitor_idx</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>duplicator_capture_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"monitor_capture"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_INPUT</name></expr>,

<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name> <operator>|</operator> <name>OBS_SOURCE_CUSTOM_DRAW</name> <operator>|</operator>

<name>OBS_SOURCE_DO_NOT_DUPLICATE</name></expr>,

<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>duplicator_capture_getname</name></expr>,

<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>duplicator_capture_create</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>duplicator_capture_destroy</name></expr>,

<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>duplicator_capture_render</name></expr>,

<expr><operator>.</operator><name>video_tick</name> <operator>=</operator> <name>duplicator_capture_tick</name></expr>,

<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>duplicator_capture_update</name></expr>,

<expr><operator>.</operator><name>get_width</name> <operator>=</operator> <name>duplicator_capture_width</name></expr>,

<expr><operator>.</operator><name>get_height</name> <operator>=</operator> <name>duplicator_capture_height</name></expr>,

<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>duplicator_capture_defaults</name></expr>,

<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>duplicator_capture_properties</name></expr>,

<expr><operator>.</operator><name>icon_type</name> <operator>=</operator> <name>OBS_ICON_TYPE_DESKTOP_CAPTURE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
