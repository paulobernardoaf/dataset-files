<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\win-capture\graphics-hook-info.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook-helpers.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_CAPTURE_RESTART</name></cpp:macro> <cpp:value>L"CaptureHook_Restart"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_CAPTURE_STOP</name></cpp:macro> <cpp:value>L"CaptureHook_Stop"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_HOOK_READY</name></cpp:macro> <cpp:value>L"CaptureHook_HookReady"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_HOOK_EXIT</name></cpp:macro> <cpp:value>L"CaptureHook_Exit"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_HOOK_INIT</name></cpp:macro> <cpp:value>L"CaptureHook_Initialize"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOW_HOOK_KEEPALIVE</name></cpp:macro> <cpp:value>L"CaptureHook_KeepAlive"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUTEX_TEXTURE1</name></cpp:macro> <cpp:value>L"CaptureHook_TextureMutex1"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUTEX_TEXTURE2</name></cpp:macro> <cpp:value>L"CaptureHook_TextureMutex2"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMEM_HOOK_INFO</name></cpp:macro> <cpp:value>L"CaptureHook_HookInfo"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMEM_TEXTURE</name></cpp:macro> <cpp:value>L"CaptureHook_Texture"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIPE_NAME</name></cpp:macro> <cpp:value>"CaptureHook_Pipe"</cpp:value></cpp:define>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>8</name><name>)</name></cpp:pragma>

<struct>struct <name>d3d8_offsets</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>present</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>d3d9_offsets</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>present</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>present_ex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>present_swap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>d3d9_clsoff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>is_d3d9ex_clsoff</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>dxgi_offsets</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>present</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>resize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>present1</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>ddraw_offsets</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>surface_create</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>surface_restore</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>surface_release</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>surface_unlock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>surface_blt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>surface_flip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>surface_set_palette</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>palette_set_entries</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>shmem_data</name> <block>{

<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>last_tex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tex1_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tex2_offset</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>shtex_data</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tex_handle</name></decl>;</decl_stmt>

}</block>;</struct>

<enum>enum <name>capture_type</name> <block>{

<decl><name>CAPTURE_TYPE_MEMORY</name></decl>,

<decl><name>CAPTURE_TYPE_TEXTURE</name></decl>,

}</block>;</enum>

<struct>struct <name>graphics_offsets</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>d3d8_offsets</name></name></type> <name>d3d8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d9_offsets</name></name></type> <name>d3d9</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dxgi_offsets</name></name></type> <name>dxgi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ddraw_offsets</name></name></type> <name>ddraw</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>hook_info</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hook_ver_major</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hook_ver_minor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>capture_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>base_cx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>base_cy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>map_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>map_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>flip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>force_shmem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>capture_overlay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>graphics_offsets</name></name></type> <name>offsets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GC_MAPPING_FLAGS</name></cpp:macro> <cpp:value>(FILE_MAP_READ | FILE_MAP_WRITE)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HANDLE</name></type> <name>create_hook_info</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>new_name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name>swprintf</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><call><name>_countof</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>SHMEM_HOOK_INFO</name> <literal type="string">L"%lu"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>CreateFileMappingW</name><argument_list>(<argument><expr><name>INVALID_HANDLE_VALUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>PAGE_READWRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hook_info</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>handle</name></expr>;</return>

</block_content>}</block></function>

</unit>
