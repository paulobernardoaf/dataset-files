<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\win-capture\graphics-hook\vulkan-capture.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics-hook.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_USE_PLATFORM_WIN32_KHR</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vulkan/vulkan.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vulkan/vk_layer.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VK_LAYER_EXPORT</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_LAYER_EXPORT</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_LAYER_EXPORT</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vulkan/vulkan_win32.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxgi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d11.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vulkan-capture.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKAPI</name></cpp:macro> <cpp:value>VKAPI_CALL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VkFunc</name></cpp:macro> <cpp:value>PFN_vkVoidFunction</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT</name></cpp:macro> <cpp:value>VK_LAYER_EXPORT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_MAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_LDT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(void **)x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>dxgi_factory1_guid</name> <init>=

<expr><block>{<expr><literal type="number">0x770aae78</literal></expr>, <expr><literal type="number">0xf26f</literal></expr>, <expr><literal type="number">0x4dba</literal></expr>, <expr><block>{<expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x87</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>dxgi_resource_guid</name> <init>=

<expr><block>{<expr><literal type="number">0x035f3ab4</literal></expr>, <expr><literal type="number">0x482e</literal></expr>, <expr><literal type="number">0x4e50</literal></expr>, <expr><block>{<expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x0b</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>vulkan_seen</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>SRWLOCK</name></type> <name>mutex</name> <init>= <expr><name>SRWLOCK_INIT</name></expr></init></decl>;</decl_stmt> 

<struct>struct <name>vk_swap_data</name> <block>{

<decl_stmt><decl><type><name>VkSwapchainKHR</name></type> <name>sc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkExtent2D</name></type> <name>image_extent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkFormat</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImage</name></type> <name>export_image</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>layout_initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDeviceMemory</name></type> <name>export_mem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImage</name></type> <name><name>swap_images</name><index>[<expr><name>OBJ_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>image_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>shtex_data</name></name> <modifier>*</modifier></type><name>shtex_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name>d3d11_tex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>captured</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>vk_queue_data</name> <block>{

<decl_stmt><decl><type><name>VkQueue</name></type> <name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fam_idx</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>vk_cmd_pool_data</name> <block>{

<decl_stmt><decl><type><name>VkCommandPool</name></type> <name>cmd_pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkCommandBuffer</name></type> <name><name>cmd_buffers</name><index>[<expr><name>OBJ_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkFence</name></type> <name><name>fences</name><index>[<expr><name>OBJ_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>cmd_buffer_busy</name><index>[<expr><name>OBJ_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>image_count</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>vk_data</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_device_funcs</name></name></type> <name>funcs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPhysicalDevice</name></type> <name>phy_device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDevice</name></type> <name>device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_swap_data</name></name></type> <name><name>swaps</name><index>[<expr><name>OBJ_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_swap_data</name></name> <modifier>*</modifier></type><name>cur_swap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>swap_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_queue_data</name></name></type> <name><name>queues</name><index>[<expr><name>OBJ_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>queue_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_cmd_pool_data</name></name></type> <name><name>cmd_pools</name><index>[<expr><name>OBJ_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkExternalMemoryProperties</name></type> <name>external_mem_props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_data</name></name> <modifier>*</modifier></type><name>inst_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3D11Device</name> <modifier>*</modifier></type><name>d3d11_device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3D11DeviceContext</name> <modifier>*</modifier></type><name>d3d11_context</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vk_swap_data</name></name> <modifier>*</modifier></type><name>get_swap_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>VkSwapchainKHR</name></type> <name>sc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OBJ_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>swaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sc</name> <operator>==</operator> <name>sc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>swaps</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"get_swap_data failed, swapchain not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vk_swap_data</name></name> <modifier>*</modifier></type><name>get_new_swap_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OBJ_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>swaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sc</name> <operator>==</operator> <name>VK_NULL_HANDLE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>swaps</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"get_new_swap_data failed, no more free slot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>find_obj_idx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name><name>objs</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><name>SIZE_MAX</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AcquireSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OBJ_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>objs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ReleaseSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>get_obj_idx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name><name>objs</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><name>SIZE_MAX</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AcquireSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OBJ_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>objs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>objs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>==</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ReleaseSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vk_data</name></name></type> <name><name>device_data</name><index>[<expr><name>OBJ_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name><name>devices</name><index>[<expr><name>OBJ_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>get_device_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>get_obj_idx</name><argument_list>(<argument><expr><name>devices</name></expr></argument>, <argument><expr><call><name>GET_LDT</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"out of device slots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>device_data</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vk_shtex_clear_fence</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vk_cmd_pool_data</name></name> <modifier>*</modifier></type><name>pool_data</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>image_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkFence</name></type> <name>fence</name> <init>= <expr><name><name>pool_data</name><operator>-&gt;</operator><name>fences</name><index>[<expr><name>image_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pool_data</name><operator>-&gt;</operator><name>cmd_buffer_busy</name><index>[<expr><name>image_idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VkDevice</name></type> <name>device</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_device_funcs</name></name> <modifier>*</modifier></type><name>funcs</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>WaitForFences</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fence</name></expr></argument>, <argument><expr><name>VK_TRUE</name></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>ResetFences</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool_data</name><operator>-&gt;</operator><name>cmd_buffer_busy</name><index>[<expr><name>image_idx</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vk_shtex_wait_until_pool_idle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vk_cmd_pool_data</name></name> <modifier>*</modifier></type><name>pool_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>image_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>image_idx</name> <operator>&lt;</operator> <name><name>pool_data</name><operator>-&gt;</operator><name>image_count</name></name></expr>;</condition>

<incr><expr><name>image_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vk_shtex_clear_fence</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pool_data</name></expr></argument>, <argument><expr><name>image_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vk_shtex_wait_until_idle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>fam_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fam_idx</name> <operator>&lt;</operator> <call><name>_countof</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cmd_pools</name></name></expr></argument>)</argument_list></call></expr>;</condition>

<incr><expr><name>fam_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_cmd_pool_data</name></name> <modifier>*</modifier></type><name>pool_data</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmd_pools</name><index>[<expr><name>fam_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pool_data</name><operator>-&gt;</operator><name>cmd_pool</name></name> <operator>!=</operator> <name>VK_NULL_HANDLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vk_shtex_wait_until_pool_idle</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pool_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vk_shtex_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>capture_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vk_shtex_wait_until_idle</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>swap_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>swap_idx</name> <operator>&lt;</operator> <name>OBJ_MAX</name></expr>;</condition> <incr><expr><name>swap_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_swap_data</name></name> <modifier>*</modifier></type><name>swap</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>swaps</name><index>[<expr><name>swap_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>DestroyImage</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>swap</name><operator>-&gt;</operator><name>export_mem</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>FreeMemory</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>swap</name><operator>-&gt;</operator><name>export_mem</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>swap</name><operator>-&gt;</operator><name>d3d11_tex</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ID3D11Resource_Release</name><argument_list>(<argument><expr><name><name>swap</name><operator>-&gt;</operator><name>d3d11_tex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>d3d11_tex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>export_mem</name></name> <operator>=</operator> <name>VK_NULL_HANDLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name> <operator>=</operator> <name>VK_NULL_HANDLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>captured</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>d3d11_context</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ID3D11DeviceContext_Release</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>d3d11_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>d3d11_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>d3d11_device</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ID3D11Device_Release</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>d3d11_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>d3d11_device</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cur_swap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"------------------ vulkan capture freed ------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vk_remove_device</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>find_obj_idx</name><argument_list>(<argument><expr><name>devices</name></expr></argument>, <argument><expr><call><name>GET_LDT</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>device_data</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AcquireSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>devices</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>vk_surf_data</name> <block>{

<decl_stmt><decl><type><name>VkSurfaceKHR</name></type> <name>surf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_surf_data</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>vk_inst_data</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_funcs</name></name></type> <name>funcs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_surf_data</name></name> <modifier>*</modifier></type><name>surfaces</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>insert_surf_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_inst_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceKHR</name></type> <name>surf</name></decl></parameter>,

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_surf_data</name></name> <modifier>*</modifier></type><name>surf_data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vk_surf_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>surf_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>surf_data</name><operator>-&gt;</operator><name>surf</name></name> <operator>=</operator> <name>surf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf_data</name><operator>-&gt;</operator><name>hwnd</name></name> <operator>=</operator> <name>hwnd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AcquireSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_surf_data</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>surfaces</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>surf_data</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>surfaces</name></name> <operator>=</operator> <name>surf_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HWND</name></type> <name>find_surf_hwnd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_inst_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceKHR</name></type> <name>surf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AcquireSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_surf_data</name></name> <modifier>*</modifier></type><name>surf_data</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>surfaces</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>surf_data</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>surf_data</name><operator>-&gt;</operator><name>surf</name></name> <operator>==</operator> <name>surf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <name><name>surf_data</name><operator>-&gt;</operator><name>hwnd</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>surf_data</name> <operator>=</operator> <name><name>surf_data</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ReleaseSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hwnd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>erase_surf_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_inst_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceKHR</name></type> <name>surf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>AcquireSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_surf_data</name></name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>surfaces</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>surf</name></name> <operator>==</operator> <name>surf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>surfaces</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_surf_data</name></name> <modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>previous</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>current</name> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>surf</name></name> <operator>!=</operator> <name>surf</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>current</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>previous</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ReleaseSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vk_inst_data</name></name></type> <name><name>inst_data</name><index>[<expr><name>OBJ_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name><name>instances</name><index>[<expr><name>OBJ_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vk_inst_data</name></name> <modifier>*</modifier></type><name>get_inst_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>get_obj_idx</name><argument_list>(<argument><expr><name>instances</name></expr></argument>, <argument><expr><call><name>GET_LDT</name><argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"out of instance slots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vulkan_seen</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>inst_data</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>vk_inst_funcs</name></name> <modifier>*</modifier></type><name>get_inst_funcs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_inst_data</name><argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_instance</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>find_obj_idx</name><argument_list>(<argument><expr><name>instances</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>inst_data</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AcquireSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instances</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseSRWLockExclusive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vk_shtex_init_d3d11</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>D3D_FEATURE_LEVEL</name></type> <name>level_used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDXGIFactory1</name> <modifier>*</modifier></type><name>factory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDXGIAdapter</name> <modifier>*</modifier></type><name>adapter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>d3d11</name> <init>= <expr><call><name>load_system_library</name><argument_list>(<argument><expr><literal type="string">"d3d11.dll"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d3d11</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog</name><argument_list>(<argument><expr><literal type="string">"failed to load d3d11: %d"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>dxgi</name> <init>= <expr><call><name>load_system_library</name><argument_list>(<argument><expr><literal type="string">"dxgi.dll"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dxgi</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog</name><argument_list>(<argument><expr><literal type="string">"failed to load dxgi: %d"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<function_decl><type><name>HRESULT</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>create_factory</name>)

<parameter_list>(<parameter><decl><type><name>REFIID</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>dxgi</name></expr></argument>, <literal type="string">"CreateDXGIFactory1"</literal>)</argument_list></call></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>create_factory</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog</name><argument_list>(<argument><expr><literal type="string">"failed to get CreateDXGIFactory1 address: %d"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PFN_D3D11_CREATE_DEVICE</name></type> <name>create</name> <init>=

<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>d3d11</name></expr></argument>, <argument><expr><literal type="string">"D3D11CreateDevice"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>create</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog</name><argument_list>(<argument><expr><literal type="string">"failed to get D3D11CreateDevice address: %d"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>create_factory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dxgi_factory1_guid</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog_hr</name><argument_list>(<argument><expr><literal type="string">"failed to create factory"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGIFactory1_EnumAdapters1</name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>IDXGIAdapter1</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDXGIFactory1_Release</name><argument_list>(<argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog_hr</name><argument_list>(<argument><expr><literal type="string">"failed to create adapter"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>D3D_FEATURE_LEVEL</name></type> <name><name>feature_levels</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>D3D_FEATURE_LEVEL_11_0</name></expr>,

<expr><name>D3D_FEATURE_LEVEL_10_1</name></expr>,

<expr><name>D3D_FEATURE_LEVEL_10_0</name></expr>,

<expr><name>D3D_FEATURE_LEVEL_9_3</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>create</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>D3D_DRIVER_TYPE_UNKNOWN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>feature_levels</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>feature_levels</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>D3D_FEATURE_LEVEL</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>D3D11_SDK_VERSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>d3d11_device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>level_used</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>d3d11_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDXGIAdapter_Release</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog_hr</name><argument_list>(<argument><expr><literal type="string">"failed to create device"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vk_shtex_init_d3d11_tex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vk_swap_data</name></name> <modifier>*</modifier></type><name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IDXGIResource</name> <modifier>*</modifier></type><name>dxgi_res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>desc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>image_extent</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>image_extent</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>MipLevels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>ArraySize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flog</name><argument_list>(<argument><expr><literal type="string">"OBS requesting %s texture format. capture dimensions: %dx%d"</literal></expr></argument>,

<argument><expr><call><name>vk_format_to_str</name><argument_list>(<argument><expr><name><name>swap</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>desc</name><operator>.</operator><name>Width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>desc</name><operator>.</operator><name>Height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <call><name>vk_format_to_dxgi</name><argument_list>(<argument><expr><name><name>swap</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>SampleDesc</name><operator>.</operator><name>Count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>SampleDesc</name><operator>.</operator><name>Quality</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>Usage</name></name> <operator>=</operator> <name>D3D11_USAGE_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>MiscFlags</name></name> <operator>=</operator> <name>D3D11_RESOURCE_MISC_SHARED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>BindFlags</name></name> <operator>=</operator> <name>D3D11_BIND_RENDER_TARGET</name> <operator>|</operator> <name>D3D11_BIND_SHADER_RESOURCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateTexture2D</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>d3d11_device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>swap</name><operator>-&gt;</operator><name>d3d11_tex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog_hr</name><argument_list>(<argument><expr><literal type="string">"failed to create texture"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_QueryInterface</name><argument_list>(<argument><expr><name><name>swap</name><operator>-&gt;</operator><name>d3d11_tex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxgi_resource_guid</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dxgi_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog_hr</name><argument_list>(<argument><expr><literal type="string">"failed to get IDXGIResource"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGIResource_GetSharedHandle</name><argument_list>(<argument><expr><name>dxgi_res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>swap</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDXGIResource_Release</name><argument_list>(<argument><expr><name>dxgi_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog_hr</name><argument_list>(<argument><expr><literal type="string">"failed to get shared handle"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vk_shtex_init_vulkan_tex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vk_swap_data</name></name> <modifier>*</modifier></type><name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_device_funcs</name></name> <modifier>*</modifier></type><name>funcs</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkExternalMemoryFeatureFlags</name></type> <name>f</name> <init>=

<expr><name><name>data</name><operator>-&gt;</operator><name>external_mem_props</name><operator>.</operator><name>externalMemoryFeatures</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkExternalMemoryImageCreateInfo</name></type> <name>emici</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>emici</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>emici</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>emici</name><operator>.</operator><name>handleTypes</name></name> <operator>=</operator>

<name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkImageCreateInfo</name></type> <name>ici</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <operator>&amp;</operator><name>emici</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>imageType</name></name> <operator>=</operator> <name>VK_IMAGE_TYPE_2D</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>extent</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>image_extent</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>extent</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>image_extent</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>extent</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>mipLevels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>arrayLayers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <name>VK_SAMPLE_COUNT_1_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>tiling</name></name> <operator>=</operator> <name>VK_IMAGE_TILING_OPTIMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>usage</name></name> <operator>=</operator> <name>VK_IMAGE_USAGE_TRANSFER_DST_BIT</name> <operator>|</operator>

<name>VK_IMAGE_USAGE_SAMPLED_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>sharingMode</name></name> <operator>=</operator> <name>VK_SHARING_MODE_EXCLUSIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>queueFamilyIndexCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>pQueueFamilyIndices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ici</name><operator>.</operator><name>initialLayout</name></name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_UNDEFINED</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>funcs</name><operator>-&gt;</operator><name>CreateImage</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ici</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VK_SUCCESS</name> <operator>!=</operator> <name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog</name><argument_list>(<argument><expr><literal type="string">"failed to CreateImage: %s"</literal></expr></argument>, <argument><expr><call><name>result_to_str</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name> <operator>=</operator> <name>VK_NULL_HANDLE</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>layout_initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkMemoryRequirements</name></type> <name>mr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_gimr2</name> <init>= <expr><name>f</name> <operator>&amp;</operator> <name>VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>use_gimr2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VkMemoryDedicatedRequirements</name></type> <name>mdr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mdr</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mdr</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkMemoryRequirements2</name></type> <name>mr2</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mr2</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mr2</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <operator>&amp;</operator><name>mdr</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkImageMemoryRequirementsInfo2</name></type> <name>imri2</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>imri2</name><operator>.</operator><name>sType</name></name> <operator>=</operator>

<name>VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imri2</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imri2</name><operator>.</operator><name>image</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>GetImageMemoryRequirements2</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imri2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mr</name> <operator>=</operator> <name><name>mr2</name><operator>.</operator><name>memoryRequirements</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>GetImageMemoryRequirements</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_funcs</name></name> <modifier>*</modifier></type><name>ifuncs</name> <init>= <expr><call><name>get_inst_funcs</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>phy_device</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPhysicalDeviceMemoryProperties</name></type> <name>pdmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ifuncs</name><operator>-&gt;</operator><name>GetPhysicalDeviceMemoryProperties</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>phy_device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pdmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mem_type_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>mem_type_idx</name> <operator>&lt;</operator> <name><name>pdmp</name><operator>.</operator><name>memoryTypeCount</name></name></expr>;</condition> <incr><expr><name>mem_type_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mr</name><operator>.</operator><name>memoryTypeBits</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mem_type_idx</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>pdmp</name><operator>.</operator><name>memoryTypes</name><index>[<expr><name>mem_type_idx</name></expr>]</index></name><operator>.</operator><name>propertyFlags</name> <operator>&amp;</operator>

<name>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</name><operator>)</operator> <operator>==</operator>

<name>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>mem_type_idx</name> <operator>==</operator> <name><name>pdmp</name><operator>.</operator><name>memoryTypeCount</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog</name><argument_list>(<argument><expr><literal type="string">"failed to get memory type index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>DestroyImage</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name> <operator>=</operator> <name>VK_NULL_HANDLE</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>VkImportMemoryWin32HandleInfoKHR</name></type> <name>imw32hi</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>imw32hi</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imw32hi</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imw32hi</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imw32hi</name><operator>.</operator><name>handleType</name></name> <operator>=</operator>

<name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imw32hi</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkMemoryAllocateInfo</name></type> <name>mai</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mai</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mai</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <operator>&amp;</operator><name>imw32hi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mai</name><operator>.</operator><name>allocationSize</name></name> <operator>=</operator> <name><name>mr</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mai</name><operator>.</operator><name>memoryTypeIndex</name></name> <operator>=</operator> <name>mem_type_idx</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkMemoryDedicatedAllocateInfo</name></type> <name>mdai</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mdai</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mdai</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mdai</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>VK_NULL_HANDLE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>external_mem_props</name><operator>.</operator><name>externalMemoryFeatures</name></name> <operator>&amp;</operator>

<name>VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mdai</name><operator>.</operator><name>image</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imw32hi</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <operator>&amp;</operator><name>mdai</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>funcs</name><operator>-&gt;</operator><name>AllocateMemory</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mai</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>swap</name><operator>-&gt;</operator><name>export_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VK_SUCCESS</name> <operator>!=</operator> <name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog</name><argument_list>(<argument><expr><literal type="string">"failed to AllocateMemory: %s"</literal></expr></argument>, <argument><expr><call><name>result_to_str</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>DestroyImage</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name> <operator>=</operator> <name>VK_NULL_HANDLE</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_bi2</name> <init>= <expr><name>f</name> <operator>&amp;</operator> <name>VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>use_bi2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VkBindImageMemoryInfo</name></type> <name>bimi</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bimi</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bimi</name><operator>.</operator><name>image</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bimi</name><operator>.</operator><name>memory</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>export_mem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bimi</name><operator>.</operator><name>memoryOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>funcs</name><operator>-&gt;</operator><name>BindImageMemory2</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bimi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>funcs</name><operator>-&gt;</operator><name>BindImageMemory</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr></argument>,

<argument><expr><name><name>swap</name><operator>-&gt;</operator><name>export_mem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VK_SUCCESS</name> <operator>!=</operator> <name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog</name><argument_list>(<argument><expr><literal type="string">"%s failed: %s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>use_bi2</name></expr> ?</condition><then> <expr><literal type="string">"BindImageMemory2"</literal></expr> </then><else>: <expr><literal type="string">"BindImageMemory"</literal></expr></else></ternary></expr></argument>,

<argument><expr><call><name>result_to_str</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>DestroyImage</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name> <operator>=</operator> <name>VK_NULL_HANDLE</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vk_shtex_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vk_swap_data</name></name> <modifier>*</modifier></type><name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vk_shtex_init_d3d11</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vk_shtex_init_d3d11_tex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vk_shtex_init_vulkan_tex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cur_swap</name></name> <operator>=</operator> <name>swap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>captured</name></name> <operator>=</operator> <call><name>capture_init_shtex</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>swap</name><operator>-&gt;</operator><name>shtex_info</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>swap</name><operator>-&gt;</operator><name>image_extent</name><operator>.</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>swap</name><operator>-&gt;</operator><name>image_extent</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>swap</name><operator>-&gt;</operator><name>image_extent</name><operator>.</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>swap</name><operator>-&gt;</operator><name>image_extent</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>swap</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>swap</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>swap</name><operator>-&gt;</operator><name>captured</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>global_hook_info</name><operator>-&gt;</operator><name>force_shmem</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog</name><argument_list>(<argument><expr><literal type="string">"shared memory capture currently "</literal>

<literal type="string">"unsupported; ignoring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"vulkan shared texture capture successful"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vk_shtex_create_cmd_pool_objects</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>fam_idx</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>image_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_cmd_pool_data</name></name> <modifier>*</modifier></type><name>pool_data</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmd_pools</name><index>[<expr><name>fam_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkCommandPoolCreateInfo</name></type> <name>cpci</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cpci</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpci</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpci</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpci</name><operator>.</operator><name>queueFamilyIndex</name></name> <operator>=</operator> <name>fam_idx</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>res</name> <init>= <expr><call><name><name>data</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>CreateCommandPool</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpci</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pool_data</name><operator>-&gt;</operator><name>cmd_pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debug_res</name><argument_list>(<argument><expr><literal type="string">"CreateCommandPool"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkCommandBufferAllocateInfo</name></type> <name>cbai</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cbai</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cbai</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cbai</name><operator>.</operator><name>commandPool</name></name> <operator>=</operator> <name><name>pool_data</name><operator>-&gt;</operator><name>cmd_pool</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cbai</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name>VK_COMMAND_BUFFER_LEVEL_PRIMARY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cbai</name><operator>.</operator><name>commandBufferCount</name></name> <operator>=</operator> <name>image_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>AllocateCommandBuffers</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbai</name></expr></argument>,

<argument><expr><name><name>pool_data</name><operator>-&gt;</operator><name>cmd_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug_res</name><argument_list>(<argument><expr><literal type="string">"AllocateCommandBuffers"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>image_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>image_index</name> <operator>&lt;</operator> <name>image_count</name></expr>;</condition>

<incr><expr><name>image_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VkCommandBuffer</name></type> <name>cmd_buffer</name> <init>=

<expr><name><name>pool_data</name><operator>-&gt;</operator><name>cmd_buffers</name><index>[<expr><name>image_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>cmd_buffer</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>device</name></name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkFence</name> <modifier>*</modifier></type><name>fence</name> <init>= <expr><operator>&amp;</operator><name><name>pool_data</name><operator>-&gt;</operator><name>fences</name><index>[<expr><name>image_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkFenceCreateInfo</name></type> <name>fci</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fci</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_FENCE_CREATE_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fci</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fci</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>CreateFence</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fci</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug_res</name><argument_list>(<argument><expr><literal type="string">"CreateFence"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pool_data</name><operator>-&gt;</operator><name>image_count</name></name> <operator>=</operator> <name>image_count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vk_shtex_destroy_fence</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>cmd_buffer_busy</name></decl></parameter>,

<parameter><decl><type><name>VkFence</name> <modifier>*</modifier></type><name>fence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkDevice</name></type> <name>device</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd_buffer_busy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>WaitForFences</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fence</name></expr></argument>, <argument><expr><name>VK_TRUE</name></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cmd_buffer_busy</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>DestroyFence</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><operator>*</operator><name>fence</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fence</name> <operator>=</operator> <name>VK_NULL_HANDLE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vk_shtex_destroy_cmd_pool_objects</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vk_cmd_pool_data</name></name> <modifier>*</modifier></type><name>pool_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>image_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>image_idx</name> <operator>&lt;</operator> <name><name>pool_data</name><operator>-&gt;</operator><name>image_count</name></name></expr>;</condition>

<incr><expr><name>image_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>cmd_buffer_busy</name> <init>= <expr><operator>&amp;</operator><name><name>pool_data</name><operator>-&gt;</operator><name>cmd_buffer_busy</name><index>[<expr><name>image_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkFence</name> <modifier>*</modifier></type><name>fence</name> <init>= <expr><operator>&amp;</operator><name><name>pool_data</name><operator>-&gt;</operator><name>fences</name><index>[<expr><name>image_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vk_shtex_destroy_fence</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cmd_buffer_busy</name></expr></argument>, <argument><expr><name>fence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>DestroyCommandPool</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>pool_data</name><operator>-&gt;</operator><name>cmd_pool</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool_data</name><operator>-&gt;</operator><name>cmd_pool</name></name> <operator>=</operator> <name>VK_NULL_HANDLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool_data</name><operator>-&gt;</operator><name>image_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vk_shtex_capture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vk_device_funcs</name></name> <modifier>*</modifier></type><name>funcs</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vk_swap_data</name></name> <modifier>*</modifier></type><name>swap</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><name>VkQueue</name></type> <name>queue</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkPresentInfoKHR</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>res</name> <init>= <expr><name>VK_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkCommandBufferBeginInfo</name></type> <name>begin_info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>begin_info</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>begin_info</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>begin_info</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>begin_info</name><operator>.</operator><name>pInheritanceInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkImageMemoryBarrier</name></type> <name><name>mb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImageMemoryBarrier</name> <modifier>*</modifier></type><name>src_mb</name> <init>= <expr><operator>&amp;</operator><name><name>mb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImageMemoryBarrier</name> <modifier>*</modifier></type><name>dst_mb</name> <init>= <expr><operator>&amp;</operator><name><name>mb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>image_index</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>pImageIndices</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImage</name></type> <name>cur_backbuffer</name> <init>= <expr><name><name>swap</name><operator>-&gt;</operator><name>swap_images</name><index>[<expr><name>image_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fam_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>queue_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>queues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>queue</name> <operator>==</operator> <name>queue</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fam_idx</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>queues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fam_idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>fam_idx</name> <operator>&gt;=</operator> <call><name>_countof</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cmd_pools</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_cmd_pool_data</name></name> <modifier>*</modifier></type><name>pool_data</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmd_pools</name><index>[<expr><name>fam_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkCommandPool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><operator>&amp;</operator><name><name>pool_data</name><operator>-&gt;</operator><name>cmd_pool</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>image_count</name> <init>= <expr><name><name>swap</name><operator>-&gt;</operator><name>image_count</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pool_data</name><operator>-&gt;</operator><name>image_count</name></name> <operator>&lt;</operator> <name>image_count</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pool</name> <operator>!=</operator> <name>VK_NULL_HANDLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vk_shtex_destroy_cmd_pool_objects</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pool_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vk_shtex_create_cmd_pool_objects</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fam_idx</name></expr></argument>, <argument><expr><name>image_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vk_shtex_clear_fence</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pool_data</name></expr></argument>, <argument><expr><name>image_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkCommandBuffer</name></type> <name>cmd_buffer</name> <init>= <expr><name><name>pool_data</name><operator>-&gt;</operator><name>cmd_buffers</name><index>[<expr><name>image_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>funcs</name><operator>-&gt;</operator><name>BeginCommandBuffer</name></name><argument_list>(<argument><expr><name>cmd_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>begin_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MORE_DEBUGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>debug_res</name><argument_list>(<argument><expr><literal type="string">"BeginCommandBuffer"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>swap</name><operator>-&gt;</operator><name>layout_initialized</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VkImageMemoryBarrier</name></type> <name>imb</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>srcAccessMask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>dstAccessMask</name></name> <operator>=</operator> <name>VK_ACCESS_TRANSFER_WRITE_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>oldLayout</name></name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_UNDEFINED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>newLayout</name></name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>srcQueueFamilyIndex</name></name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>dstQueueFamilyIndex</name></name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>image</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>subresourceRange</name><operator>.</operator><name>aspectMask</name></name> <operator>=</operator> <name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>subresourceRange</name><operator>.</operator><name>baseMipLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>subresourceRange</name><operator>.</operator><name>levelCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>subresourceRange</name><operator>.</operator><name>baseArrayLayer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imb</name><operator>.</operator><name>subresourceRange</name><operator>.</operator><name>layerCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>CmdPipelineBarrier</name></name><argument_list>(<argument><expr><name>cmd_buffer</name></expr></argument>,

<argument><expr><name>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</name></expr></argument>,

<argument><expr><name>VK_PIPELINE_STAGE_TRANSFER_BIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>imb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>layout_initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>srcAccessMask</name></name> <operator>=</operator> <name>VK_ACCESS_MEMORY_READ_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>dstAccessMask</name></name> <operator>=</operator> <name>VK_ACCESS_TRANSFER_READ_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>oldLayout</name></name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>newLayout</name></name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>srcQueueFamilyIndex</name></name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>dstQueueFamilyIndex</name></name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>image</name></name> <operator>=</operator> <name>cur_backbuffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>subresourceRange</name><operator>.</operator><name>aspectMask</name></name> <operator>=</operator> <name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>subresourceRange</name><operator>.</operator><name>baseMipLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>subresourceRange</name><operator>.</operator><name>levelCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>subresourceRange</name><operator>.</operator><name>baseArrayLayer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>subresourceRange</name><operator>.</operator><name>layerCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>srcAccessMask</name></name> <operator>=</operator> <name>VK_ACCESS_TRANSFER_WRITE_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>dstAccessMask</name></name> <operator>=</operator> <name>VK_ACCESS_TRANSFER_WRITE_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>oldLayout</name></name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>newLayout</name></name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>srcQueueFamilyIndex</name></name> <operator>=</operator> <name>VK_QUEUE_FAMILY_EXTERNAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>dstQueueFamilyIndex</name></name> <operator>=</operator> <name>fam_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>image</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>subresourceRange</name><operator>.</operator><name>aspectMask</name></name> <operator>=</operator> <name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>subresourceRange</name><operator>.</operator><name>baseMipLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>subresourceRange</name><operator>.</operator><name>levelCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>subresourceRange</name><operator>.</operator><name>baseArrayLayer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>subresourceRange</name><operator>.</operator><name>layerCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>CmdPipelineBarrier</name></name><argument_list>(<argument><expr><name>cmd_buffer</name></expr></argument>,

<argument><expr><name>VK_PIPELINE_STAGE_TRANSFER_BIT</name> <operator>|</operator>

<name>VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT</name></expr></argument>,

<argument><expr><name>VK_PIPELINE_STAGE_TRANSFER_BIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkImageCopy</name></type> <name>cpy</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>srcSubresource</name><operator>.</operator><name>aspectMask</name></name> <operator>=</operator> <name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>srcSubresource</name><operator>.</operator><name>mipLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>srcSubresource</name><operator>.</operator><name>baseArrayLayer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>srcSubresource</name><operator>.</operator><name>layerCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>srcOffset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>srcOffset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>srcOffset</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>dstSubresource</name><operator>.</operator><name>aspectMask</name></name> <operator>=</operator> <name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>dstSubresource</name><operator>.</operator><name>mipLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>dstSubresource</name><operator>.</operator><name>baseArrayLayer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>dstSubresource</name><operator>.</operator><name>layerCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>dstOffset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>dstOffset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>dstOffset</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>extent</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>image_extent</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>extent</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>image_extent</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpy</name><operator>.</operator><name>extent</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>CmdCopyImage</name></name><argument_list>(<argument><expr><name>cmd_buffer</name></expr></argument>, <argument><expr><name>cur_backbuffer</name></expr></argument>,

<argument><expr><name>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</name></expr></argument>,

<argument><expr><name><name>swap</name><operator>-&gt;</operator><name>export_image</name></name></expr></argument>,

<argument><expr><name>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>srcAccessMask</name></name> <operator>=</operator> <name>VK_ACCESS_TRANSFER_READ_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>dstAccessMask</name></name> <operator>=</operator> <name>VK_ACCESS_MEMORY_READ_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>oldLayout</name></name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_mb</name><operator>-&gt;</operator><name>newLayout</name></name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>srcQueueFamilyIndex</name></name> <operator>=</operator> <name>fam_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_mb</name><operator>-&gt;</operator><name>dstQueueFamilyIndex</name></name> <operator>=</operator> <name>VK_QUEUE_FAMILY_EXTERNAL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>CmdPipelineBarrier</name></name><argument_list>(<argument><expr><name>cmd_buffer</name></expr></argument>, <argument><expr><name>VK_PIPELINE_STAGE_TRANSFER_BIT</name></expr></argument>,

<argument><expr><name>VK_PIPELINE_STAGE_TRANSFER_BIT</name> <operator>|</operator>

<name>VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>EndCommandBuffer</name></name><argument_list>(<argument><expr><name>cmd_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkSubmitInfo</name></type> <name>submit_info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>submit_info</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_SUBMIT_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>submit_info</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>submit_info</name><operator>.</operator><name>waitSemaphoreCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>submit_info</name><operator>.</operator><name>pWaitSemaphores</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>submit_info</name><operator>.</operator><name>pWaitDstStageMask</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>submit_info</name><operator>.</operator><name>commandBufferCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>submit_info</name><operator>.</operator><name>pCommandBuffers</name></name> <operator>=</operator> <operator>&amp;</operator><name>cmd_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>submit_info</name><operator>.</operator><name>signalSemaphoreCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>submit_info</name><operator>.</operator><name>pSignalSemaphores</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkFence</name></type> <name>fence</name> <init>= <expr><name><name>pool_data</name><operator>-&gt;</operator><name>fences</name><index>[<expr><name>image_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>funcs</name><operator>-&gt;</operator><name>QueueSubmit</name></name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>submit_info</name></expr></argument>, <argument><expr><name>fence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MORE_DEBUGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>debug_res</name><argument_list>(<argument><expr><literal type="string">"QueueSubmit"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>VK_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pool_data</name><operator>-&gt;</operator><name>cmd_buffer_busy</name><index>[<expr><name>image_index</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>valid_rect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_swap_data</name></name> <modifier>*</modifier></type><name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>swap</name><operator>-&gt;</operator><name>image_extent</name><operator>.</operator><name>width</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><name><name>swap</name><operator>-&gt;</operator><name>image_extent</name><operator>.</operator><name>height</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vk_capture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>VkQueue</name></type> <name>queue</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>VkPresentInfoKHR</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_swap_data</name></name> <modifier>*</modifier></type><name>swap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>window</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MORE_DEBUGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"QueuePresentKHR called on "</literal>

<literal type="string">"devicekey %p, swapchain count %d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>swapchainCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>swapchainCount</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_swap_data</name></name> <modifier>*</modifier></type><name>cur_swap</name> <init>=

<expr><call><name>get_swap_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>pSwapchains</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <name><name>cur_swap</name><operator>-&gt;</operator><name>hwnd</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><name>window</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>swap</name> <operator>=</operator> <name>cur_swap</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>capture_should_stop</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vk_shtex_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>capture_should_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>valid_rect</name><argument_list>(<argument><expr><name>swap</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vk_shtex_init</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vk_shtex_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flog</name><argument_list>(<argument><expr><literal type="string">"vk_shtex_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>capture_ready</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>swap</name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>cur_swap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vk_shtex_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vk_shtex_capture</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr></argument>, <argument><expr><name>swap</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VkResult</name> <name>VKAPI</name></type> <name>OBS_QueuePresentKHR</name><parameter_list>(<parameter><decl><type><name>VkQueue</name></type> <name>queue</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>VkPresentInfoKHR</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_device_data</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_device_funcs</name></name> <modifier>*</modifier></type><name>funcs</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vk_capture</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>funcs</name><operator>-&gt;</operator><name>QueuePresentKHR</name></name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_inst_link_info</name><parameter_list>(<parameter><decl><type><name>VkLayerInstanceCreateInfo</name> <modifier>*</modifier></type><name>lici</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>lici</name><operator>-&gt;</operator><name>sType</name></name> <operator>==</operator> <name>VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO</name> <operator>&amp;&amp;</operator>

<name><name>lici</name><operator>-&gt;</operator><name>function</name></name> <operator>==</operator> <name>VK_LAYER_LINK_INFO</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VkResult</name> <name>VKAPI</name></type> <name>OBS_CreateInstance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VkInstanceCreateInfo</name> <modifier>*</modifier></type><name>cinfo</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name>VkInstance</name> <modifier>*</modifier></type><name>p_inst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkInstanceCreateInfo</name></type> <name>info</name> <init>= <expr><operator>*</operator><name>cinfo</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>funcs_not_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkLayerInstanceCreateInfo</name> <modifier>*</modifier></type><name>lici</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>info</name><operator>.</operator><name>pNext</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>lici</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_inst_link_info</name><argument_list>(<argument><expr><name>lici</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lici</name> <operator>=</operator> <operator>(</operator><name>VkLayerInstanceCreateInfo</name> <operator>*</operator><operator>)</operator><name><name>lici</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>lici</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VK_ERROR_INITIALIZATION_FAILED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PFN_vkGetInstanceProcAddr</name></type> <name>gpa</name> <init>=

<expr><name><name>lici</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pLayerInfo</name><operator>-&gt;</operator><name>pfnNextGetInstanceProcAddr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lici</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pLayerInfo</name></name> <operator>=</operator> <name><name>lici</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pLayerInfo</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkApplicationInfo</name></type> <name>ai</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>pApplicationInfo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <operator>*</operator><name><name>info</name><operator>.</operator><name>pApplicationInfo</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>.</operator><name>apiVersion</name></name> <operator>&lt;</operator> <name>VK_API_VERSION_1_1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ai</name><operator>.</operator><name>apiVersion</name></name> <operator>=</operator> <name>VK_API_VERSION_1_1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ai</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_APPLICATION_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai</name><operator>.</operator><name>pApplicationName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai</name><operator>.</operator><name>applicationVersion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai</name><operator>.</operator><name>pEngineName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai</name><operator>.</operator><name>engineVersion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai</name><operator>.</operator><name>apiVersion</name></name> <operator>=</operator> <name>VK_API_VERSION_1_1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>pApplicationInfo</name></name> <operator>=</operator> <operator>&amp;</operator><name>ai</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PFN_vkCreateInstance</name></type> <name>create</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>gpa</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"vkCreateInstance"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>res</name> <init>= <expr><call><name>create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><name>p_inst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkInstance</name></type> <name>inst</name> <init>= <expr><operator>*</operator><name>p_inst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_inst_data</name><argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_funcs</name></name> <modifier>*</modifier></type><name>funcs</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETADDR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { funcs-&gt;x = (void *)gpa(inst, "vk" #x); if (!funcs-&gt;x) { flog("could not get instance " "address for %s", #x); funcs_not_found = true; } } while (false)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>GetInstanceProcAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>DestroyInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>CreateWin32SurfaceKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>DestroySurfaceKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>GetPhysicalDeviceMemoryProperties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>GetPhysicalDeviceImageFormatProperties2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GETADDR</name></cpp:undef>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <operator>!</operator><name>funcs_not_found</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VkResult</name> <name>VKAPI</name></type> <name>OBS_DestroyInstance</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_funcs</name></name> <modifier>*</modifier></type><name>funcs</name> <init>= <expr><call><name>get_inst_funcs</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>DestroyInstance</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_instance</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VK_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>vk_shared_tex_supported</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vk_inst_funcs</name></name> <modifier>*</modifier></type><name>funcs</name></decl></parameter>,

<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>phy_device</name></decl></parameter>, <parameter><decl><type><name>VkFormat</name></type> <name>format</name></decl></parameter>,

<parameter><decl><type><name>VkImageUsageFlags</name></type> <name>usage</name></decl></parameter>,

<parameter><decl><type><name>VkExternalMemoryProperties</name> <modifier>*</modifier></type><name>external_mem_props</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkPhysicalDeviceImageFormatInfo2</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPhysicalDeviceExternalImageFormatInfo</name></type> <name>external_info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>external_info</name><operator>.</operator><name>sType</name></name> <operator>=</operator>

<name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>external_info</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>external_info</name><operator>.</operator><name>handleType</name></name> <operator>=</operator>

<name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <operator>&amp;</operator><name>external_info</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>VK_IMAGE_TYPE_2D</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>tiling</name></name> <operator>=</operator> <name>VK_IMAGE_TILING_OPTIMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>usage</name></name> <operator>=</operator> <name>usage</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkExternalImageFormatProperties</name></type> <name>external_props</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>external_props</name><operator>.</operator><name>sType</name></name> <operator>=</operator>

<name>VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>external_props</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkImageFormatProperties2</name></type> <name>props</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>props</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>props</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <operator>&amp;</operator><name>external_props</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>result</name> <init>= <expr><call><name><name>funcs</name><operator>-&gt;</operator><name>GetPhysicalDeviceImageFormatProperties2</name></name><argument_list>(

<argument><expr><name>phy_device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>external_mem_props</name> <operator>=</operator> <name><name>external_props</name><operator>.</operator><name>externalMemoryProperties</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VkExternalMemoryFeatureFlags</name></type> <name>features</name> <init>=

<expr><name><name>external_mem_props</name><operator>-&gt;</operator><name>externalMemoryFeatures</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>VK_SUCCESS</name> <operator>==</operator> <name>result</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>features</name> <operator>&amp;</operator> <name>VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_device_link_info</name><parameter_list>(<parameter><decl><type><name>VkLayerDeviceCreateInfo</name> <modifier>*</modifier></type><name>lici</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>lici</name><operator>-&gt;</operator><name>sType</name></name> <operator>==</operator> <name>VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO</name> <operator>&amp;&amp;</operator>

<name><name>lici</name><operator>-&gt;</operator><name>function</name></name> <operator>==</operator> <name>VK_LAYER_LINK_INFO</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VkResult</name> <name>VKAPI</name></type> <name>OBS_CreateDevice</name><parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>phy_device</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>VkDeviceCreateInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name>VkDevice</name> <modifier>*</modifier></type><name>p_device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_data</name></name> <modifier>*</modifier></type><name>idata</name> <init>= <expr><call><name>get_inst_data</name><argument_list>(<argument><expr><name>phy_device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_funcs</name></name> <modifier>*</modifier></type><name>ifuncs</name> <init>= <expr><operator>&amp;</operator><name><name>idata</name><operator>-&gt;</operator><name>funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name> <init>= <expr><name>VK_ERROR_INITIALIZATION_FAILED</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkLayerDeviceCreateInfo</name> <modifier>*</modifier></type><name>ldci</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>pNext</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ldci</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_device_link_info</name><argument_list>(<argument><expr><name>ldci</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ldci</name> <operator>=</operator> <operator>(</operator><name>VkLayerDeviceCreateInfo</name> <operator>*</operator><operator>)</operator><name><name>ldci</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ldci</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PFN_vkGetInstanceProcAddr</name></type> <name>gipa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_vkGetDeviceProcAddr</name></type> <name>gdpa</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gipa</name> <operator>=</operator> <name><name>ldci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pLayerInfo</name><operator>-&gt;</operator><name>pfnNextGetInstanceProcAddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gdpa</name> <operator>=</operator> <name><name>ldci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pLayerInfo</name><operator>-&gt;</operator><name>pfnNextGetDeviceProcAddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ldci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pLayerInfo</name></name> <operator>=</operator> <name><name>ldci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pLayerInfo</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PFN_vkCreateDevice</name></type> <name>createFunc</name> <init>=

<expr><operator>(</operator><name>PFN_vkCreateDevice</name><operator>)</operator><call><name>gipa</name><argument_list>(<argument><expr><name>VK_NULL_HANDLE</name></expr></argument>, <argument><expr><literal type="string">"vkCreateDevice"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>createFunc</name><argument_list>(<argument><expr><name>phy_device</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><name>p_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>VkDevice</name></type> <name>device</name> <init>= <expr><operator>*</operator><name>p_device</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>get_device_data</name><argument_list>(<argument><expr><operator>*</operator><name>p_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_device_funcs</name></name> <modifier>*</modifier></type><name>dfuncs</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>phy_device</name></name> <operator>=</operator> <name>phy_device</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>funcs_not_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETADDR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { dfuncs-&gt;x = (void *)gdpa(device, "vk" #x); if (!dfuncs-&gt;x) { flog("could not get device " "address for %s", #x); funcs_not_found = true; } } while (false)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETADDR_OPTIONAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { dfuncs-&gt;x = (void *)gdpa(device, "vk" #x); } while (false)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>GetDeviceProcAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>DestroyDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>CreateSwapchainKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>DestroySwapchainKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>QueuePresentKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>AllocateMemory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>FreeMemory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>BindImageMemory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>BindImageMemory2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>GetSwapchainImagesKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>CreateImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>DestroyImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>GetImageMemoryRequirements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>GetImageMemoryRequirements2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>BeginCommandBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>EndCommandBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>CmdCopyImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>CmdPipelineBarrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>GetDeviceQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>QueueSubmit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>CreateCommandPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>DestroyCommandPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>AllocateCommandBuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>CreateFence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>DestroyFence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>WaitForFences</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETADDR</name><argument_list>(<argument><expr><name>ResetFences</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GETADDR_OPTIONAL</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GETADDR</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name>funcs_not_found</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>idata</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog</name><argument_list>(<argument><expr><literal type="string">"instance not valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>VkFormat</name></type> <name>format</name> <init>= <expr><name>VK_FORMAT_R8G8B8A8_UNORM</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImageUsageFlags</name></type> <name>usage</name> <init>= <expr><name>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</name> <operator>|</operator>

<name>VK_IMAGE_USAGE_TRANSFER_DST_BIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vk_shared_tex_supported</name><argument_list>(<argument><expr><name>ifuncs</name></expr></argument>, <argument><expr><name>phy_device</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>usage</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>external_mem_props</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flog</name><argument_list>(<argument><expr><literal type="string">"texture sharing is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>inst_data</name></name> <operator>=</operator> <name>idata</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>VKAPI</name></type> <name>OBS_DestroyDevice</name><parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_device_data</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>fam_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fam_idx</name> <operator>&lt;</operator> <call><name>_countof</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cmd_pools</name></name></expr></argument>)</argument_list></call></expr>;</condition>

<incr><expr><name>fam_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_cmd_pool_data</name></name> <modifier>*</modifier></type><name>pool_data</name> <init>=

<expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmd_pools</name><index>[<expr><name>fam_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pool_data</name><operator>-&gt;</operator><name>cmd_pool</name></name> <operator>!=</operator> <name>VK_NULL_HANDLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vk_shtex_destroy_cmd_pool_objects</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><name>pool_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>queue_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vk_remove_device</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>DestroyDevice</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VkResult</name> <name>VKAPI</name></type>

<name>OBS_CreateSwapchainKHR</name><parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkSwapchainCreateInfoKHR</name> <modifier>*</modifier></type><name>cinfo</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>VkSwapchainKHR</name> <modifier>*</modifier></type><name>p_sc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_device_data</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkSwapchainCreateInfoKHR</name></type> <name>info</name> <init>= <expr><operator>*</operator><name>cinfo</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>imageUsage</name></name> <operator>|=</operator> <name>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_device_funcs</name></name> <modifier>*</modifier></type><name>funcs</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>res</name> <init>= <expr><call><name><name>funcs</name><operator>-&gt;</operator><name>CreateSwapchainKHR</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><name>p_sc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debug_res</name><argument_list>(<argument><expr><literal type="string">"CreateSwapchainKHR"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>!=</operator> <name>VK_SUCCESS</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>VkSwapchainKHR</name></type> <name>sc</name> <init>= <expr><operator>*</operator><name>p_sc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>funcs</name><operator>-&gt;</operator><name>GetSwapchainImagesKHR</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug_res</name><argument_list>(<argument><expr><literal type="string">"GetSwapchainImagesKHR"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_swap_data</name></name> <modifier>*</modifier></type><name>swap</name> <init>= <expr><call><name>get_new_swap_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>OBJ_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>OBJ_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>funcs</name><operator>-&gt;</operator><name>GetSwapchainImagesKHR</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>,

<argument><expr><name><name>swap</name><operator>-&gt;</operator><name>swap_images</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug_res</name><argument_list>(<argument><expr><literal type="string">"GetSwapchainImagesKHR"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>sc</name></name> <operator>=</operator> <name>sc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>image_extent</name></name> <operator>=</operator> <name><name>cinfo</name><operator>-&gt;</operator><name>imageExtent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>cinfo</name><operator>-&gt;</operator><name>imageFormat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>hwnd</name></name> <operator>=</operator> <call><name>find_surf_hwnd</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>inst_data</name></name></expr></argument>, <argument><expr><name><name>cinfo</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>image_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<return>return <expr><name>VK_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>VKAPI</name></type> <name>OBS_DestroySwapchainKHR</name><parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkSwapchainKHR</name></type> <name>sc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_device_data</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_device_funcs</name></name> <modifier>*</modifier></type><name>funcs</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_swap_data</name></name> <modifier>*</modifier></type><name>swap</name> <init>= <expr><call><name>get_swap_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>swap</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>cur_swap</name></name> <operator>==</operator> <name>swap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vk_shtex_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>sc</name></name> <operator>=</operator> <name>VK_NULL_HANDLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>hwnd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>DestroySwapchainKHR</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>VKAPI</name></type> <name>OBS_GetDeviceQueue</name><parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>queueFamilyIndex</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>queueIndex</name></decl></parameter>, <parameter><decl><type><name>VkQueue</name> <modifier>*</modifier></type><name>pQueue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_device_data</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_device_funcs</name></name> <modifier>*</modifier></type><name>funcs</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>GetDeviceQueue</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>queueFamilyIndex</name></expr></argument>, <argument><expr><name>queueIndex</name></expr></argument>, <argument><expr><name>pQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>queue_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>queues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>queue</name> <operator>==</operator> <operator>*</operator><name>pQueue</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>queue_count</name></name> <operator>&lt;</operator> <call><name>_countof</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>queues</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>queues</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>queue_count</name></name></expr>]</index></name><operator>.</operator><name>queue</name> <operator>=</operator> <operator>*</operator><name>pQueue</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>queues</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>queue_count</name></name></expr>]</index></name><operator>.</operator><name>fam_idx</name> <operator>=</operator> <name>queueFamilyIndex</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>data</name><operator>-&gt;</operator><name>queue_count</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VkResult</name> <name>VKAPI</name></type> <name>OBS_CreateWin32SurfaceKHR</name><parameter_list>(

<parameter><decl><type><name>VkInstance</name></type> <name>inst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkWin32SurfaceCreateInfoKHR</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceKHR</name> <modifier>*</modifier></type><name>surf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_inst_data</name><argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_funcs</name></name> <modifier>*</modifier></type><name>funcs</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>res</name> <init>= <expr><call><name><name>funcs</name><operator>-&gt;</operator><name>CreateWin32SurfaceKHR</name></name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><name>surf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>VK_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>insert_surf_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>*</operator><name>surf</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>VKAPI</name></type> <name>OBS_DestroySurfaceKHR</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>inst</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceKHR</name></type> <name>surf</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_inst_data</name><argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_funcs</name></name> <modifier>*</modifier></type><name>funcs</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>erase_surf_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>surf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>funcs</name><operator>-&gt;</operator><name>DestroySurfaceKHR</name></name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>surf</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETPROCADDR</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!strcmp(name, "vk" #func)) return (VkFunc)&amp;OBS_##func;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>VkFunc</name> <name>VKAPI</name></type> <name>OBS_GetDeviceProcAddr</name><parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_device_data</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_device_funcs</name></name> <modifier>*</modifier></type><name>funcs</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>funcs</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debug_procaddr</name><argument_list>(<argument><expr><literal type="string">"vkGetDeviceProcAddr(%p, \"%s\")"</literal></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>GetDeviceProcAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>CreateDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>DestroyDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>CreateSwapchainKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>DestroySwapchainKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>QueuePresentKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>GetDeviceQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>funcs</name><operator>-&gt;</operator><name>GetDeviceProcAddr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>funcs</name><operator>-&gt;</operator><name>GetDeviceProcAddr</name></name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VkFunc</name> <name>VKAPI</name></type> <name>OBS_GetInstanceProcAddr</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>inst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>debug_procaddr</name><argument_list>(<argument><expr><literal type="string">"vkGetInstanceProcAddr(%p, \"%s\")"</literal></expr></argument>, <argument><expr><name>inst</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>GetInstanceProcAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>CreateInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>DestroyInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>CreateWin32SurfaceKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>DestroySurfaceKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>GetDeviceProcAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>CreateDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETPROCADDR</name><argument_list>(<argument><expr><name>DestroyDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vk_inst_funcs</name></name> <modifier>*</modifier></type><name>funcs</name> <init>= <expr><call><name>get_inst_funcs</name><argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>funcs</name><operator>-&gt;</operator><name>GetInstanceProcAddr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>funcs</name><operator>-&gt;</operator><name>GetInstanceProcAddr</name></name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GETPROCADDR</name></cpp:undef>

<function><type><name>EXPORT</name> <name>VkResult</name> <name>VKAPI</name></type> <name>OBS_Negotiate</name><parameter_list>(<parameter><decl><type><name>VkNegotiateLayerInterface</name> <modifier>*</modifier></type><name>nli</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nli</name><operator>-&gt;</operator><name>loaderLayerInterfaceVersion</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nli</name><operator>-&gt;</operator><name>sType</name></name> <operator>=</operator> <name>LAYER_NEGOTIATE_INTERFACE_STRUCT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nli</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nli</name><operator>-&gt;</operator><name>pfnGetInstanceProcAddr</name></name> <operator>=</operator> <name>OBS_GetInstanceProcAddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nli</name><operator>-&gt;</operator><name>pfnGetDeviceProcAddr</name></name> <operator>=</operator> <name>OBS_GetDeviceProcAddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nli</name><operator>-&gt;</operator><name>pfnGetPhysicalDeviceProcAddr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cur_ver</name> <init>= <expr><name>CURRENT_LOADER_LAYER_INTERFACE_VERSION</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nli</name><operator>-&gt;</operator><name>loaderLayerInterfaceVersion</name></name> <operator>&gt;</operator> <name>cur_ver</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nli</name><operator>-&gt;</operator><name>loaderLayerInterfaceVersion</name></name> <operator>=</operator> <name>cur_ver</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VK_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hook_vulkan</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>hooked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hooked</name> <operator>&amp;&amp;</operator> <name>vulkan_seen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hlog</name><argument_list>(<argument><expr><literal type="string">"Hooked Vulkan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hooked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>hooked</name></expr>;</return>

</block_content>}</block></function>

</unit>
