<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\win-capture\get-graphics-offsets\get-graphics-offsets.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get-graphics-offsets.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d8_offsets</name></name></type> <name>d3d8</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d9_offsets</name></name></type> <name>d3d9</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dxgi_offsets</name></name></type> <name>dxgi</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WNDCLASSA</name></type> <name>wc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>CS_OWNDC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <call><name>GetModuleHandleA</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <operator>(</operator><name>WNDPROC</name><operator>)</operator><name>DefWindowProcA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <name>DUMMY_WNDCLASS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetErrorMode</name><argument_list>(<argument><expr><name>SEM_FAILCRITICALERRORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RegisterClassA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to register '%s'\n"</literal></expr></argument>, <argument><expr><name>DUMMY_WNDCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_d3d9_offsets</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d3d9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_d3d8_offsets</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d3d8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_dxgi_offsets</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dxgi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[d3d8]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"present=0x%"</literal> <name>PRIx32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>d3d8</name><operator>.</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[d3d9]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"present=0x%"</literal> <name>PRIx32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>d3d9</name><operator>.</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"present_ex=0x%"</literal> <name>PRIx32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>d3d9</name><operator>.</operator><name>present_ex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"present_swap=0x%"</literal> <name>PRIx32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>d3d9</name><operator>.</operator><name>present_swap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"d3d9_clsoff=0x%"</literal> <name>PRIx32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>d3d9</name><operator>.</operator><name>d3d9_clsoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"is_d3d9ex_clsoff=0x%"</literal> <name>PRIx32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>d3d9</name><operator>.</operator><name>is_d3d9ex_clsoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[dxgi]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"present=0x%"</literal> <name>PRIx32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>dxgi</name><operator>.</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"present1=0x%"</literal> <name>PRIx32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>dxgi</name><operator>.</operator><name>present1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"resize=0x%"</literal> <name>PRIx32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>dxgi</name><operator>.</operator><name>resize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
