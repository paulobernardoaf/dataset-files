<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\win-capture\funchook.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funchook.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JMP_64_SIZE</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JMP_32_SIZE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X86_NOP</name></cpp:macro> <cpp:value>0x90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X86_JMP_NEG_5</name></cpp:macro> <cpp:value>0xF9EB</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fix_permissions</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>protect_val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VirtualProtect</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>PAGE_EXECUTE_READWRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>protect_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>hook_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func_addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>hook_addr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hook</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hook</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>func_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>hook_addr</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>hook_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fix_permissions</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>-</operator> <name>JMP_32_SIZE</name><operator>)</operator></expr></argument>,

<argument><expr><name>JMP_64_SIZE</name> <operator>+</operator> <name>JMP_32_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hook</name><operator>-&gt;</operator><name>unhook_data</name></name></expr></argument>, <argument><expr><name>func_addr</name></expr></argument>, <argument><expr><name>JMP_64_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>patch_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>hook</name><operator>-&gt;</operator><name>is_64bit_jump</name></name></expr> ?</condition><then> <expr><name>JMP_64_SIZE</name></expr> </then><else>: <expr><name>JMP_32_SIZE</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>longjmp64</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rehook64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><name>JMP_64_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintptr_t</name> <modifier>*</modifier></type><name>ptr_loc</name> <init>= <expr><operator>(</operator><name>uintptr_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>longjmp64</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fix_permissions</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name></expr></argument>, <argument><expr><name>JMP_64_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name></expr></argument>, <argument><expr><name>JMP_64_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>longjmp64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>longjmp64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr_loc</name> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>hook_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>call_addr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>HOOKTYPE_FORWARD_OVERWRITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>hooked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>JMP_64_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hook_reverse_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>call_addr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>HOOKTYPE_REVERSE_CHAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>hooked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xE9</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hook</name><operator>-&gt;</operator><name>hook_addr</name></name> <operator>-</operator> <name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <name>X86_JMP_NEG_5</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hook_reverse_chain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>HOOKTYPE_FORWARD_OVERWRITE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>call_addr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>+</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>HOOKTYPE_REVERSE_CHAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>hooked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hook</name><operator>-&gt;</operator><name>hook_addr</name></name> <operator>-</operator> <name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hook_forward_chain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>intptr_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>cur_offset</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>HOOKTYPE_FORWARD_OVERWRITE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>call_addr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>+</operator> <name>JMP_32_SIZE</name> <operator>+</operator> <name>cur_offset</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>HOOKTYPE_FORWARD_CHAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>hooked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hook_forward_overwrite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>,

<parameter><decl><type><name>intptr_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>call_addr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>HOOKTYPE_FORWARD_OVERWRITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>hooked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>ptr</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0xE9</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rehook32</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fix_permissions</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>-</operator> <name>JMP_32_SIZE</name><operator>)</operator></expr></argument>,

<argument><expr><name>JMP_32_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator> <operator>!</operator><name><name>hook</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>-</operator> <name>JMP_32_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nop_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>JMP_32_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>X86_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nop_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>nop_count</name> <operator>==</operator> <name>JMP_32_SIZE</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x8B</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hook_reverse_new</name><argument_list>(<argument><expr><name>hook</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xE9</literal> <operator>&amp;&amp;</operator>

<operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <name>X86_JMP_NEG_5</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hook_reverse_chain</name><argument_list>(<argument><expr><name>hook</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xE9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hook_forward_chain</name><argument_list>(<argument><expr><name>hook</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>HOOKTYPE_FORWARD_OVERWRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>HOOKTYPE_FORWARD_OVERWRITE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HOOKTYPE_FORWARD_OVERWRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hook_forward_overwrite</name><argument_list>(<argument><expr><name>hook</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_64bit_bounce</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MEMORY_BASIC_INFORMATION</name></type> <name>mbi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>address</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>newdiff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pagesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>VirtualQueryEx</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbi</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pagesize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>si</name><operator>.</operator><name>dwAllocationGranularity</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>address</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>mbi</name><operator>.</operator><name>AllocationBase</name></name> <operator>-</operator> <name>pagesize</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>address</name> <operator>-=</operator> <name>pagesize</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>bounce_addr</name></name> <operator>=</operator> <call><name>VirtualAlloc</name><argument_list>(<argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><name>address</name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>,

<argument><expr><name>MEM_RESERVE</name> <operator>|</operator> <name>MEM_COMMIT</name></expr></argument>,

<argument><expr><name>PAGE_EXECUTE_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>bounce_addr</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hook</name><operator>-&gt;</operator><name>bounce_addr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>address</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>mbi</name><operator>.</operator><name>AllocationBase</name></name> <operator>+</operator> <name><name>mbi</name><operator>.</operator><name>RegionSize</name></name> <operator>+</operator>

<name>pagesize</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>address</name> <operator>+=</operator> <name>pagesize</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>bounce_addr</name></name> <operator>=</operator>

<call><name>VirtualAlloc</name><argument_list>(<argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><name>address</name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>,

<argument><expr><name>MEM_RESERVE</name> <operator>|</operator> <name>MEM_COMMIT</name></expr></argument>,

<argument><expr><name>PAGE_EXECUTE_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>bounce_addr</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hook</name><operator>-&gt;</operator><name>bounce_addr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>bounce_addr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>newdiff</name> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>+</operator> <literal type="number">5</literal> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>bounce_addr</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>newdiff</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>bounce_addr</name></name> <operator>-</operator> <name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newdiff</name> <operator>&lt;=</operator> <literal type="number">0x7ffffff0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>bounce_addr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FillMemory</name><argument_list>(<argument><expr><name><name>hook</name><operator>-&gt;</operator><name>bounce_addr</name></name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><literal type="number">0xCC</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>addr</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>addr</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x25</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>addr</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>hook_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>hook_addr</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>bounce_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>hook_addr</name></name> <operator>-</operator> <name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>-</operator> <name>JMP_32_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>is_64bit_jump</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_hook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intptr_t</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <name><name>hook</name><operator>-&gt;</operator><name>hooked</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>started</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HOOKTYPE_REVERSE_CHAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>-</operator> <name>JMP_32_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>JMP_32_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>patch_size</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name><name>hook</name><operator>-&gt;</operator><name>rehook_data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>hooked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>hook_addr</name></name> <operator>-</operator> <name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>-</operator> <name>JMP_32_SIZE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>is_64bit_jump</name></name> <operator>=</operator> <operator>(</operator><call><name>llabs</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0x7fffffff</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>is_64bit_jump</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hook</name><operator>-&gt;</operator><name>attempted_bounce</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>attempted_bounce</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_64bit_bounce</name><argument_list>(<argument><expr><name>hook</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>is_64bit_jump</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rehook64</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rehook32</name><argument_list>(<argument><expr><name>hook</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>unhook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>func_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hook</name><operator>-&gt;</operator><name>hooked</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HOOKTYPE_REVERSE_CHAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>JMP_32_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name> <operator>-</operator> <name>JMP_32_SIZE</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>patch_size</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fix_permissions</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hook</name><operator>-&gt;</operator><name>rehook_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HOOKTYPE_FORWARD_OVERWRITE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>func_addr</name></name></expr></argument>, <argument><expr><name><name>hook</name><operator>-&gt;</operator><name>unhook_data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>hooked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
