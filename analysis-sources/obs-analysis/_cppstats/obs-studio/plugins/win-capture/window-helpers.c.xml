<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\win-capture\window-helpers.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSAPI_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psapi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"window-helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obfuscate.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>encode_dstr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>, <argument><expr><literal type="string">"#22"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="string">"#3A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>decode_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>str</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"#3A"</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"#22"</literal></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>str</name><operator>.</operator><name>array</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>build_window_strings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>class</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>title</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>exe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strlist</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>class</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>title</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>exe</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>strlist</name> <operator>=</operator> <call><name>strlist_split</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strlist</name> <operator>&amp;&amp;</operator> <name><name>strlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>strlist</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>strlist</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>title</name> <operator>=</operator> <call><name>decode_str</name><argument_list>(<argument><expr><name><name>strlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>class</name> <operator>=</operator> <call><name>decode_str</name><argument_list>(<argument><expr><name><name>strlist</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>exe</name> <operator>=</operator> <call><name>decode_str</name><argument_list>(<argument><expr><name><name>strlist</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strlist_free</name><argument_list>(<argument><expr><name>strlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HMODULE</name></type> <name>kernel32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>HMODULE</name></type> <name>kernel32_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kernel32_handle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>kernel32_handle</name> <operator>=</operator> <call><name>GetModuleHandleA</name><argument_list>(<argument><expr><literal type="string">"kernel32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>kernel32_handle</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HANDLE</name></type> <name>open_process</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>desired_access</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inherit_handle</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>process_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><specifier>static</specifier> <name>HANDLE</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>open_process_proc</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>BOOL</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>open_process_proc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>open_process_proc</name> <operator>=</operator> <call><name>get_obfuscated_func</name><argument_list>(

<argument><expr><call><name>kernel32</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"B}caZyah`~q"</literal></expr></argument>, <argument><expr><literal type="number">0x2D5BEBAF6DDULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>open_process_proc</name><argument_list>(<argument><expr><name>desired_access</name></expr></argument>, <argument><expr><name>inherit_handle</name></expr></argument>, <argument><expr><name>process_id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>get_window_exe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wname</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>temp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>process</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowThreadProcessId</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>process</name> <operator>=</operator> <call><name>open_process</name><argument_list>(<argument><expr><name>PROCESS_QUERY_LIMITED_INFORMATION</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>process</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetProcessImageFileNameW</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>wname</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_from_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>wname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>temp</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slash</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>slash</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_window_title</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>GetWindowTextLengthW</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetWindowTextW</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_from_wcs</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_window_class</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>class</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>temp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetClassNameW</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_from_wcs</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>internal_microsoft_exes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"startmenuexperiencehost"</literal></expr>,

<expr><literal type="string">"applicationframehost"</literal></expr>,

<expr><literal type="string">"peopleexperiencehost"</literal></expr>,

<expr><literal type="string">"shellexperiencehost"</literal></expr>,

<expr><literal type="string">"microsoft.notes"</literal></expr>,

<expr><literal type="string">"windowsinternal"</literal></expr>,

<expr><literal type="string">"systemsettings"</literal></expr>,

<expr><literal type="string">"textinputhost"</literal></expr>,

<expr><literal type="string">"searchapp"</literal></expr>,

<expr><literal type="string">"video.ui"</literal></expr>,

<expr><literal type="string">"searchui"</literal></expr>,

<expr><literal type="string">"lockapp"</literal></expr>,

<expr><literal type="string">"cortana"</literal></expr>,

<expr><literal type="string">"gamebar"</literal></expr>,

<expr><literal type="string">"tabtip"</literal></expr>,

<expr><literal type="string">"time"</literal></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_microsoft_internal_window_exe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exe</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vals</name> <init>= <expr><name>internal_microsoft_exes</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>vals</name></expr>;</condition> <incr><expr><name>vals</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>astrcmpi_n</name><argument_list>(<argument><expr><name>exe</name></expr></argument>, <argument><expr><operator>*</operator><name>vals</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>vals</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_window</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>add_window_cb</name></type> <name>callback</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>class</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>title</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>exe</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>encoded</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>desc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_window_exe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exe</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_microsoft_internal_window_exe</name><argument_list>(<argument><expr><name><name>exe</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_window_title</name><argument_list>(<argument><expr><operator>&amp;</operator><name>title</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dstr_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exe</name></expr></argument>, <argument><expr><literal type="string">"explorer.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>dstr_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>title</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_window_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>class</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>callback</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>callback</name><argument_list>(<argument><expr><name><name>title</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>class</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>exe</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><literal type="string">"[%s]: %s"</literal></expr></argument>, <argument><expr><name><name>exe</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>title</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoded</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoded</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>encoded</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_window_valid</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>window_search_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>styles</name></decl>, <decl><type ref="prev"/><name>ex_styles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsWindowVisible</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><name>mode</name> <operator>==</operator> <name>EXCLUDE_MINIMIZED</name> <operator>&amp;&amp;</operator> <call><name>IsIconic</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>styles</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><call><name>GetWindowLongPtr</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ex_styles</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><call><name>GetWindowLongPtr</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ex_styles</name> <operator>&amp;</operator> <name>WS_EX_TOOLWINDOW</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>styles</name> <operator>&amp;</operator> <name>WS_CHILD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>EXCLUDE_MINIMIZED</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rect</name><operator>.</operator><name>right</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>is_uwp_window</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetClassNameW</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>wcscmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">L"ApplicationFrameWindow"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>HWND</name></type> <name>get_uwp_actual_window</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>parent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>parent_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>child</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowThreadProcessId</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>FindWindowEx</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>child_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowThreadProcessId</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>child_id</name> <operator>!=</operator> <name>parent_id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>child</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>FindWindowEx</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HWND</name></type> <name>next_window</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>window_search_mode</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>HWND</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>use_findwindowex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>parent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>window</name> <operator>=</operator> <operator>*</operator><name>parent</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>parent</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_findwindowex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>FindWindowEx</name><argument_list>(<argument><expr><call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>GetNextWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GW_HWNDNEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name> <operator>||</operator> <call><name>check_window_valid</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>is_uwp_window</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>child</name> <init>= <expr><call><name>get_uwp_actual_window</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>parent</name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>

<return>return <expr><name>child</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>window</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HWND</name></type> <name>first_window</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>window_search_mode</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>HWND</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>use_findwindowex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>window</name> <init>= <expr><call><name>FindWindowEx</name><argument_list>(<argument><expr><call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>use_findwindowex</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>GetWindow</name><argument_list>(<argument><expr><call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>GW_CHILD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>use_findwindowex</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>parent</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_window_valid</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>next_window</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><operator>*</operator><name>use_findwindowex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>use_findwindowex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>use_findwindowex</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>GetWindow</name><argument_list>(<argument><expr><call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>GW_CHILD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_window_valid</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>next_window</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>,

<argument><expr><operator>*</operator><name>use_findwindowex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_uwp_window</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>child</name> <init>= <expr><call><name>get_uwp_actual_window</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>parent</name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>

<return>return <expr><name>child</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>window</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>fill_window_list</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>window_search_mode</name></name></type> <name>mode</name></decl></parameter>,

<parameter><decl><type><name>add_window_cb</name></type> <name>callback</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_findwindowex</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>window</name> <init>= <expr><call><name>first_window</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_findwindowex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>window</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_window</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>next_window</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent</name></expr></argument>, <argument><expr><name>use_findwindowex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>window_rating</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>window_priority</name></name></type> <name>priority</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>uwp_window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>cur_class</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>cur_title</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>cur_exe</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_window_exe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_exe</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0x7FFFFFFF</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_window_title</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_title</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_window_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_class</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>class_matches</name> <init>= <expr><call><name>dstr_cmpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_class</name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>exe_matches</name> <init>= <expr><call><name>dstr_cmpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_exe</name></expr></argument>, <argument><expr><name>exe</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>title_val</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><call><name>dstr_cmpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_title</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uwp_window</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>priority</name> <operator>==</operator> <name>WINDOW_PRIORITY_EXE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>exe_matches</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><name>title_val</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0x7FFFFFFF</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>priority</name> <operator>==</operator> <name>WINDOW_PRIORITY_CLASS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><name>class_matches</name></expr> ?</condition><then> <expr><name>title_val</name></expr> </then><else>: <expr><literal type="number">0x7FFFFFFF</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="number">0x7FFFFFFF</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>exe_matches</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">0x1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>priority</name> <operator>==</operator> <name>WINDOW_PRIORITY_TITLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><name>title_val</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0x7FFFFFFF</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>priority</name> <operator>==</operator> <name>WINDOW_PRIORITY_EXE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><name>exe_matches</name></expr> ?</condition><then> <expr><name>title_val</name></expr> </then><else>: <expr><literal type="number">0x7FFFFFFF</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>HWND</name></type> <name>find_window</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>window_search_mode</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>window_priority</name></name></type> <name>priority</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_findwindowex</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>window</name> <init>= <expr><call><name>first_window</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_findwindowex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>best_window</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_rating</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>uwp_window</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><literal type="string">"Windows.UI.Core.CoreWindow"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>window</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rating</name> <init>= <expr><call><name>window_rating</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>exe</name></expr></argument>,

<argument><expr><name>uwp_window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rating</name> <operator>&lt;</operator> <name>best_rating</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_rating</name> <operator>=</operator> <name>rating</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_window</name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rating</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>next_window</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent</name></expr></argument>, <argument><expr><name>use_findwindowex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>best_window</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>top_level_enum_data</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>window_search_mode</name></name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>window_priority</name></name></type> <name>priority</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>uwp_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>best_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_rating</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>BOOL</name> <name>CALLBACK</name></type> <name>enum_windows_proc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>top_level_enum_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>top_level_enum_data</name> <operator>*</operator><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_window_valid</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rating</name> <init>= <expr><call><name>window_rating</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>class</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>exe</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>uwp_window</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rating</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>best_rating</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>best_rating</name></name> <operator>=</operator> <name>rating</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>best_window</name></name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rating</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>HWND</name></type> <name>find_window_top_level</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>window_search_mode</name></name></type> <name>mode</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>window_priority</name></name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>top_level_enum_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>priority</name></name> <operator>=</operator> <name>priority</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>class</name></name> <operator>=</operator> <name>class</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>exe</name></name> <operator>=</operator> <name>exe</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>uwp_window</name></name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><literal type="string">"Windows.UI.Core.CoreWindow"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>best_window</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>best_rating</name></name> <operator>=</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnumWindows</name><argument_list>(<argument><expr><name>enum_windows_proc</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>data</name><operator>.</operator><name>best_window</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
