<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\win-capture\monitor-capture.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dc-capture.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MONITOR_CAPTURE</name></cpp:macro> <cpp:value>obs_module_text("MonitorCapture")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_CAPTURE_CURSOR</name></cpp:macro> <cpp:value>obs_module_text("CaptureCursor")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_COMPATIBILITY</name></cpp:macro> <cpp:value>obs_module_text("Compatibility")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MONITOR</name></cpp:macro> <cpp:value>obs_module_text("Monitor")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_PRIMARY_MONITOR</name></cpp:macro> <cpp:value>obs_module_text("PrimaryMonitor")</cpp:value></cpp:define>

<struct>struct <name>monitor_capture</name> <block>{

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>monitor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>capture_cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>compatibility</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dc_capture</name></name></type> <name>data</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>monitor_info</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cur_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>desired_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>do_log</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>str</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"[GDI monitor capture]: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_vcatf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>enum_monitor</name><parameter_list>(<parameter><decl><type><name>HMONITOR</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>, <parameter><decl><type><name>LPRECT</name></type> <name>rect</name></decl></parameter>,

<parameter><decl><type><name>LPARAM</name></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>monitor_info</name></name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><operator>(</operator>struct <name>monitor_info</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>cur_id</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>monitor</name><operator>-&gt;</operator><name>desired_id</name></name> <operator>==</operator> <name><name>monitor</name><operator>-&gt;</operator><name>cur_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>rect</name></name> <operator>=</operator> <operator>*</operator><name>rect</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>cur_id</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>monitor</name><operator>-&gt;</operator><name>desired_id</name></name> <operator>&gt;</operator> <name><name>monitor</name><operator>-&gt;</operator><name>cur_id</name></name><operator>++</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_monitor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>monitor_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>monitor_info</name></name></type> <name>monitor</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>monitor</name><operator>.</operator><name>desired_id</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnumDisplayMonitors</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>enum_monitor</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>&amp;</operator><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>monitor</name></name> <operator>=</operator> <name><name>monitor</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>monitor</name><operator>.</operator><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>monitor</name><operator>.</operator><name>rect</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>monitor</name><operator>.</operator><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>monitor</name><operator>.</operator><name>rect</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dc_capture_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>monitor</name><operator>.</operator><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>monitor</name><operator>.</operator><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>capture</name><operator>-&gt;</operator><name>capture_cursor</name></name></expr></argument>,

<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>compatibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>update_settings</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>monitor_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>monitor</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>capture_cursor</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"capture_cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>compatibility</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"compatibility"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dc_capture_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_monitor</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>monitor_capture_getname</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TEXT_MONITOR_CAPTURE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_capture_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>monitor_capture</name></name> <modifier>*</modifier></type><name>capture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dc_capture_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_capture_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"capture_cursor"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"compatibility"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_capture_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>monitor_capture</name></name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update_settings</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>monitor_capture_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>monitor_capture</name></name> <modifier>*</modifier></type><name>capture</name></decl>;</decl_stmt>

<expr_stmt><expr><name>capture</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>monitor_capture</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_settings</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>capture</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_capture_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>monitor_capture</name></name> <modifier>*</modifier></type><name>capture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_showing</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dc_capture_capture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_capture_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>monitor_capture</name></name> <modifier>*</modifier></type><name>capture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dc_capture_render</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><call><name>obs_get_base_effect</name><argument_list>(<argument><expr><name>OBS_EFFECT_OPAQUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>monitor_capture_width</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>monitor_capture</name></name> <modifier>*</modifier></type><name>capture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>capture</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>width</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>monitor_capture_height</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>monitor_capture</name></name> <modifier>*</modifier></type><name>capture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>capture</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>height</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>enum_monitor_props</name><parameter_list>(<parameter><decl><type><name>HMONITOR</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>, <parameter><decl><type><name>LPRECT</name></type> <name>rect</name></decl></parameter>,

<parameter><decl><type><name>LPARAM</name></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>monitor_list</name> <init>= <expr><operator>(</operator><name>obs_property_t</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MONITORINFO</name></type> <name>mi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>monitor_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>monitor_desc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>resolution</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>format_string</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>monitor_id</name> <operator>=</operator> <call><name>obs_property_list_item_count</name><argument_list>(<argument><expr><name>monitor_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetMonitorInfo</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resolution</name></expr></argument>, <argument><expr><literal type="string">"%dx%d @ %d,%d"</literal></expr></argument>,

<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>left</name></name></expr></argument>,

<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>left</name></name></expr></argument>,

<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format_string</name></expr></argument>, <argument><expr><literal type="string">"%s %d: %s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>.</operator><name>dwFlags</name></name> <operator>==</operator> <name>MONITORINFOF_PRIMARY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format_string</name></expr></argument>, <argument><expr><literal type="string">" (%s)"</literal></expr></argument>, <argument><expr><name>TEXT_PRIMARY_MONITOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitor_desc</name></expr></argument>, <argument><expr><name><name>format_string</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>TEXT_MONITOR</name></expr></argument>,

<argument><expr><name>monitor_id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>resolution</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>monitor_list</name></expr></argument>, <argument><expr><name><name>monitor_desc</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>monitor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitor_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>monitor_capture_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>monitors</name> <init>= <expr><call><name>obs_properties_add_list</name><argument_list>(

<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>, <argument><expr><name>TEXT_MONITOR</name></expr></argument>, <argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"compatibility"</literal></expr></argument>, <argument><expr><name>TEXT_COMPATIBILITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"capture_cursor"</literal></expr></argument>, <argument><expr><name>TEXT_CAPTURE_CURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnumDisplayMonitors</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>enum_monitor_props</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>monitors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>monitor_capture_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"monitor_capture"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_INPUT</name></expr>,

<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name> <operator>|</operator> <name>OBS_SOURCE_CUSTOM_DRAW</name> <operator>|</operator>

<name>OBS_SOURCE_DO_NOT_DUPLICATE</name></expr>,

<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>monitor_capture_getname</name></expr>,

<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>monitor_capture_create</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>monitor_capture_destroy</name></expr>,

<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>monitor_capture_render</name></expr>,

<expr><operator>.</operator><name>video_tick</name> <operator>=</operator> <name>monitor_capture_tick</name></expr>,

<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>monitor_capture_update</name></expr>,

<expr><operator>.</operator><name>get_width</name> <operator>=</operator> <name>monitor_capture_width</name></expr>,

<expr><operator>.</operator><name>get_height</name> <operator>=</operator> <name>monitor_capture_height</name></expr>,

<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>monitor_capture_defaults</name></expr>,

<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>monitor_capture_properties</name></expr>,

<expr><operator>.</operator><name>icon_type</name> <operator>=</operator> <name>OBS_ICON_TYPE_DESKTOP_CAPTURE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
